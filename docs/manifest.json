{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v10.json", "dbt_version": "1.6.3", "generated_at": "2023-09-24T18:49:00.312642Z", "invocation_id": "81be21d7-4fc3-4642-b8c7-733fb1777a47", "env": {}, "project_name": "nhl_data", "project_id": "82aa612ce0f456abec6d30bef5de9804", "user_id": null, "send_anonymous_usage_stats": false, "adapter_type": "bigquery"}, "nodes": {"model.nhl_data.stg_nhl__conferences": {"database": "nhl-breakouts", "schema": "github", "name": "stg_nhl__conferences", "resource_type": "model", "package_name": "nhl_data", "path": "staging/stg_nhl__conferences.sql", "original_file_path": "models/staging/stg_nhl__conferences.sql", "unique_id": "model.nhl_data.stg_nhl__conferences", "fqn": ["nhl_data", "staging", "stg_nhl__conferences"], "alias": "stg_nhl__conferences", "checksum": {"name": "sha256", "checksum": "7d01e11dde4301c3980a2ad6422c363b4bc10b2cee7410f109aa47916c8817af"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Staged NHL conferences data from the NHL-API", "columns": {"stg_nhl__conferences_id": {"name": "stg_nhl__conferences_id", "description": "Unique surrogate key for NHL conferences", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "conference_id": {"name": "conference_id", "description": "Unique identifier for NHL conferences", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "conference_name": {"name": "conference_name", "description": "Name of the NHL conference", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "conference_url": {"name": "conference_url", "description": "URL endpoint", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "conference_abbreviation": {"name": "conference_abbreviation", "description": "Abbreviated NHL conference name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "conference_short_name": {"name": "conference_short_name", "description": "Short name for the NHL conference", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_active": {"name": "is_active", "description": "Whether or not the conference is still active", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "nhl_data://models/staging/stg_nhl__conferences.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "staging"}, "created_at": 1695581342.5316482, "relation_name": "`nhl-breakouts`.`github`.`stg_nhl__conferences`", "raw_code": "select\n    /* Primary Key */\n    {{ dbt_utils.surrogate_key(['conferences.id']) }} as stg_nhl__conferences_id\n\n    /* Identifiers */\n    , conferences.id as conference_id\n\n    /* Properties */\n    , conferences.name as conference_name\n    , conferences.shortname as conference_short_name\n    , conferences.abbreviation as conference_abbreviation\n    , conferences.active as is_active\n    , conferences.link as conference_url\nfrom {{ source('meltano', 'conferences') }} as conferences\n\n{% if not use_full_dataset() %}\nlimit 1000\n{% endif %}", "language": "sql", "refs": [], "sources": [["meltano", "conferences"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.surrogate_key", "macro.nhl_data.use_full_dataset"], "nodes": ["source.nhl_data.meltano.conferences"]}, "compiled_path": "target/compiled/nhl_data/models/staging/stg_nhl__conferences.sql", "compiled": true, "compiled_code": "select\n    /* Primary Key */\n    to_hex(md5(cast(coalesce(cast(conferences.id as \n    string\n), '') as \n    string\n))) as stg_nhl__conferences_id\n\n    /* Identifiers */\n    , conferences.id as conference_id\n\n    /* Properties */\n    , conferences.name as conference_name\n    , conferences.shortname as conference_short_name\n    , conferences.abbreviation as conference_abbreviation\n    , conferences.active as is_active\n    , conferences.link as conference_url\nfrom `nhl-breakouts`.`raw`.`conferences` as conferences\n\n\nlimit 1000\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.nhl_data.stg_nhl__players": {"database": "nhl-breakouts", "schema": "github", "name": "stg_nhl__players", "resource_type": "model", "package_name": "nhl_data", "path": "staging/stg_nhl__players.sql", "original_file_path": "models/staging/stg_nhl__players.sql", "unique_id": "model.nhl_data.stg_nhl__players", "fqn": ["nhl_data", "staging", "stg_nhl__players"], "alias": "stg_nhl__players", "checksum": {"name": "sha256", "checksum": "e49218df40dfe7a142241d08426b7269cf521e05308dd9335702188ea6814de9"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Staged NHL player data from the NHL-API", "columns": {"stg_nhl__players_id": {"name": "stg_nhl__players_id", "description": "Unique surrogate key from a combination of the NHL player ID, team ID and the season ID", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "player_id": {"name": "player_id", "description": "Unique identifier for an NHL player", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "team_id": {"name": "team_id", "description": "Foreign key that maps to the NHL team ID that the NHL player played for in a given season", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "season_id": {"name": "season_id", "description": "Foreign key that maps to the NHL season that player was in", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "full_name": {"name": "full_name", "description": "Full name of the NHL player", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "player_url": {"name": "player_url", "description": "URL endpoint for NHL player", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "first_name": {"name": "first_name", "description": "First name of the NHL player", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_name": {"name": "last_name", "description": "Last name of the NHL player", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "primary_number": {"name": "primary_number", "description": "Number that the player usually wears", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "birth_date": {"name": "birth_date", "description": "Birth date of the NHL player", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "current_age": {"name": "current_age", "description": "Age in years of the NHL player", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "birth_city": {"name": "birth_city", "description": "Birth city of the NHL player", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "birth_state_province": {"name": "birth_state_province", "description": "Birth state or province of the NHL player", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "birth_country": {"name": "birth_country", "description": "Birth country of the NHL player", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "nationality": {"name": "nationality", "description": "Nationality of the NHL player", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "height": {"name": "height", "description": "Imperial height, in feet and inches (e.g. 5'10\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "weight": {"name": "weight", "description": "Imperial weight, in pounds (e.g. 140)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_active": {"name": "is_active", "description": "Whether or not the NHL player is currently active (True / False)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_alternate_captain": {"name": "is_alternate_captain", "description": "Whether or not the NHL player is currently an alternate captain for their team (True / False)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_captain": {"name": "is_captain", "description": "Whether or not the NHL player is currently the captain of their team (True / False)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_rookie": {"name": "is_rookie", "description": "Whether or not the NHL player is currently a rookie (True / False)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shoots_catches": {"name": "shoots_catches", "description": "The handedness of the NHL player (e.g. R = right, L = left)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "roster_status": {"name": "roster_status", "description": "Roster status of the NHL player (e.g. Y, N, I)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "primary_position_code": {"name": "primary_position_code", "description": "Position code of the position most played (e.g. C, L, D)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "primary_position_name": {"name": "primary_position_name", "description": "Position name of the position most played (e.g. Center, Left Wing, Defenseman)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "primary_position_type": {"name": "primary_position_type", "description": "Position grouping for the position most played (e.g. Forward, Defenseman)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "primary_position_abbreviation": {"name": "primary_position_abbreviation", "description": "Position abbreviation of the position most played (e.g. C, LW, D)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "extracted_at": {"name": "extracted_at", "description": "Timestamp that the data was retrieved", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "loaded_at": {"name": "loaded_at", "description": "Timestamp that the data was loaded", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "nhl_data://models/staging/stg_nhl__players.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "staging"}, "created_at": 1695581342.4819503, "relation_name": "`nhl-breakouts`.`github`.`stg_nhl__players`", "raw_code": "select\n    /* Primary Key */\n    {{ dbt_utils.surrogate_key(['players.id', 'players.teamid', 'players.seasonid']) }} as stg_nhl__players_id\n\n    /* Identifiers */\n    , players.id as player_id\n    , players.seasonid as season_id\n    , players.teamid as team_id\n\n    /* Properties */\n    , players.fullname as full_name\n    , players.link as player_url\n    , players.firstname as first_name\n    , players.lastname as last_name\n    , players.primarynumber as primary_number\n    , players.birthdate as birth_date\n    , players.birthcity as birth_city\n    , players.birthstateprovince as birth_state_province\n    , players.birthcountry as birth_country\n    , players.nationality as nationality\n    , players.height\n    , players.weight\n    , players.active as is_active\n    , players.alternatecaptain as is_alternate_captain\n    , players.captain as is_captain\n    , players.rookie as is_rookie\n    , players.shootscatches as shoots_catches\n    , players.rosterstatus as roster_status\n    , players.primaryposition.code as primary_position_code\n    , players.primaryposition.name as primary_position_name\n    , players.primaryposition.type as primary_position_type\n    , players.primaryposition.abbreviation as primary_position_abbreviation\n    , players._time_extracted as extracted_at\n    , players._time_loaded as loaded_at\nfrom {{ source('meltano', 'people') }} as players\n\n{% if not use_full_dataset() %}\nlimit 1000\n{% endif %}", "language": "sql", "refs": [], "sources": [["meltano", "people"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.surrogate_key", "macro.nhl_data.use_full_dataset"], "nodes": ["source.nhl_data.meltano.people"]}, "compiled_path": "target/compiled/nhl_data/models/staging/stg_nhl__players.sql", "compiled": true, "compiled_code": "select\n    /* Primary Key */\n    to_hex(md5(cast(coalesce(cast(players.id as \n    string\n), '') || '-' || coalesce(cast(players.teamid as \n    string\n), '') || '-' || coalesce(cast(players.seasonid as \n    string\n), '') as \n    string\n))) as stg_nhl__players_id\n\n    /* Identifiers */\n    , players.id as player_id\n    , players.seasonid as season_id\n    , players.teamid as team_id\n\n    /* Properties */\n    , players.fullname as full_name\n    , players.link as player_url\n    , players.firstname as first_name\n    , players.lastname as last_name\n    , players.primarynumber as primary_number\n    , players.birthdate as birth_date\n    , players.birthcity as birth_city\n    , players.birthstateprovince as birth_state_province\n    , players.birthcountry as birth_country\n    , players.nationality as nationality\n    , players.height\n    , players.weight\n    , players.active as is_active\n    , players.alternatecaptain as is_alternate_captain\n    , players.captain as is_captain\n    , players.rookie as is_rookie\n    , players.shootscatches as shoots_catches\n    , players.rosterstatus as roster_status\n    , players.primaryposition.code as primary_position_code\n    , players.primaryposition.name as primary_position_name\n    , players.primaryposition.type as primary_position_type\n    , players.primaryposition.abbreviation as primary_position_abbreviation\n    , players._time_extracted as extracted_at\n    , players._time_loaded as loaded_at\nfrom `nhl-breakouts`.`raw`.`people` as players\n\n\nlimit 1000\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.nhl_data.stg_nhl__live_plays_location": {"database": "nhl-breakouts", "schema": "github", "name": "stg_nhl__live_plays_location", "resource_type": "model", "package_name": "nhl_data", "path": "staging/stg_nhl__live_plays_location.sql", "original_file_path": "models/staging/stg_nhl__live_plays_location.sql", "unique_id": "model.nhl_data.stg_nhl__live_plays_location", "fqn": ["nhl_data", "staging", "stg_nhl__live_plays_location"], "alias": "stg_nhl__live_plays_location", "checksum": {"name": "sha256", "checksum": "1b6ba334259c2ec5df24a378a987ab1250a8cc98f6d0e07480cfc48c57013900"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Enahancing Staged NHL event level data from the NHL-API (player-play level) with x & y coordinate (location) mappings relative to the opposing goal", "columns": {"play_id": {"name": "play_id", "description": "Unique surrogate key for a player's event-level activity in an NHL game (game_id + team_id + player_id + event_id)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "game_id": {"name": "game_id", "description": "Foreign key that maps to an NHL game ID\n##### More about game_id\nThe first 4 digits identify the season of the game (ie. 2017 for the 2017-2018 season). The next 2 digits give the type of game, where 01 = preseason, 02 = regular season, 03 = playoffs, 04 = all-star. The final 4 digits identify the specific game number.\n\nFor regular season and preseason games, this ranges from 0001 to the number of games played. (1271 for seasons with 31 teams (2017 and onwards) and 1230 for seasons with 30 teams).\n\nFor playoff games, the 2nd digit of the specific number gives the round of the playoffs, the 3rd digit specifies the matchup, and the 4th digit specifies the game (out of 7).\n\n[Credit to Drew Hynes' NHL API docs](https://gitlab.com/dword4/nhlapi/-/blob/master/stats-api.md#game-ids)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_id": {"name": "event_id", "description": "Foreign key that maps to a distinct event ID", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "player_id": {"name": "player_id", "description": "Foreign key that maps to an NHL player ID", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "team_id": {"name": "team_id", "description": "Foreign key that maps to an NHL team ID", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_type": {"name": "event_type", "description": "Short description of the event type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_idx": {"name": "event_idx", "description": "Foreign key that maps to the sequence of the event relative to that game, in ascending order (e.g. 1 = first event, 2 - second event)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "player_role_team": {"name": "player_role_team", "description": "The role of the player in context to the event (e.g. Hitter, Hitee, Shooter, Winner, Loser, etc.)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_period1_shooting": {"name": "home_period1_shooting", "description": "The direction that the home team is shooting towards in period 1 ('left', 'right', 'missing')", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "play_x_coordinate": {"name": "play_x_coordinate", "description": "The x-coordinate of where the event took place on the ice (converted to type float64)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "play_y_coordinate": {"name": "play_y_coordinate", "description": "The y-coordinate of where the event took place on the ice (converted to type float64)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "adj_play_x_coordinate": {"name": "adj_play_x_coordinate", "description": "Adjusting the axis of plane of the play's x-coordinate based on where the oppsosing team's goalie net is as this is where they will be shooting towards", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "adj_play_y_coordinate": {"name": "adj_play_y_coordinate", "description": "Adjusting the axis of plane of the play's y-coordinate based on where the oppsosing team's goalie net is as this is where they will be shooting towards", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "play_distance": {"name": "play_distance", "description": "Distance from the opposing goal, calculated by making a right angle with the play's [x,y] and the net [89,0], and finding the hypotenuse with the formula c = sqrt(a^2 + b^2)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "play_angle": {"name": "play_angle", "description": "Angle from the play's [x,y] coordinates to the opposing team's net [89,0]", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rink_side": {"name": "rink_side", "description": "The side of the rink based on the y-coordinate (e.g. \"left\" means that the team is on the left side of the rink)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "zone_type": {"name": "zone_type", "description": "Classifying each of the zones by its type, based on the x-coordinate (e.g. \"offensive_zone\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "zone": {"name": "zone", "description": "The the area of the ice, determined by combining the x & y coordinates (e.g. \"r_1_high\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "nhl_data://models/staging/stg_nhl__live_plays_location.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "staging"}, "created_at": 1695581342.5466275, "relation_name": "`nhl-breakouts`.`github`.`stg_nhl__live_plays_location`", "raw_code": "-- #cte: depending on which end the team is shooting on, adjust the x and y play coordinates so that all plays are going towards the same end (all shots towards right end)\nwith adj_coordinates as (\n    select\n        plays.stg_nhl__live_plays_id as play_id\n        , plays.game_id\n        , plays.event_id\n        , plays.player_id\n        , plays.team_id\n        , plays.event_idx\n        , schedule.game_type\n        , plays.play_period\n        , plays.event_type\n        , lower(plays.player_role_team) as player_role_team\n        , schedule.home_period1_shooting\n        , cast(plays.play_x_coordinate as float64) as play_x_coordinate\n        , cast(plays.play_y_coordinate as float64) as play_y_coordinate\n        -- Flip the x-y coords based on where the player's team was shooting in the first period of the game (reminder that when mod(x, 2) = 0 then odd number, but when > 0 then  even number)\n        , case\n            when lower(plays.player_role_team) = 'home' and schedule.home_period1_shooting = 'left' and mod(plays.play_period, 2) > 0 then cast(plays.play_x_coordinate as float64) * -1\n            when lower(plays.player_role_team) = 'home' and schedule.home_period1_shooting = 'left' and mod(plays.play_period, 2) = 0 then cast(plays.play_x_coordinate as float64)\n            when lower(plays.player_role_team) = 'home' and schedule.home_period1_shooting = 'right' and mod(plays.play_period, 2) > 0 then cast(plays.play_x_coordinate as float64)\n            when lower(plays.player_role_team) = 'home' and schedule.home_period1_shooting = 'right' and mod(plays.play_period, 2) = 0 then cast(plays.play_x_coordinate as float64) * -1\n            when lower(plays.player_role_team) = 'away' and schedule.home_period1_shooting = 'left' and mod(plays.play_period, 2) > 0 then cast(plays.play_x_coordinate as float64)\n            when lower(plays.player_role_team) = 'away' and schedule.home_period1_shooting = 'left' and mod(plays.play_period, 2) = 0 then cast(plays.play_x_coordinate as float64) * -1\n            when lower(plays.player_role_team) = 'away' and schedule.home_period1_shooting = 'right' and mod(plays.play_period, 2) > 0 then cast(plays.play_x_coordinate as float64) * -1\n            when lower(plays.player_role_team) = 'away' and schedule.home_period1_shooting = 'right' and mod(plays.play_period, 2) = 0 then cast(plays.play_x_coordinate as float64)\n        end as adj_play_x_coordinate\n        , case\n            when lower(plays.player_role_team) = 'home' and schedule.home_period1_shooting = 'left' and mod(plays.play_period, 2) > 0 then cast(plays.play_y_coordinate as float64) * -1\n            when lower(plays.player_role_team) = 'home' and schedule.home_period1_shooting = 'left' and mod(plays.play_period, 2) = 0 then cast(plays.play_y_coordinate as float64)\n            when lower(plays.player_role_team) = 'home' and schedule.home_period1_shooting = 'right' and mod(plays.play_period, 2) > 0 then cast(plays.play_y_coordinate as float64)\n            when lower(plays.player_role_team) = 'home' and schedule.home_period1_shooting = 'right' and mod(plays.play_period, 2) = 0 then cast(plays.play_y_coordinate as float64) * -1\n            when lower(plays.player_role_team) = 'away' and schedule.home_period1_shooting = 'left' and mod(plays.play_period, 2) > 0 then cast(plays.play_y_coordinate as float64)\n            when lower(plays.player_role_team) = 'away' and schedule.home_period1_shooting = 'left' and mod(plays.play_period, 2) = 0 then cast(plays.play_y_coordinate as float64) * -1\n            when lower(plays.player_role_team) = 'away' and schedule.home_period1_shooting = 'right' and mod(plays.play_period, 2) > 0 then cast(plays.play_y_coordinate as float64) * -1\n            when lower(plays.player_role_team) = 'away' and schedule.home_period1_shooting = 'right' and mod(plays.play_period, 2) = 0 then cast(plays.play_y_coordinate as float64)\n        end as adj_play_y_coordinate\n    from {{ ref('stg_nhl__live_plays') }} as plays\n    left join {{ ref('d_schedule') }} as schedule on schedule.game_id = plays.game_id\n\n)\n\nselect\n    /* Primary Key */\n    play_id\n    /* Identifiers */\n    , game_id\n    , event_id\n    , player_id\n    , team_id\n    , game_type\n    , event_idx\n    /* Properties */\n    , play_period\n    , event_type\n    , player_role_team\n    , home_period1_shooting\n    , play_x_coordinate\n    , play_y_coordinate\n    , adj_play_x_coordinate\n    , adj_play_y_coordinate\n    -- Rink distance from goal (shooting)... hypotenuse = sqrt( (x2-x1)^2 + (y2-y1)^2 )... where y1 = 0 and x1 = 89\n    , round(sqrt(power((89 - adj_play_x_coordinate), 2) + power(0 - adj_play_y_coordinate, 2)), 2) as play_distance\n    -- Rink angle from goal (shooting)... angle = tan^-1( (y2-y1) / (x2-x1) )... where y1 = 0 and x1 = 89\n    , case\n        when adj_play_x_coordinate = 89 then 0\n        else round(atan(((adj_play_y_coordinate) / (89 - adj_play_x_coordinate))) * (180 / (acos(-1))), 2)\n    end as play_angle\n    -- Rink zones\n    , case\n        when adj_play_y_coordinate < 0 then 'left'\n        when adj_play_y_coordinate > 0 then 'right'\n        when adj_play_y_coordinate = 0 then 'center'\n        else 'missing'\n    end as rink_side\n    , case\n        when adj_play_x_coordinate between -25 and 25 then 'neutral_zone'\n        when adj_play_x_coordinate between -100 and -25 then 'defensive_zone'\n        else 'offensive_zone'\n    end as zone_type\n    , case\n        when adj_play_x_coordinate between -25 and 25 then 'neutral_zone'\n        when adj_play_x_coordinate between -100 and -25 then 'defensive_zone'\n        when (adj_play_x_coordinate between 25 and 54) and (adj_play_y_coordinate between -42.5 and -7) then 'r_point'\n        when (adj_play_x_coordinate between 25 and 54) and (adj_play_y_coordinate between -7 and 7) then 'c_point'\n        when (adj_play_x_coordinate between 25 and 54) and (adj_play_y_coordinate between 7 and 42.5) then 'l_point'\n        when (adj_play_x_coordinate between 54 and 69) and (adj_play_y_coordinate between -42.5 and -22) then 'r_1_high'\n        when (adj_play_x_coordinate between 54 and 69) and (adj_play_y_coordinate between -22 and -7) then 'r_2_high'\n        when (adj_play_x_coordinate between 52 and 69) and (adj_play_y_coordinate between -7 and 7) then 'high_slot'\n        when (adj_play_x_coordinate between 52 and 69) and (adj_play_y_coordinate between 7 and 22) then 'l_2_high'\n        when (adj_play_x_coordinate between 52 and 69) and (adj_play_y_coordinate between 22 and 42.5) then 'l_1_high'\n        when (adj_play_x_coordinate between 69 and 89) and (adj_play_y_coordinate between -42.5 and -22) then 'r_1_low'\n        when (adj_play_x_coordinate between 69 and 89) and (adj_play_y_coordinate between -22 and -7) then 'r_2_low'\n        when (adj_play_x_coordinate between 69 and 89) and (adj_play_y_coordinate between -7 and 7) then 'low_slot'\n        when (adj_play_x_coordinate between 69 and 89) and (adj_play_y_coordinate between 7 and 22) then 'l_2_low'\n        when (adj_play_x_coordinate between 69 and 89) and (adj_play_y_coordinate between 22 and 42.5) then 'l_1_low'\n        when (adj_play_x_coordinate between 89 and 100) then 'down_low'\n    end as zone\n\nfrom adj_coordinates\n\n{% if not use_full_dataset() %}\nlimit 1000\n{% endif %}", "language": "sql", "refs": [{"name": "stg_nhl__live_plays", "package": null, "version": null}, {"name": "d_schedule", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.nhl_data.use_full_dataset"], "nodes": ["model.nhl_data.stg_nhl__live_plays", "model.nhl_data.d_schedule"]}, "compiled_path": "target/compiled/nhl_data/models/staging/stg_nhl__live_plays_location.sql", "compiled": true, "compiled_code": "-- #cte: depending on which end the team is shooting on, adjust the x and y play coordinates so that all plays are going towards the same end (all shots towards right end)\nwith adj_coordinates as (\n    select\n        plays.stg_nhl__live_plays_id as play_id\n        , plays.game_id\n        , plays.event_id\n        , plays.player_id\n        , plays.team_id\n        , plays.event_idx\n        , schedule.game_type\n        , plays.play_period\n        , plays.event_type\n        , lower(plays.player_role_team) as player_role_team\n        , schedule.home_period1_shooting\n        , cast(plays.play_x_coordinate as float64) as play_x_coordinate\n        , cast(plays.play_y_coordinate as float64) as play_y_coordinate\n        -- Flip the x-y coords based on where the player's team was shooting in the first period of the game (reminder that when mod(x, 2) = 0 then odd number, but when > 0 then  even number)\n        , case\n            when lower(plays.player_role_team) = 'home' and schedule.home_period1_shooting = 'left' and mod(plays.play_period, 2) > 0 then cast(plays.play_x_coordinate as float64) * -1\n            when lower(plays.player_role_team) = 'home' and schedule.home_period1_shooting = 'left' and mod(plays.play_period, 2) = 0 then cast(plays.play_x_coordinate as float64)\n            when lower(plays.player_role_team) = 'home' and schedule.home_period1_shooting = 'right' and mod(plays.play_period, 2) > 0 then cast(plays.play_x_coordinate as float64)\n            when lower(plays.player_role_team) = 'home' and schedule.home_period1_shooting = 'right' and mod(plays.play_period, 2) = 0 then cast(plays.play_x_coordinate as float64) * -1\n            when lower(plays.player_role_team) = 'away' and schedule.home_period1_shooting = 'left' and mod(plays.play_period, 2) > 0 then cast(plays.play_x_coordinate as float64)\n            when lower(plays.player_role_team) = 'away' and schedule.home_period1_shooting = 'left' and mod(plays.play_period, 2) = 0 then cast(plays.play_x_coordinate as float64) * -1\n            when lower(plays.player_role_team) = 'away' and schedule.home_period1_shooting = 'right' and mod(plays.play_period, 2) > 0 then cast(plays.play_x_coordinate as float64) * -1\n            when lower(plays.player_role_team) = 'away' and schedule.home_period1_shooting = 'right' and mod(plays.play_period, 2) = 0 then cast(plays.play_x_coordinate as float64)\n        end as adj_play_x_coordinate\n        , case\n            when lower(plays.player_role_team) = 'home' and schedule.home_period1_shooting = 'left' and mod(plays.play_period, 2) > 0 then cast(plays.play_y_coordinate as float64) * -1\n            when lower(plays.player_role_team) = 'home' and schedule.home_period1_shooting = 'left' and mod(plays.play_period, 2) = 0 then cast(plays.play_y_coordinate as float64)\n            when lower(plays.player_role_team) = 'home' and schedule.home_period1_shooting = 'right' and mod(plays.play_period, 2) > 0 then cast(plays.play_y_coordinate as float64)\n            when lower(plays.player_role_team) = 'home' and schedule.home_period1_shooting = 'right' and mod(plays.play_period, 2) = 0 then cast(plays.play_y_coordinate as float64) * -1\n            when lower(plays.player_role_team) = 'away' and schedule.home_period1_shooting = 'left' and mod(plays.play_period, 2) > 0 then cast(plays.play_y_coordinate as float64)\n            when lower(plays.player_role_team) = 'away' and schedule.home_period1_shooting = 'left' and mod(plays.play_period, 2) = 0 then cast(plays.play_y_coordinate as float64) * -1\n            when lower(plays.player_role_team) = 'away' and schedule.home_period1_shooting = 'right' and mod(plays.play_period, 2) > 0 then cast(plays.play_y_coordinate as float64) * -1\n            when lower(plays.player_role_team) = 'away' and schedule.home_period1_shooting = 'right' and mod(plays.play_period, 2) = 0 then cast(plays.play_y_coordinate as float64)\n        end as adj_play_y_coordinate\n    from `nhl-breakouts`.`github`.`stg_nhl__live_plays` as plays\n    left join `nhl-breakouts`.`github`.`d_schedule` as schedule on schedule.game_id = plays.game_id\n\n)\n\nselect\n    /* Primary Key */\n    play_id\n    /* Identifiers */\n    , game_id\n    , event_id\n    , player_id\n    , team_id\n    , game_type\n    , event_idx\n    /* Properties */\n    , play_period\n    , event_type\n    , player_role_team\n    , home_period1_shooting\n    , play_x_coordinate\n    , play_y_coordinate\n    , adj_play_x_coordinate\n    , adj_play_y_coordinate\n    -- Rink distance from goal (shooting)... hypotenuse = sqrt( (x2-x1)^2 + (y2-y1)^2 )... where y1 = 0 and x1 = 89\n    , round(sqrt(power((89 - adj_play_x_coordinate), 2) + power(0 - adj_play_y_coordinate, 2)), 2) as play_distance\n    -- Rink angle from goal (shooting)... angle = tan^-1( (y2-y1) / (x2-x1) )... where y1 = 0 and x1 = 89\n    , case\n        when adj_play_x_coordinate = 89 then 0\n        else round(atan(((adj_play_y_coordinate) / (89 - adj_play_x_coordinate))) * (180 / (acos(-1))), 2)\n    end as play_angle\n    -- Rink zones\n    , case\n        when adj_play_y_coordinate < 0 then 'left'\n        when adj_play_y_coordinate > 0 then 'right'\n        when adj_play_y_coordinate = 0 then 'center'\n        else 'missing'\n    end as rink_side\n    , case\n        when adj_play_x_coordinate between -25 and 25 then 'neutral_zone'\n        when adj_play_x_coordinate between -100 and -25 then 'defensive_zone'\n        else 'offensive_zone'\n    end as zone_type\n    , case\n        when adj_play_x_coordinate between -25 and 25 then 'neutral_zone'\n        when adj_play_x_coordinate between -100 and -25 then 'defensive_zone'\n        when (adj_play_x_coordinate between 25 and 54) and (adj_play_y_coordinate between -42.5 and -7) then 'r_point'\n        when (adj_play_x_coordinate between 25 and 54) and (adj_play_y_coordinate between -7 and 7) then 'c_point'\n        when (adj_play_x_coordinate between 25 and 54) and (adj_play_y_coordinate between 7 and 42.5) then 'l_point'\n        when (adj_play_x_coordinate between 54 and 69) and (adj_play_y_coordinate between -42.5 and -22) then 'r_1_high'\n        when (adj_play_x_coordinate between 54 and 69) and (adj_play_y_coordinate between -22 and -7) then 'r_2_high'\n        when (adj_play_x_coordinate between 52 and 69) and (adj_play_y_coordinate between -7 and 7) then 'high_slot'\n        when (adj_play_x_coordinate between 52 and 69) and (adj_play_y_coordinate between 7 and 22) then 'l_2_high'\n        when (adj_play_x_coordinate between 52 and 69) and (adj_play_y_coordinate between 22 and 42.5) then 'l_1_high'\n        when (adj_play_x_coordinate between 69 and 89) and (adj_play_y_coordinate between -42.5 and -22) then 'r_1_low'\n        when (adj_play_x_coordinate between 69 and 89) and (adj_play_y_coordinate between -22 and -7) then 'r_2_low'\n        when (adj_play_x_coordinate between 69 and 89) and (adj_play_y_coordinate between -7 and 7) then 'low_slot'\n        when (adj_play_x_coordinate between 69 and 89) and (adj_play_y_coordinate between 7 and 22) then 'l_2_low'\n        when (adj_play_x_coordinate between 69 and 89) and (adj_play_y_coordinate between 22 and 42.5) then 'l_1_low'\n        when (adj_play_x_coordinate between 89 and 100) then 'down_low'\n    end as zone\n\nfrom adj_coordinates\n\n\nlimit 1000\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.nhl_data.stg_nhl__xg": {"database": "nhl-breakouts", "schema": "github", "name": "stg_nhl__xg", "resource_type": "model", "package_name": "nhl_data", "path": "staging/stg_nhl__xg.sql", "original_file_path": "models/staging/stg_nhl__xg.sql", "unique_id": "model.nhl_data.stg_nhl__xg", "fqn": ["nhl_data", "staging", "stg_nhl__xg"], "alias": "stg_nhl__xg", "checksum": {"name": "sha256", "checksum": "2781f70cfd2536591ebd61e6d9acb0d34adb4d74412c0edbe66c27fa79cea715"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Expected goal (XG) values built in the `nhl-xg` repo - each row is a fenwick shot's xg value", "columns": {"stg_nhl__xg_id": {"name": "stg_nhl__xg_id", "description": "Primary key, which is basically just a new play_id  (game_id + team_id + player_id + event_id)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "xg_model_id": {"name": "xg_model_id", "description": "Identifier with business logic to help identify model attributes for creating the xg", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "id_play_id": {"name": "id_play_id", "description": "Unique surrogate key for a player's event-level activity in an NHL game (game_id + team_id + player_id + event_id)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "id_game_id": {"name": "id_game_id", "description": "Foreign key that maps to an NHL game ID\n##### More about game_id\nThe first 4 digits identify the season of the game (ie. 2017 for the 2017-2018 season). The next 2 digits give the type of game, where 01 = preseason, 02 = regular season, 03 = playoffs, 04 = all-star. The final 4 digits identify the specific game number.\n\nFor regular season and preseason games, this ranges from 0001 to the number of games played. (1271 for seasons with 31 teams (2017 and onwards) and 1230 for seasons with 30 teams).\n\nFor playoff games, the 2nd digit of the specific number gives the round of the playoffs, the 3rd digit specifies the matchup, and the 4th digit specifies the game (out of 7).\n\n[Credit to Drew Hynes' NHL API docs](https://gitlab.com/dword4/nhlapi/-/blob/master/stats-api.md#game-ids)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "id_game_type": {"name": "id_game_type", "description": "Code for the type of game, which is retrieved by extracting the the 5th and 6th position from the game_id (e.g. 02 = regular season game)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "id_season_id": {"name": "id_season_id", "description": "Foreign key that maps to the season ID that the NHL game took place (e.g. \"20172018\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "id_season_year": {"name": "id_season_year", "description": "Numeric representation of season_id", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "id_player_id": {"name": "id_player_id", "description": "Foreign key that maps to an NHL player ID - not_null", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "id_player_full_name": {"name": "id_player_full_name", "description": "Full name of the player (e.g. Connor McDavid)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "id_strength_state": {"name": "id_strength_state", "description": "Provides the strength state at the time the shot was taken - (shootout, goalie-pulled, even strength, home skater advantage, away skater advantage, other, and null). The logic to create this feature exists in `github\\the-data-base\\nhl-xg\\sql_queries\\xg_model.sql`", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "id_strength_state_code": {"name": "id_strength_state_code", "description": "Combines the home indicator and strength state to create 3 strength states (e.g. ev, pp, sh)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "id_is_home": {"name": "id_is_home", "description": "True or False for whether or not the player was at home or away", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "id_fenwick_shot": {"name": "id_fenwick_shot", "description": "Identifier that indicates whether or not the shot was a fenwick shot (all values are 1 since that is the pre-req for an XG model)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "x_goal": {"name": "x_goal", "description": "Whether or not the fenwick shot in question resulted in a goal", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "xg_proba": {"name": "xg_proba", "description": "Expected goal (XG) model prediction probability for the fenwick shot to result in a goal", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "xg_pred": {"name": "xg_pred", "description": "Classification of xg_proba to prediciton (1 = pred goal, 0 = pred no goal), using the logloss value as the threshold", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "model_type": {"name": "model_type", "description": "The type of model used to build the XG values", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "model_rocauc": {"name": "model_rocauc", "description": "Model performance metric - roc auc", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "model_prauc": {"name": "model_prauc", "description": "Model performance metric - pr auc", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "model_logloss": {"name": "model_logloss", "description": "Model performance metric - logloss", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "model_precision": {"name": "model_precision", "description": "Model performance metric - precision", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "model_recall": {"name": "model_recall", "description": "Model performance metric - recall", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "model_seasons": {"name": "model_seasons", "description": "Model training - the number of season used in the training of the model", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "model_season_range": {"name": "model_season_range", "description": "Model training - the min and max seasons used in the training of the model", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "model_fenwick_shots": {"name": "model_fenwick_shots", "description": "Model training - the number of total fenwick shots taken in the training data (not split by strength_stat_code)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "model_pcnt_goals": {"name": "model_pcnt_goals", "description": "Model training - the percent of fenwick shots that resulted in goals in the trianing data (not split by strength_stat_code)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shot_distance": {"name": "shot_distance", "description": "Distance from the opposing goal, calculated by making a right angle with the play's [x,y] and the net [89,0], and finding the hypotenuse with the formula c = sqrt(a^2 + b^2)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shot_angle": {"name": "shot_angle", "description": "Angle from the play's [x,y] coordinates to the opposing team's net [89,0]", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shot_xcoord": {"name": "shot_xcoord", "description": "Adjusting the axis of plane of the play's x-coordinate based on where the oppsosing team's goalie net is as this is where they will be shooting towards", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shot_ycoord": {"name": "shot_ycoord", "description": "Adjusting the axis of plane of the play's y-coordinate based on where the oppsosing team's goalie net is as this is where they will be shooting towards", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shot_backhand": {"name": "shot_backhand", "description": "The number of backhand shots that were either saved or were goals (no misses or blocks)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shot_deflected": {"name": "shot_deflected", "description": "The number of deflected shots that were either saved or were goals (no misses or blocks)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shot_slap": {"name": "shot_slap", "description": "The number of slapshot shots that were either saved or were goals (no misses or blocks)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shot_snap": {"name": "shot_snap", "description": "The number of snapshot shots that were either saved or were goals (no misses or blocks)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shot_tip": {"name": "shot_tip", "description": "The number of tip-in shots that were either saved or were goals (no misses or blocks)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shot_wrap": {"name": "shot_wrap", "description": "The number of wraparound shots that were either saved or were goals (no misses or blocks)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shot_wrist": {"name": "shot_wrist", "description": "The number of wristshot shots that were either saved or were goals (no misses or blocks)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shot_rebound": {"name": "shot_rebound", "description": "The number of rebounds (shot taken within 2 seconds of previous if taken by same team and same period) that were either saved or were goals (no misses or blocks)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "game_seconds_elapsed": {"name": "game_seconds_elapsed", "description": "The time in seconds elapsed in the entire game", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "period_seconds_elapsed": {"name": "period_seconds_elapsed", "description": "The time in seconds elapsed in the period", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "period": {"name": "period", "description": "The period in which the event occured (e.g. 3)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_home": {"name": "is_home", "description": "True or False for whether or not the player was at home or away", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "game_state_5v5": {"name": "game_state_5v5", "description": "Game state = '5v5'", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "game_state_4v4": {"name": "game_state_4v4", "description": "Game state = '4v4'", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "game_state_3v3": {"name": "game_state_3v3", "description": "Game state = '3v3'", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "seconds_since_last_shot": {"name": "seconds_since_last_shot", "description": "Seconds elapsed since the last fenwick shot", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_time_loaded": {"name": "_time_loaded", "description": "Timestamp that the data was loaded", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_data_time_loaded": {"name": "_data_time_loaded", "description": "Timestamp that the model data was loaded", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_model_time_loaded": {"name": "_model_time_loaded", "description": "Timestamp that the model was created", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "nhl_data://models/staging/stg_nhl__xg.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "staging"}, "created_at": 1695581342.5878437, "relation_name": "`nhl-breakouts`.`github`.`stg_nhl__xg`", "raw_code": "with\n\ndeduped as (\n    select *\n    from {{ source('xg', 'xg_*') }}\n    qualify row_number() over (partition by id_play_id, id_player_id) = 1\n)\n\nselect\n    /* Primary Key */\n    {{ dbt_utils.surrogate_key(['deduped.id_play_id']) }} as stg_nhl__xg_id\n\n    /* Identifiers */\n    , concat(id_model_type, \"_target_\", id_season_id, \"_training_\", id_model_season_range) as xg_model_id\n    , id_play_id\n    , id_game_id\n    , id_game_type\n    , id_season_id\n    , id_season_year\n    , id_player_id\n    , id_player_full_name\n    , id_strength_state\n    , id_strength_state_code\n    , id_is_home\n    , id_fenwick_shot\n\n    /* Actual vs Predictions */\n    , x_goal\n    , xg_proba\n    , xg_pred\n\n    /* Model results */\n    , id_model_type as model_type\n    , id_model_rocauc as model_rocauc\n    , id_model_prauc as model_prauc\n    , id_model_logloss as model_logloss\n    , id_model_precision as model_precision\n    , id_model_recall as model_recall\n    , id_model_seasons as model_seasons\n    , id_model_season_range as model_season_range\n    , id_model_fenwick_shots as model_fenwick_shots\n    , id_model_pcnt_goals as model_pcnt_goals\n\n    /* Model features (Properties) */\n    , shot_distance\n    , shot_angle\n    , shot_xcoord\n    , shot_ycoord\n    , shot_backhand\n    , shot_deflected\n    , shot_slap\n    , shot_snap\n    , shot_tip\n    , shot_wrap\n    , shot_wrist\n    , shot_rebound\n    , game_seconds_elapsed\n    , period_seconds_elapsed\n    , period\n    , is_home\n    , game_state_5v5\n    , game_state_4v4\n    , game_state_3v3\n    , seconds_since_last_shot\n    , id_time_loaded as _time_loaded\n    , id_model_insert_data_ts as _data_time_loaded\n    , id_model_insert_model_ts as _model_time_loaded\n\nfrom deduped\n\n{% if not use_full_dataset() %}\nlimit 1000\n{% endif %}", "language": "sql", "refs": [], "sources": [["xg", "xg_*"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.surrogate_key", "macro.nhl_data.use_full_dataset"], "nodes": ["source.nhl_data.xg.xg_*"]}, "compiled_path": "target/compiled/nhl_data/models/staging/stg_nhl__xg.sql", "compiled": true, "compiled_code": "with\n\ndeduped as (\n    select *\n    from `nhl-breakouts`.`model_xg`.`xg_*`\n    qualify row_number() over (partition by id_play_id, id_player_id) = 1\n)\n\nselect\n    /* Primary Key */\n    to_hex(md5(cast(coalesce(cast(deduped.id_play_id as \n    string\n), '') as \n    string\n))) as stg_nhl__xg_id\n\n    /* Identifiers */\n    , concat(id_model_type, \"_target_\", id_season_id, \"_training_\", id_model_season_range) as xg_model_id\n    , id_play_id\n    , id_game_id\n    , id_game_type\n    , id_season_id\n    , id_season_year\n    , id_player_id\n    , id_player_full_name\n    , id_strength_state\n    , id_strength_state_code\n    , id_is_home\n    , id_fenwick_shot\n\n    /* Actual vs Predictions */\n    , x_goal\n    , xg_proba\n    , xg_pred\n\n    /* Model results */\n    , id_model_type as model_type\n    , id_model_rocauc as model_rocauc\n    , id_model_prauc as model_prauc\n    , id_model_logloss as model_logloss\n    , id_model_precision as model_precision\n    , id_model_recall as model_recall\n    , id_model_seasons as model_seasons\n    , id_model_season_range as model_season_range\n    , id_model_fenwick_shots as model_fenwick_shots\n    , id_model_pcnt_goals as model_pcnt_goals\n\n    /* Model features (Properties) */\n    , shot_distance\n    , shot_angle\n    , shot_xcoord\n    , shot_ycoord\n    , shot_backhand\n    , shot_deflected\n    , shot_slap\n    , shot_snap\n    , shot_tip\n    , shot_wrap\n    , shot_wrist\n    , shot_rebound\n    , game_seconds_elapsed\n    , period_seconds_elapsed\n    , period\n    , is_home\n    , game_state_5v5\n    , game_state_4v4\n    , game_state_3v3\n    , seconds_since_last_shot\n    , id_time_loaded as _time_loaded\n    , id_model_insert_data_ts as _data_time_loaded\n    , id_model_insert_model_ts as _model_time_loaded\n\nfrom deduped\n\n\nlimit 1000\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.nhl_data.stg_nhl__teams": {"database": "nhl-breakouts", "schema": "github", "name": "stg_nhl__teams", "resource_type": "model", "package_name": "nhl_data", "path": "staging/stg_nhl__teams.sql", "original_file_path": "models/staging/stg_nhl__teams.sql", "unique_id": "model.nhl_data.stg_nhl__teams", "fqn": ["nhl_data", "staging", "stg_nhl__teams"], "alias": "stg_nhl__teams", "checksum": {"name": "sha256", "checksum": "fd7e482a9930561a8ba2a69aa40c719cad2879aa791d06c9d501245813eeed05"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Staged NHL teams data from the NHL-API", "columns": {"stg_nhl__teams_id": {"name": "stg_nhl__teams_id", "description": "Primary key, combination of the NHL team ID and the season ID", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "team_id": {"name": "team_id", "description": "Unique identifier for NHL teams", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "venue_timezone_id": {"name": "venue_timezone_id", "description": "Foreign key that maps to the timezone ID of the venue (e.g. America/Vancouver)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "division_id": {"name": "division_id", "description": "Foreign key that maps to the division ID that the NHL team belongs to", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "conference_id": {"name": "conference_id", "description": "Foreign key that maps to the conference ID that the NHL team belongs to", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "franchise_id": {"name": "franchise_id", "description": "Foreign key that maps to the franchise ID that the NHL originates from", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "season_id": {"name": "season_id", "description": "Foreign key that maps to the season ID that the NHL team roster relates to", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "full_name": {"name": "full_name", "description": "Full name of the NHL team (e.g. Vancouver Canucks)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "team_url": {"name": "team_url", "description": "URL endpoint for the NHl team", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "venue_name": {"name": "venue_name", "description": "Name of the venue / arena that the NHL team plays in", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "venue_url": {"name": "venue_url", "description": "URL endpoint for the NHL team venue", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "venue_city": {"name": "venue_city", "description": "City that the venue / arena is in", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "venue_timezone_offset": {"name": "venue_timezone_offset", "description": "Offset necessary to correct for timezone differences (e.g. Vancouver = -7)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "venue_timezone_name": {"name": "venue_timezone_name", "description": "Abbreviated timezone for the venue (e.g. PDT)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "abbreviation": {"name": "abbreviation", "description": "Abbreviation for the NHL team (e.g. VAN)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "team_name": {"name": "team_name", "description": "Second part of the team name (e.g. Canucks)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "location_name": {"name": "location_name", "description": "First part of the team name (e.g. Vancouer)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "first_year_of_play": {"name": "first_year_of_play", "description": "The inaugural year for the NHL team (e.g. 1970)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "division_name": {"name": "division_name", "description": "Name of the division that the team currently plays in", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "division_short_name": {"name": "division_short_name", "description": "Short name for the division that the team currently plays in", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "division_url": {"name": "division_url", "description": "URL endpoint for division", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "division_abbreviation": {"name": "division_abbreviation", "description": "Abbreviated NHL division name (e.g. P)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "conference_name": {"name": "conference_name", "description": "Conference name that the team currently plays in", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "conference_url": {"name": "conference_url", "description": "URL endpoint for the conference", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "franchise_team_name": {"name": "franchise_team_name", "description": "Name of the franchise (second part of full team name)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "franchise_url": {"name": "franchise_url", "description": "URL endpoint for the franchise", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "short_name": {"name": "short_name", "description": "Slightly different short version of the team name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "official_site_url": {"name": "official_site_url", "description": "Official site URL", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_active": {"name": "is_active", "description": "Whether or not the team is currently active in the NHL", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "extracted_at": {"name": "extracted_at", "description": "Timestamp that the data was retrieved", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "loaded_at": {"name": "loaded_at", "description": "Timestamp that the data was loaded", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "nhl_data://models/staging/stg_nhl__teams.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "staging"}, "created_at": 1695581342.6655927, "relation_name": "`nhl-breakouts`.`github`.`stg_nhl__teams`", "raw_code": "select\n    /* Primary Key */\n    {{ dbt_utils.surrogate_key(['teams.id', 'teams.seasonid']) }} as stg_nhl__teams_id\n\n    /* Identifiers */\n    , teams.id as team_id\n    , teams.venue.timezone.id as venue_timezone_id\n    , teams.division.id as division_id\n    , teams.conference.id as conference_id\n    , teams.franchise.franchiseid as franchise_id\n    , teams.seasonid as season_id\n\n    /* Properties */\n    , teams.name as full_name\n    , teams.link as team_url\n    , teams.venue.name as venue_name\n    , teams.venue.link as venue_url\n    , teams.venue.city as venue_city\n    , teams.venue.timezone.offset as venue_timezone_offset\n    , teams.venue.timezone.tz as venue_timezone_name\n    , teams.abbreviation as abbreviation\n    , teams.teamname as team_name\n    , teams.locationname as location_name\n    , teams.firstyearofplay as first_year_of_play\n    , teams.division.name as division_name\n    , teams.division.nameshort as division_short_name\n    , teams.division.link as division_url\n    , teams.division.abbreviation as division_abbreviation\n    , teams.conference.name as conference_name\n    , teams.conference.link as conference_url\n    , teams.franchise.teamname as franchise_team_name\n    , teams.franchise.link as franchise_url\n    , teams.shortname as short_name\n    , teams.officialsiteurl as official_site_url\n    , teams.active as is_active\n    , teams._time_extracted as extracted_at\n    , teams._time_loaded as loaded_at\nfrom {{ source('meltano', 'teams') }} as teams\n\n{% if not use_full_dataset() %}\nlimit 1000\n{% endif %}", "language": "sql", "refs": [], "sources": [["meltano", "teams"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.surrogate_key", "macro.nhl_data.use_full_dataset"], "nodes": ["source.nhl_data.meltano.teams"]}, "compiled_path": "target/compiled/nhl_data/models/staging/stg_nhl__teams.sql", "compiled": true, "compiled_code": "select\n    /* Primary Key */\n    to_hex(md5(cast(coalesce(cast(teams.id as \n    string\n), '') || '-' || coalesce(cast(teams.seasonid as \n    string\n), '') as \n    string\n))) as stg_nhl__teams_id\n\n    /* Identifiers */\n    , teams.id as team_id\n    , teams.venue.timezone.id as venue_timezone_id\n    , teams.division.id as division_id\n    , teams.conference.id as conference_id\n    , teams.franchise.franchiseid as franchise_id\n    , teams.seasonid as season_id\n\n    /* Properties */\n    , teams.name as full_name\n    , teams.link as team_url\n    , teams.venue.name as venue_name\n    , teams.venue.link as venue_url\n    , teams.venue.city as venue_city\n    , teams.venue.timezone.offset as venue_timezone_offset\n    , teams.venue.timezone.tz as venue_timezone_name\n    , teams.abbreviation as abbreviation\n    , teams.teamname as team_name\n    , teams.locationname as location_name\n    , teams.firstyearofplay as first_year_of_play\n    , teams.division.name as division_name\n    , teams.division.nameshort as division_short_name\n    , teams.division.link as division_url\n    , teams.division.abbreviation as division_abbreviation\n    , teams.conference.name as conference_name\n    , teams.conference.link as conference_url\n    , teams.franchise.teamname as franchise_team_name\n    , teams.franchise.link as franchise_url\n    , teams.shortname as short_name\n    , teams.officialsiteurl as official_site_url\n    , teams.active as is_active\n    , teams._time_extracted as extracted_at\n    , teams._time_loaded as loaded_at\nfrom `nhl-breakouts`.`raw`.`teams` as teams\n\n\nlimit 1000\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.nhl_data.stg_nhl__schedule": {"database": "nhl-breakouts", "schema": "github", "name": "stg_nhl__schedule", "resource_type": "model", "package_name": "nhl_data", "path": "staging/stg_nhl__schedule.sql", "original_file_path": "models/staging/stg_nhl__schedule.sql", "unique_id": "model.nhl_data.stg_nhl__schedule", "fqn": ["nhl_data", "staging", "stg_nhl__schedule"], "alias": "stg_nhl__schedule", "checksum": {"name": "sha256", "checksum": "68218b9d5e6384a47bf489e2e6745ddc74031f4c9ec75f4a3c3a9b7911c20dc4"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Staged NHL schedule data from the NHL-API", "columns": {"stg_nhl__schedule_id": {"name": "stg_nhl__schedule_id", "description": "Unique identifier for NHL scheduled games", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "game_id": {"name": "game_id", "description": "Foreign key that maps to an NHL game\n##### More about game_id\nThe first 4 digits identify the season of the game (ie. 2017 for the 2017-2018 season). The next 2 digits give the type of game, where 01 = preseason, 02 = regular season, 03 = playoffs, 04 = all-star. The final 4 digits identify the specific game number.\n\nFor regular season and preseason games, this ranges from 0001 to the number of games played. (1271 for seasons with 31 teams (2017 and onwards) and 1230 for seasons with 30 teams).\n\nFor playoff games, the 2nd digit of the specific number gives the round of the playoffs, the 3rd digit specifies the matchup, and the 4th digit specifies the game (out of 7).\n\n[Credit to Drew Hynes' NHL API docs](https://gitlab.com/dword4/nhlapi/-/blob/master/stats-api.md#game-ids)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "season_id": {"name": "season_id", "description": "Foreign key that maps to an NHL season", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "away_team_id": {"name": "away_team_id", "description": "Foreign key that maps to an NHL team (away team)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_team_id": {"name": "home_team_id", "description": "Foreign key that maps to an NHL team (home team)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "venue_id": {"name": "venue_id", "description": "Foreign key tha tmaps to a team's venue (home team)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "game_number": {"name": "game_number", "description": "Four digit number that is unique to a game in the context of a season (e.g. 0002)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "game_type": {"name": "game_type", "description": "Code for the type of game, which is retrieved by extracting the the 5th and 6th position from the game_id (e.g. 02 = regular season game)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "game_type_description": {"name": "game_type_description", "description": "Description for the type of game played, enhancing game_type (e.g. Pre-season, Regular, Playoffs, All-star)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "game_date": {"name": "game_date", "description": "Date that the game takes place (e.g. 2021-01-14)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "abstract_game_state": {"name": "abstract_game_state", "description": "Game state (e.g. Final)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "coded_game_state": {"name": "coded_game_state", "description": "Coded game state (e.g. 7)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "detailed_state": {"name": "detailed_state", "description": "Detailed game state (e.g. Final) - should be different that game state, but look similar", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status_code": {"name": "status_code", "description": "Unknown - looks similar to code_game_state", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_start_time_tbd": {"name": "is_start_time_tbd", "description": "Whether or not the start time is still to be decided (True / False)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "away_team_wins": {"name": "away_team_wins", "description": "Cumulative number of wins for the away team for the given season (wins for the team at that point in time)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "away_team_losses": {"name": "away_team_losses", "description": "Cumulative number of losses for the away team for the given season (losses for the team at that point in time)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "away_team_ot": {"name": "away_team_ot", "description": "Cumulative number of overtime wins for the away team for the given season (overtime wins for the team at that point in time)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "away_team_type": {"name": "away_team_type", "description": "Type of away team (e.g. League)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "away_team_score": {"name": "away_team_score", "description": "Goals scored by the away team", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "away_team_name": {"name": "away_team_name", "description": "Away team name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "away_team_url": {"name": "away_team_url", "description": "Away team URL endpoint", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_team_wins": {"name": "home_team_wins", "description": "Cumulative number of wins for the home team for the given season (wins for the team at that point in time)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_team_losses": {"name": "home_team_losses", "description": "Cumulative number of losses for the home team for the given season (losses for the team at that point in time)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_team_ot": {"name": "home_team_ot", "description": "Cumulative number of overtime wins for the home team for the given season (overtime wins for the team at that point in time)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_team_type": {"name": "home_team_type", "description": "Type of home team (e.g. League)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_team_score": {"name": "home_team_score", "description": "Goals scored by the home team", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_team_name": {"name": "home_team_name", "description": "Home team name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_team_url": {"name": "home_team_url", "description": "Home team URL endpoint", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "venue_name": {"name": "venue_name", "description": "Home team's venue / arena that the teams played in", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "venue_url": {"name": "venue_url", "description": "URL endpoint for the venue", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "content_url": {"name": "content_url", "description": "URL endpoint for the content", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "url": {"name": "url", "description": "URL endpoint for schedule", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "extracted_at": {"name": "extracted_at", "description": "Timestamp that the data was retrieved", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "loaded_at": {"name": "loaded_at", "description": "Timestamp that the data was loaded", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "nhl_data://models/staging/stg_nhl__schedule.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "staging"}, "created_at": 1695581342.6298723, "relation_name": "`nhl-breakouts`.`github`.`stg_nhl__schedule`", "raw_code": "with\n\ndeduped as (\n    select * from {{ source('meltano', 'schedule') }}\n    qualify row_number() over (\n        partition by\n            gamepk\n            , season\n    ) = 1\n)\n\nselect distinct\n    /* Primary Key */\n    {{ dbt_utils.surrogate_key(['gamepk', 'season']) }} as stg_nhl__schedule_id\n\n    /* Identifiers */\n    , gamepk as game_id\n    , season as season_id\n    , teams.away.team.id as away_team_id\n    , teams.home.team.id as home_team_id\n    , venue.id as venue_id\n\n    /* Properties */\n    , substr(cast(gamepk as string), 7, 4) as game_number\n    , substr(cast(gamepk as string), 5, 2) as game_type\n    , case\n        when substr(cast(gamepk as string), 5, 2) = '01' then 'Preseason'\n        when substr(cast(gamepk as string), 5, 2) = '02' then 'Regular'\n        when substr(cast(gamepk as string), 5, 2) = '03' then 'Playoffs'\n        when substr(cast(gamepk as string), 5, 2) = '04' then 'All-star'\n        else 'Unknown'\n    end as game_type_description\n    , date(gamedate) as game_date\n    , status.abstractgamestate as abstract_game_state\n    , status.codedgamestate as coded_game_state\n    , status.detailedstate as detailed_state\n    , status.statuscode as status_code\n    , status.starttimetbd as is_start_time_tbd\n    , teams.away.leaguerecord.wins as away_team_wins\n    , teams.away.leaguerecord.losses as away_team_losses\n    , teams.away.leaguerecord.ot as away_team_ot\n    , teams.away.leaguerecord.type as away_team_type\n    , teams.away.score as away_team_score\n    , teams.away.team.name as away_team_name\n    , teams.away.team.link as away_team_url\n    , teams.home.leaguerecord.wins as home_team_wins\n    , teams.home.leaguerecord.losses as home_team_losses\n    , teams.home.leaguerecord.ot as home_team_ot\n    , teams.home.leaguerecord.type as home_team_type\n    , teams.home.score as home_team_score\n    , teams.home.team.name as home_team_name\n    , teams.home.team.link as home_team_url\n    , venue.name as venue_name\n    , venue.link as venue_url\n    , content.link as content_url\n    , link as url\n    , _time_extracted as extracted_at\n    , _time_loaded as loaded_at\nfrom deduped\n\n{% if not use_full_dataset() %}\nlimit 1000\n{% endif %}", "language": "sql", "refs": [], "sources": [["meltano", "schedule"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.surrogate_key", "macro.nhl_data.use_full_dataset"], "nodes": ["source.nhl_data.meltano.schedule"]}, "compiled_path": "target/compiled/nhl_data/models/staging/stg_nhl__schedule.sql", "compiled": true, "compiled_code": "with\n\ndeduped as (\n    select * from `nhl-breakouts`.`raw`.`schedule`\n    qualify row_number() over (\n        partition by\n            gamepk\n            , season\n    ) = 1\n)\n\nselect distinct\n    /* Primary Key */\n    to_hex(md5(cast(coalesce(cast(gamepk as \n    string\n), '') || '-' || coalesce(cast(season as \n    string\n), '') as \n    string\n))) as stg_nhl__schedule_id\n\n    /* Identifiers */\n    , gamepk as game_id\n    , season as season_id\n    , teams.away.team.id as away_team_id\n    , teams.home.team.id as home_team_id\n    , venue.id as venue_id\n\n    /* Properties */\n    , substr(cast(gamepk as string), 7, 4) as game_number\n    , substr(cast(gamepk as string), 5, 2) as game_type\n    , case\n        when substr(cast(gamepk as string), 5, 2) = '01' then 'Preseason'\n        when substr(cast(gamepk as string), 5, 2) = '02' then 'Regular'\n        when substr(cast(gamepk as string), 5, 2) = '03' then 'Playoffs'\n        when substr(cast(gamepk as string), 5, 2) = '04' then 'All-star'\n        else 'Unknown'\n    end as game_type_description\n    , date(gamedate) as game_date\n    , status.abstractgamestate as abstract_game_state\n    , status.codedgamestate as coded_game_state\n    , status.detailedstate as detailed_state\n    , status.statuscode as status_code\n    , status.starttimetbd as is_start_time_tbd\n    , teams.away.leaguerecord.wins as away_team_wins\n    , teams.away.leaguerecord.losses as away_team_losses\n    , teams.away.leaguerecord.ot as away_team_ot\n    , teams.away.leaguerecord.type as away_team_type\n    , teams.away.score as away_team_score\n    , teams.away.team.name as away_team_name\n    , teams.away.team.link as away_team_url\n    , teams.home.leaguerecord.wins as home_team_wins\n    , teams.home.leaguerecord.losses as home_team_losses\n    , teams.home.leaguerecord.ot as home_team_ot\n    , teams.home.leaguerecord.type as home_team_type\n    , teams.home.score as home_team_score\n    , teams.home.team.name as home_team_name\n    , teams.home.team.link as home_team_url\n    , venue.name as venue_name\n    , venue.link as venue_url\n    , content.link as content_url\n    , link as url\n    , _time_extracted as extracted_at\n    , _time_loaded as loaded_at\nfrom deduped\n\n\nlimit 1000\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.nhl_data.stg_nhl__divisions": {"database": "nhl-breakouts", "schema": "github", "name": "stg_nhl__divisions", "resource_type": "model", "package_name": "nhl_data", "path": "staging/stg_nhl__divisions.sql", "original_file_path": "models/staging/stg_nhl__divisions.sql", "unique_id": "model.nhl_data.stg_nhl__divisions", "fqn": ["nhl_data", "staging", "stg_nhl__divisions"], "alias": "stg_nhl__divisions", "checksum": {"name": "sha256", "checksum": "c353cac0dd32a88846540e6429212e4065d49067ff1fd1f9e8b09ec005582fc7"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Staged NHL division data from the NHL-API", "columns": {"stg_nhl__divisions_id": {"name": "stg_nhl__divisions_id", "description": "Unique surrogate key for NHL divisions", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "division_id": {"name": "division_id", "description": "Unique identifier for NHL divisions", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "conference_id": {"name": "conference_id", "description": "Foreign key that maps to the NHL conference", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "division_name": {"name": "division_name", "description": "Name of the NHL division", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "division_short_name": {"name": "division_short_name", "description": "Short name for the NHL division", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "division_url": {"name": "division_url", "description": "URL endpoint", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "division_abbreviation": {"name": "division_abbreviation", "description": "Abbreviated NHL conference name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_active": {"name": "is_active", "description": "Whether or not the conference is still active", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "nhl_data://models/staging/stg_nhl__divisions.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "staging"}, "created_at": 1695581342.555104, "relation_name": "`nhl-breakouts`.`github`.`stg_nhl__divisions`", "raw_code": "select\n    /* Primary Key */\n    {{ dbt_utils.surrogate_key(['divisions.id']) }} as stg_nhl__divisions_id\n\n    /* Identifiers */\n    , divisions.id as division_id\n    , divisions.conference.id as conference_id\n\n    /* Properties */\n    , divisions.name as division_name\n    , divisions.nameshort as division_short_name\n    , divisions.link as division_url\n    , divisions.abbreviation as division_abbreviation\n    , divisions.active as is_active\n\nfrom {{ source('meltano', 'divisions') }} as divisions\n\n{% if not use_full_dataset() %}\nlimit 1000\n{% endif %}", "language": "sql", "refs": [], "sources": [["meltano", "divisions"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.surrogate_key", "macro.nhl_data.use_full_dataset"], "nodes": ["source.nhl_data.meltano.divisions"]}, "compiled_path": "target/compiled/nhl_data/models/staging/stg_nhl__divisions.sql", "compiled": true, "compiled_code": "select\n    /* Primary Key */\n    to_hex(md5(cast(coalesce(cast(divisions.id as \n    string\n), '') as \n    string\n))) as stg_nhl__divisions_id\n\n    /* Identifiers */\n    , divisions.id as division_id\n    , divisions.conference.id as conference_id\n\n    /* Properties */\n    , divisions.name as division_name\n    , divisions.nameshort as division_short_name\n    , divisions.link as division_url\n    , divisions.abbreviation as division_abbreviation\n    , divisions.active as is_active\n\nfrom `nhl-breakouts`.`raw`.`divisions` as divisions\n\n\nlimit 1000\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.nhl_data.stg_nhl__boxscore": {"database": "nhl-breakouts", "schema": "github", "name": "stg_nhl__boxscore", "resource_type": "model", "package_name": "nhl_data", "path": "staging/stg_nhl__boxscore.sql", "original_file_path": "models/staging/stg_nhl__boxscore.sql", "unique_id": "model.nhl_data.stg_nhl__boxscore", "fqn": ["nhl_data", "staging", "stg_nhl__boxscore"], "alias": "stg_nhl__boxscore", "checksum": {"name": "sha256", "checksum": "cb1d918c8adbb405b54a669d6883e516ec38e4fca0e88af4a159b6681e107f90"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Staged NHL linescore data from the NHL-API. Contains summarized stats of the teams involved at the game level.\n", "columns": {"stg_nhl__boxscore_id": {"name": "stg_nhl__boxscore_id", "description": "Unique surrogate key for a player's summarized activity in an NHL game (game_id + team_id + player_id)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "game_id": {"name": "game_id", "description": "Foreign key that maps to an NHL game\n##### More about game_id\nThe first 4 digits identify the season of the game (ie. 2017 for the 2017-2018 season). The next 2 digits give the type of game, where 01 = preseason, 02 = regular season, 03 = playoffs, 04 = all-star. The final 4 digits identify the specific game number.\n\nFor regular season and preseason games, this ranges from 0001 to the number of games played. (1271 for seasons with 31 teams (2017 and onwards) and 1230 for seasons with 30 teams).\n\nFor playoff games, the 2nd digit of the specific number gives the round of the playoffs, the 3rd digit specifies the matchup, and the 4th digit specifies the game (out of 7).\n\n[Credit to Drew Hynes' NHL API docs](https://gitlab.com/dword4/nhlapi/-/blob/master/stats-api.md#game-ids)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "team_id": {"name": "team_id", "description": "Identifier for the team, foreign key to stg_nhl__teams", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "player_id": {"name": "player_id", "description": "Identifier for the player, foreign key to stg_nhl__players", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "team_type": {"name": "team_type", "description": "Describes the Away / Home status for each team playing in a game", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "team_name": {"name": "team_name", "description": "Team name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "team_blocked": {"name": "team_blocked", "description": "Total team shots blocked", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "team_faceoff_percentage": {"name": "team_faceoff_percentage", "description": "Team faceoff percentage", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "team_giveaways": {"name": "team_giveaways", "description": "Total team giveaways", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "team_goals": {"name": "team_goals", "description": "Total team goals", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "team_hits": {"name": "team_hits", "description": "Total team hits", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "team_pim": {"name": "team_pim", "description": "Total team penalty infraction minutes", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "team_powerplay_goals": {"name": "team_powerplay_goals", "description": "Total team powerplay goals", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "team_powerplay_opportunities": {"name": "team_powerplay_opportunities", "description": "Total team powerplay opportunities", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "team_shots": {"name": "team_shots", "description": "Total team shots", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "team_takeaways": {"name": "team_takeaways", "description": "Total team takeaways", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "team_scratches": {"name": "team_scratches", "description": "Total team scratches", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "player_full_name": {"name": "player_full_name", "description": "Full name of the NHL player", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "player_roster_status": {"name": "player_roster_status", "description": "Roster status of the NHL player (e.g. Y, N, I)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "player_position_code": {"name": "player_position_code", "description": "Position code (e.g. C, LW, D)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "assists": {"name": "assists", "description": "Number of assists (primary & secondary)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "blocked": {"name": "blocked", "description": "Number of blocked shots", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "decision": {"name": "decision", "description": "Win (W) or Loss (L) for goalies only (NULL if player)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "even_saves": {"name": "even_saves", "description": "Number of saves made at even strength", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "even_shots_against": {"name": "even_shots_against", "description": "Number of shots against at even strength", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "even_strength_save_percentage": {"name": "even_strength_save_percentage", "description": "Percentage of shots faced at even strength that were saved (100% * (Number of shots saved / Number of shots))", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "even_time_on_ice": {"name": "even_time_on_ice", "description": "Time on ice in minutes:seconds at event-strength (5v5)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "faceoff_taken": {"name": "faceoff_taken", "description": "Number of faceoffs taken", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "faceoff_wins": {"name": "faceoff_wins", "description": "Number of faceoffs won", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "giveaways": {"name": "giveaways", "description": "Number of giveaways faulted for", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "goals": {"name": "goals", "description": "Number of goals scored", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hits": {"name": "hits", "description": "Number of hits made", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "penalty_minutes": {"name": "penalty_minutes", "description": "Number of penalties taken in minutes", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pim": {"name": "pim", "description": "Penalties in minutes:seconds", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "plus_minus": {"name": "plus_minus", "description": "Total plus minus in the game - plus for every goal scored while on the ice for, minus for every goal allowed while on the ice", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "powerplay_assists": {"name": "powerplay_assists", "description": "Number of powerplay assists (primary & secondary)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "powerplay_goals": {"name": "powerplay_goals", "description": "Number of powerplay goals scored", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "powerplay_save_percentage": {"name": "powerplay_save_percentage", "description": "Percentage of shots faced on the powerplay that were saved (100% * (Number of shots saved / Number of shots))", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "powerplay_saves": {"name": "powerplay_saves", "description": "Number of saves made on the powerplay", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "powerplay_shots_against": {"name": "powerplay_shots_against", "description": "Number of shots against on the powerplay / mad advantage", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "powerplay_time_on_ice": {"name": "powerplay_time_on_ice", "description": "Time on ice in minutes:seconds on the man advantage / powerplay (5v4, 5v3, or 4v3)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "save_percentage": {"name": "save_percentage", "description": "Percentage of shots faced that were saved (100% * (Number of shots saved / Number of shots))", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "saves": {"name": "saves", "description": "Number of saves made", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "short_handed_assists": {"name": "short_handed_assists", "description": "Number of short-handed assists made", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "short_handed_goals": {"name": "short_handed_goals", "description": "Number of short-handed goals scored", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "short_handed_saves": {"name": "short_handed_saves", "description": "Number of saves made on the penalty kill / short-handed", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "short_handed_shots_against": {"name": "short_handed_shots_against", "description": "Number of shots against on the penalth kill / short-handed", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "short_handed_time_on_ice": {"name": "short_handed_time_on_ice", "description": "Time on ice in minutes:seconds while short-handed / on the penalty kill (4v5, 3v5, or 3v4)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shots": {"name": "shots", "description": "Number of shots taken", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "takeaways": {"name": "takeaways", "description": "Number of takeaways made", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "time_on_ice": {"name": "time_on_ice", "description": "Time on ice in minutes:seconds (e.g. 21:30)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "nhl_data://models/staging/stg_nhl__boxscore.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "staging"}, "created_at": 1695581342.4639955, "relation_name": "`nhl-breakouts`.`github`.`stg_nhl__boxscore`", "raw_code": "with\n\ndeduped as (\n    select * from {{ source('meltano', 'live_boxscore') }}\n    qualify row_number() over ( -- deduplicate gameids that were ingested more than once\n        partition by\n            gameid\n    ) = 1\n)\n\n, home_boxscore as (\n    select\n    /* Primary Key */\n        {{ dbt_utils.surrogate_key(['gameid', 'teams.home.team.id', 'players.person.id']) }} as stg_nhl__boxscore_id\n\n        /* Foreign Keys */\n        , gameid as game_id\n        , teams.home.team.id as team_id\n        , players.person.id as player_id\n\n        /* Properties */\n        -- Team properties\n        , 'Home' as team_type\n        , teams.home.team.name as team_name\n        , teams.home.teamstats.teamskaterstats.blocked as team_blocked\n        , teams.home.teamstats.teamskaterstats.faceoffwinpercentage as team_faceoff_percentage\n        , teams.home.teamstats.teamskaterstats.giveaways as team_giveaways\n        , teams.home.teamstats.teamskaterstats.goals as team_goals\n        , teams.home.teamstats.teamskaterstats.hits as team_hits\n        , teams.home.teamstats.teamskaterstats.pim as team_pim\n        , teams.home.teamstats.teamskaterstats.powerplaygoals as team_powerplay_goals\n        , teams.home.teamstats.teamskaterstats.powerplayopportunities as team_powerplay_opportunities\n        , teams.home.teamstats.teamskaterstats.shots as team_shots\n        , teams.home.teamstats.teamskaterstats.takeaways as team_takeaways\n        , teams.home.scratches as team_scratches\n        -- Player properties\n        , players.person.fullname as player_full_name\n        , players.person.rosterstatus as player_roster_status\n        , players.position.code as player_position_code\n        , players.stats.playerstats.assists as assists\n        , players.stats.playerstats.blocked as blocked\n        , players.stats.playerstats.decision as decision\n        , players.stats.playerstats.evensaves as even_saves\n        , players.stats.playerstats.evenshotsagainst as even_shots_against\n        , players.stats.playerstats.evenstrengthsavepercentage as even_strength_save_percentage\n        , players.stats.playerstats.eventimeonice as even_time_on_ice\n        , players.stats.playerstats.faceofftaken as faceoff_taken\n        , players.stats.playerstats.faceoffwins as faceoff_wins\n        , players.stats.playerstats.giveaways as giveaways\n        , players.stats.playerstats.goals as goals\n        , players.stats.playerstats.hits as hits\n        , players.stats.playerstats.penaltyminutes as penalty_minutes\n        , players.stats.playerstats.pim as pim\n        , players.stats.playerstats.plusminus as plus_minus\n        , players.stats.playerstats.powerplayassists as powerplay_assists\n        , players.stats.playerstats.powerplaygoals as powerplay_goals\n        , players.stats.playerstats.powerplaysavepercentage as powerplay_save_percentage\n        , players.stats.playerstats.powerplaysaves as powerplay_saves\n        , players.stats.playerstats.powerplayshotsagainst as powerplay_shots_against\n        , players.stats.playerstats.powerplaytimeonice as powerplay_time_on_ice\n        , players.stats.playerstats.savepercentage as save_percentage\n        , players.stats.playerstats.saves as saves\n        , players.stats.playerstats.shorthandedassists as short_handed_assists\n        , players.stats.playerstats.shorthandedgoals as short_handed_goals\n        , players.stats.playerstats.shorthandedsaves as short_handed_saves\n        , players.stats.playerstats.shorthandedshotsagainst as short_handed_shots_against\n        , players.stats.playerstats.shorthandedtimeonice as short_handed_time_on_ice\n        , players.stats.playerstats.shots as shots\n        , players.stats.playerstats.takeaways as takeaways\n        , players.stats.playerstats.timeonice as time_on_ice\n    from deduped\n    , unnest(teams.home.players) as players\n)\n\n, away_boxscore as (\n    select\n    /* Primary Key */\n        {{ dbt_utils.surrogate_key(['gameid', 'teams.away.team.id', 'players.person.id']) }} as stg_nhl__boxscore_id\n\n        /* Foreign Keys */\n        , gameid as game_id\n        , teams.away.team.id as team_id\n        , players.person.id as player_id\n\n        /* Properties */\n        -- Team properties\n        , 'Away' as team_type\n        , teams.away.team.name as team_name\n        , teams.away.teamstats.teamskaterstats.blocked as team_blocked\n        , teams.away.teamstats.teamskaterstats.faceoffwinpercentage as team_faceoff_percentage\n        , teams.away.teamstats.teamskaterstats.giveaways as team_giveaways\n        , teams.away.teamstats.teamskaterstats.goals as team_goals\n        , teams.away.teamstats.teamskaterstats.hits as team_hits\n        , teams.away.teamstats.teamskaterstats.pim as team_pim\n        , teams.away.teamstats.teamskaterstats.powerplaygoals as team_powerplay_goals\n        , teams.away.teamstats.teamskaterstats.powerplayopportunities as team_powerplay_opportunities\n        , teams.away.teamstats.teamskaterstats.shots as team_shots\n        , teams.away.teamstats.teamskaterstats.takeaways as team_takeaways\n        , teams.away.scratches as team_scratches\n        -- Player properties\n        , players.person.fullname as player_full_name\n        , players.person.rosterstatus as player_roster_status\n        , players.position.code as player_position_code\n        , players.stats.playerstats.assists as assists\n        , players.stats.playerstats.blocked as blocked\n        , players.stats.playerstats.decision as decision\n        , players.stats.playerstats.evensaves as even_saves\n        , players.stats.playerstats.evenshotsagainst as even_shots_against\n        , players.stats.playerstats.evenstrengthsavepercentage as even_strength_save_percentage\n        , players.stats.playerstats.eventimeonice as even_time_on_ice\n        , players.stats.playerstats.faceofftaken as faceoff_taken\n        , players.stats.playerstats.faceoffwins as faceoff_wins\n        , players.stats.playerstats.giveaways as giveaways\n        , players.stats.playerstats.goals as goals\n        , players.stats.playerstats.hits as hits\n        , players.stats.playerstats.penaltyminutes as penalty_minutes\n        , players.stats.playerstats.pim as pim\n        , players.stats.playerstats.plusminus as plus_minus\n        , players.stats.playerstats.powerplayassists as powerplay_assists\n        , players.stats.playerstats.powerplaygoals as powerplay_goals\n        , players.stats.playerstats.powerplaysavepercentage as powerplay_save_percentage\n        , players.stats.playerstats.powerplaysaves as powerplay_saves\n        , players.stats.playerstats.powerplayshotsagainst as powerplay_shots_against\n        , players.stats.playerstats.powerplaytimeonice as powerplay_time_on_ice\n        , players.stats.playerstats.savepercentage as save_percentage\n        , players.stats.playerstats.saves as saves\n        , players.stats.playerstats.shorthandedassists as short_handed_assists\n        , players.stats.playerstats.shorthandedgoals as short_handed_goals\n        , players.stats.playerstats.shorthandedsaves as short_handed_saves\n        , players.stats.playerstats.shorthandedshotsagainst as short_handed_shots_against\n        , players.stats.playerstats.shorthandedtimeonice as short_handed_time_on_ice\n        , players.stats.playerstats.shots as shots\n        , players.stats.playerstats.takeaways as takeaways\n        , players.stats.playerstats.timeonice as time_on_ice\n    from deduped\n    , unnest(teams.away.players) as players\n)\n\n, unioned as (\n    select * from home_boxscore\n    union all\n    select * from away_boxscore\n)\n\nselect * from unioned\n\n{% if not use_full_dataset() %}\nlimit 1000\n{% endif %}", "language": "sql", "refs": [], "sources": [["meltano", "live_boxscore"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.surrogate_key", "macro.nhl_data.use_full_dataset"], "nodes": ["source.nhl_data.meltano.live_boxscore"]}, "compiled_path": "target/compiled/nhl_data/models/staging/stg_nhl__boxscore.sql", "compiled": true, "compiled_code": "with\n\ndeduped as (\n    select * from `nhl-breakouts`.`raw`.`live_boxscore`\n    qualify row_number() over ( -- deduplicate gameids that were ingested more than once\n        partition by\n            gameid\n    ) = 1\n)\n\n, home_boxscore as (\n    select\n    /* Primary Key */\n        to_hex(md5(cast(coalesce(cast(gameid as \n    string\n), '') || '-' || coalesce(cast(teams.home.team.id as \n    string\n), '') || '-' || coalesce(cast(players.person.id as \n    string\n), '') as \n    string\n))) as stg_nhl__boxscore_id\n\n        /* Foreign Keys */\n        , gameid as game_id\n        , teams.home.team.id as team_id\n        , players.person.id as player_id\n\n        /* Properties */\n        -- Team properties\n        , 'Home' as team_type\n        , teams.home.team.name as team_name\n        , teams.home.teamstats.teamskaterstats.blocked as team_blocked\n        , teams.home.teamstats.teamskaterstats.faceoffwinpercentage as team_faceoff_percentage\n        , teams.home.teamstats.teamskaterstats.giveaways as team_giveaways\n        , teams.home.teamstats.teamskaterstats.goals as team_goals\n        , teams.home.teamstats.teamskaterstats.hits as team_hits\n        , teams.home.teamstats.teamskaterstats.pim as team_pim\n        , teams.home.teamstats.teamskaterstats.powerplaygoals as team_powerplay_goals\n        , teams.home.teamstats.teamskaterstats.powerplayopportunities as team_powerplay_opportunities\n        , teams.home.teamstats.teamskaterstats.shots as team_shots\n        , teams.home.teamstats.teamskaterstats.takeaways as team_takeaways\n        , teams.home.scratches as team_scratches\n        -- Player properties\n        , players.person.fullname as player_full_name\n        , players.person.rosterstatus as player_roster_status\n        , players.position.code as player_position_code\n        , players.stats.playerstats.assists as assists\n        , players.stats.playerstats.blocked as blocked\n        , players.stats.playerstats.decision as decision\n        , players.stats.playerstats.evensaves as even_saves\n        , players.stats.playerstats.evenshotsagainst as even_shots_against\n        , players.stats.playerstats.evenstrengthsavepercentage as even_strength_save_percentage\n        , players.stats.playerstats.eventimeonice as even_time_on_ice\n        , players.stats.playerstats.faceofftaken as faceoff_taken\n        , players.stats.playerstats.faceoffwins as faceoff_wins\n        , players.stats.playerstats.giveaways as giveaways\n        , players.stats.playerstats.goals as goals\n        , players.stats.playerstats.hits as hits\n        , players.stats.playerstats.penaltyminutes as penalty_minutes\n        , players.stats.playerstats.pim as pim\n        , players.stats.playerstats.plusminus as plus_minus\n        , players.stats.playerstats.powerplayassists as powerplay_assists\n        , players.stats.playerstats.powerplaygoals as powerplay_goals\n        , players.stats.playerstats.powerplaysavepercentage as powerplay_save_percentage\n        , players.stats.playerstats.powerplaysaves as powerplay_saves\n        , players.stats.playerstats.powerplayshotsagainst as powerplay_shots_against\n        , players.stats.playerstats.powerplaytimeonice as powerplay_time_on_ice\n        , players.stats.playerstats.savepercentage as save_percentage\n        , players.stats.playerstats.saves as saves\n        , players.stats.playerstats.shorthandedassists as short_handed_assists\n        , players.stats.playerstats.shorthandedgoals as short_handed_goals\n        , players.stats.playerstats.shorthandedsaves as short_handed_saves\n        , players.stats.playerstats.shorthandedshotsagainst as short_handed_shots_against\n        , players.stats.playerstats.shorthandedtimeonice as short_handed_time_on_ice\n        , players.stats.playerstats.shots as shots\n        , players.stats.playerstats.takeaways as takeaways\n        , players.stats.playerstats.timeonice as time_on_ice\n    from deduped\n    , unnest(teams.home.players) as players\n)\n\n, away_boxscore as (\n    select\n    /* Primary Key */\n        to_hex(md5(cast(coalesce(cast(gameid as \n    string\n), '') || '-' || coalesce(cast(teams.away.team.id as \n    string\n), '') || '-' || coalesce(cast(players.person.id as \n    string\n), '') as \n    string\n))) as stg_nhl__boxscore_id\n\n        /* Foreign Keys */\n        , gameid as game_id\n        , teams.away.team.id as team_id\n        , players.person.id as player_id\n\n        /* Properties */\n        -- Team properties\n        , 'Away' as team_type\n        , teams.away.team.name as team_name\n        , teams.away.teamstats.teamskaterstats.blocked as team_blocked\n        , teams.away.teamstats.teamskaterstats.faceoffwinpercentage as team_faceoff_percentage\n        , teams.away.teamstats.teamskaterstats.giveaways as team_giveaways\n        , teams.away.teamstats.teamskaterstats.goals as team_goals\n        , teams.away.teamstats.teamskaterstats.hits as team_hits\n        , teams.away.teamstats.teamskaterstats.pim as team_pim\n        , teams.away.teamstats.teamskaterstats.powerplaygoals as team_powerplay_goals\n        , teams.away.teamstats.teamskaterstats.powerplayopportunities as team_powerplay_opportunities\n        , teams.away.teamstats.teamskaterstats.shots as team_shots\n        , teams.away.teamstats.teamskaterstats.takeaways as team_takeaways\n        , teams.away.scratches as team_scratches\n        -- Player properties\n        , players.person.fullname as player_full_name\n        , players.person.rosterstatus as player_roster_status\n        , players.position.code as player_position_code\n        , players.stats.playerstats.assists as assists\n        , players.stats.playerstats.blocked as blocked\n        , players.stats.playerstats.decision as decision\n        , players.stats.playerstats.evensaves as even_saves\n        , players.stats.playerstats.evenshotsagainst as even_shots_against\n        , players.stats.playerstats.evenstrengthsavepercentage as even_strength_save_percentage\n        , players.stats.playerstats.eventimeonice as even_time_on_ice\n        , players.stats.playerstats.faceofftaken as faceoff_taken\n        , players.stats.playerstats.faceoffwins as faceoff_wins\n        , players.stats.playerstats.giveaways as giveaways\n        , players.stats.playerstats.goals as goals\n        , players.stats.playerstats.hits as hits\n        , players.stats.playerstats.penaltyminutes as penalty_minutes\n        , players.stats.playerstats.pim as pim\n        , players.stats.playerstats.plusminus as plus_minus\n        , players.stats.playerstats.powerplayassists as powerplay_assists\n        , players.stats.playerstats.powerplaygoals as powerplay_goals\n        , players.stats.playerstats.powerplaysavepercentage as powerplay_save_percentage\n        , players.stats.playerstats.powerplaysaves as powerplay_saves\n        , players.stats.playerstats.powerplayshotsagainst as powerplay_shots_against\n        , players.stats.playerstats.powerplaytimeonice as powerplay_time_on_ice\n        , players.stats.playerstats.savepercentage as save_percentage\n        , players.stats.playerstats.saves as saves\n        , players.stats.playerstats.shorthandedassists as short_handed_assists\n        , players.stats.playerstats.shorthandedgoals as short_handed_goals\n        , players.stats.playerstats.shorthandedsaves as short_handed_saves\n        , players.stats.playerstats.shorthandedshotsagainst as short_handed_shots_against\n        , players.stats.playerstats.shorthandedtimeonice as short_handed_time_on_ice\n        , players.stats.playerstats.shots as shots\n        , players.stats.playerstats.takeaways as takeaways\n        , players.stats.playerstats.timeonice as time_on_ice\n    from deduped\n    , unnest(teams.away.players) as players\n)\n\n, unioned as (\n    select * from home_boxscore\n    union all\n    select * from away_boxscore\n)\n\nselect * from unioned\n\n\nlimit 1000\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.nhl_data.stg_nhl__live_plays": {"database": "nhl-breakouts", "schema": "github", "name": "stg_nhl__live_plays", "resource_type": "model", "package_name": "nhl_data", "path": "staging/stg_nhl__live_plays.sql", "original_file_path": "models/staging/stg_nhl__live_plays.sql", "unique_id": "model.nhl_data.stg_nhl__live_plays", "fqn": ["nhl_data", "staging", "stg_nhl__live_plays"], "alias": "stg_nhl__live_plays", "checksum": {"name": "sha256", "checksum": "43c8d081354fd4329bf1d0b60b7ebb4915b7bb1e003471c5a946323d23903fc5"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Staged NHL event level data from the NHL-API (player-play level)", "columns": {"stg_nhl__live_plays_id": {"name": "stg_nhl__live_plays_id", "description": "Unique surrogate key for a player's event-level activity in an NHL game (game_id + team_id + player_id + event_id)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "game_id": {"name": "game_id", "description": "Foreign key that maps to an NHL game ID\n##### More about game_id\nThe first 4 digits identify the season of the game (ie. 2017 for the 2017-2018 season). The next 2 digits give the type of game, where 01 = preseason, 02 = regular season, 03 = playoffs, 04 = all-star. The final 4 digits identify the specific game number.\n\nFor regular season and preseason games, this ranges from 0001 to the number of games played. (1271 for seasons with 31 teams (2017 and onwards) and 1230 for seasons with 30 teams).\n\nFor playoff games, the 2nd digit of the specific number gives the round of the playoffs, the 3rd digit specifies the matchup, and the 4th digit specifies the game (out of 7).\n\n[Credit to Drew Hynes' NHL API docs](https://gitlab.com/dword4/nhlapi/-/blob/master/stats-api.md#game-ids)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_idx": {"name": "event_idx", "description": "Foreign key that maps to the sequence of the event relative to that game, in ascending order (e.g. 1 = first event, 2 - second event)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_id": {"name": "event_id", "description": "Foreign key that maps to a distinct event ID", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "player_id": {"name": "player_id", "description": "Foreign key that maps to an NHL player ID", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "team_id": {"name": "team_id", "description": "Foreign key that maps to an NHL team ID", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "player_full_name": {"name": "player_full_name", "description": "The player's full name (first name, last name)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "player_index": {"name": "player_index", "description": "The position index of the player following the unnesst ran on live plays", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "player_primary_assist": {"name": "player_primary_assist", "description": "Boolean flag for whether or not the play resulted in the player making a primary assist", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "player_secondary_assist": {"name": "player_secondary_assist", "description": "Boolean flag for whether or not the play resulted in the player making a secondary assist", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "player_role": {"name": "player_role", "description": "The role of the player in context to the event (e.g. Hitter, Hitee, Shooter, Winner, Loser, etc.)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "player_role_team": {"name": "player_role_team", "description": "The home / away status of the player's team", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_code": {"name": "event_code", "description": "Event code that is unique at the game-event level (e.g. PHI8, PHI10)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_type": {"name": "event_type", "description": "Short description of the event type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_secondary_type": {"name": "event_secondary_type", "description": "If the event_type can be further broken down, this field provides a sub-type, else null (e.g. TIP-IN, WRIST SHOT (shot-types), ROUGHING (penalty-types), etc.)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_description": {"name": "event_description", "description": "Long description of the event (repeated for all the player's involved in the event)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_player_role_team": {"name": "last_player_role_team", "description": "The home / away status of the player's team from the previous (most recent) play", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_play_event_type": {"name": "last_play_event_type", "description": "Short description of the previous play's event type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_play_event_secondary_type": {"name": "last_play_event_secondary_type", "description": "If the previous play's event_type can be further broken down, this field provides a sub-type, else null (e.g. TIP-IN, WRIST SHOT (shot-types), ROUGHING (penalty-types), etc.)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_play_event_description": {"name": "last_play_event_description", "description": "Long description of the previous play's event (repeated for all the player's involved in the event)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_play_period": {"name": "last_play_period", "description": "The period in which the previous play's event occured (e.g. 3)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "penalty_severity": {"name": "penalty_severity", "description": "If the play in question was a penalty, this column will describe its severity (e.g. MINOR, MAJOR), else null", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "penalty_minutes": {"name": "penalty_minutes", "description": "If the play in question was a penalty, this column will return the number of minutes the penalty was assessed for, else null", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "play_x_coordinate": {"name": "play_x_coordinate", "description": "The x-coordinate of where the event took place on the ice, between -100 and 100", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "play_y_coordinate": {"name": "play_y_coordinate", "description": "The y-coordinate of where the event took place on the ice, between -42.5 and 42.5", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "play_period": {"name": "play_period", "description": "The period in which the event occured (e.g. 3)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "play_period_type": {"name": "play_period_type", "description": "The type of period in which the event occured (e.g. Regular)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "play_period_time_elapsed": {"name": "play_period_time_elapsed", "description": "The time in minutes elapsed in the period", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "play_period_time_remaining": {"name": "play_period_time_remaining", "description": "The time in minutes remaining in the period", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "play_total_seconds_elapsed": {"name": "play_total_seconds_elapsed", "description": "The time in seconds elapsed in the entire game", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "play_time": {"name": "play_time", "description": "A timestamp of the event (e.g. 2021-01-13T22:32:45Z)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shots_away": {"name": "shots_away", "description": "Cumulative away team shots taken in the game at the point in time where the event occured", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shots_home": {"name": "shots_home", "description": "Cumulative ome team shots taken in the game at the point in time where the event occured", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hits_away": {"name": "hits_away", "description": "Cumulative away team hits made in the game at the point in time where the event occured", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hits_home": {"name": "hits_home", "description": "Cumulative home team hits made in the game at the point in time where the event occured", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "faceoffs_away": {"name": "faceoffs_away", "description": "Cumulative away team faceoffs won in the game at the point in time where the event occured", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "faceoffs_home": {"name": "faceoffs_home", "description": "Cumulative home team faceoffs won in the game at the point in time where the event occured", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "takeaways_away": {"name": "takeaways_away", "description": "Cumulative away team takeaways forced in the game at the point in time where the event occured", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "takeaways_home": {"name": "takeaways_home", "description": "Cumulative home team takeaways forced in the game at the point in time where the event occured", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "giveaways_away": {"name": "giveaways_away", "description": "Cumulative away team giveaways made in the game at the point in time where the event occured", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "giveaways_home": {"name": "giveaways_home", "description": "Cumulative home team giveaways made in the game at the point in time where the event occured", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "missedshots_away": {"name": "missedshots_away", "description": "Cumulative away team missed shots taken in the game at the point in time where the event occured", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "missedshots_home": {"name": "missedshots_home", "description": "Cumulative home team missed shots taken in the game at the point in time where the event occured", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "blockedshots_away": {"name": "blockedshots_away", "description": "Cumulative away team blocked shots made in the game at the point in time where the event occured", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "blockedshots_home": {"name": "blockedshots_home", "description": "Cumulative home team blocked shots made in the game at the point in time where the event occured", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "penalties_away": {"name": "penalties_away", "description": "Cumulative away team penalties in minutes taken in the game at the point in time where the event occured", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "penalties_home": {"name": "penalties_home", "description": "Cumulative home team penalties in minutes taken in the game at the point in time where the event occured", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "first_goal_scored": {"name": "first_goal_scored", "description": "Whether or not the event in question was the first goal of the game (1 or 0)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_goal_scored": {"name": "last_goal_scored", "description": "Whether or not the event in question was the last goal of the game (1 or 0)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "goals_away": {"name": "goals_away", "description": "Cumulative away team goals scored in the game at the point in time where the event occured", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "goals_home": {"name": "goals_home", "description": "Cumulative home team goals scored in the game at the point in time where the event occured", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "goal_difference_current": {"name": "goal_difference_current", "description": "The absolute value difference in goals between the home and away teams in the game at the point in time where the event occured", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "winning_team_current": {"name": "winning_team_current", "description": "The name of the team_type (e.g. \"Tie\", \"Home\" or \"Away\") for the team currently winning", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "game_state_current": {"name": "game_state_current", "description": "The current state of scoreboard (e.g. \"Tie\", \"Close\" (1 goal difference), \"Buffer\" (2 goal difference), \"Comfortable\" (3 goal difference), \"Blowout\" (4 goal difference))", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_result_of_play": {"name": "home_result_of_play", "description": "Description of the result of the current event / play for the home team (e.g. \"No change\", \"Chase goal\", \"Tying goal scored\", \"Tying goal allowed\", \"Go-ahead goal scored, Buffer goal\", \"Go-ahead goal allowed\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "away_result_of_play": {"name": "away_result_of_play", "description": "Description of the result of the current event / play for the away team (e.g. \"No change\", \"Chase goal\", \"Tying goal scored\", \"Tying goal allowed\", \"Go-ahead goal scored, Buffer goal\", \"Go-ahead goal allowed\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_goal_game_winning": {"name": "last_goal_game_winning", "description": "Whether or not the the current goal was the last goal and also the game winning goal (1 or 0)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_goal_game_tying": {"name": "last_goal_game_tying", "description": "Whether or not the the current goal was the last goal and also the game tying goal (1 or 0)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "goals_home_lag": {"name": "goals_home_lag", "description": "Cumulative home team goals scored in the game 1 play before the current play (e.g. if event prior to this event was a home team goal, and the current play was a hit, then the value for this column would be 1)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "goals_away_lag": {"name": "goals_away_lag", "description": "Cumulative away team goals scored in the game 1 play before the current play (e.g. if event prior to this event was a away team goal, and the current play was a hit, then the value for this column would be 1)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "goal_difference_lag": {"name": "goal_difference_lag", "description": "The absolute value difference in goals between the home and away teams in the game using the home and away team lagged goals scored", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "winning_team_lag": {"name": "winning_team_lag", "description": "Determines the previously winning team (e.g. \"Tie\", \"Home\" or \"Away\") before the play in question", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "game_state_lag": {"name": "game_state_lag", "description": "The previous state of scoreboard prior to the play in question (e.g. \"Tie\", \"Close\" (1 goal difference), \"Buffer\" (2 goal difference), \"Comfortable\" (3 goal difference), \"Blowout\" (4 goal difference))", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_shot_event_idx": {"name": "last_shot_event_idx", "description": "Looks back to the last (previous) shot, returns the event sequence (e.g. 1 = first event, 2 = second event)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_shot_team_id": {"name": "last_shot_team_id", "description": "Looks back to the last (previous) shot, returns the team_id for the shoot", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_shot_period": {"name": "last_shot_period", "description": "Looks back to the last (previous) shot, returns the period", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_shot_total_seconds_elapsed": {"name": "last_shot_total_seconds_elapsed", "description": "Looks back to the last (previous) shot, returns the total seconds elapsed", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_shot_event_type": {"name": "last_shot_event_type", "description": "Looks back to the last (previous) shot, returns the event type (e.g. 'GOAL', 'MISSED_SHOT', 'SHOT', 'GOAL')", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_shot_event_secondary_type": {"name": "last_shot_event_secondary_type", "description": "Looks back to the last (previous) shot, returns the event_secondary_type (e.g. basically, shot type)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_shot_x_coordinate": {"name": "last_shot_x_coordinate", "description": "Looks back to the last (previous) shot, returns the x_coordinate", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_shot_y_coordinate": {"name": "last_shot_y_coordinate", "description": "Looks back to the last (previous) shot, returns the y_coordinate", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_shot_saved_shot_ind": {"name": "last_shot_saved_shot_ind", "description": "Looks back to the last (previous) shot, returns a '1' if the shot was taken by same team, in the same period, and was on target but did not result in a goal", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "nhl_data://models/staging/stg_nhl__live_plays.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "staging"}, "created_at": 1695581342.413673, "relation_name": "`nhl-breakouts`.`github`.`stg_nhl__live_plays`", "raw_code": "with\n\n-- #cte1: load in live_plays\nlive_plays as (\n    select * from {{ source('meltano', 'live_plays') }}\n)\n\n-- #cte2: Play-level information (each row is a player's involvement in a play)\n, base_plays as (\n    select\n        {{ dbt_utils.surrogate_key(['live_plays.gameid', 'live_plays.about.eventidx', 'players.player.id', 'players.playertype']) }} as stg_nhl__live_plays_id\n        , live_plays.gameid as game_id\n        , live_plays.about.eventid as event_id\n        , players.player.id as player_id\n        , players.player.fullname as player_full_name\n        , offset as player_index -- noqa: disable=L027\n        , boxscore_player.team_id as team_id -- noqa: enable=L027\n        , upper(players.playertype) as player_role\n        , upper(live_plays.result.secondarytype) as event_secondary_type\n        , upper(live_plays.result.penaltyseverity) as penalty_severity\n        , live_plays.result.penaltyminutes as penalty_minutes\n        -- Was the play/player in question home or away?\n        , case\n            when live_plays.team.id = schedule.away_team_id\n                then 'AWAY'\n            else 'HOME'\n        end as player_role_team\n        -- Get mins elapsed, carrying over the period\n        , case\n            when lower(live_plays.about.periodtype) != 'shootout'\n                then cast((substr(live_plays.about.periodtime, 0, 2)) as int64) + (20 * (cast(live_plays.about.period as int64) - 1))\n        end as play_minutes_elapsed\n        -- Get seconds elapsed,do not carry over the period\n        , case\n            when lower(live_plays.about.periodtype) != 'shootout'\n                then cast((substr(live_plays.about.periodtime, 4, 2)) as int64)\n        end as play_seconds_elapsed\n        , live_plays.about.eventidx as event_idx\n        , live_plays.result.eventtypeid as event_type\n        , live_plays.result.eventcode as event_code\n        , live_plays.result.description as event_description\n        , live_plays.coordinates.x as play_x_coordinate\n        , live_plays.coordinates.y as play_y_coordinate\n        , live_plays.about.period as play_period\n        , live_plays.about.periodtype as play_period_type\n        , live_plays.about.periodtime as play_period_time_elapsed\n        , live_plays.about.periodtimeremaining as play_period_time_remaining\n        , live_plays.about.datetime as play_time\n        -- BEGIN CUMULATIVE COUNTERS BY HOME/AWAY\n        -- SHOTS\n        , case\n            when\n                live_plays.result.eventtypeid in ('SHOT', 'GOAL')\n                and live_plays.team.id = schedule.away_team_id\n                and upper(players.playertype) = 'GOALIE'\n                then 1\n            else 0\n        end as shot_away\n        , case\n            when\n                live_plays.result.eventtypeid in ('SHOT', 'GOAL')\n                and live_plays.team.id = schedule.home_team_id\n                and upper(players.playertype) = 'GOALIE'\n                then 1\n            else 0\n        end as shot_home\n        -- HITS\n        , case\n            when\n                live_plays.result.eventtypeid in ('HIT')\n                and live_plays.team.id = schedule.away_team_id\n                and upper(players.playertype) = 'HITTER'\n                then 1\n            else 0\n        end as hit_away\n        , case\n            when\n                live_plays.result.eventtypeid in ('HIT')\n                and live_plays.team.id = schedule.home_team_id\n                and upper(players.playertype) = 'HITTER'\n                then 1\n            else 0\n        end as hit_home\n        -- FACEOFFS\n        , case\n            when\n                live_plays.result.eventtypeid in ('FACEOFF')\n                and live_plays.team.id = schedule.away_team_id\n                and upper(players.playertype) = 'WINNER'\n                then 1\n            else 0\n        end as faceoff_away\n        , case\n            when\n                live_plays.result.eventtypeid in ('FACEOFF')\n                and live_plays.team.id = schedule.home_team_id\n                and upper(players.playertype) = 'WINNER'\n                then 1\n            else 0\n        end as faceoff_home\n        -- TAKEAWAYS\n        , case\n            when\n                live_plays.result.eventtypeid in ('TAKEAWAY')\n                and live_plays.team.id = schedule.away_team_id\n                and upper(players.playertype) = 'PLAYERID'\n                then 1\n            else 0\n        end as takeaway_away\n        , case\n            when\n                live_plays.result.eventtypeid in ('TAKEAWAY')\n                and live_plays.team.id = schedule.home_team_id\n                and upper(players.playertype) = 'PLAYERID'\n                then 1\n            else 0\n        end as takeaway_home\n        -- GIVEAWAY\n        , case\n            when\n                live_plays.result.eventtypeid in ('GIVEAWAY')\n                and live_plays.team.id = schedule.away_team_id\n                and upper(players.playertype) = 'PLAYERID'\n                then 1\n            else 0\n        end as giveaway_away\n        , case\n            when\n                live_plays.result.eventtypeid in ('GIVEAWAY')\n                and live_plays.team.id = schedule.home_team_id\n                and upper(players.playertype) = 'PLAYERID'\n                then 1\n            else 0\n        end as giveaway_home\n        -- MISSED SHOT\n        , case\n            when\n                live_plays.result.eventtypeid in ('MISSED_SHOT')\n                and live_plays.team.id = schedule.away_team_id\n                and upper(players.playertype) = 'SHOOTER'\n                then 1\n            else 0\n        end as missedshot_away\n        , case\n            when\n                live_plays.result.eventtypeid in ('MISSED_SHOT')\n                and live_plays.team.id = schedule.home_team_id\n                and upper(players.playertype) = 'SHOOTER'\n                then 1\n            else 0\n        end as missedshot_home\n        -- BLOCKED SHOT\n        , case\n            when\n                live_plays.result.eventtypeid in ('BLOCKED_SHOT')\n                and live_plays.team.id = schedule.away_team_id\n                and upper(players.playertype) = 'SHOOTER'\n                then 1\n            else 0\n        end as blockedshot_away\n        , case\n            when\n                live_plays.result.eventtypeid in ('BLOCKED_SHOT')\n                and live_plays.team.id = schedule.home_team_id\n                and upper(players.playertype) = 'SHOOTER'\n                then 1\n            else 0\n        end as blockedshot_home\n        -- PENALTIES\n        , case\n            when\n                live_plays.result.eventtypeid in ('PENALTY')\n                and live_plays.team.id = schedule.away_team_id\n                and upper(players.playertype) = 'PENALTYON'\n                then 1\n            else 0\n        end as penalty_away\n        , case\n            when\n                live_plays.result.eventtypeid in ('PENALTY')\n                and live_plays.team.id = schedule.home_team_id\n                and upper(players.playertype) = 'PENALTYON'\n                then 1\n            else 0\n        end as penalty_home\n        -- GOALS\n        , live_plays.about.goals.away as goals_away\n        , live_plays.about.goals.home as goals_home\n\n    from live_plays\n    , unnest(live_plays.players) as players with offset\n    left join {{ ref('stg_nhl__schedule') }} as schedule on schedule.game_id = live_plays.gameid\n    left join {{ ref('stg_nhl__boxscore') }} as boxscore_player on boxscore_player.game_id = live_plays.gameid and players.player.id = boxscore_player.player_id\n    qualify row_number() over (\n        partition by\n            live_plays.gameid\n            , live_plays.about.eventidx\n            , players.player.id\n            , players.playertype\n    ) = 1\n)\n\n-- #cte3: Add in cumulative metrics\n, base_plays_cumulative as (\n    select\n        /* Primary Key */\n        bp.stg_nhl__live_plays_id\n\n        /* Identifiers */\n        , bp.game_id\n        , bp.event_idx\n        , bp.event_id\n        , bp.player_id\n        , bp.team_id\n\n        /* Properties */\n        , bp.player_full_name\n        , bp.player_index\n        , upper(bp.player_role) = 'ASSIST' and player_index = 1 as player_primary_assist\n        , upper(bp.player_role) = 'ASSIST' and player_index = 2 as player_secondary_assist\n        , bp.player_role\n        , bp.player_role_team\n        , bp.event_type\n        , bp.event_code\n        , bp.event_description\n        , bp.event_secondary_type\n        , lag(bp.player_role_team) over (partition by game_id order by event_idx) as last_player_role_team\n        , lag(bp.event_type) over (partition by game_id order by event_idx) as last_play_event_type\n        , lag(bp.event_secondary_type) over (partition by game_id order by event_idx) as last_play_event_secondary_type\n        , lag(bp.event_description) over (partition by game_id order by event_idx) as last_play_event_description\n        , ifnull(lag(bp.play_period) over (partition by game_id order by event_idx), play_period) as last_play_period\n        , bp.penalty_severity\n        , bp.penalty_minutes\n        , bp.play_x_coordinate\n        , bp.play_y_coordinate\n        , bp.play_period\n        , bp.play_period_type\n        , bp.play_period_time_elapsed\n        , bp.play_period_time_remaining\n        -- Total seconds elapsed\n        , ((bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) as play_total_seconds_elapsed\n        , bp.play_time\n        -- Count cumulative shot totals\n        , sum(bp.shot_away) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) as shots_away\n        , sum(bp.shot_home) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) as shots_home\n        -- Count hit totals\n        , sum(bp.hit_away) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) as hits_away\n        , sum(bp.hit_home) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) as hits_home\n        -- Count faceoff totals\n        , sum(bp.faceoff_away) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) as faceoffs_away\n        , sum(bp.faceoff_home) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) as faceoffs_home\n        -- Count takeaways totals\n        , sum(bp.takeaway_away) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) as takeaways_away\n        , sum(bp.takeaway_home) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) as takeaways_home\n        -- Count giveaways totals\n        , sum(bp.giveaway_away) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) as giveaways_away\n        , sum(bp.giveaway_home) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) as giveaways_home\n        -- Count missedshot totals\n        , sum(bp.missedshot_away) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) as missedshots_away\n        , sum(bp.missedshot_home) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) as missedshots_home\n        -- Count blockedshot totals\n        , sum(bp.blockedshot_away) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) as blockedshots_away\n        , sum(bp.blockedshot_home) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) as blockedshots_home\n        -- Count penalty totals\n        , sum(bp.penalty_away) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) as penalties_away\n        , sum(bp.penalty_home) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) as penalties_home\n        -- Cumulative goal counts\n        , bp.goals_away\n        , bp.goals_home\n        -- Cumulative goal descriptors (current state)\n        , abs(bp.goals_home - bp.goals_away) as goal_difference_current\n        , case\n            when (bp.goals_home - bp.goals_away) = 0\n                then 'Tie'\n            when (bp.goals_home - bp.goals_away) > 0\n                then 'Home'\n            when (bp.goals_home - bp.goals_away) < 0\n                then 'Away'\n        end as winning_team_current\n        , case\n            when abs(bp.goals_home - bp.goals_away) = 0\n                then 'Tie'\n            when abs(bp.goals_home - bp.goals_away) = 1\n                then 'Close'\n            when abs(bp.goals_home - bp.goals_away) = 2\n                then 'Buffer'\n            when abs(bp.goals_home - bp.goals_away) = 3\n                then 'Comfortable'\n            when abs(bp.goals_home - bp.goals_away) >= 4\n                then 'Blowout'\n        end as game_state_current\n        -- First goal flag\n        , case\n            when min(if(bp.event_type = 'GOAL', bp.event_idx, null)) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed) rows between unbounded preceding and unbounded following) = bp.event_idx\n                then 1\n            else 0\n        end as first_goal_scored\n        -- Last goal flag\n        , case\n            when max(if(bp.event_type = 'GOAL', bp.event_idx, null)) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed) rows between unbounded preceding and unbounded following) = bp.event_idx\n                then 1\n            else 0\n        end as last_goal_scored\n        -- Cumulative goal descriptors (previous state)\n        , case\n            when lag(bp.event_idx, 1) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) != bp.event_idx\n                then lag(bp.goals_home, 1) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed))\n            when lag(bp.event_idx, 2) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) != bp.event_idx\n                then lag(bp.goals_home, 2) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed))\n            when lag(bp.event_idx, 3) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) != bp.event_idx\n                then lag(bp.goals_home, 3) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed))\n            when lag(bp.event_idx, 4) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) != bp.event_idx\n                then lag(bp.goals_home, 4) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed))\n            when lag(bp.event_idx, 5) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) != bp.event_idx\n                then lag(bp.goals_home, 5) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed))\n        end as goals_home_lag\n        , case\n            when lag(bp.event_idx, 1) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) != bp.event_idx\n                then lag(bp.goals_away, 1) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed))\n            when lag(bp.event_idx, 2) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) != bp.event_idx\n                then lag(bp.goals_away, 2) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed))\n            when lag(bp.event_idx, 3) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) != bp.event_idx\n                then lag(bp.goals_away, 3) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed))\n            when lag(bp.event_idx, 4) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) != bp.event_idx\n                then lag(bp.goals_away, 4) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed))\n            when lag(bp.event_idx, 5) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) != bp.event_idx\n                then lag(bp.goals_away, 5) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed))\n        end as goals_away_lag\n\n    from base_plays as bp\n)\n\n-- #cte4: gets the state of the game as a result of the play\n, game_state as (\n    select\n        c.*\n        -- Previous winning team\n        , abs(c.goals_home_lag - c.goals_away_lag) as goal_difference_lag\n        , case\n            when (c.goals_home_lag - c.goals_away_lag) = 0\n                then 'Tie'\n            when (c.goals_home_lag - c.goals_away_lag) > 0\n                then 'Home'\n            when (c.goals_home_lag - c.goals_away_lag) < 0\n                then 'Away'\n        end as winning_team_lag\n        -- Previous game state\n        , case\n            when abs(c.goals_home_lag - c.goals_away_lag) = 0\n                then 'Tie'\n            when abs(c.goals_home_lag - c.goals_away_lag) = 1\n                then 'Close'\n            when abs(c.goals_home_lag - c.goals_away_lag) = 2\n                then 'Buffer'\n            when abs(c.goals_home_lag - c.goals_away_lag) = 3\n                then 'Comfortable'\n            when abs(c.goals_home_lag - c.goals_away_lag) >= 4\n                then 'Blowout'\n        end as game_state_lag\n        -- Home - what was the result of the play on score?\n        , case\n            when c.goal_difference_current = abs(c.goals_home_lag - c.goals_away_lag)\n                then 'No change'\n            when\n                c.goals_home > c.goals_home_lag\n                and c.goals_home < c.goals_away\n                then 'Chase goal'\n            when\n                c.goals_home > c.goals_home_lag\n                and c.goals_home = c.goals_away\n                then 'Tying goal scored'\n            when\n                c.goals_home < c.goals_home_lag\n                and c.goals_home = c.goals_away\n                then 'Tying goal allowed'\n            when\n                c.goals_home > c.goals_home_lag\n                and c.goals_home_lag = c.goals_away_lag\n                and c.goals_home > c.goals_away\n                then 'Go-ahead goal scored'\n            when\n                c.goals_home > c.goals_home_lag\n                and c.goals_home_lag > c.goals_away_lag\n                and c.goals_home > c.goals_away\n                then 'Buffer goal'\n            when\n                c.goals_away > c.goals_away_lag\n                and c.goals_away_lag = c.goals_home_lag\n                and c.goals_away > c.goals_home\n                then 'Go-ahead goal allowed'\n        end as home_result_of_play\n        -- Away - what was the result of the play on score?\n        , case\n            when c.goal_difference_current = abs(c.goals_home_lag - c.goals_away_lag)\n                then 'No change'\n            when\n                c.goals_away > c.goals_away_lag\n                and c.goals_away < c.goals_home\n                then 'Chase goal'\n            when\n                c.goals_away > c.goals_away_lag\n                and c.goals_away = c.goals_home\n                then 'Tying goal scored'\n            when\n                c.goals_home > c.goals_home_lag\n                and c.goals_home = c.goals_away\n                then 'Tying goal allowed'\n            when\n                c.goals_away > c.goals_away_lag\n                and c.goals_away_lag = c.goals_home_lag\n                and c.goals_away > c.goals_home\n                then 'Go-ahead goal scored'\n            when\n                c.goals_away > c.goals_away_lag\n                and c.goals_away_lag > c.goals_home_lag\n                and c.goals_away > c.goals_home\n                then 'Buffer goal'\n            when\n                c.goals_home > c.goals_home_lag\n                and c.goals_home_lag = c.goals_away_lag\n                and c.goals_home > c.goals_away\n                then 'Go-ahead goal allowed'\n        end as away_result_of_play\n        -- Either team - last goal a game winning goal?\n        , case\n            when\n                c.last_goal_scored = 1                       -- last goal\n                and abs(c.goals_away_lag - c.goals_home_lag) = 0  -- game was tied last play\n                and abs(c.goals_away - c.goals_home) != 0         -- game no longer tied\n                then 1\n            else 0\n        end as last_goal_game_winning\n        -- Either team - last goal game tying?\n        -- #TODO this is not working as intended - goals that tied the games go to OT, and so there is 0 game tying goals with this logic\n        , case\n            when\n                c.last_goal_scored = 1                       -- last goal\n                and abs(c.goals_away_lag - c.goals_home_lag) = 1  -- game was within 1 goal last play\n                and abs(c.goals_away - c.goals_home) = 0          -- game now tied\n                then 1\n            else 0\n        end as last_goal_game_tying\n\n    from base_plays_cumulative as c\n\n)\n\n-- #cte5: gets information about the last (previous) shot\n, last_shot as (\n    select\n        stg_nhl__live_plays_id\n        , game_id\n        , event_idx\n        , event_id\n        , player_id\n        , team_id\n        , event_type\n        , event_secondary_type\n        , play_total_seconds_elapsed\n        , play_period\n        -- last_shot properites & metrics\n        , lag(event_type) over (partition by game_id order by event_idx) as last_shot_event_type\n        , lag(event_secondary_type) over (partition by game_id order by event_idx) as last_shot_event_secondary_type\n        , lag(event_idx) over (partition by game_id order by event_idx) as last_shot_event_idx\n        , lag(team_id) over (partition by game_id order by event_idx) as last_shot_team_id\n        , lag(play_total_seconds_elapsed) over (partition by game_id order by event_idx) as last_shot_total_seconds_elapsed\n        , lag(play_period) over (partition by game_id order by event_idx) as last_shot_period\n        , lag(play_x_coordinate) over (partition by game_id order by event_idx) as last_shot_x_coordinate\n        , lag(play_y_coordinate) over (partition by game_id order by event_idx) as last_shot_y_coordinate\n        -- last_shot_saved_shot_ind = shot taken by same team in the same period\n        , case\n            when play_period != lag(play_period) over (partition by game_id order by event_idx)\n                then 0\n            when team_id != lag(team_id) over (partition by game_id order by event_idx)\n                then 0\n            when lower(lag(event_type) over (partition by game_id order by event_idx)) = 'shot'\n                then 1\n        end as last_shot_saved_shot_ind\n    from game_state as gs\n    where 1 = 1\n    --keep blocked shots, missed shots, shots on target and goals\n    and lower(gs.event_type) in ('blocked_shot', 'missed_shot', 'shot', 'goal')\n    -- keep roles involving the shooter & scorer\n    and lower(gs.player_role) in ('shooter', 'scorer')\n)\n\n-- #return: game_state joined with last_shot features\nselect\n    /* Primary Key */\n    gs.stg_nhl__live_plays_id\n\n    /* Identifiers */\n    , gs.game_id\n    , gs.event_idx\n    , gs.event_id\n    , gs.player_id\n    , gs.team_id\n\n    /* Properties */\n    , gs.player_full_name\n    , gs.player_index\n    , gs.player_primary_assist\n    , gs.player_secondary_assist\n    , gs.player_role\n    , gs.player_role_team\n    , gs.event_code\n    , gs.event_type\n    , gs.event_secondary_type\n    , gs.event_description\n    , gs.last_player_role_team\n    , gs.last_play_event_type\n    , gs.last_play_event_secondary_type\n    , gs.last_play_event_description\n    , gs.last_play_period\n    , gs.penalty_severity\n    , gs.penalty_minutes\n    , gs.play_x_coordinate\n    , gs.play_y_coordinate\n    , gs.play_period\n    , gs.play_period_type\n    , gs.play_period_time_elapsed\n    , gs.play_period_time_remaining\n    , gs.play_total_seconds_elapsed\n    , gs.play_time\n    , gs.shots_away\n    , gs.shots_home\n    , gs.hits_away\n    , gs.hits_home\n    , gs.faceoffs_away\n    , gs.faceoffs_home\n    , gs.takeaways_away\n    , gs.takeaways_home\n    , gs.giveaways_away\n    , gs.giveaways_home\n    , gs.missedshots_away\n    , gs.missedshots_home\n    , gs.blockedshots_away\n    , gs.blockedshots_home\n    , gs.penalties_away\n    , gs.penalties_home\n    , gs.first_goal_scored\n    , gs.last_goal_scored\n    , gs.goals_away\n    , gs.goals_home\n    , gs.goal_difference_current\n    , gs.winning_team_current\n    , gs.game_state_current\n    , gs.home_result_of_play\n    , gs.away_result_of_play\n    , gs.last_goal_game_winning\n    , gs.last_goal_game_tying\n    , gs.goals_home_lag\n    , gs.goals_away_lag\n    , gs.goal_difference_lag\n    , gs.winning_team_lag\n    , gs.game_state_lag\n    , ls.last_shot_event_idx\n    , ls.last_shot_team_id\n    , ls.last_shot_period\n    , ls.last_shot_total_seconds_elapsed\n    , ls.last_shot_event_type\n    , ls.last_shot_event_secondary_type\n    , ls.last_shot_x_coordinate\n    , ls.last_shot_y_coordinate\n    , ls.last_shot_saved_shot_ind\n\nfrom game_state as gs\nleft join last_shot as ls on ls.stg_nhl__live_plays_id = gs.stg_nhl__live_plays_id\n\n{% if not use_full_dataset() %}\nlimit 1000\n{% endif %}", "language": "sql", "refs": [{"name": "stg_nhl__schedule", "package": null, "version": null}, {"name": "stg_nhl__boxscore", "package": null, "version": null}], "sources": [["meltano", "live_plays"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.surrogate_key", "macro.nhl_data.use_full_dataset"], "nodes": ["source.nhl_data.meltano.live_plays", "model.nhl_data.stg_nhl__schedule", "model.nhl_data.stg_nhl__boxscore"]}, "compiled_path": "target/compiled/nhl_data/models/staging/stg_nhl__live_plays.sql", "compiled": true, "compiled_code": "with\n\n-- #cte1: load in live_plays\nlive_plays as (\n    select * from `nhl-breakouts`.`raw`.`live_plays`\n)\n\n-- #cte2: Play-level information (each row is a player's involvement in a play)\n, base_plays as (\n    select\n        to_hex(md5(cast(coalesce(cast(live_plays.gameid as \n    string\n), '') || '-' || coalesce(cast(live_plays.about.eventidx as \n    string\n), '') || '-' || coalesce(cast(players.player.id as \n    string\n), '') || '-' || coalesce(cast(players.playertype as \n    string\n), '') as \n    string\n))) as stg_nhl__live_plays_id\n        , live_plays.gameid as game_id\n        , live_plays.about.eventid as event_id\n        , players.player.id as player_id\n        , players.player.fullname as player_full_name\n        , offset as player_index -- noqa: disable=L027\n        , boxscore_player.team_id as team_id -- noqa: enable=L027\n        , upper(players.playertype) as player_role\n        , upper(live_plays.result.secondarytype) as event_secondary_type\n        , upper(live_plays.result.penaltyseverity) as penalty_severity\n        , live_plays.result.penaltyminutes as penalty_minutes\n        -- Was the play/player in question home or away?\n        , case\n            when live_plays.team.id = schedule.away_team_id\n                then 'AWAY'\n            else 'HOME'\n        end as player_role_team\n        -- Get mins elapsed, carrying over the period\n        , case\n            when lower(live_plays.about.periodtype) != 'shootout'\n                then cast((substr(live_plays.about.periodtime, 0, 2)) as int64) + (20 * (cast(live_plays.about.period as int64) - 1))\n        end as play_minutes_elapsed\n        -- Get seconds elapsed,do not carry over the period\n        , case\n            when lower(live_plays.about.periodtype) != 'shootout'\n                then cast((substr(live_plays.about.periodtime, 4, 2)) as int64)\n        end as play_seconds_elapsed\n        , live_plays.about.eventidx as event_idx\n        , live_plays.result.eventtypeid as event_type\n        , live_plays.result.eventcode as event_code\n        , live_plays.result.description as event_description\n        , live_plays.coordinates.x as play_x_coordinate\n        , live_plays.coordinates.y as play_y_coordinate\n        , live_plays.about.period as play_period\n        , live_plays.about.periodtype as play_period_type\n        , live_plays.about.periodtime as play_period_time_elapsed\n        , live_plays.about.periodtimeremaining as play_period_time_remaining\n        , live_plays.about.datetime as play_time\n        -- BEGIN CUMULATIVE COUNTERS BY HOME/AWAY\n        -- SHOTS\n        , case\n            when\n                live_plays.result.eventtypeid in ('SHOT', 'GOAL')\n                and live_plays.team.id = schedule.away_team_id\n                and upper(players.playertype) = 'GOALIE'\n                then 1\n            else 0\n        end as shot_away\n        , case\n            when\n                live_plays.result.eventtypeid in ('SHOT', 'GOAL')\n                and live_plays.team.id = schedule.home_team_id\n                and upper(players.playertype) = 'GOALIE'\n                then 1\n            else 0\n        end as shot_home\n        -- HITS\n        , case\n            when\n                live_plays.result.eventtypeid in ('HIT')\n                and live_plays.team.id = schedule.away_team_id\n                and upper(players.playertype) = 'HITTER'\n                then 1\n            else 0\n        end as hit_away\n        , case\n            when\n                live_plays.result.eventtypeid in ('HIT')\n                and live_plays.team.id = schedule.home_team_id\n                and upper(players.playertype) = 'HITTER'\n                then 1\n            else 0\n        end as hit_home\n        -- FACEOFFS\n        , case\n            when\n                live_plays.result.eventtypeid in ('FACEOFF')\n                and live_plays.team.id = schedule.away_team_id\n                and upper(players.playertype) = 'WINNER'\n                then 1\n            else 0\n        end as faceoff_away\n        , case\n            when\n                live_plays.result.eventtypeid in ('FACEOFF')\n                and live_plays.team.id = schedule.home_team_id\n                and upper(players.playertype) = 'WINNER'\n                then 1\n            else 0\n        end as faceoff_home\n        -- TAKEAWAYS\n        , case\n            when\n                live_plays.result.eventtypeid in ('TAKEAWAY')\n                and live_plays.team.id = schedule.away_team_id\n                and upper(players.playertype) = 'PLAYERID'\n                then 1\n            else 0\n        end as takeaway_away\n        , case\n            when\n                live_plays.result.eventtypeid in ('TAKEAWAY')\n                and live_plays.team.id = schedule.home_team_id\n                and upper(players.playertype) = 'PLAYERID'\n                then 1\n            else 0\n        end as takeaway_home\n        -- GIVEAWAY\n        , case\n            when\n                live_plays.result.eventtypeid in ('GIVEAWAY')\n                and live_plays.team.id = schedule.away_team_id\n                and upper(players.playertype) = 'PLAYERID'\n                then 1\n            else 0\n        end as giveaway_away\n        , case\n            when\n                live_plays.result.eventtypeid in ('GIVEAWAY')\n                and live_plays.team.id = schedule.home_team_id\n                and upper(players.playertype) = 'PLAYERID'\n                then 1\n            else 0\n        end as giveaway_home\n        -- MISSED SHOT\n        , case\n            when\n                live_plays.result.eventtypeid in ('MISSED_SHOT')\n                and live_plays.team.id = schedule.away_team_id\n                and upper(players.playertype) = 'SHOOTER'\n                then 1\n            else 0\n        end as missedshot_away\n        , case\n            when\n                live_plays.result.eventtypeid in ('MISSED_SHOT')\n                and live_plays.team.id = schedule.home_team_id\n                and upper(players.playertype) = 'SHOOTER'\n                then 1\n            else 0\n        end as missedshot_home\n        -- BLOCKED SHOT\n        , case\n            when\n                live_plays.result.eventtypeid in ('BLOCKED_SHOT')\n                and live_plays.team.id = schedule.away_team_id\n                and upper(players.playertype) = 'SHOOTER'\n                then 1\n            else 0\n        end as blockedshot_away\n        , case\n            when\n                live_plays.result.eventtypeid in ('BLOCKED_SHOT')\n                and live_plays.team.id = schedule.home_team_id\n                and upper(players.playertype) = 'SHOOTER'\n                then 1\n            else 0\n        end as blockedshot_home\n        -- PENALTIES\n        , case\n            when\n                live_plays.result.eventtypeid in ('PENALTY')\n                and live_plays.team.id = schedule.away_team_id\n                and upper(players.playertype) = 'PENALTYON'\n                then 1\n            else 0\n        end as penalty_away\n        , case\n            when\n                live_plays.result.eventtypeid in ('PENALTY')\n                and live_plays.team.id = schedule.home_team_id\n                and upper(players.playertype) = 'PENALTYON'\n                then 1\n            else 0\n        end as penalty_home\n        -- GOALS\n        , live_plays.about.goals.away as goals_away\n        , live_plays.about.goals.home as goals_home\n\n    from live_plays\n    , unnest(live_plays.players) as players with offset\n    left join `nhl-breakouts`.`github`.`stg_nhl__schedule` as schedule on schedule.game_id = live_plays.gameid\n    left join `nhl-breakouts`.`github`.`stg_nhl__boxscore` as boxscore_player on boxscore_player.game_id = live_plays.gameid and players.player.id = boxscore_player.player_id\n    qualify row_number() over (\n        partition by\n            live_plays.gameid\n            , live_plays.about.eventidx\n            , players.player.id\n            , players.playertype\n    ) = 1\n)\n\n-- #cte3: Add in cumulative metrics\n, base_plays_cumulative as (\n    select\n        /* Primary Key */\n        bp.stg_nhl__live_plays_id\n\n        /* Identifiers */\n        , bp.game_id\n        , bp.event_idx\n        , bp.event_id\n        , bp.player_id\n        , bp.team_id\n\n        /* Properties */\n        , bp.player_full_name\n        , bp.player_index\n        , upper(bp.player_role) = 'ASSIST' and player_index = 1 as player_primary_assist\n        , upper(bp.player_role) = 'ASSIST' and player_index = 2 as player_secondary_assist\n        , bp.player_role\n        , bp.player_role_team\n        , bp.event_type\n        , bp.event_code\n        , bp.event_description\n        , bp.event_secondary_type\n        , lag(bp.player_role_team) over (partition by game_id order by event_idx) as last_player_role_team\n        , lag(bp.event_type) over (partition by game_id order by event_idx) as last_play_event_type\n        , lag(bp.event_secondary_type) over (partition by game_id order by event_idx) as last_play_event_secondary_type\n        , lag(bp.event_description) over (partition by game_id order by event_idx) as last_play_event_description\n        , ifnull(lag(bp.play_period) over (partition by game_id order by event_idx), play_period) as last_play_period\n        , bp.penalty_severity\n        , bp.penalty_minutes\n        , bp.play_x_coordinate\n        , bp.play_y_coordinate\n        , bp.play_period\n        , bp.play_period_type\n        , bp.play_period_time_elapsed\n        , bp.play_period_time_remaining\n        -- Total seconds elapsed\n        , ((bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) as play_total_seconds_elapsed\n        , bp.play_time\n        -- Count cumulative shot totals\n        , sum(bp.shot_away) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) as shots_away\n        , sum(bp.shot_home) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) as shots_home\n        -- Count hit totals\n        , sum(bp.hit_away) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) as hits_away\n        , sum(bp.hit_home) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) as hits_home\n        -- Count faceoff totals\n        , sum(bp.faceoff_away) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) as faceoffs_away\n        , sum(bp.faceoff_home) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) as faceoffs_home\n        -- Count takeaways totals\n        , sum(bp.takeaway_away) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) as takeaways_away\n        , sum(bp.takeaway_home) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) as takeaways_home\n        -- Count giveaways totals\n        , sum(bp.giveaway_away) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) as giveaways_away\n        , sum(bp.giveaway_home) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) as giveaways_home\n        -- Count missedshot totals\n        , sum(bp.missedshot_away) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) as missedshots_away\n        , sum(bp.missedshot_home) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) as missedshots_home\n        -- Count blockedshot totals\n        , sum(bp.blockedshot_away) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) as blockedshots_away\n        , sum(bp.blockedshot_home) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) as blockedshots_home\n        -- Count penalty totals\n        , sum(bp.penalty_away) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) as penalties_away\n        , sum(bp.penalty_home) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) as penalties_home\n        -- Cumulative goal counts\n        , bp.goals_away\n        , bp.goals_home\n        -- Cumulative goal descriptors (current state)\n        , abs(bp.goals_home - bp.goals_away) as goal_difference_current\n        , case\n            when (bp.goals_home - bp.goals_away) = 0\n                then 'Tie'\n            when (bp.goals_home - bp.goals_away) > 0\n                then 'Home'\n            when (bp.goals_home - bp.goals_away) < 0\n                then 'Away'\n        end as winning_team_current\n        , case\n            when abs(bp.goals_home - bp.goals_away) = 0\n                then 'Tie'\n            when abs(bp.goals_home - bp.goals_away) = 1\n                then 'Close'\n            when abs(bp.goals_home - bp.goals_away) = 2\n                then 'Buffer'\n            when abs(bp.goals_home - bp.goals_away) = 3\n                then 'Comfortable'\n            when abs(bp.goals_home - bp.goals_away) >= 4\n                then 'Blowout'\n        end as game_state_current\n        -- First goal flag\n        , case\n            when min(if(bp.event_type = 'GOAL', bp.event_idx, null)) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed) rows between unbounded preceding and unbounded following) = bp.event_idx\n                then 1\n            else 0\n        end as first_goal_scored\n        -- Last goal flag\n        , case\n            when max(if(bp.event_type = 'GOAL', bp.event_idx, null)) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed) rows between unbounded preceding and unbounded following) = bp.event_idx\n                then 1\n            else 0\n        end as last_goal_scored\n        -- Cumulative goal descriptors (previous state)\n        , case\n            when lag(bp.event_idx, 1) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) != bp.event_idx\n                then lag(bp.goals_home, 1) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed))\n            when lag(bp.event_idx, 2) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) != bp.event_idx\n                then lag(bp.goals_home, 2) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed))\n            when lag(bp.event_idx, 3) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) != bp.event_idx\n                then lag(bp.goals_home, 3) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed))\n            when lag(bp.event_idx, 4) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) != bp.event_idx\n                then lag(bp.goals_home, 4) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed))\n            when lag(bp.event_idx, 5) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) != bp.event_idx\n                then lag(bp.goals_home, 5) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed))\n        end as goals_home_lag\n        , case\n            when lag(bp.event_idx, 1) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) != bp.event_idx\n                then lag(bp.goals_away, 1) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed))\n            when lag(bp.event_idx, 2) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) != bp.event_idx\n                then lag(bp.goals_away, 2) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed))\n            when lag(bp.event_idx, 3) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) != bp.event_idx\n                then lag(bp.goals_away, 3) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed))\n            when lag(bp.event_idx, 4) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) != bp.event_idx\n                then lag(bp.goals_away, 4) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed))\n            when lag(bp.event_idx, 5) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) != bp.event_idx\n                then lag(bp.goals_away, 5) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed))\n        end as goals_away_lag\n\n    from base_plays as bp\n)\n\n-- #cte4: gets the state of the game as a result of the play\n, game_state as (\n    select\n        c.*\n        -- Previous winning team\n        , abs(c.goals_home_lag - c.goals_away_lag) as goal_difference_lag\n        , case\n            when (c.goals_home_lag - c.goals_away_lag) = 0\n                then 'Tie'\n            when (c.goals_home_lag - c.goals_away_lag) > 0\n                then 'Home'\n            when (c.goals_home_lag - c.goals_away_lag) < 0\n                then 'Away'\n        end as winning_team_lag\n        -- Previous game state\n        , case\n            when abs(c.goals_home_lag - c.goals_away_lag) = 0\n                then 'Tie'\n            when abs(c.goals_home_lag - c.goals_away_lag) = 1\n                then 'Close'\n            when abs(c.goals_home_lag - c.goals_away_lag) = 2\n                then 'Buffer'\n            when abs(c.goals_home_lag - c.goals_away_lag) = 3\n                then 'Comfortable'\n            when abs(c.goals_home_lag - c.goals_away_lag) >= 4\n                then 'Blowout'\n        end as game_state_lag\n        -- Home - what was the result of the play on score?\n        , case\n            when c.goal_difference_current = abs(c.goals_home_lag - c.goals_away_lag)\n                then 'No change'\n            when\n                c.goals_home > c.goals_home_lag\n                and c.goals_home < c.goals_away\n                then 'Chase goal'\n            when\n                c.goals_home > c.goals_home_lag\n                and c.goals_home = c.goals_away\n                then 'Tying goal scored'\n            when\n                c.goals_home < c.goals_home_lag\n                and c.goals_home = c.goals_away\n                then 'Tying goal allowed'\n            when\n                c.goals_home > c.goals_home_lag\n                and c.goals_home_lag = c.goals_away_lag\n                and c.goals_home > c.goals_away\n                then 'Go-ahead goal scored'\n            when\n                c.goals_home > c.goals_home_lag\n                and c.goals_home_lag > c.goals_away_lag\n                and c.goals_home > c.goals_away\n                then 'Buffer goal'\n            when\n                c.goals_away > c.goals_away_lag\n                and c.goals_away_lag = c.goals_home_lag\n                and c.goals_away > c.goals_home\n                then 'Go-ahead goal allowed'\n        end as home_result_of_play\n        -- Away - what was the result of the play on score?\n        , case\n            when c.goal_difference_current = abs(c.goals_home_lag - c.goals_away_lag)\n                then 'No change'\n            when\n                c.goals_away > c.goals_away_lag\n                and c.goals_away < c.goals_home\n                then 'Chase goal'\n            when\n                c.goals_away > c.goals_away_lag\n                and c.goals_away = c.goals_home\n                then 'Tying goal scored'\n            when\n                c.goals_home > c.goals_home_lag\n                and c.goals_home = c.goals_away\n                then 'Tying goal allowed'\n            when\n                c.goals_away > c.goals_away_lag\n                and c.goals_away_lag = c.goals_home_lag\n                and c.goals_away > c.goals_home\n                then 'Go-ahead goal scored'\n            when\n                c.goals_away > c.goals_away_lag\n                and c.goals_away_lag > c.goals_home_lag\n                and c.goals_away > c.goals_home\n                then 'Buffer goal'\n            when\n                c.goals_home > c.goals_home_lag\n                and c.goals_home_lag = c.goals_away_lag\n                and c.goals_home > c.goals_away\n                then 'Go-ahead goal allowed'\n        end as away_result_of_play\n        -- Either team - last goal a game winning goal?\n        , case\n            when\n                c.last_goal_scored = 1                       -- last goal\n                and abs(c.goals_away_lag - c.goals_home_lag) = 0  -- game was tied last play\n                and abs(c.goals_away - c.goals_home) != 0         -- game no longer tied\n                then 1\n            else 0\n        end as last_goal_game_winning\n        -- Either team - last goal game tying?\n        -- #TODO this is not working as intended - goals that tied the games go to OT, and so there is 0 game tying goals with this logic\n        , case\n            when\n                c.last_goal_scored = 1                       -- last goal\n                and abs(c.goals_away_lag - c.goals_home_lag) = 1  -- game was within 1 goal last play\n                and abs(c.goals_away - c.goals_home) = 0          -- game now tied\n                then 1\n            else 0\n        end as last_goal_game_tying\n\n    from base_plays_cumulative as c\n\n)\n\n-- #cte5: gets information about the last (previous) shot\n, last_shot as (\n    select\n        stg_nhl__live_plays_id\n        , game_id\n        , event_idx\n        , event_id\n        , player_id\n        , team_id\n        , event_type\n        , event_secondary_type\n        , play_total_seconds_elapsed\n        , play_period\n        -- last_shot properites & metrics\n        , lag(event_type) over (partition by game_id order by event_idx) as last_shot_event_type\n        , lag(event_secondary_type) over (partition by game_id order by event_idx) as last_shot_event_secondary_type\n        , lag(event_idx) over (partition by game_id order by event_idx) as last_shot_event_idx\n        , lag(team_id) over (partition by game_id order by event_idx) as last_shot_team_id\n        , lag(play_total_seconds_elapsed) over (partition by game_id order by event_idx) as last_shot_total_seconds_elapsed\n        , lag(play_period) over (partition by game_id order by event_idx) as last_shot_period\n        , lag(play_x_coordinate) over (partition by game_id order by event_idx) as last_shot_x_coordinate\n        , lag(play_y_coordinate) over (partition by game_id order by event_idx) as last_shot_y_coordinate\n        -- last_shot_saved_shot_ind = shot taken by same team in the same period\n        , case\n            when play_period != lag(play_period) over (partition by game_id order by event_idx)\n                then 0\n            when team_id != lag(team_id) over (partition by game_id order by event_idx)\n                then 0\n            when lower(lag(event_type) over (partition by game_id order by event_idx)) = 'shot'\n                then 1\n        end as last_shot_saved_shot_ind\n    from game_state as gs\n    where 1 = 1\n    --keep blocked shots, missed shots, shots on target and goals\n    and lower(gs.event_type) in ('blocked_shot', 'missed_shot', 'shot', 'goal')\n    -- keep roles involving the shooter & scorer\n    and lower(gs.player_role) in ('shooter', 'scorer')\n)\n\n-- #return: game_state joined with last_shot features\nselect\n    /* Primary Key */\n    gs.stg_nhl__live_plays_id\n\n    /* Identifiers */\n    , gs.game_id\n    , gs.event_idx\n    , gs.event_id\n    , gs.player_id\n    , gs.team_id\n\n    /* Properties */\n    , gs.player_full_name\n    , gs.player_index\n    , gs.player_primary_assist\n    , gs.player_secondary_assist\n    , gs.player_role\n    , gs.player_role_team\n    , gs.event_code\n    , gs.event_type\n    , gs.event_secondary_type\n    , gs.event_description\n    , gs.last_player_role_team\n    , gs.last_play_event_type\n    , gs.last_play_event_secondary_type\n    , gs.last_play_event_description\n    , gs.last_play_period\n    , gs.penalty_severity\n    , gs.penalty_minutes\n    , gs.play_x_coordinate\n    , gs.play_y_coordinate\n    , gs.play_period\n    , gs.play_period_type\n    , gs.play_period_time_elapsed\n    , gs.play_period_time_remaining\n    , gs.play_total_seconds_elapsed\n    , gs.play_time\n    , gs.shots_away\n    , gs.shots_home\n    , gs.hits_away\n    , gs.hits_home\n    , gs.faceoffs_away\n    , gs.faceoffs_home\n    , gs.takeaways_away\n    , gs.takeaways_home\n    , gs.giveaways_away\n    , gs.giveaways_home\n    , gs.missedshots_away\n    , gs.missedshots_home\n    , gs.blockedshots_away\n    , gs.blockedshots_home\n    , gs.penalties_away\n    , gs.penalties_home\n    , gs.first_goal_scored\n    , gs.last_goal_scored\n    , gs.goals_away\n    , gs.goals_home\n    , gs.goal_difference_current\n    , gs.winning_team_current\n    , gs.game_state_current\n    , gs.home_result_of_play\n    , gs.away_result_of_play\n    , gs.last_goal_game_winning\n    , gs.last_goal_game_tying\n    , gs.goals_home_lag\n    , gs.goals_away_lag\n    , gs.goal_difference_lag\n    , gs.winning_team_lag\n    , gs.game_state_lag\n    , ls.last_shot_event_idx\n    , ls.last_shot_team_id\n    , ls.last_shot_period\n    , ls.last_shot_total_seconds_elapsed\n    , ls.last_shot_event_type\n    , ls.last_shot_event_secondary_type\n    , ls.last_shot_x_coordinate\n    , ls.last_shot_y_coordinate\n    , ls.last_shot_saved_shot_ind\n\nfrom game_state as gs\nleft join last_shot as ls on ls.stg_nhl__live_plays_id = gs.stg_nhl__live_plays_id\n\n\nlimit 1000\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.nhl_data.stg_nhl__linescore": {"database": "nhl-breakouts", "schema": "github", "name": "stg_nhl__linescore", "resource_type": "model", "package_name": "nhl_data", "path": "staging/stg_nhl__linescore.sql", "original_file_path": "models/staging/stg_nhl__linescore.sql", "unique_id": "model.nhl_data.stg_nhl__linescore", "fqn": ["nhl_data", "staging", "stg_nhl__linescore"], "alias": "stg_nhl__linescore", "checksum": {"name": "sha256", "checksum": "c01ed97d3ceca6ecd06443681efb9e1f26f27b8581ae8cdf68b6f2bc05709b4e"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Staged NHL linescore data from the NHL-API. Contains the summary of goals and teams involved at the game level.\n", "columns": {"stg_nhl__linescore_id": {"name": "stg_nhl__linescore_id", "description": "Unique identifier for the game linescore", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "game_id": {"name": "game_id", "description": "Unique identifier for an NHL game (game_id)\n##### More about game_id\nThe first 4 digits identify the season of the game (ie. 2017 for the 2017-2018 season). The next 2 digits give the type of game, where 01 = preseason, 02 = regular season, 03 = playoffs, 04 = all-star. The final 4 digits identify the specific game number.\n\nFor regular season and preseason games, this ranges from 0001 to the number of games played. (1271 for seasons with 31 teams (2017 and onwards) and 1230 for seasons with 30 teams).\n\nFor playoff games, the 2nd digit of the specific number gives the round of the playoffs, the 3rd digit specifies the matchup, and the 4th digit specifies the game (out of 7).\n\n[Credit to Drew Hynes' NHL API docs](https://gitlab.com/dword4/nhlapi/-/blob/master/stats-api.md#game-ids)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_team_id": {"name": "home_team_id", "description": "Identifier for the home team, foreign key to stg_nhl__teams", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "away_team_id": {"name": "away_team_id", "description": "Identifier for the away team, foreign key to stg_nhl__teams", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "game_winning_team_id": {"name": "game_winning_team_id", "description": "Identifier for the winning team, foreign key to stg_nhl__teams", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "game_score_description": {"name": "game_score_description", "description": "Description of the game score in the format `<home_team_score>`-`<away_team_score>`", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "game_matchup_description": {"name": "game_matchup_description", "description": "Description of the team matchup in the format `<home_team_name>` vs `<away_team_name>`", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "game_winning_team_name": {"name": "game_winning_team_name", "description": "Name of the winning team", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "game_winning_team_type": {"name": "game_winning_team_type", "description": "Winning team type (home or away)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "game_absolute_goal_differential": {"name": "game_absolute_goal_differential", "description": "The absolute difference of the home and away team scores", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_team_goals": {"name": "home_team_goals", "description": "Total goals scored by the home team", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "away_team_goals": {"name": "away_team_goals", "description": "Total goals scored by the away team", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "nhl_data://models/staging/stg_nhl__linescore.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "staging"}, "created_at": 1695581342.5061817, "relation_name": "`nhl-breakouts`.`github`.`stg_nhl__linescore`", "raw_code": "with\nlive_linescore as (\n    select * from {{ source('meltano', 'live_linescore') }}\n    qualify row_number() over (\n        partition by\n            gameid\n    ) = 1\n)\n\n, final as (\n    select\n    /* Primary Key */\n        {{ dbt_utils.surrogate_key(['gameid']) }} as stg_nhl__linescore_id\n\n        /* Identifiers */\n        , gameid as game_id\n        , teams.home.team.id as home_team_id\n        , teams.away.team.id as away_team_id\n        , case\n            when teams.home.goals > teams.away.goals then teams.home.team.id\n            when teams.home.goals < teams.away.goals then teams.away.team.id\n            else -1\n        end as game_winning_team_id\n\n        /* Properties */\n        -- Game-level stats\n        , concat(teams.home.goals, '-', teams.away.goals, ' (Home-Away)') as game_score_description\n        , concat(teams.home.team.name, ' (Home) vs ', teams.away.team.name, ' (Away)') as game_matchup_description\n        , case\n            when teams.home.goals > teams.away.goals then teams.home.team.name\n            when teams.home.goals < teams.away.goals then teams.away.team.name\n            when teams.home.goals = teams.away.goals then 'Tie'\n            else 'Undetermined'\n        end as game_winning_team_name\n        , case\n            when teams.home.goals > teams.away.goals then 'Home'\n            when teams.home.goals < teams.away.goals then 'Away'\n            else 'Undetermined'\n        end as game_winning_team_type\n        , abs(teams.home.goals - teams.away.goals) as game_absolute_goal_differential\n        -- Team level stats\n        , teams.home.goals as home_team_goals\n        , teams.away.goals as away_team_goals\n    from live_linescore\n)\n\nselect * from final\n\n{% if not use_full_dataset() %}\nlimit 1000\n{% endif %}", "language": "sql", "refs": [], "sources": [["meltano", "live_linescore"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.surrogate_key", "macro.nhl_data.use_full_dataset"], "nodes": ["source.nhl_data.meltano.live_linescore"]}, "compiled_path": "target/compiled/nhl_data/models/staging/stg_nhl__linescore.sql", "compiled": true, "compiled_code": "with\nlive_linescore as (\n    select * from `nhl-breakouts`.`raw`.`live_linescore`\n    qualify row_number() over (\n        partition by\n            gameid\n    ) = 1\n)\n\n, final as (\n    select\n    /* Primary Key */\n        to_hex(md5(cast(coalesce(cast(gameid as \n    string\n), '') as \n    string\n))) as stg_nhl__linescore_id\n\n        /* Identifiers */\n        , gameid as game_id\n        , teams.home.team.id as home_team_id\n        , teams.away.team.id as away_team_id\n        , case\n            when teams.home.goals > teams.away.goals then teams.home.team.id\n            when teams.home.goals < teams.away.goals then teams.away.team.id\n            else -1\n        end as game_winning_team_id\n\n        /* Properties */\n        -- Game-level stats\n        , concat(teams.home.goals, '-', teams.away.goals, ' (Home-Away)') as game_score_description\n        , concat(teams.home.team.name, ' (Home) vs ', teams.away.team.name, ' (Away)') as game_matchup_description\n        , case\n            when teams.home.goals > teams.away.goals then teams.home.team.name\n            when teams.home.goals < teams.away.goals then teams.away.team.name\n            when teams.home.goals = teams.away.goals then 'Tie'\n            else 'Undetermined'\n        end as game_winning_team_name\n        , case\n            when teams.home.goals > teams.away.goals then 'Home'\n            when teams.home.goals < teams.away.goals then 'Away'\n            else 'Undetermined'\n        end as game_winning_team_type\n        , abs(teams.home.goals - teams.away.goals) as game_absolute_goal_differential\n        -- Team level stats\n        , teams.home.goals as home_team_goals\n        , teams.away.goals as away_team_goals\n    from live_linescore\n)\n\nselect * from final\n\n\nlimit 1000\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.nhl_data.stg_nhl__draft": {"database": "nhl-breakouts", "schema": "github", "name": "stg_nhl__draft", "resource_type": "model", "package_name": "nhl_data", "path": "staging/stg_nhl__draft.sql", "original_file_path": "models/staging/stg_nhl__draft.sql", "unique_id": "model.nhl_data.stg_nhl__draft", "fqn": ["nhl_data", "staging", "stg_nhl__draft"], "alias": "stg_nhl__draft", "checksum": {"name": "sha256", "checksum": "a24afa04819e483db4fb9183e51d296a0c206cc48b2481717db0d1ceb6d6ae74"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Staged NHL entry draft data from the NHL-API", "columns": {"stg_nhl__draft_id": {"name": "stg_nhl__draft_id", "description": "Unique identifier for an NHL rookie draft (generated via dbt_utils.surrogate_key)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "overall_pick_id": {"name": "overall_pick_id", "description": "Unique identifier for an NHL rookie draft (draft year + overall pick)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "draft_prospect_id": {"name": "draft_prospect_id", "description": "Foreign key that maps to an NHL draft prospect", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "draft_team_id": {"name": "draft_team_id", "description": "Foreign key that maps to the NHL team that drafted the NHL prospect", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "draft_year": {"name": "draft_year", "description": "Year of the NHL entry draft", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "draft_overall_pick": {"name": "draft_overall_pick", "description": "The overall pick in the NHL entry draft. For example, `1` is the first overall pick", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "draft_round": {"name": "draft_round", "description": "The drafting round that the selection was made in", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "draft_round_pick": {"name": "draft_round_pick", "description": "The pick in the NHL entry draft made relative to the round", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "draft_prospect_name": {"name": "draft_prospect_name", "description": "Name of the drafted NHL prospect", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "draft_url": {"name": "draft_url", "description": "URL endpoint", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "draft_team_name": {"name": "draft_team_name", "description": "Name of the NHL team that drafted the NHL prospect", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "nhl_data://models/staging/stg_nhl__draft.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "staging"}, "created_at": 1695581342.495143, "relation_name": "`nhl-breakouts`.`github`.`stg_nhl__draft`", "raw_code": "select\n    /* Primary Key */\n    {{ dbt_utils.surrogate_key(['year', 'pickoverall']) }} as stg_nhl__draft_id\n\n    /* Identifiers */\n    , concat(cast(draft.year as string), lpad(cast(draft.pickoverall as string), 3, '0')) as overall_pick_id\n    , draft.prospect.id as draft_prospect_id\n    , draft.team.id as draft_team_id\n\n    /* Properties */\n    , draft.year as draft_year\n    , draft.pickoverall as draft_overall_pick\n    , draft.round as draft_round\n    , draft.pickinround as draft_round_pick\n    , draft.prospect.fullname as draft_prospect_name\n    , draft.prospect.link as draft_url\n    , draft.team.name as draft_team_name\n\nfrom {{ source('meltano', 'draft') }} as draft\nwhere draft.prospect.fullname != 'Void' -- remove records that contain draft prospect named 'Void' as this appears to be bad data from the API\n\n{% if not use_full_dataset() %}\nlimit 1000\n{% endif %}", "language": "sql", "refs": [], "sources": [["meltano", "draft"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.surrogate_key", "macro.nhl_data.use_full_dataset"], "nodes": ["source.nhl_data.meltano.draft"]}, "compiled_path": "target/compiled/nhl_data/models/staging/stg_nhl__draft.sql", "compiled": true, "compiled_code": "select\n    /* Primary Key */\n    to_hex(md5(cast(coalesce(cast(year as \n    string\n), '') || '-' || coalesce(cast(pickoverall as \n    string\n), '') as \n    string\n))) as stg_nhl__draft_id\n\n    /* Identifiers */\n    , concat(cast(draft.year as string), lpad(cast(draft.pickoverall as string), 3, '0')) as overall_pick_id\n    , draft.prospect.id as draft_prospect_id\n    , draft.team.id as draft_team_id\n\n    /* Properties */\n    , draft.year as draft_year\n    , draft.pickoverall as draft_overall_pick\n    , draft.round as draft_round\n    , draft.pickinround as draft_round_pick\n    , draft.prospect.fullname as draft_prospect_name\n    , draft.prospect.link as draft_url\n    , draft.team.name as draft_team_name\n\nfrom `nhl-breakouts`.`raw`.`draft` as draft\nwhere draft.prospect.fullname != 'Void' -- remove records that contain draft prospect named 'Void' as this appears to be bad data from the API\n\n\nlimit 1000\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.nhl_data.stg_nhl__rink_shooting": {"database": "nhl-breakouts", "schema": "github", "name": "stg_nhl__rink_shooting", "resource_type": "model", "package_name": "nhl_data", "path": "staging/stg_nhl__rink_shooting.sql", "original_file_path": "models/staging/stg_nhl__rink_shooting.sql", "unique_id": "model.nhl_data.stg_nhl__rink_shooting", "fqn": ["nhl_data", "staging", "stg_nhl__rink_shooting"], "alias": "stg_nhl__rink_shooting", "checksum": {"name": "sha256", "checksum": "25017757ff1f8b4952eedd430ba8b669aea2e877556144d0a23618f7ec5c83f5"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Staged NHL game-team level data to determine which net the home team is shooting towards in period 1", "columns": {"game_id": {"name": "game_id", "description": "Unique surrogate key from a combination of the NHL player ID, team ID and the season ID", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "team_id": {"name": "team_id", "description": "Foreign key that maps to the NHL team ID that the NHL player played for in a given season", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "game_type_description": {"name": "game_type_description", "description": "Description for the type of game played, enhancing game_type (e.g. Pre-season, Regular, Playoffs, All-star)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "team_full_name": {"name": "team_full_name", "description": "Full name of the NHL team (e.g. Vancouver Canucks)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "p1_shots": {"name": "p1_shots", "description": "Number of shots taken by the home team in period 1", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "p1_shots_left": {"name": "p1_shots_left", "description": "Number of shots taken by the home team in period 1 that were to the left of the rink based on the x_coordinate being negative", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "p1_shots_right": {"name": "p1_shots_right", "description": "Number of shots taken by the home team in period 1 that were to the right of the rink based on the x_coordinate neing positive", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "p3_shots": {"name": "p3_shots", "description": "Number of shots taken by the home team in period 3", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "p3_shots_left": {"name": "p3_shots_left", "description": "Number of shots taken by the home team in period 3 that were to the left of the rink based on the x_coordinate being negative", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "p3_shots_right": {"name": "p3_shots_right", "description": "Number of shots taken by the home team in period 3 that were to the right of the rink based on the x_coordinate neing positive", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "p1_shooting_location": {"name": "p1_shooting_location", "description": "The direction that the home team is shooting towards in period 1 ('left', 'right', 'missing')", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "nhl_data://models/staging/stg_nhl__rink_shooting.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "staging"}, "created_at": 1695581342.6509383, "relation_name": "`nhl-breakouts`.`github`.`stg_nhl__rink_shooting`", "raw_code": "-- Goal: create a mapping table that we can join to with game_id & period & team from play-by-play data to know how to interpret the x-y coords\n-- Method: based on the assumptions that the majority of shots will come close to the net, classify the area of the ice with the most shots as the \"shooting end\", to then make axes adjustments to\n\n-- #cte1: pull all home team shots in the the first and third periods\nwith p1p3_plays_shots_home as (\n    select\n        plays.stg_nhl__live_plays_id as play_id\n        , plays.game_id\n        , schedule.game_type\n        , schedule.game_type_description\n        , plays.play_period\n        , plays.team_id\n        , plays.event_id\n        , plays.event_type\n        , teams.full_name as team_full_name\n        , plays.event_description\n        , plays.play_x_coordinate\n        , plays.play_y_coordinate\n    from\n        {{ ref('stg_nhl__live_plays') }} as plays\n    inner join {{ ref('stg_nhl__teams') }} as teams on teams.team_id = plays.team_id\n    inner join {{ ref('stg_nhl__schedule') }} as schedule on schedule.game_id = plays.game_id\n    where\n        1 = 1\n        and (plays.play_period = 1 or plays.play_period = 3)\n        and lower(plays.event_type) in ('goal', 'missed_shot', 'shot')\n        and lower(plays.player_role_team) = 'home'\n        and lower(plays.player_role) in ('shooter', 'scorer')\n        and schedule.home_team_id = plays.team_id\n    order by\n        plays.game_id desc\n)\n\n-- #cte2: summarize shot at the game & team level for period 1\n, p1_team_game_shots_home as (\n    select\n        ps.game_id\n        , ps.game_type\n        , ps.game_type_description\n        , ps.team_id\n        , ps.team_full_name\n        , ps.play_period\n        , count(1) as p1_shots\n        , sum(case when cast(ps.play_x_coordinate as float64) > 0 then 1 else 0 end) as p1_shots_right\n        , sum(case when cast(ps.play_x_coordinate as float64) < 0 then 1 else 0 end) as p1_shots_left\n    from\n        p1p3_plays_shots_home as ps\n    where\n        1 = 1\n        and play_period = 1\n    group by 1, 2, 3, 4, 5, 6\n)\n\n-- #cte3: summarize shot at the game & team level for period 1\n, p3_team_game_shots_home as (\n    select\n        ps.game_id\n        , ps.game_type\n        , ps.game_type_description\n        , ps.team_id\n        , ps.team_full_name\n        , ps.play_period\n        , count(1) as p3_shots\n        , sum(case when cast(ps.play_x_coordinate as float64) > 0 then 1 else 0 end) as p3_shots_right\n        , sum(case when cast(ps.play_x_coordinate as float64) < 0 then 1 else 0 end) as p3_shots_left\n    from\n        p1p3_plays_shots_home as ps\n    where\n        1 = 1\n        and play_period = 3\n    group by 1, 2, 3, 4, 5, 6\n)\n\n--#return: period 1 shooting location for the home team by game_id\nselect\n    p1.game_id\n    , p1.team_id\n    , p1.game_type_description\n    , p1.team_full_name\n    , p1.p1_shots\n    , p1.p1_shots_left\n    , p1.p1_shots_right\n    , p3.p3_shots\n    , p3.p3_shots_left\n    , p3.p3_shots_right\n    -- in case period 1 is not enough to determine a shooting side, then bring in period 3 as well\n    , case\n        when (p1.p1_shots_right) + (p1.p1_shots_left) = 0 then 'missing'\n        when p1.p1_shots_right > p1.p1_shots_left then 'right'\n        when p1.p1_shots_right < p1.p1_shots_left then 'left'\n        when (p1.p1_shots_right + p3.p3_shots_right) > (p1.p1_shots_left + p3.p3_shots_left) then 'right'\n        when (p1.p1_shots_right + p3.p3_shots_right) < (p1.p1_shots_left + p3.p3_shots_left) then 'left'\n    end as p1_shooting_location\nfrom\n    p1_team_game_shots_home as p1\nleft join p3_team_game_shots_home as p3 on p3.game_id = p1.game_id and p3.team_id = p1.team_id\norder by p1.game_id\n\n{% if not use_full_dataset() %}\nlimit 1000\n{% endif %}", "language": "sql", "refs": [{"name": "stg_nhl__live_plays", "package": null, "version": null}, {"name": "stg_nhl__teams", "package": null, "version": null}, {"name": "stg_nhl__schedule", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.nhl_data.use_full_dataset"], "nodes": ["model.nhl_data.stg_nhl__live_plays", "model.nhl_data.stg_nhl__teams", "model.nhl_data.stg_nhl__schedule"]}, "compiled_path": "target/compiled/nhl_data/models/staging/stg_nhl__rink_shooting.sql", "compiled": true, "compiled_code": "-- Goal: create a mapping table that we can join to with game_id & period & team from play-by-play data to know how to interpret the x-y coords\n-- Method: based on the assumptions that the majority of shots will come close to the net, classify the area of the ice with the most shots as the \"shooting end\", to then make axes adjustments to\n\n-- #cte1: pull all home team shots in the the first and third periods\nwith p1p3_plays_shots_home as (\n    select\n        plays.stg_nhl__live_plays_id as play_id\n        , plays.game_id\n        , schedule.game_type\n        , schedule.game_type_description\n        , plays.play_period\n        , plays.team_id\n        , plays.event_id\n        , plays.event_type\n        , teams.full_name as team_full_name\n        , plays.event_description\n        , plays.play_x_coordinate\n        , plays.play_y_coordinate\n    from\n        `nhl-breakouts`.`github`.`stg_nhl__live_plays` as plays\n    inner join `nhl-breakouts`.`github`.`stg_nhl__teams` as teams on teams.team_id = plays.team_id\n    inner join `nhl-breakouts`.`github`.`stg_nhl__schedule` as schedule on schedule.game_id = plays.game_id\n    where\n        1 = 1\n        and (plays.play_period = 1 or plays.play_period = 3)\n        and lower(plays.event_type) in ('goal', 'missed_shot', 'shot')\n        and lower(plays.player_role_team) = 'home'\n        and lower(plays.player_role) in ('shooter', 'scorer')\n        and schedule.home_team_id = plays.team_id\n    order by\n        plays.game_id desc\n)\n\n-- #cte2: summarize shot at the game & team level for period 1\n, p1_team_game_shots_home as (\n    select\n        ps.game_id\n        , ps.game_type\n        , ps.game_type_description\n        , ps.team_id\n        , ps.team_full_name\n        , ps.play_period\n        , count(1) as p1_shots\n        , sum(case when cast(ps.play_x_coordinate as float64) > 0 then 1 else 0 end) as p1_shots_right\n        , sum(case when cast(ps.play_x_coordinate as float64) < 0 then 1 else 0 end) as p1_shots_left\n    from\n        p1p3_plays_shots_home as ps\n    where\n        1 = 1\n        and play_period = 1\n    group by 1, 2, 3, 4, 5, 6\n)\n\n-- #cte3: summarize shot at the game & team level for period 1\n, p3_team_game_shots_home as (\n    select\n        ps.game_id\n        , ps.game_type\n        , ps.game_type_description\n        , ps.team_id\n        , ps.team_full_name\n        , ps.play_period\n        , count(1) as p3_shots\n        , sum(case when cast(ps.play_x_coordinate as float64) > 0 then 1 else 0 end) as p3_shots_right\n        , sum(case when cast(ps.play_x_coordinate as float64) < 0 then 1 else 0 end) as p3_shots_left\n    from\n        p1p3_plays_shots_home as ps\n    where\n        1 = 1\n        and play_period = 3\n    group by 1, 2, 3, 4, 5, 6\n)\n\n--#return: period 1 shooting location for the home team by game_id\nselect\n    p1.game_id\n    , p1.team_id\n    , p1.game_type_description\n    , p1.team_full_name\n    , p1.p1_shots\n    , p1.p1_shots_left\n    , p1.p1_shots_right\n    , p3.p3_shots\n    , p3.p3_shots_left\n    , p3.p3_shots_right\n    -- in case period 1 is not enough to determine a shooting side, then bring in period 3 as well\n    , case\n        when (p1.p1_shots_right) + (p1.p1_shots_left) = 0 then 'missing'\n        when p1.p1_shots_right > p1.p1_shots_left then 'right'\n        when p1.p1_shots_right < p1.p1_shots_left then 'left'\n        when (p1.p1_shots_right + p3.p3_shots_right) > (p1.p1_shots_left + p3.p3_shots_left) then 'right'\n        when (p1.p1_shots_right + p3.p3_shots_right) < (p1.p1_shots_left + p3.p3_shots_left) then 'left'\n    end as p1_shooting_location\nfrom\n    p1_team_game_shots_home as p1\nleft join p3_team_game_shots_home as p3 on p3.game_id = p1.game_id and p3.team_id = p1.team_id\norder by p1.game_id\n\n\nlimit 1000\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.nhl_data.stg_nhl__seasons": {"database": "nhl-breakouts", "schema": "github", "name": "stg_nhl__seasons", "resource_type": "model", "package_name": "nhl_data", "path": "staging/stg_nhl__seasons.sql", "original_file_path": "models/staging/stg_nhl__seasons.sql", "unique_id": "model.nhl_data.stg_nhl__seasons", "fqn": ["nhl_data", "staging", "stg_nhl__seasons"], "alias": "stg_nhl__seasons", "checksum": {"name": "sha256", "checksum": "562b836c9785264a65d6134966aff931da3c95ec22bc151482896bd0fe162ddc"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Staged NHL seasons data from the NHL-API", "columns": {"stg_nhl__seasons_id": {"name": "stg_nhl__seasons_id", "description": "Unique surrogate key for an NHL season (e.g. \"20172018\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "season_id": {"name": "season_id", "description": "Unique identifier for an NHL season (e.g. \"20172018\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "regular_season_start_date": {"name": "regular_season_start_date", "description": "The first date of the NHL regular season (e.g. \"2017-10-04\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "regular_season_end_date": {"name": "regular_season_end_date", "description": "The last date of the NHL regular season (e.g. \"2018-04-08\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "season_end_date": {"name": "season_end_date", "description": "The last date of the NHL post season (e.g. \"2018-06-07\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "number_of_games": {"name": "number_of_games", "description": "The number of total games played by each NHL team", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "has_ties_in_use": {"name": "has_ties_in_use", "description": "Whether or not ties were possible for that season (True / False)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "has_olympics_participation": {"name": "has_olympics_participation", "description": "Whether or not olympic participation at the NHL level was allowed for that season (True / False)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "has_conferences_in_use": {"name": "has_conferences_in_use", "description": "Whether or not conferences were used for that season's playoff consideration (True / False)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "has_divisions_in_use": {"name": "has_divisions_in_use", "description": "Whether or not divisions were used for that season's playoff consideration (True / False)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "has_wildcard_in_use": {"name": "has_wildcard_in_use", "description": "Whether or not wildcards were used for that season's playoff consideration (True / False)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "extracted_at": {"name": "extracted_at", "description": "Timestamp that the data was retrieved", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "loaded_at": {"name": "loaded_at", "description": "Timestamp that the data was loaded", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "nhl_data://models/staging/stg_nhl__seasons.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "staging"}, "created_at": 1695581342.3688486, "relation_name": "`nhl-breakouts`.`github`.`stg_nhl__seasons`", "raw_code": "select\n    /* Primary Key */\n    {{ dbt_utils.surrogate_key(['seasons.seasonid']) }} as stg_nhl__seasons_id\n\n    /* Identifiers */\n    , seasons.seasonid as season_id\n\n    /* Properties */\n    , seasons.regularseasonstartdate as regular_season_start_date\n    , seasons.regularseasonenddate as regular_season_end_date\n    , seasons.seasonenddate as season_end_date\n    , seasons.numberofgames as number_of_games\n    , seasons.tiesinuse as has_ties_in_use\n    , seasons.olympicsparticipation as has_olympics_participation\n    , seasons.conferencesinuse as has_conferences_in_use\n    , seasons.divisionsinuse as has_divisions_in_use\n    , seasons.wildcardinuse as has_wildcard_in_use\n    , seasons._time_extracted as extracted_at\n    , seasons._time_loaded as loaded_at\nfrom {{ source('meltano', 'seasons') }} as seasons\n\n{% if not use_full_dataset() %}\nlimit 1000\n{% endif %}", "language": "sql", "refs": [], "sources": [["meltano", "seasons"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.surrogate_key", "macro.nhl_data.use_full_dataset"], "nodes": ["source.nhl_data.meltano.seasons"]}, "compiled_path": "target/compiled/nhl_data/models/staging/stg_nhl__seasons.sql", "compiled": true, "compiled_code": "select\n    /* Primary Key */\n    to_hex(md5(cast(coalesce(cast(seasons.seasonid as \n    string\n), '') as \n    string\n))) as stg_nhl__seasons_id\n\n    /* Identifiers */\n    , seasons.seasonid as season_id\n\n    /* Properties */\n    , seasons.regularseasonstartdate as regular_season_start_date\n    , seasons.regularseasonenddate as regular_season_end_date\n    , seasons.seasonenddate as season_end_date\n    , seasons.numberofgames as number_of_games\n    , seasons.tiesinuse as has_ties_in_use\n    , seasons.olympicsparticipation as has_olympics_participation\n    , seasons.conferencesinuse as has_conferences_in_use\n    , seasons.divisionsinuse as has_divisions_in_use\n    , seasons.wildcardinuse as has_wildcard_in_use\n    , seasons._time_extracted as extracted_at\n    , seasons._time_loaded as loaded_at\nfrom `nhl-breakouts`.`raw`.`seasons` as seasons\n\n\nlimit 1000\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.nhl_data.stg_nhl__shifts": {"database": "nhl-breakouts", "schema": "github", "name": "stg_nhl__shifts", "resource_type": "model", "package_name": "nhl_data", "path": "staging/stg_nhl__shifts.sql", "original_file_path": "models/staging/stg_nhl__shifts.sql", "unique_id": "model.nhl_data.stg_nhl__shifts", "fqn": ["nhl_data", "staging", "stg_nhl__shifts"], "alias": "stg_nhl__shifts", "checksum": {"name": "sha256", "checksum": "cc13eb198f589038d227fa4d568e755e23a6d8377cef196d75b3bedf537c1291"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "NHL shift-level dataset, with each row being a summary of a player's shift in an NHL game", "columns": {"shift_id": {"name": "shift_id", "description": "Custom identifier for an NHL shift-second", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "game_id": {"name": "game_id", "description": "Foreign key that maps to an NHL game\n##### More about game_id\nThe first 4 digits identify the season of the game (ie. 2017 for the 2017-2018 season). The next 2 digits give the type of game, where 01 = preseason, 02 = regular season, 03 = playoffs, 04 = all-star. The final 4 digits identify the specific game number.\n\nFor regular season and preseason games, this ranges from 0001 to the number of games played. (1271 for seasons with 31 teams (2017 and onwards) and 1230 for seasons with 30 teams).\n\nFor playoff games, the 2nd digit of the specific number gives the round of the playoffs, the 3rd digit specifies the matchup, and the 4th digit specifies the game (out of 7).\n\n[Credit to Drew Hynes' NHL API docs](https://gitlab.com/dword4/nhlapi/-/blob/master/stats-api.md#game-ids)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "player_id": {"name": "player_id", "description": "Foreign key that maps to an NHL player ID", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "team_id": {"name": "team_id", "description": "Foreign key that maps to an NHL team ID", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shift_number": {"name": "shift_number", "description": "Custom shift number, counted from the start of the game and excluding dups (e.g. 2 = player's second shift of game, 0 = goal)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shift_ids": {"name": "shift_ids", "description": "Concatenation of all of the shift_ids matched from the original shifts dataset for that play", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shift_numbers": {"name": "shift_numbers", "description": "Concatenation of all of the shift_numbers matched from the original shifts dataset for that play", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_numbers": {"name": "event_numbers", "description": "Concatenation of all of the event_numbers matched from the original shifts dataset for that play", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "start_time": {"name": "start_time", "description": "The start time of the shift, relative to the start of the period (e.g. 14:00)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "end_time": {"name": "end_time", "description": "The end time of the shift, relative to the start of the period (14:00)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "duration": {"name": "duration", "description": "The duration of the shift, relative to the start of the shift (00:41)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "duration_seconds_elapsed": {"name": "duration_seconds_elapsed", "description": "The time in seconds elapsed from the start of the shift to the end of the shift", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "start_seconds_elapsed": {"name": "start_seconds_elapsed", "description": "The time in seconds elapsed in the game at the start of the shift", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "end_seconds_elapsed": {"name": "end_seconds_elapsed", "description": "The time in seconds elapsed in the game at the end of the shift", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "period": {"name": "period", "description": "The period in which the event occured (e.g. 3)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "period_type": {"name": "period_type", "description": "The type of period in which the event occured (e.g. Regular)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_away_team": {"name": "home_away_team", "description": "Provides player's team visiting status (e.g. 'home', 'away')", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "game_type_description": {"name": "game_type_description", "description": "Description for the type of game played, enhancing game_type (e.g. Pre-season, Regular, Playoffs, All-star)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "type_code": {"name": "type_code", "description": "Provides the type code for a player's shift - these have meaning, but currently no dictionary has been found", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "detail_code": {"name": "detail_code", "description": "Provides the detail code for a player's shift - these have meaning, but currently no dictionary has been found", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "player_full_name": {"name": "player_full_name", "description": "The player's full name (first name, last name)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_goal": {"name": "is_goal", "description": "Boolean flag for whether or not the recorded shift was in-fact a goal", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_period_start": {"name": "is_period_start", "description": "Whether or not the second in which the play occured maps to the second in which the player started his shift and the period begins", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_period_end": {"name": "is_period_end", "description": "Whether or not the second in which the play occured maps to the second in which the player started his shift and the period finished", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "goal_game_state": {"name": "goal_game_state", "description": "Provides the state of the game for plays that resulted in a goal (e.g. PPG, EVG)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "goal_assisters": {"name": "goal_assisters", "description": "Provides the full names of the assisters when `is_goal = True` and the goal was assisted. Uses the following syntax - {Primary assister full name}, {Secondary assiter full name}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "goal_primary_assister_full_name": {"name": "goal_primary_assister_full_name", "description": "Full name of the primary assister when `is_goal = True` and the goal was assisted", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "goal_secondary_assister_full_name": {"name": "goal_secondary_assister_full_name", "description": "Full name of the secondary assister when `is_goal = True` and the goal had a primary and secondary assist", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "nhl_data://models/staging/stg_nhl__shifts.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "staging"}, "created_at": 1695581342.4314923, "relation_name": "`nhl-breakouts`.`github`.`stg_nhl__shifts`", "raw_code": "select\n    /* Primary Key */\n    id as shift_id\n\n    /* Foreign Keys */\n    , gameid as game_id\n    , teamid as team_id\n    , playerid as player_id\n\n    /* Properties */\n    , detailcode as detail_code\n    , duration\n    , endtime as end_time\n    , eventnumber as event_number\n    , eventdetails as goal_assisters\n    , eventdescription as goal_game_state\n    , case\n        when typecode != 505 then 'not a goal'\n        when eventdetails is null then 'unassisted'\n        when length(eventdetails) - length(replace(eventdetails, ',', '')) > 0 then '2 assisters'\n        else '1 assister'\n    end as goal_assist_count\n    , period\n    , concat(firstname, ' ', lastname) as player_full_name\n    , shiftnumber as shift_number\n    , starttime as start_time\n    , typecode as type_code\n\n    /* Shift time attributes */\n    , if(starttime is not null, cast(split(starttime, ':')[offset(0)] as int64), null) as start_time_mins\n    , if(starttime is not null, cast(split(starttime, ':')[offset(1)] as int64), null) as start_time_seconds\n    , if(starttime is not null, cast(split(duration, ':')[offset(0)] as int64), null) as duration_mins\n    , if(starttime is not null, cast(split(duration, ':')[offset(1)] as int64), null) as duration_seconds\n\n    /* Flags */\n    , starttime = '00:00' as is_period_start\n    , endtime = '20:00' as is_period_end\n\nfrom {{ source('meltano', 'shifts') }}\nwhere\n    playerid is not null\n    /* manually removing shift ids of goals that were duplicated with different values (either in time of goal, or eventdetails)\n    method: cross referenced the gameid with the nhl boxscore, manually removed the incorrect line-item\n    TODO: investigate if we can cross validate with boxscore data */\n    and not (gameid = 2020020279 and eventnumber = 820 and id = 10501471) -- eventdetails were off\n    and not (gameid = 2020020038 and eventnumber = 668 and id = 10335336) -- time of goal was off\n    and not (gameid = 2020020249 and eventnumber = 61 and id = 10481186) -- time of goal was off\n    and not (gameid = 2020020274 and eventnumber = 472 and id = 10498099) -- time of goal and eventdetails were off\n    and not (gameid = 2020020129 and eventnumber = 630 and id = 10408031) -- time of goal was way off\n    and not (gameid = 2020030113 and eventnumber = 57 and id = 10995042) -- time of goal was off\n    and not (gameid = 2020020056 and eventnumber = 538 and id = 10349144) -- eventdetails were off\n    and not (gameid = 2020020792 and eventnumber = 220 and id = 10900308) -- time of goal was off\n    and not (gameid = 2020020279 and eventnumber = 566 and id = 10501469) -- time of goal was off\n    and not (gameid = 2020020003 and eventnumber = 222 and id = 10310433) -- time of goal was off\n    and not (gameid = 2020020001 and eventnumber = 70 and id = 10309429) -- time of goal was off\n    and not (gameid = 2020030412 and eventnumber = 614 and id = 11050284) -- time of goal was off\n    and not (gameid = 2020020745 and eventnumber = 485 and id = 10875539) -- time of goal was off\n    and not (gameid = 2020020767 and eventnumber = 209 and id = 10639438) -- time of goal was off\n\n{% if not use_full_dataset() %}\nlimit 1000\n{% endif %}", "language": "sql", "refs": [], "sources": [["meltano", "shifts"]], "metrics": [], "depends_on": {"macros": ["macro.nhl_data.use_full_dataset"], "nodes": ["source.nhl_data.meltano.shifts"]}, "compiled_path": "target/compiled/nhl_data/models/staging/stg_nhl__shifts.sql", "compiled": true, "compiled_code": "select\n    /* Primary Key */\n    id as shift_id\n\n    /* Foreign Keys */\n    , gameid as game_id\n    , teamid as team_id\n    , playerid as player_id\n\n    /* Properties */\n    , detailcode as detail_code\n    , duration\n    , endtime as end_time\n    , eventnumber as event_number\n    , eventdetails as goal_assisters\n    , eventdescription as goal_game_state\n    , case\n        when typecode != 505 then 'not a goal'\n        when eventdetails is null then 'unassisted'\n        when length(eventdetails) - length(replace(eventdetails, ',', '')) > 0 then '2 assisters'\n        else '1 assister'\n    end as goal_assist_count\n    , period\n    , concat(firstname, ' ', lastname) as player_full_name\n    , shiftnumber as shift_number\n    , starttime as start_time\n    , typecode as type_code\n\n    /* Shift time attributes */\n    , if(starttime is not null, cast(split(starttime, ':')[offset(0)] as int64), null) as start_time_mins\n    , if(starttime is not null, cast(split(starttime, ':')[offset(1)] as int64), null) as start_time_seconds\n    , if(starttime is not null, cast(split(duration, ':')[offset(0)] as int64), null) as duration_mins\n    , if(starttime is not null, cast(split(duration, ':')[offset(1)] as int64), null) as duration_seconds\n\n    /* Flags */\n    , starttime = '00:00' as is_period_start\n    , endtime = '20:00' as is_period_end\n\nfrom `nhl-breakouts`.`raw`.`shifts`\nwhere\n    playerid is not null\n    /* manually removing shift ids of goals that were duplicated with different values (either in time of goal, or eventdetails)\n    method: cross referenced the gameid with the nhl boxscore, manually removed the incorrect line-item\n    TODO: investigate if we can cross validate with boxscore data */\n    and not (gameid = 2020020279 and eventnumber = 820 and id = 10501471) -- eventdetails were off\n    and not (gameid = 2020020038 and eventnumber = 668 and id = 10335336) -- time of goal was off\n    and not (gameid = 2020020249 and eventnumber = 61 and id = 10481186) -- time of goal was off\n    and not (gameid = 2020020274 and eventnumber = 472 and id = 10498099) -- time of goal and eventdetails were off\n    and not (gameid = 2020020129 and eventnumber = 630 and id = 10408031) -- time of goal was way off\n    and not (gameid = 2020030113 and eventnumber = 57 and id = 10995042) -- time of goal was off\n    and not (gameid = 2020020056 and eventnumber = 538 and id = 10349144) -- eventdetails were off\n    and not (gameid = 2020020792 and eventnumber = 220 and id = 10900308) -- time of goal was off\n    and not (gameid = 2020020279 and eventnumber = 566 and id = 10501469) -- time of goal was off\n    and not (gameid = 2020020003 and eventnumber = 222 and id = 10310433) -- time of goal was off\n    and not (gameid = 2020020001 and eventnumber = 70 and id = 10309429) -- time of goal was off\n    and not (gameid = 2020030412 and eventnumber = 614 and id = 11050284) -- time of goal was off\n    and not (gameid = 2020020745 and eventnumber = 485 and id = 10875539) -- time of goal was off\n    and not (gameid = 2020020767 and eventnumber = 209 and id = 10639438) -- time of goal was off\n\n\nlimit 1000\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.nhl_data.stg_nhl__draft_prospects": {"database": "nhl-breakouts", "schema": "github", "name": "stg_nhl__draft_prospects", "resource_type": "model", "package_name": "nhl_data", "path": "staging/stg_nhl__draft_prospects.sql", "original_file_path": "models/staging/stg_nhl__draft_prospects.sql", "unique_id": "model.nhl_data.stg_nhl__draft_prospects", "fqn": ["nhl_data", "staging", "stg_nhl__draft_prospects"], "alias": "stg_nhl__draft_prospects", "checksum": {"name": "sha256", "checksum": "c61faaf8742cf028de4b2a94d2d243cc2981ae33039203139ca527db9f565dcd"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Staged NHL draft_prospects data from the NHL-API", "columns": {"stg_nhl__draft_prospects_id": {"name": "stg_nhl__draft_prospects_id", "description": "Unique surrogate key for a drafted NHL prospect", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "draft_prospect_id": {"name": "draft_prospect_id", "description": "Unique identifier for the NHL draft prospect", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "prospect_player_id": {"name": "prospect_player_id", "description": "Foreign key that maps to an NHL player ID", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "prospect_category_id": {"name": "prospect_category_id", "description": "Foreign key that maps to one of the four prospect categories - North American Skater (1), European Skater (2), North American Goalie (3) or European Goalie (4)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "prospect_first_name": {"name": "prospect_first_name", "description": "First name of the NHL prospect", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "prospect_last_name": {"name": "prospect_last_name", "description": "Last name of the NHL prospect", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "prospect_full_name": {"name": "prospect_full_name", "description": "Full name of the NHL prospect", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "prospect_birth_date": {"name": "prospect_birth_date", "description": "Birth date of the NHL prospect", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "prospect_age_years": {"name": "prospect_age_years", "description": "Age in years of the NHL prospect", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "prospect_age_days": {"name": "prospect_age_days", "description": "Age in days of the NHL prospect", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "prospect_birth_city": {"name": "prospect_birth_city", "description": "Birth city of the NHL prospect", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "prospect_birth_state_province": {"name": "prospect_birth_state_province", "description": "Birth state or province of the NHL prospect", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "prospect_birth_country": {"name": "prospect_birth_country", "description": "Birth country of the NHL prospect", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "prospect_height": {"name": "prospect_height", "description": "Imperial height, in feet and inches (e.g. 5'10\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "prospect_weight": {"name": "prospect_weight", "description": "Imperial weight, in pounds (e.g. 140)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "prospect_shoots_catches": {"name": "prospect_shoots_catches", "description": "The handedness of the NHL prospect (e.g. R = right, L = left)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "prospect_position_name": {"name": "prospect_position_name", "description": "Name of the position (e.g. Center, Left Wing, Defenseman)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "prospect_position_abbreviation": {"name": "prospect_position_abbreviation", "description": "Abbreviation of the position (e.g. C, LW, D)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "prospect_draft_status": {"name": "prospect_draft_status", "description": "Unknown (e.g. NHL-10, NHL-54)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "prospect_category_name": {"name": "prospect_category_name", "description": "Describes four prospect categories - North American Skater, European Skater, North American Goalie or European Goalie", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "prospect_category_short_name": {"name": "prospect_category_short_name", "description": "Describes four prospect categories - NA Skater, Euro Skater, NA Goalie or Euro Goalie", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "prospect_amateur_team_name": {"name": "prospect_amateur_team_name", "description": "Name of the amateur team that the NHL prospect plays for - unknown when, lots of nulls", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "prospect_amateur_team_url": {"name": "prospect_amateur_team_url", "description": "URL endpoint for amateur team", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "prospect_rank_midterm": {"name": "prospect_rank_midterm", "description": "Unknown, lots of nulls", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "prospect_rank_draft_year": {"name": "prospect_rank_draft_year", "description": "Unknown, lots of null", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "prospect_url": {"name": "prospect_url", "description": "URL endpoint for the prospect", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "nhl_data://models/staging/stg_nhl__draft_prospects.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "staging"}, "created_at": 1695581342.341584, "relation_name": "`nhl-breakouts`.`github`.`stg_nhl__draft_prospects`", "raw_code": "with\n\ndeduped as (\n    select * from {{ source('meltano', 'draft_prospects') }}\n    qualify row_number() over (\n        partition by\n            id\n            , nhlplayerid\n    ) = 1\n)\n\nselect\n    /* Primary Key */\n    {{ dbt_utils.surrogate_key(['id', 'nhlplayerid']) }} as stg_nhl__draft_prospects_id\n\n    /* Foreign Keys */\n    , id as draft_prospect_id\n    , nhlplayerid as prospect_player_id\n    , prospectcategory.id as prospect_category_id\n\n    /* Properties */\n    , firstname as prospect_first_name\n    , lastname as prospect_last_name\n    , fullname as prospect_full_name\n    , parse_date('%Y-%m-%d', birthdate) as prospect_birth_date\n    , date_diff(current_date(), parse_date('%Y-%m-%d', birthdate), year) as prospect_age_years\n    , date_diff(current_date(), parse_date('%Y-%m-%d', birthdate), day) as prospect_age_days\n    , birthcity as prospect_birth_city\n    , birthstateprovince as prospect_birth_state_province\n    , birthcountry as prospect_birth_country\n    , height as prospect_height\n    , weight as prospect_weight\n    , shootscatches as prospect_shoots_catches\n    , primaryposition.name as prospect_position_name\n    , primaryposition.abbreviation as prospect_position_abbreviation\n    , draftstatus as prospect_draft_status -- wtf is this?\n    , prospectcategory.name as prospect_category_name\n    , prospectcategory.shortname as prospect_category_short_name\n    , amateurteam.name as prospect_amateur_team_name\n    , amateurteam.link as prospect_amateur_team_url\n    , amateurleague.name as prospect_amateur_league_name\n    , amateurleague.link as prospect_amateur_league_url\n    , ranks.midterm as prospect_rank_midterm\n    , ranks.draftyear as prospect_rank_draft_year\n    , link as prospect_url\nfrom deduped\n\n{% if not use_full_dataset() %}\nlimit 1000\n{% endif %}", "language": "sql", "refs": [], "sources": [["meltano", "draft_prospects"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.surrogate_key", "macro.nhl_data.use_full_dataset"], "nodes": ["source.nhl_data.meltano.draft_prospects"]}, "compiled_path": "target/compiled/nhl_data/models/staging/stg_nhl__draft_prospects.sql", "compiled": true, "compiled_code": "with\n\ndeduped as (\n    select * from `nhl-breakouts`.`raw`.`draft_prospects`\n    qualify row_number() over (\n        partition by\n            id\n            , nhlplayerid\n    ) = 1\n)\n\nselect\n    /* Primary Key */\n    to_hex(md5(cast(coalesce(cast(id as \n    string\n), '') || '-' || coalesce(cast(nhlplayerid as \n    string\n), '') as \n    string\n))) as stg_nhl__draft_prospects_id\n\n    /* Foreign Keys */\n    , id as draft_prospect_id\n    , nhlplayerid as prospect_player_id\n    , prospectcategory.id as prospect_category_id\n\n    /* Properties */\n    , firstname as prospect_first_name\n    , lastname as prospect_last_name\n    , fullname as prospect_full_name\n    , parse_date('%Y-%m-%d', birthdate) as prospect_birth_date\n    , date_diff(current_date(), parse_date('%Y-%m-%d', birthdate), year) as prospect_age_years\n    , date_diff(current_date(), parse_date('%Y-%m-%d', birthdate), day) as prospect_age_days\n    , birthcity as prospect_birth_city\n    , birthstateprovince as prospect_birth_state_province\n    , birthcountry as prospect_birth_country\n    , height as prospect_height\n    , weight as prospect_weight\n    , shootscatches as prospect_shoots_catches\n    , primaryposition.name as prospect_position_name\n    , primaryposition.abbreviation as prospect_position_abbreviation\n    , draftstatus as prospect_draft_status -- wtf is this?\n    , prospectcategory.name as prospect_category_name\n    , prospectcategory.shortname as prospect_category_short_name\n    , amateurteam.name as prospect_amateur_team_name\n    , amateurteam.link as prospect_amateur_team_url\n    , amateurleague.name as prospect_amateur_league_name\n    , amateurleague.link as prospect_amateur_league_url\n    , ranks.midterm as prospect_rank_midterm\n    , ranks.draftyear as prospect_rank_draft_year\n    , link as prospect_url\nfrom deduped\n\n\nlimit 1000\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.nhl_data.d_draft_prospects": {"database": "nhl-breakouts", "schema": "github", "name": "d_draft_prospects", "resource_type": "model", "package_name": "nhl_data", "path": "analytics/intermediate/d_draft_prospects.sql", "original_file_path": "models/analytics/intermediate/d_draft_prospects.sql", "unique_id": "model.nhl_data.d_draft_prospects", "fqn": ["nhl_data", "analytics", "intermediate", "d_draft_prospects"], "alias": "d_draft_prospects", "checksum": {"name": "sha256", "checksum": "9c61e0f9df639dcf6fc02d759a0322a7b2b27ef08104e3e1e5998d735776e3f9"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Staged NHL draft_prospects data from the NHL-API", "columns": {"draft_prospects_id": {"name": "draft_prospects_id", "description": "Unique identifier for a drafted NHL prospect", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "draft_prospect_id": {"name": "draft_prospect_id", "description": "Foreign key that maps to a draft prospect", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "prospect_player_id": {"name": "prospect_player_id", "description": "Foreign key that maps to an NHL player ID", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "prospect_category_id": {"name": "prospect_category_id", "description": "Foreign key that maps to one of the four prospect categories - North American Skater (1), European Skater (2), North American Goalie (3) or European Goalie (4)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "prospect_first_name": {"name": "prospect_first_name", "description": "First name of the NHL prospect", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "prospect_last_name": {"name": "prospect_last_name", "description": "Last name of the NHL prospect", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "prospect_full_name": {"name": "prospect_full_name", "description": "Full name of the NHL prospect", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "prospect_birth_date": {"name": "prospect_birth_date", "description": "Birth date of the NHL prospect", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "prospect_age_years": {"name": "prospect_age_years", "description": "Age in years of the NHL prospect", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "prospect_age_days": {"name": "prospect_age_days", "description": "Age in days of the NHL prospect", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "prospect_birth_city": {"name": "prospect_birth_city", "description": "Birth city of the NHL prospect", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "prospect_birth_state_province": {"name": "prospect_birth_state_province", "description": "Birth state or province of the NHL prospect", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "prospect_birth_country": {"name": "prospect_birth_country", "description": "Birth country of the NHL prospect", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "prospect_height": {"name": "prospect_height", "description": "Imperial height, in feet and inches (e.g. 5'10\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "prospect_weight": {"name": "prospect_weight", "description": "Imperial weight, in pounds (e.g. 140)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "prospect_shoots_catches": {"name": "prospect_shoots_catches", "description": "The handedness of the NHL prospect (e.g. R = right, L = left)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "prospect_position_name": {"name": "prospect_position_name", "description": "Name of the position (e.g. Center, Left Wing, Defenseman)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "prospect_position_abbreviation": {"name": "prospect_position_abbreviation", "description": "Abbreviation of the position (e.g. C, LW, D)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "prospect_draft_status": {"name": "prospect_draft_status", "description": "Unknown (e.g. NHL-10, NHL-54)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "prospect_category_name": {"name": "prospect_category_name", "description": "Describes four prospect categories - North American Skater, European Skater, North American Goalie or European Goalie", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "prospect_category_short_name": {"name": "prospect_category_short_name", "description": "Describes four prospect categories - NA Skater, Euro Skater, NA Goalie or Euro Goalie", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "prospect_amateur_team_name": {"name": "prospect_amateur_team_name", "description": "Name of the amateur team that the NHL prospect plays for - unknown when, lots of nulls", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "prospect_amateur_team_url": {"name": "prospect_amateur_team_url", "description": "URL endpoint for amateur team", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "prospect_rank_midterm": {"name": "prospect_rank_midterm", "description": "Unknown, lots of nulls", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "prospect_rank_draft_year": {"name": "prospect_rank_draft_year", "description": "Unknown, lots of null", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "prospect_url": {"name": "prospect_url", "description": "URL endpoint for the prospect", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "nhl_data://models/analytics/intermediate/d_draft_prospects.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "intermediate"}, "created_at": 1695581342.6848783, "relation_name": "`nhl-breakouts`.`github`.`d_draft_prospects`", "raw_code": "select distinct\n    /* Primary Key */\n    stg_nhl__draft_prospects_id as draft_prospects_id\n\n    /* Identifiers */\n    , draft_prospect_id\n    , prospect_player_id\n    , prospect_category_id\n\n    /* Properties */\n    , prospect_first_name\n    , prospect_last_name\n    , prospect_full_name\n    , prospect_birth_date\n    , prospect_age_years\n    , prospect_age_days\n    , prospect_birth_city\n    , prospect_birth_state_province\n    , prospect_birth_country\n    , prospect_height\n    , prospect_weight\n    , prospect_shoots_catches\n    , prospect_position_name\n    , prospect_position_abbreviation\n    , prospect_draft_status -- wtf is this?\n    , prospect_category_name\n    , prospect_category_short_name\n    , prospect_amateur_team_name\n    , prospect_amateur_team_url\n    , prospect_amateur_league_name\n    , prospect_amateur_league_url\n    , prospect_rank_midterm\n    , prospect_rank_draft_year\n    , prospect_url\nfrom {{ ref('stg_nhl__draft_prospects') }}", "language": "sql", "refs": [{"name": "stg_nhl__draft_prospects", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.nhl_data.stg_nhl__draft_prospects"]}, "compiled_path": "target/compiled/nhl_data/models/analytics/intermediate/d_draft_prospects.sql", "compiled": true, "compiled_code": "select distinct\n    /* Primary Key */\n    stg_nhl__draft_prospects_id as draft_prospects_id\n\n    /* Identifiers */\n    , draft_prospect_id\n    , prospect_player_id\n    , prospect_category_id\n\n    /* Properties */\n    , prospect_first_name\n    , prospect_last_name\n    , prospect_full_name\n    , prospect_birth_date\n    , prospect_age_years\n    , prospect_age_days\n    , prospect_birth_city\n    , prospect_birth_state_province\n    , prospect_birth_country\n    , prospect_height\n    , prospect_weight\n    , prospect_shoots_catches\n    , prospect_position_name\n    , prospect_position_abbreviation\n    , prospect_draft_status -- wtf is this?\n    , prospect_category_name\n    , prospect_category_short_name\n    , prospect_amateur_team_name\n    , prospect_amateur_team_url\n    , prospect_amateur_league_name\n    , prospect_amateur_league_url\n    , prospect_rank_midterm\n    , prospect_rank_draft_year\n    , prospect_url\nfrom `nhl-breakouts`.`github`.`stg_nhl__draft_prospects`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.nhl_data.f_boxscore_team": {"database": "nhl-breakouts", "schema": "github", "name": "f_boxscore_team", "resource_type": "model", "package_name": "nhl_data", "path": "analytics/intermediate/f_boxscore_team.sql", "original_file_path": "models/analytics/intermediate/f_boxscore_team.sql", "unique_id": "model.nhl_data.f_boxscore_team", "fqn": ["nhl_data", "analytics", "intermediate", "f_boxscore_team"], "alias": "f_boxscore_team", "checksum": {"name": "sha256", "checksum": "43d3a52afc8531081712fead2b0defff186a25747f3cacca786225fe5bca1d8c"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "NHL boxscore game data from the NHL-API (game-team level)", "columns": {"boxscore_team_id": {"name": "boxscore_team_id", "description": "Unique surrogate key for a team's involvement in an NHL game (game_id + team_id)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "game_id": {"name": "game_id", "description": "Foreign key that maps to the NHL game ID - each game should have 2 rows in this table for each team involved in the game\n##### More about game_id\nThe first 4 digits identify the season of the game (ie. 2017 for the 2017-2018 season). The next 2 digits give the type of game, where 01 = preseason, 02 = regular season, 03 = playoffs, 04 = all-star. The final 4 digits identify the specific game number.\n\nFor regular season and preseason games, this ranges from 0001 to the number of games played. (1271 for seasons with 31 teams (2017 and onwards) and 1230 for seasons with 30 teams).\n\nFor playoff games, the 2nd digit of the specific number gives the round of the playoffs, the 3rd digit specifies the matchup, and the 4th digit specifies the game (out of 7).\n\n[Credit to Drew Hynes' NHL API docs](https://gitlab.com/dword4/nhlapi/-/blob/master/stats-api.md#game-ids)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "team_id": {"name": "team_id", "description": "Foreign key that maps to the NHL team ID - each row represents a team playing in a game", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "team_type": {"name": "team_type", "description": "Describes the Away / Home status for each team playing in a game", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "team_name": {"name": "team_name", "description": "Name of the NHL team", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "team_winner": {"name": "team_winner", "description": "- `true` of the team scored more than the opposing team\n- `false` if the team scored less than the opposing team\n- null for Shootout results (will be fixed by linescore data, boxscore does not tell us the result of a shootout)\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "team_goals": {"name": "team_goals", "description": "Number of goals scored by the team", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "team_goal_differential": {"name": "team_goal_differential", "description": "The difference between the number of goals scored, and the number of goals allowed by the team", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "team_pim": {"name": "team_pim", "description": "The number of penalties in minutes:seconds against the team", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "team_shots": {"name": "team_shots", "description": "The number of shots (unsure if this is on goal or attempts) for the team", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "team_powerplay_goals": {"name": "team_powerplay_goals", "description": "The number of powerplay goals for the team", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "team_powerplay_opportunities": {"name": "team_powerplay_opportunities", "description": "The number of powerplay opportunities for the team", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "team_faceoff_percentage": {"name": "team_faceoff_percentage", "description": "The percentage of faceoffs won by the team (e.g. 100 * (faceoff wins / faceoff attempts))", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "team_blocked": {"name": "team_blocked", "description": "The number of blocked shots for the team", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "team_takeaways": {"name": "team_takeaways", "description": "The number of takeaways for the team", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "team_giveaways": {"name": "team_giveaways", "description": "The number of giveaways for the team", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "team_hits": {"name": "team_hits", "description": "The number of hits for the team", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "nhl_data://models/analytics/intermediate/f_boxscore_team.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "intermediate"}, "created_at": 1695581342.6766486, "relation_name": "`nhl-breakouts`.`github`.`f_boxscore_team`", "raw_code": "with\n\nboxscore_reduced as (\n    /* stg_nhl__boxscore is on the game/team/player grain, so reduce down to the game/team grain */\n    select * from {{ ref('stg_nhl__boxscore') }}\n    qualify row_number() over (\n        partition by\n            game_id\n            , team_id\n    ) = 1\n)\n\n, home_team as (\n    select * from boxscore_reduced where team_type = 'Home'\n)\n\n, away_team as (\n    select * from boxscore_reduced where team_type = 'Away'\n)\n\n, winning_team as (\n    select\n        home_team.game_id\n        , home_team.team_id as home_team_id\n        , away_team.team_id as away_team_id\n        , home_team.team_goals as home_team_score\n        , away_team.team_goals as away_team_score\n        , case\n            when home_team.team_goals > away_team.team_goals then home_team.team_type\n            when home_team.team_goals < away_team.team_goals then away_team.team_type\n            when home_team.team_goals = away_team.team_goals then 'Tie'\n            else 'Undetermined'\n        end as winning_team\n        , coalesce(abs(home_team.team_goals - away_team.team_goals), 0) as absolute_goal_differential\n    from home_team\n    inner join away_team on home_team.game_id = away_team.game_id\n)\n\n, boxscore_team as (\n    select * from home_team\n    union all\n    select * from away_team\n)\n\nselect\n    /* Primary Key */\n    {{ dbt_utils.surrogate_key(['boxscore_team.game_id', 'boxscore_team.team_id']) }} as boxscore_team_id\n\n    /* Foreign Keys */\n    , boxscore_team.game_id\n    , boxscore_team.team_id\n\n    /* Properties */\n    , boxscore_team.team_type\n\n    /* Team stats*/\n    , boxscore_team.team_name\n    , boxscore_team.team_type = winning_team.winning_team as team_winner\n    , boxscore_team.team_goals\n    , if(\n        boxscore_team.team_type = winning_team.winning_team\n        , winning_team.absolute_goal_differential\n        , -1 * winning_team.absolute_goal_differential\n    ) as team_goal_differential\n    , boxscore_team.team_pim\n    , boxscore_team.team_shots\n    , boxscore_team.team_powerplay_goals\n    , boxscore_team.team_powerplay_opportunities\n    , boxscore_team.team_faceoff_percentage\n    , boxscore_team.team_blocked\n    , boxscore_team.team_takeaways\n    , boxscore_team.team_giveaways\n    , boxscore_team.team_hits\n    , boxscore_team.team_scratches\nfrom boxscore_team\nleft join winning_team on boxscore_team.game_id = winning_team.game_id", "language": "sql", "refs": [{"name": "stg_nhl__boxscore", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["model.nhl_data.stg_nhl__boxscore"]}, "compiled_path": "target/compiled/nhl_data/models/analytics/intermediate/f_boxscore_team.sql", "compiled": true, "compiled_code": "with\n\nboxscore_reduced as (\n    /* stg_nhl__boxscore is on the game/team/player grain, so reduce down to the game/team grain */\n    select * from `nhl-breakouts`.`github`.`stg_nhl__boxscore`\n    qualify row_number() over (\n        partition by\n            game_id\n            , team_id\n    ) = 1\n)\n\n, home_team as (\n    select * from boxscore_reduced where team_type = 'Home'\n)\n\n, away_team as (\n    select * from boxscore_reduced where team_type = 'Away'\n)\n\n, winning_team as (\n    select\n        home_team.game_id\n        , home_team.team_id as home_team_id\n        , away_team.team_id as away_team_id\n        , home_team.team_goals as home_team_score\n        , away_team.team_goals as away_team_score\n        , case\n            when home_team.team_goals > away_team.team_goals then home_team.team_type\n            when home_team.team_goals < away_team.team_goals then away_team.team_type\n            when home_team.team_goals = away_team.team_goals then 'Tie'\n            else 'Undetermined'\n        end as winning_team\n        , coalesce(abs(home_team.team_goals - away_team.team_goals), 0) as absolute_goal_differential\n    from home_team\n    inner join away_team on home_team.game_id = away_team.game_id\n)\n\n, boxscore_team as (\n    select * from home_team\n    union all\n    select * from away_team\n)\n\nselect\n    /* Primary Key */\n    to_hex(md5(cast(coalesce(cast(boxscore_team.game_id as \n    string\n), '') || '-' || coalesce(cast(boxscore_team.team_id as \n    string\n), '') as \n    string\n))) as boxscore_team_id\n\n    /* Foreign Keys */\n    , boxscore_team.game_id\n    , boxscore_team.team_id\n\n    /* Properties */\n    , boxscore_team.team_type\n\n    /* Team stats*/\n    , boxscore_team.team_name\n    , boxscore_team.team_type = winning_team.winning_team as team_winner\n    , boxscore_team.team_goals\n    , if(\n        boxscore_team.team_type = winning_team.winning_team\n        , winning_team.absolute_goal_differential\n        , -1 * winning_team.absolute_goal_differential\n    ) as team_goal_differential\n    , boxscore_team.team_pim\n    , boxscore_team.team_shots\n    , boxscore_team.team_powerplay_goals\n    , boxscore_team.team_powerplay_opportunities\n    , boxscore_team.team_faceoff_percentage\n    , boxscore_team.team_blocked\n    , boxscore_team.team_takeaways\n    , boxscore_team.team_giveaways\n    , boxscore_team.team_hits\n    , boxscore_team.team_scratches\nfrom boxscore_team\nleft join winning_team on boxscore_team.game_id = winning_team.game_id", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.nhl_data.d_date": {"database": "nhl-breakouts", "schema": "github", "name": "d_date", "resource_type": "model", "package_name": "nhl_data", "path": "analytics/intermediate/d_date.sql", "original_file_path": "models/analytics/intermediate/d_date.sql", "unique_id": "model.nhl_data.d_date", "fqn": ["nhl_data", "analytics", "intermediate", "d_date"], "alias": "d_date", "checksum": {"name": "sha256", "checksum": "977ecb9c5e8b68cacceec6aec4349c72b5a23624b7fdf9be5ea8c715c35cf635"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Date spine containing calendar dates from 2010-01-01 through 2030-01-01", "columns": {"date_id": {"name": "date_id", "description": "Unique identifier for the date in YYYYMMDD format", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "Calendar date in YYYY-MM-DD format", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "day_of_week_name": {"name": "day_of_week_name", "description": "Three letter name for the day of week (i.e. Mon, Tue, Wed, Thu, Fri, Sat, Sun)\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "quarter_number": {"name": "quarter_number", "description": "Quarter of the year number ranging from 1 (Q1) to 4 (Q4)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "quarter_desc": {"name": "quarter_desc", "description": "Description of the quarter (i.e. Q1 2022 for Quarter 1 2022)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "month_number": {"name": "month_number", "description": "Month of the year number ranging from 1 (January) to 12 (December)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "month_name": {"name": "month_name", "description": "Abbreviated name of the month (i.e. Jan, Feb, Mar)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "month_desc": {"name": "month_desc", "description": "Description of the month (i.e. M01 2022 for January 2022)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "week_number": {"name": "week_number", "description": "Week of the year number ranging from 1 to 52", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "week_desc": {"name": "week_desc", "description": "Description of the week (i.e. W52 2022 for the last calendar week of 2022)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "nhl_data://models/analytics/intermediate/d_date.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "intermediate"}, "created_at": 1695581342.770834, "relation_name": "`nhl-breakouts`.`github`.`d_date`", "raw_code": "select\n    /* Primary Key */\n    date_id\n\n    /* Properties */\n    , date_day\n    , day_of_week_name\n    , quarter_number\n    , quarter_desc\n    , month_number\n    , month_name\n    , month_desc\n    , week_number\n    , week_desc\nfrom {{ ref('dates') }}", "language": "sql", "refs": [{"name": "dates", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.nhl_data.dates"]}, "compiled_path": "target/compiled/nhl_data/models/analytics/intermediate/d_date.sql", "compiled": true, "compiled_code": "select\n    /* Primary Key */\n    date_id\n\n    /* Properties */\n    , date_day\n    , day_of_week_name\n    , quarter_number\n    , quarter_desc\n    , month_number\n    , month_name\n    , month_desc\n    , week_number\n    , week_desc\nfrom `nhl-breakouts`.`github`.`dates`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.nhl_data.d_players": {"database": "nhl-breakouts", "schema": "github", "name": "d_players", "resource_type": "model", "package_name": "nhl_data", "path": "analytics/intermediate/d_players.sql", "original_file_path": "models/analytics/intermediate/d_players.sql", "unique_id": "model.nhl_data.d_players", "fqn": ["nhl_data", "analytics", "intermediate", "d_players"], "alias": "d_players", "checksum": {"name": "sha256", "checksum": "36592ee0505dbde86e80faef2444bf8307154aacf5f9e883902822635c1d389e"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Staged NHL player data from the NHL-API", "columns": {"player_id": {"name": "player_id", "description": "Unique identifier for an NHL player", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "full_name": {"name": "full_name", "description": "Full name of the NHL player", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "player_url": {"name": "player_url", "description": "URL endpoint for NHL player", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "first_name": {"name": "first_name", "description": "First name of the NHL player", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_name": {"name": "last_name", "description": "Last name of the NHL player", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "primary_number": {"name": "primary_number", "description": "Number that the player usually wears", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "birth_date": {"name": "birth_date", "description": "Birth date of the NHL player", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "birth_city": {"name": "birth_city", "description": "Birth city of the NHL player", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "birth_state_province": {"name": "birth_state_province", "description": "Birth state or province of the NHL player", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "birth_country": {"name": "birth_country", "description": "Birth country of the NHL player", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "nationality": {"name": "nationality", "description": "Nationality of the NHL player", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "height": {"name": "height", "description": "Imperial height, in feet and inches (e.g. 5'10\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "weight": {"name": "weight", "description": "Imperial weight, in pounds (e.g. 140)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_active": {"name": "is_active", "description": "Whether or not the NHL player is currently active (True / False)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_alternate_captain": {"name": "is_alternate_captain", "description": "Whether or not the NHL player is currently an alternate captain for their team (True / False)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_captain": {"name": "is_captain", "description": "Whether or not the NHL player is currently the captain of their team (True / False)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_rookie": {"name": "is_rookie", "description": "Whether or not the NHL player is currently a rookie (True / False)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shoots_catches": {"name": "shoots_catches", "description": "The handedness of the NHL player (e.g. R = right, L = left)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "roster_status": {"name": "roster_status", "description": "Roster status of the NHL player (e.g. Y, N, I)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "primary_position_code": {"name": "primary_position_code", "description": "Position code of the position most played (e.g. C, L, D)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "primary_position_name": {"name": "primary_position_name", "description": "Position name of the position most played (e.g. Center, Left Wing, Defenseman)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "primary_position_type": {"name": "primary_position_type", "description": "Position grouping for the position most played (e.g. Forward, Defenseman)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "primary_position_abbreviation": {"name": "primary_position_abbreviation", "description": "Position abbreviation of the position most played (e.g. C, LW, D)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "extracted_at": {"name": "extracted_at", "description": "Timestamp that the data was retrieved", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "loaded_at": {"name": "loaded_at", "description": "Timestamp that the data was loaded", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "nhl_data://models/analytics/intermediate/d_players.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "intermediate"}, "created_at": 1695581342.843321, "relation_name": "`nhl-breakouts`.`github`.`d_players`", "raw_code": "with deduplicated as (\n    {{ dedupe(\n        ref('stg_nhl__players'),\n        key_fields=['player_id'],\n        sort_fields=['season_id']\n    ) }}\n)\n\nselect\n    /* Primary Key */\n    player_id\n\n    /* Properties */\n    , full_name\n    , player_url\n    , first_name\n    , last_name\n    , primary_number\n    , birth_date\n    , birth_city\n    , birth_state_province\n    , birth_country\n    , nationality\n    , height\n    , weight\n    , is_active\n    , is_alternate_captain\n    , is_captain\n    , is_rookie\n    , shoots_catches\n    , roster_status\n    , primary_position_code\n    , primary_position_name\n    , primary_position_type\n    , primary_position_abbreviation\n    , extracted_at\n    , loaded_at\nfrom deduplicated", "language": "sql", "refs": [{"name": "stg_nhl__players", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.nhl_data.dedupe"], "nodes": ["model.nhl_data.stg_nhl__players"]}, "compiled_path": "target/compiled/nhl_data/models/analytics/intermediate/d_players.sql", "compiled": true, "compiled_code": "with deduplicated as (\n    select *\n    from (\n        select *,\n            row_number() over (partition by player_id order by season_id) as rn\n        from `nhl-breakouts`.`github`.`stg_nhl__players`\n    ) where rn = 1 -- dedupe\n)\n\nselect\n    /* Primary Key */\n    player_id\n\n    /* Properties */\n    , full_name\n    , player_url\n    , first_name\n    , last_name\n    , primary_number\n    , birth_date\n    , birth_city\n    , birth_state_province\n    , birth_country\n    , nationality\n    , height\n    , weight\n    , is_active\n    , is_alternate_captain\n    , is_captain\n    , is_rookie\n    , shoots_catches\n    , roster_status\n    , primary_position_code\n    , primary_position_name\n    , primary_position_type\n    , primary_position_abbreviation\n    , extracted_at\n    , loaded_at\nfrom deduplicated", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.nhl_data.d_shifts": {"database": "nhl-breakouts", "schema": "github", "name": "d_shifts", "resource_type": "model", "package_name": "nhl_data", "path": "analytics/intermediate/d_shifts.sql", "original_file_path": "models/analytics/intermediate/d_shifts.sql", "unique_id": "model.nhl_data.d_shifts", "fqn": ["nhl_data", "analytics", "intermediate", "d_shifts"], "alias": "d_shifts", "checksum": {"name": "sha256", "checksum": "fa2c734513dfd6d8bc51da6d066b2c28487b64342faac810feb989170c034120"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "NHL shift-level dataset, with each row being a summary of a player's shift in an NHL game", "columns": {"shift_id": {"name": "shift_id", "description": "Unique identifier for an NHL shift", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "game_id": {"name": "game_id", "description": "Foreign key that maps to an NHL game\n##### More about game_id\nThe first 4 digits identify the season of the game (ie. 2017 for the 2017-2018 season). The next 2 digits give the type of game, where 01 = preseason, 02 = regular season, 03 = playoffs, 04 = all-star. The final 4 digits identify the specific game number.\n\nFor regular season and preseason games, this ranges from 0001 to the number of games played. (1271 for seasons with 31 teams (2017 and onwards) and 1230 for seasons with 30 teams).\n\nFor playoff games, the 2nd digit of the specific number gives the round of the playoffs, the 3rd digit specifies the matchup, and the 4th digit specifies the game (out of 7).\n\n[Credit to Drew Hynes' NHL API docs](https://gitlab.com/dword4/nhlapi/-/blob/master/stats-api.md#game-ids)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "player_id": {"name": "player_id", "description": "Foreign key that maps to an NHL player ID", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "team_id": {"name": "team_id", "description": "Foreign key that maps to an NHL team ID", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shift_number": {"name": "shift_number", "description": "Custom shift number, counted from the start of the game and excluding dups (e.g. 2 = player's second shift of game, 0 = goal)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shift_ids": {"name": "shift_ids", "description": "Concatenation of all of the shift_ids matched from the original shifts dataset for that play", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shift_numbers": {"name": "shift_numbers", "description": "Concatenation of all of the shift_numbers matched from the original shifts dataset for that play", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_numbers": {"name": "event_numbers", "description": "Concatenation of all of the event_numbers matched from the original shifts dataset for that play", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "start_time": {"name": "start_time", "description": "The start time of the shift, relative to the start of the period (e.g. 14:00)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "end_time": {"name": "end_time", "description": "The end time of the shift, relative to the start of the period (14:00)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "duration": {"name": "duration", "description": "The duration of the shift, relative to the start of the shift (00:41)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "duration_seconds_elapsed": {"name": "duration_seconds_elapsed", "description": "The time in seconds elapsed from the start of the shift to the end of the shift", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "start_seconds_elapsed": {"name": "start_seconds_elapsed", "description": "The time in seconds elapsed in the game at the start of the shift", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "end_seconds_elapsed": {"name": "end_seconds_elapsed", "description": "The time in seconds elapsed in the game at the end of the shift", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "period": {"name": "period", "description": "The period in which the event occured (e.g. 3)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "period_type": {"name": "period_type", "description": "The type of period in which the event occured (e.g. Regular)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_away_team": {"name": "home_away_team", "description": "Provides player's team visiting status (e.g. 'home', 'away')", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "game_type_description": {"name": "game_type_description", "description": "Description for the type of game played, enhancing game_type (e.g. Pre-season, Regular, Playoffs, All-star)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "type_code": {"name": "type_code", "description": "Provides the type code for a player's shift - these have meaning, but currently no dictionary has been found", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "detail_code": {"name": "detail_code", "description": "Provides the detail code for a player's shift - these have meaning, but currently no dictionary has been found", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "player_full_name": {"name": "player_full_name", "description": "The player's full name (first name, last name)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_goal": {"name": "is_goal", "description": "Boolean flag for whether or not the recorded shift was in-fact a goal", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_period_start": {"name": "is_period_start", "description": "Whether or not the second in which the play occured maps to the second in which the player started his shift and the period begins", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_period_end": {"name": "is_period_end", "description": "Whether or not the second in which the play occured maps to the second in which the player started his shift and the period finished", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "goal_game_state": {"name": "goal_game_state", "description": "Provides the state of the game for plays that resulted in a goal (e.g. PPG, EVG)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "goal_assisters": {"name": "goal_assisters", "description": "Provides the full names of the assisters when `is_goal = True` and the goal was assisted. Uses the following syntax - {Primary assister full name}, {Secondary assiter full name}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "goal_primary_assister_full_name": {"name": "goal_primary_assister_full_name", "description": "Full name of the primary assister when `is_goal = True` and the goal was assisted", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "goal_secondary_assister_full_name": {"name": "goal_secondary_assister_full_name", "description": "Full name of the secondary assister when `is_goal = True` and the goal had a primary and secondary assist", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "nhl_data://models/analytics/intermediate/d_shifts.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "intermediate"}, "created_at": 1695581342.8324647, "relation_name": "`nhl-breakouts`.`github`.`d_shifts`", "raw_code": "with\n\nshifts as (\n    select\n    /* Primary Key */\n        shifts.shift_id\n\n        /* Foreign Keys */\n        , shifts.game_id\n        , shifts.player_id\n        , shifts.team_id\n\n        /* Properties */\n        , shifts.shift_number\n        , case\n            when shifts.team_id = schedule.home_team_id then 'home'\n            when shifts.team_id = schedule.away_team_id then 'away'\n            else 'unknown'\n        end as home_away_team\n        , schedule.game_type\n        , schedule.game_type_description\n        , shifts.detail_code\n        , shifts.event_number\n        , shifts.goal_game_state\n        , shifts.period\n        , shifts.player_full_name\n        , shifts.type_code\n\n        /* Shift Times */\n        , shifts.start_time\n        , shifts.start_time_mins\n        , shifts.start_time_seconds\n        , shifts.end_time\n        , shifts.duration\n        , shifts.duration_mins\n        , shifts.duration_seconds\n        , case\n            when shifts.period = 1 then (shifts.start_time_mins * 60) + (shifts.start_time_seconds)\n            when shifts.period = 2 then (20 * 60) + ((shifts.start_time_mins * 60) + (shifts.start_time_seconds))\n            when shifts.period = 3 then (40 * 60) + ((shifts.start_time_mins * 60) + (shifts.start_time_seconds))\n            when shifts.period = 4 then (60 * 60) + ((shifts.start_time_mins * 60) + (shifts.start_time_seconds))\n            when shifts.period = 5 then (80 * 60) + ((shifts.start_time_mins * 60) + (shifts.start_time_seconds))\n            when shifts.period = 6 then (100 * 60) + ((shifts.start_time_mins * 60) + (shifts.start_time_seconds))\n            when shifts.period = 7 then (120 * 60) + ((shifts.start_time_mins * 60) + (shifts.start_time_seconds))\n            when shifts.period = 8 then (140 * 60) + ((shifts.start_time_mins * 60) + (shifts.start_time_seconds))\n            when shifts.period = 9 then (160 * 60) + ((shifts.start_time_mins * 60) + (shifts.start_time_seconds))\n            when shifts.period = 10 then (180 * 60) + ((shifts.start_time_mins * 60) + (shifts.start_time_seconds))\n        end as start_seconds_elapsed\n        , if(shifts.type_code = 505, 0, (shifts.duration_mins * 60) + (shifts.duration_seconds)) as duration_seconds_elapsed\n\n        /* Assister Properties */\n        , shifts.goal_assisters\n        , shifts.goal_assist_count\n        , case\n            when shifts.goal_assist_count = '2 assisters' then trim(split(shifts.goal_assisters, ',')[offset(0)])\n            when shifts.goal_assist_count = '1 assister' then shifts.goal_assisters\n        end as goal_primary_assister_full_name\n        , case\n            when shifts.goal_assist_count = '2 assisters' then trim(split(shifts.goal_assisters, ', ')[offset(1)])\n        end as goal_secondary_assister_full_name\n        , case\n            when schedule.game_type = '02' and shifts.period = 4 then 'overtime'\n            when schedule.game_type = '02' and shifts.period = 5 then 'shootout'\n            when shifts.period > 3 then 'overtime'\n            when shifts.period between 1 and 3 then 'regulation'\n            else 'unknown'\n        end as period_type\n\n        /* Flags */\n        , case\n            when schedule.game_type = '02' and shifts.period = 5 then false\n            when shifts.type_code = 505 then true\n            else false\n        end as is_goal\n        , shifts.is_period_start\n        , shifts.is_period_end\n    from {{ ref('stg_nhl__shifts') }} as shifts\n    left join {{ ref('d_schedule') }} as schedule\n        on shifts.game_id = schedule.game_id\n    where\n        1 = 1\n        and not (schedule.game_type = '02' and shifts.period = 5) -- remove shootouts\n        and shifts.end_time != '' -- remove 1129 shifts, dups\n)\n\n, deduped_goals as (\n    /* Seasons 2020 and 2021 had many duplicated goals having the same start time and end time\n    for a given game_id, player_id */\n    select\n        shift_id\n        , game_id\n        , player_id\n        , period\n        , start_time\n        , end_time\n    from shifts\n    where is_goal\n    qualify row_number() over (\n        partition by\n            game_id\n            , player_id\n            , period\n            , start_time\n            , end_time\n        order by\n            shift_id desc -- pick the highest shift_id number among the duplicated goals\n    ) = 1\n)\n\n, find_duplicate_shifts as (\n    -- as of 7/10/2022, there were 91 shifts that mapped to 13 plays where the shift was duplicated having the same start time but different durations (thus, different end times)\n    -- rule: if a player's shift is duplicated, take the shift that was longer since they might have been involved in the play (min takes shorter duration, max takes longer)\n    select\n        shift_id\n        , game_id\n        , player_id\n        , period\n        , start_seconds_elapsed\n        , event_number\n        , shift_number\n        , row_number() over (\n            partition by\n                game_id\n                , player_id\n                , period\n                , start_seconds_elapsed\n            order by\n                period asc\n                , start_seconds_elapsed asc\n                , duration desc\n        ) as duplicate_sequence_number -- 1 = shift among duplicates with the longest duration, >1 means duplicates we don't care about\n    from shifts\n    where not is_goal\n)\n\n, deduped_shift_attributes as (\n    -- return the original shift and event numbers that were identified as deduplicates as an array\n    select\n        game_id\n        , player_id\n        , period\n        , start_seconds_elapsed\n        , string_agg(cast(shift_number as string)) as shift_numbers\n        , string_agg(cast(event_number as string)) as event_numbers\n        , string_agg(cast(shift_id as string)) as shift_ids\n    from find_duplicate_shifts\n    group by 1, 2, 3, 4\n)\n\n, revised_shift_number_for_duplicate_shifts as (\n    -- create the new_shift_number, excluding any shifts that were duplicated as well as goals\n    select\n        shift_id\n        , game_id\n        , player_id\n        , start_seconds_elapsed\n        , period\n        , shift_number as original_shift_number\n        , row_number() over (\n            partition by\n                game_id\n                , player_id\n            order by\n                start_seconds_elapsed asc\n        ) as revised_shift_number\n    from find_duplicate_shifts\n    where\n        duplicate_sequence_number = 1\n)\n\nselect\n    shifts.shift_id\n    , shifts.game_id\n    , shifts.player_id\n    , shifts.team_id\n    , if(shifts.is_goal, shifts.shift_number, revised_shift_number_for_duplicate_shifts.revised_shift_number) as shift_number\n    , deduped_shift_attributes.shift_numbers\n    , deduped_shift_attributes.shift_ids\n    , deduped_shift_attributes.event_numbers\n    , shifts.start_time\n    , shifts.end_time\n    , shifts.duration\n    , shifts.duration_seconds_elapsed\n    , shifts.start_seconds_elapsed\n    , (shifts.start_seconds_elapsed + shifts.duration_seconds_elapsed) as end_seconds_elapsed\n    , shifts.period\n    , shifts.period_type\n    , shifts.home_away_team\n    , shifts.game_type_description\n    , shifts.type_code\n    , shifts.detail_code\n    , shifts.player_full_name\n    , shifts.is_goal\n    , shifts.is_period_start\n    , shifts.is_period_end\n    , shifts.goal_game_state\n    , shifts.goal_assisters\n    , shifts.goal_primary_assister_full_name\n    , shifts.goal_secondary_assister_full_name\nfrom shifts\nleft join revised_shift_number_for_duplicate_shifts\n    on shifts.shift_id = revised_shift_number_for_duplicate_shifts.shift_id\nleft join deduped_shift_attributes\n    on\n        shifts.game_id = deduped_shift_attributes.game_id\n        and shifts.player_id = deduped_shift_attributes.player_id\n        and shifts.period = deduped_shift_attributes.period\n        and shifts.start_seconds_elapsed = deduped_shift_attributes.start_seconds_elapsed\nleft join deduped_goals\n    on shifts.shift_id = deduped_goals.shift_id\nwhere\n    (shifts.is_goal and deduped_goals.shift_id is not null) -- exclude shift-duplicates for goals\n    or (not shifts.is_goal and revised_shift_number_for_duplicate_shifts.shift_id is not null) -- exclude shift-duplicates for non-goals", "language": "sql", "refs": [{"name": "stg_nhl__shifts", "package": null, "version": null}, {"name": "d_schedule", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.nhl_data.stg_nhl__shifts", "model.nhl_data.d_schedule"]}, "compiled_path": "target/compiled/nhl_data/models/analytics/intermediate/d_shifts.sql", "compiled": true, "compiled_code": "with\n\nshifts as (\n    select\n    /* Primary Key */\n        shifts.shift_id\n\n        /* Foreign Keys */\n        , shifts.game_id\n        , shifts.player_id\n        , shifts.team_id\n\n        /* Properties */\n        , shifts.shift_number\n        , case\n            when shifts.team_id = schedule.home_team_id then 'home'\n            when shifts.team_id = schedule.away_team_id then 'away'\n            else 'unknown'\n        end as home_away_team\n        , schedule.game_type\n        , schedule.game_type_description\n        , shifts.detail_code\n        , shifts.event_number\n        , shifts.goal_game_state\n        , shifts.period\n        , shifts.player_full_name\n        , shifts.type_code\n\n        /* Shift Times */\n        , shifts.start_time\n        , shifts.start_time_mins\n        , shifts.start_time_seconds\n        , shifts.end_time\n        , shifts.duration\n        , shifts.duration_mins\n        , shifts.duration_seconds\n        , case\n            when shifts.period = 1 then (shifts.start_time_mins * 60) + (shifts.start_time_seconds)\n            when shifts.period = 2 then (20 * 60) + ((shifts.start_time_mins * 60) + (shifts.start_time_seconds))\n            when shifts.period = 3 then (40 * 60) + ((shifts.start_time_mins * 60) + (shifts.start_time_seconds))\n            when shifts.period = 4 then (60 * 60) + ((shifts.start_time_mins * 60) + (shifts.start_time_seconds))\n            when shifts.period = 5 then (80 * 60) + ((shifts.start_time_mins * 60) + (shifts.start_time_seconds))\n            when shifts.period = 6 then (100 * 60) + ((shifts.start_time_mins * 60) + (shifts.start_time_seconds))\n            when shifts.period = 7 then (120 * 60) + ((shifts.start_time_mins * 60) + (shifts.start_time_seconds))\n            when shifts.period = 8 then (140 * 60) + ((shifts.start_time_mins * 60) + (shifts.start_time_seconds))\n            when shifts.period = 9 then (160 * 60) + ((shifts.start_time_mins * 60) + (shifts.start_time_seconds))\n            when shifts.period = 10 then (180 * 60) + ((shifts.start_time_mins * 60) + (shifts.start_time_seconds))\n        end as start_seconds_elapsed\n        , if(shifts.type_code = 505, 0, (shifts.duration_mins * 60) + (shifts.duration_seconds)) as duration_seconds_elapsed\n\n        /* Assister Properties */\n        , shifts.goal_assisters\n        , shifts.goal_assist_count\n        , case\n            when shifts.goal_assist_count = '2 assisters' then trim(split(shifts.goal_assisters, ',')[offset(0)])\n            when shifts.goal_assist_count = '1 assister' then shifts.goal_assisters\n        end as goal_primary_assister_full_name\n        , case\n            when shifts.goal_assist_count = '2 assisters' then trim(split(shifts.goal_assisters, ', ')[offset(1)])\n        end as goal_secondary_assister_full_name\n        , case\n            when schedule.game_type = '02' and shifts.period = 4 then 'overtime'\n            when schedule.game_type = '02' and shifts.period = 5 then 'shootout'\n            when shifts.period > 3 then 'overtime'\n            when shifts.period between 1 and 3 then 'regulation'\n            else 'unknown'\n        end as period_type\n\n        /* Flags */\n        , case\n            when schedule.game_type = '02' and shifts.period = 5 then false\n            when shifts.type_code = 505 then true\n            else false\n        end as is_goal\n        , shifts.is_period_start\n        , shifts.is_period_end\n    from `nhl-breakouts`.`github`.`stg_nhl__shifts` as shifts\n    left join `nhl-breakouts`.`github`.`d_schedule` as schedule\n        on shifts.game_id = schedule.game_id\n    where\n        1 = 1\n        and not (schedule.game_type = '02' and shifts.period = 5) -- remove shootouts\n        and shifts.end_time != '' -- remove 1129 shifts, dups\n)\n\n, deduped_goals as (\n    /* Seasons 2020 and 2021 had many duplicated goals having the same start time and end time\n    for a given game_id, player_id */\n    select\n        shift_id\n        , game_id\n        , player_id\n        , period\n        , start_time\n        , end_time\n    from shifts\n    where is_goal\n    qualify row_number() over (\n        partition by\n            game_id\n            , player_id\n            , period\n            , start_time\n            , end_time\n        order by\n            shift_id desc -- pick the highest shift_id number among the duplicated goals\n    ) = 1\n)\n\n, find_duplicate_shifts as (\n    -- as of 7/10/2022, there were 91 shifts that mapped to 13 plays where the shift was duplicated having the same start time but different durations (thus, different end times)\n    -- rule: if a player's shift is duplicated, take the shift that was longer since they might have been involved in the play (min takes shorter duration, max takes longer)\n    select\n        shift_id\n        , game_id\n        , player_id\n        , period\n        , start_seconds_elapsed\n        , event_number\n        , shift_number\n        , row_number() over (\n            partition by\n                game_id\n                , player_id\n                , period\n                , start_seconds_elapsed\n            order by\n                period asc\n                , start_seconds_elapsed asc\n                , duration desc\n        ) as duplicate_sequence_number -- 1 = shift among duplicates with the longest duration, >1 means duplicates we don't care about\n    from shifts\n    where not is_goal\n)\n\n, deduped_shift_attributes as (\n    -- return the original shift and event numbers that were identified as deduplicates as an array\n    select\n        game_id\n        , player_id\n        , period\n        , start_seconds_elapsed\n        , string_agg(cast(shift_number as string)) as shift_numbers\n        , string_agg(cast(event_number as string)) as event_numbers\n        , string_agg(cast(shift_id as string)) as shift_ids\n    from find_duplicate_shifts\n    group by 1, 2, 3, 4\n)\n\n, revised_shift_number_for_duplicate_shifts as (\n    -- create the new_shift_number, excluding any shifts that were duplicated as well as goals\n    select\n        shift_id\n        , game_id\n        , player_id\n        , start_seconds_elapsed\n        , period\n        , shift_number as original_shift_number\n        , row_number() over (\n            partition by\n                game_id\n                , player_id\n            order by\n                start_seconds_elapsed asc\n        ) as revised_shift_number\n    from find_duplicate_shifts\n    where\n        duplicate_sequence_number = 1\n)\n\nselect\n    shifts.shift_id\n    , shifts.game_id\n    , shifts.player_id\n    , shifts.team_id\n    , if(shifts.is_goal, shifts.shift_number, revised_shift_number_for_duplicate_shifts.revised_shift_number) as shift_number\n    , deduped_shift_attributes.shift_numbers\n    , deduped_shift_attributes.shift_ids\n    , deduped_shift_attributes.event_numbers\n    , shifts.start_time\n    , shifts.end_time\n    , shifts.duration\n    , shifts.duration_seconds_elapsed\n    , shifts.start_seconds_elapsed\n    , (shifts.start_seconds_elapsed + shifts.duration_seconds_elapsed) as end_seconds_elapsed\n    , shifts.period\n    , shifts.period_type\n    , shifts.home_away_team\n    , shifts.game_type_description\n    , shifts.type_code\n    , shifts.detail_code\n    , shifts.player_full_name\n    , shifts.is_goal\n    , shifts.is_period_start\n    , shifts.is_period_end\n    , shifts.goal_game_state\n    , shifts.goal_assisters\n    , shifts.goal_primary_assister_full_name\n    , shifts.goal_secondary_assister_full_name\nfrom shifts\nleft join revised_shift_number_for_duplicate_shifts\n    on shifts.shift_id = revised_shift_number_for_duplicate_shifts.shift_id\nleft join deduped_shift_attributes\n    on\n        shifts.game_id = deduped_shift_attributes.game_id\n        and shifts.player_id = deduped_shift_attributes.player_id\n        and shifts.period = deduped_shift_attributes.period\n        and shifts.start_seconds_elapsed = deduped_shift_attributes.start_seconds_elapsed\nleft join deduped_goals\n    on shifts.shift_id = deduped_goals.shift_id\nwhere\n    (shifts.is_goal and deduped_goals.shift_id is not null) -- exclude shift-duplicates for goals\n    or (not shifts.is_goal and revised_shift_number_for_duplicate_shifts.shift_id is not null) -- exclude shift-duplicates for non-goals", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.nhl_data.f_linescore": {"database": "nhl-breakouts", "schema": "github", "name": "f_linescore", "resource_type": "model", "package_name": "nhl_data", "path": "analytics/intermediate/f_linescore.sql", "original_file_path": "models/analytics/intermediate/f_linescore.sql", "unique_id": "model.nhl_data.f_linescore", "fqn": ["nhl_data", "analytics", "intermediate", "f_linescore"], "alias": "f_linescore", "checksum": {"name": "sha256", "checksum": "d3e10d39ba7b59cfef133975f459d07e5fe099b3746f97407a890bab703bcd13"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Staged NHL linescore data from the NHL-API. Contains the summary of goals and teams involved at the game level.\n", "columns": {"linescore_id": {"name": "linescore_id", "description": "Unique identifier for an NHL game (hashed representation of game_id)\n##### More about game_id\nThe first 4 digits identify the season of the game (ie. 2017 for the 2017-2018 season). The next 2 digits give the type of game, where 01 = preseason, 02 = regular season, 03 = playoffs, 04 = all-star. The final 4 digits identify the specific game number.\n\nFor regular season and preseason games, this ranges from 0001 to the number of games played. (1271 for seasons with 31 teams (2017 and onwards) and 1230 for seasons with 30 teams).\n\nFor playoff games, the 2nd digit of the specific number gives the round of the playoffs, the 3rd digit specifies the matchup, and the 4th digit specifies the game (out of 7).\n\n[Credit to Drew Hynes' NHL API docs](https://gitlab.com/dword4/nhlapi/-/blob/master/stats-api.md#game-ids)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "game_id": {"name": "game_id", "description": "Unique identifier for an NHL game (game_id)\n##### More about game_id\nThe first 4 digits identify the season of the game (ie. 2017 for the 2017-2018 season). The next 2 digits give the type of game, where 01 = preseason, 02 = regular season, 03 = playoffs, 04 = all-star. The final 4 digits identify the specific game number.\n\nFor regular season and preseason games, this ranges from 0001 to the number of games played. (1271 for seasons with 31 teams (2017 and onwards) and 1230 for seasons with 30 teams).\n\nFor playoff games, the 2nd digit of the specific number gives the round of the playoffs, the 3rd digit specifies the matchup, and the 4th digit specifies the game (out of 7).\n\n[Credit to Drew Hynes' NHL API docs](https://gitlab.com/dword4/nhlapi/-/blob/master/stats-api.md#game-ids)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_team_id": {"name": "home_team_id", "description": "Identifier for the home team, foreign key to stg_nhl__teams", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "away_team_id": {"name": "away_team_id", "description": "Identifier for the away team, foreign key to stg_nhl__teams", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "game_winning_team_id": {"name": "game_winning_team_id", "description": "Identifier for the winning team, foreign key to stg_nhl__teams", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "game_score_description": {"name": "game_score_description", "description": "Description of the game score in the format `<home_team_score>`-`<away_team_score>`", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "game_matchup_description": {"name": "game_matchup_description", "description": "Description of the team matchup in the format `<home_team_name>` vs `<away_team_name>`", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "game_winning_team_name": {"name": "game_winning_team_name", "description": "Name of the winning team", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "game_winning_team_type": {"name": "game_winning_team_type", "description": "Winning team type (home or away)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "game_absolute_goal_differential": {"name": "game_absolute_goal_differential", "description": "The absolute difference of the home and away team scores", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_team_goals": {"name": "home_team_goals", "description": "Total goals scored by the home team", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "away_team_goals": {"name": "away_team_goals", "description": "Total goals scored by the away team", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "nhl_data://models/analytics/intermediate/f_linescore.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "intermediate"}, "created_at": 1695581342.7332256, "relation_name": "`nhl-breakouts`.`github`.`f_linescore`", "raw_code": "select\n    /* Primary Key */\n    stg_nhl__linescore_id as linescore_id\n\n    /* Identifiers */\n    , game_id\n    , home_team_id\n    , away_team_id\n    , game_winning_team_id\n\n    /* Properties */\n    -- Game-level stats\n    , game_score_description\n    , game_matchup_description\n    , game_winning_team_name\n    , game_winning_team_type\n    , game_absolute_goal_differential\n    -- Team level stats\n    , home_team_goals\n    , away_team_goals\nfrom {{ ref('stg_nhl__linescore') }}", "language": "sql", "refs": [{"name": "stg_nhl__linescore", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.nhl_data.stg_nhl__linescore"]}, "compiled_path": "target/compiled/nhl_data/models/analytics/intermediate/f_linescore.sql", "compiled": true, "compiled_code": "select\n    /* Primary Key */\n    stg_nhl__linescore_id as linescore_id\n\n    /* Identifiers */\n    , game_id\n    , home_team_id\n    , away_team_id\n    , game_winning_team_id\n\n    /* Properties */\n    -- Game-level stats\n    , game_score_description\n    , game_matchup_description\n    , game_winning_team_name\n    , game_winning_team_type\n    , game_absolute_goal_differential\n    -- Team level stats\n    , home_team_goals\n    , away_team_goals\nfrom `nhl-breakouts`.`github`.`stg_nhl__linescore`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.nhl_data.d_draft": {"database": "nhl-breakouts", "schema": "github", "name": "d_draft", "resource_type": "model", "package_name": "nhl_data", "path": "analytics/intermediate/d_draft.sql", "original_file_path": "models/analytics/intermediate/d_draft.sql", "unique_id": "model.nhl_data.d_draft", "fqn": ["nhl_data", "analytics", "intermediate", "d_draft"], "alias": "d_draft", "checksum": {"name": "sha256", "checksum": "31be8c55748c512398790696a397ada46a9c409cfcfca0de27f9d1cce4a38ec0"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Staged NHL entry draft data from the NHL-API", "columns": {"draft_id": {"name": "draft_id", "description": "Unique identifier for an NHL rookie draft (generated via dbt_utils.surrogate_key)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "overall_pick_id": {"name": "overall_pick_id", "description": "Unique identifier for an NHL rookie draft (draft year + overall pick)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "draft_prospect_id": {"name": "draft_prospect_id", "description": "Foreign key that maps to an NHL draft prospect", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "draft_team_id": {"name": "draft_team_id", "description": "Foreign key that maps to the NHL team that drafted the NHL prospect", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "draft_year": {"name": "draft_year", "description": "Year of the NHL entry draft", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "draft_overall_pick": {"name": "draft_overall_pick", "description": "The overall pick in the NHL entry draft. For example, `1` is the first overall pick", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "draft_round": {"name": "draft_round", "description": "The drafting round that the selection was made in", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "draft_round_pick": {"name": "draft_round_pick", "description": "The pick in the NHL entry draft made relative to the round", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "draft_prospect_name": {"name": "draft_prospect_name", "description": "Name of the drafted NHL prospect", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "draft_url": {"name": "draft_url", "description": "URL endpoint", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "draft_team_name": {"name": "draft_team_name", "description": "Name of the NHL team that drafted the NHL prospect", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "nhl_data://models/analytics/intermediate/d_draft.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "intermediate"}, "created_at": 1695581342.7527246, "relation_name": "`nhl-breakouts`.`github`.`d_draft`", "raw_code": "select\n    /* Primary Key */\n    stg_nhl__draft_id as draft_id\n\n    /* Identifiers */\n    , overall_pick_id\n    , draft_prospect_id\n    , draft_team_id\n\n    /* Properties */\n    , draft_year\n    , draft_overall_pick\n    , draft_round\n    , draft_round_pick\n    , draft_prospect_name\n    , draft_url\n    , draft_team_name\nfrom {{ ref('stg_nhl__draft') }}", "language": "sql", "refs": [{"name": "stg_nhl__draft", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.nhl_data.stg_nhl__draft"]}, "compiled_path": "target/compiled/nhl_data/models/analytics/intermediate/d_draft.sql", "compiled": true, "compiled_code": "select\n    /* Primary Key */\n    stg_nhl__draft_id as draft_id\n\n    /* Identifiers */\n    , overall_pick_id\n    , draft_prospect_id\n    , draft_team_id\n\n    /* Properties */\n    , draft_year\n    , draft_overall_pick\n    , draft_round\n    , draft_round_pick\n    , draft_prospect_name\n    , draft_url\n    , draft_team_name\nfrom `nhl-breakouts`.`github`.`stg_nhl__draft`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.nhl_data.d_divisions": {"database": "nhl-breakouts", "schema": "github", "name": "d_divisions", "resource_type": "model", "package_name": "nhl_data", "path": "analytics/intermediate/d_divisions.sql", "original_file_path": "models/analytics/intermediate/d_divisions.sql", "unique_id": "model.nhl_data.d_divisions", "fqn": ["nhl_data", "analytics", "intermediate", "d_divisions"], "alias": "d_divisions", "checksum": {"name": "sha256", "checksum": "615631b8c41c1b3eb5e23318dd40f33cc3ba825cd5229e3032e1a88bcfe2b30f"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Staged NHL division data from the NHL-API", "columns": {"division_id": {"name": "division_id", "description": "Unique identifier for NHL divisions", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "conference_id": {"name": "conference_id", "description": "Foreign key that maps to the NHL conference", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "division_name": {"name": "division_name", "description": "Name of the NHL division", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "division_short_name": {"name": "division_short_name", "description": "Short name for the NHL division", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "division_url": {"name": "division_url", "description": "URL endpoint", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "division_abbreviation": {"name": "division_abbreviation", "description": "Abbreviated NHL conference name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_active": {"name": "is_active", "description": "Whether or not the conference is still active", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "nhl_data://models/analytics/intermediate/d_divisions.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "intermediate"}, "created_at": 1695581342.8650382, "relation_name": "`nhl-breakouts`.`github`.`d_divisions`", "raw_code": "select\n    /* Primary Key */\n    division_id\n\n    /* Identifiers */\n    , conference_id\n\n    /* Properties */\n    , division_name\n    , division_short_name\n    , division_url\n    , division_abbreviation\n    , is_active\n\nfrom {{ ref('stg_nhl__divisions') }}", "language": "sql", "refs": [{"name": "stg_nhl__divisions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.nhl_data.stg_nhl__divisions"]}, "compiled_path": "target/compiled/nhl_data/models/analytics/intermediate/d_divisions.sql", "compiled": true, "compiled_code": "select\n    /* Primary Key */\n    division_id\n\n    /* Identifiers */\n    , conference_id\n\n    /* Properties */\n    , division_name\n    , division_short_name\n    , division_url\n    , division_abbreviation\n    , is_active\n\nfrom `nhl-breakouts`.`github`.`stg_nhl__divisions`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.nhl_data.f_boxscore_player": {"database": "nhl-breakouts", "schema": "github", "name": "f_boxscore_player", "resource_type": "model", "package_name": "nhl_data", "path": "analytics/intermediate/f_boxscore_player.sql", "original_file_path": "models/analytics/intermediate/f_boxscore_player.sql", "unique_id": "model.nhl_data.f_boxscore_player", "fqn": ["nhl_data", "analytics", "intermediate", "f_boxscore_player"], "alias": "f_boxscore_player", "checksum": {"name": "sha256", "checksum": "b1f8a32d6b1ad79f92285549b350d87a6414189d797c4e440757619d7a9655bf"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "NHL boxscore player data from the NHL-API (game-player level). Each row represents an individual player's summarized activity in an NHL game", "columns": {"boxscore_player_id": {"name": "boxscore_player_id", "description": "Unique surrogate key for a player's summarized activity in an NHL game (game_id + team_id + player_id)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "game_id": {"name": "game_id", "description": "Foreign key that maps to an NHL game ID\n##### More about game_id\nThe first 4 digits identify the season of the game (ie. 2017 for the 2017-2018 season). The next 2 digits give the type of game, where 01 = preseason, 02 = regular season, 03 = playoffs, 04 = all-star. The final 4 digits identify the specific game number.\n\nFor regular season and preseason games, this ranges from 0001 to the number of games played. (1271 for seasons with 31 teams (2017 and onwards) and 1230 for seasons with 30 teams).\n\nFor playoff games, the 2nd digit of the specific number gives the round of the playoffs, the 3rd digit specifies the matchup, and the 4th digit specifies the game (out of 7).\n\n[Credit to Drew Hynes' NHL API docs](https://gitlab.com/dword4/nhlapi/-/blob/master/stats-api.md#game-ids)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "team_id": {"name": "team_id", "description": "Foreign key that maps to an NHL team ID", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "player_id": {"name": "player_id", "description": "Foreign key that maps to an NHL player ID", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "team_name": {"name": "team_name", "description": "Name of the NHL team", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "team_type": {"name": "team_type", "description": "Describes the Away / Home status for the team that the player belonged to in that game", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "player_full_name": {"name": "player_full_name", "description": "Full name of the NHL player", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "player_roster_status": {"name": "player_roster_status", "description": "Roster status of the NHL player (e.g. Y, N, I)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "player_position_code": {"name": "player_position_code", "description": "Position code (e.g. C, LW, D)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "time_on_ice": {"name": "time_on_ice", "description": "Time on ice in minutes:seconds (e.g. 21:30)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "assists": {"name": "assists", "description": "Number of assists (primary & secondary)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "goals": {"name": "goals", "description": "Number of goals scored", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shots": {"name": "shots", "description": "Number of shots taken", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hits": {"name": "hits", "description": "Number of hits made", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "powerplay_goals": {"name": "powerplay_goals", "description": "Number of powerplay goals scored", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "powerplay_assists": {"name": "powerplay_assists", "description": "Number of powerplay assists (primary & secondary)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "penalty_minutes": {"name": "penalty_minutes", "description": "Number of penalties taken in minutes", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "faceoff_wins": {"name": "faceoff_wins", "description": "Number of faceoffs won", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "faceoff_taken": {"name": "faceoff_taken", "description": "Number of faceoffs taken", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "takeaways": {"name": "takeaways", "description": "Number of takeaways made", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "giveaways": {"name": "giveaways", "description": "Number of giveaways faulted for", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "short_handed_goals": {"name": "short_handed_goals", "description": "Number of short-handed goals scored", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "short_handed_assists": {"name": "short_handed_assists", "description": "Number of short-handed assists made", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "blocked": {"name": "blocked", "description": "Number of blocked shots", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "plus_minus": {"name": "plus_minus", "description": "Total plus minus in the game - plus for every goal scored while on the ice for, minus for every goal allowed while on the ice", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "even_time_on_ice": {"name": "even_time_on_ice", "description": "Time on ice in minutes:seconds at event-strength (5v5)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "powerplay_time_on_ice": {"name": "powerplay_time_on_ice", "description": "Time on ice in minutes:seconds on the man advantage / powerplay (5v4, 5v3, or 4v3)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "short_handed_time_on_ice": {"name": "short_handed_time_on_ice", "description": "Time on ice in minutes:seconds while short-handed / on the penalty kill (4v5, 3v5, or 3v4)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pim": {"name": "pim", "description": "Penalties in minutes:seconds", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "saves": {"name": "saves", "description": "Number of saves made", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "powerplay_saves": {"name": "powerplay_saves", "description": "Number of saves made on the powerplay", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "short_handed_saves": {"name": "short_handed_saves", "description": "Number of saves made on the penalty kill / short-handed", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "even_saves": {"name": "even_saves", "description": "Number of saves made at even strength", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "short_handed_shots_against": {"name": "short_handed_shots_against", "description": "Number of shots against on the penalth kill / short-handed", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "even_shots_against": {"name": "even_shots_against", "description": "Number of shots against at even strength", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "powerplay_shots_against": {"name": "powerplay_shots_against", "description": "Number of shots against on the powerplay / mad advantage", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "decision": {"name": "decision", "description": "Win (W) or Loss (L) for goalies only (NULL if player)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "save_percentage": {"name": "save_percentage", "description": "Percentage of shots faced that were saved (100% * (Number of shots saved / Number of shots))", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "powerplay_save_percentage": {"name": "powerplay_save_percentage", "description": "Percentage of shots faced on the powerplay that were saved (100% * (Number of shots saved / Number of shots))", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "even_strength_save_percentage": {"name": "even_strength_save_percentage", "description": "Percentage of shots faced at even strength that were saved (100% * (Number of shots saved / Number of shots))", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "nhl_data://models/analytics/intermediate/f_boxscore_player.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "intermediate"}, "created_at": 1695581342.7605736, "relation_name": "`nhl-breakouts`.`github`.`f_boxscore_player`", "raw_code": "with\n\nhome_team as (\n    select * from {{ ref('stg_nhl__boxscore') }} where team_type = 'Home'\n)\n\n, away_team as (\n    select * from {{ ref('stg_nhl__boxscore') }} where team_type = 'Away'\n)\n\n, boxscore_player as (\n    select * from home_team\n    union all\n    select * from away_team\n)\n\nselect\n    /* Primary Key */\n    stg_nhl__boxscore_id as boxscore_player_id\n\n    /* Foreign Keys */\n    , game_id\n    , team_id\n    , player_id\n\n    /* Properties */\n    , team_name\n    , team_type\n\n    /* Player stats */\n    , player_full_name\n    , player_roster_status\n    , player_position_code\n    , time_on_ice\n    , assists\n    , goals\n    , shots\n    , hits\n    , powerplay_goals\n    , powerplay_assists\n    , penalty_minutes\n    , faceoff_wins\n    , faceoff_taken\n    , takeaways\n    , giveaways\n    , short_handed_goals\n    , short_handed_assists\n    , blocked\n    , plus_minus\n    , even_time_on_ice\n    , powerplay_time_on_ice\n    , short_handed_time_on_ice\n    , pim\n    , saves\n    , powerplay_saves\n    , short_handed_saves\n    , even_saves\n    , short_handed_shots_against\n    , even_shots_against\n    , powerplay_shots_against\n    , decision\n    , save_percentage\n    , powerplay_save_percentage\n    , even_strength_save_percentage\nfrom boxscore_player", "language": "sql", "refs": [{"name": "stg_nhl__boxscore", "package": null, "version": null}, {"name": "stg_nhl__boxscore", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.nhl_data.stg_nhl__boxscore"]}, "compiled_path": "target/compiled/nhl_data/models/analytics/intermediate/f_boxscore_player.sql", "compiled": true, "compiled_code": "with\n\nhome_team as (\n    select * from `nhl-breakouts`.`github`.`stg_nhl__boxscore` where team_type = 'Home'\n)\n\n, away_team as (\n    select * from `nhl-breakouts`.`github`.`stg_nhl__boxscore` where team_type = 'Away'\n)\n\n, boxscore_player as (\n    select * from home_team\n    union all\n    select * from away_team\n)\n\nselect\n    /* Primary Key */\n    stg_nhl__boxscore_id as boxscore_player_id\n\n    /* Foreign Keys */\n    , game_id\n    , team_id\n    , player_id\n\n    /* Properties */\n    , team_name\n    , team_type\n\n    /* Player stats */\n    , player_full_name\n    , player_roster_status\n    , player_position_code\n    , time_on_ice\n    , assists\n    , goals\n    , shots\n    , hits\n    , powerplay_goals\n    , powerplay_assists\n    , penalty_minutes\n    , faceoff_wins\n    , faceoff_taken\n    , takeaways\n    , giveaways\n    , short_handed_goals\n    , short_handed_assists\n    , blocked\n    , plus_minus\n    , even_time_on_ice\n    , powerplay_time_on_ice\n    , short_handed_time_on_ice\n    , pim\n    , saves\n    , powerplay_saves\n    , short_handed_saves\n    , even_saves\n    , short_handed_shots_against\n    , even_shots_against\n    , powerplay_shots_against\n    , decision\n    , save_percentage\n    , powerplay_save_percentage\n    , even_strength_save_percentage\nfrom boxscore_player", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.nhl_data.f_games_scratches": {"database": "nhl-breakouts", "schema": "github", "name": "f_games_scratches", "resource_type": "model", "package_name": "nhl_data", "path": "analytics/intermediate/f_games_scratches.sql", "original_file_path": "models/analytics/intermediate/f_games_scratches.sql", "unique_id": "model.nhl_data.f_games_scratches", "fqn": ["nhl_data", "analytics", "intermediate", "f_games_scratches"], "alias": "f_games_scratches", "checksum": {"name": "sha256", "checksum": "bdb039d0eba4c1f9bf3e7fe19a194ae4ee5964fe95455a7fa9d581a4aa41bc90"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "A table containing `game_id` and corresponding `player_id` of players who were scratched either due to injury or a coach's decision", "columns": {"game_id": {"name": "game_id", "description": "Foreign key that maps to an NHL game\n##### More about game_id\nThe first 4 digits identify the season of the game (ie. 2017 for the 2017-2018 season). The next 2 digits give the type of game, where 01 = preseason, 02 = regular season, 03 = playoffs, 04 = all-star. The final 4 digits identify the specific game number.\n\nFor regular season and preseason games, this ranges from 0001 to the number of games played. (1271 for seasons with 31 teams (2017 and onwards) and 1230 for seasons with 30 teams).\n\nFor playoff games, the 2nd digit of the specific number gives the round of the playoffs, the 3rd digit specifies the matchup, and the 4th digit specifies the game (out of 7).\n\n[Credit to Drew Hynes' NHL API docs](https://gitlab.com/dword4/nhlapi/-/blob/master/stats-api.md#game-ids)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "player_id": {"name": "player_id", "description": "Foreign key that maps to an NHL player", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "nhl_data://models/analytics/intermediate/f_games_scratches.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "intermediate"}, "created_at": 1695581342.8470664, "relation_name": "`nhl-breakouts`.`github`.`f_games_scratches`", "raw_code": "with\n\nhome_team_scratches as (\n    select\n        boxscore.game_id\n        , scratches as player_id\n    from {{ ref('f_boxscore_team') }} as boxscore\n    , unnest(boxscore.team_scratches) as scratches\n    where team_type = 'Home'\n)\n\n, away_team_scratches as (\n    select\n        boxscore.game_id\n        , scratches as player_id\n    from {{ ref('f_boxscore_team') }} as boxscore\n    , unnest(boxscore.team_scratches) as scratches\n    where team_type = 'Away'\n)\n\n, unioned as (\n    select\n        game_id\n        , player_id\n    from home_team_scratches\n\n    union all\n\n    select\n        game_id\n        , player_id\n    from away_team_scratches\n)\n\nselect * from unioned", "language": "sql", "refs": [{"name": "f_boxscore_team", "package": null, "version": null}, {"name": "f_boxscore_team", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.nhl_data.f_boxscore_team"]}, "compiled_path": "target/compiled/nhl_data/models/analytics/intermediate/f_games_scratches.sql", "compiled": true, "compiled_code": "with\n\nhome_team_scratches as (\n    select\n        boxscore.game_id\n        , scratches as player_id\n    from `nhl-breakouts`.`github`.`f_boxscore_team` as boxscore\n    , unnest(boxscore.team_scratches) as scratches\n    where team_type = 'Home'\n)\n\n, away_team_scratches as (\n    select\n        boxscore.game_id\n        , scratches as player_id\n    from `nhl-breakouts`.`github`.`f_boxscore_team` as boxscore\n    , unnest(boxscore.team_scratches) as scratches\n    where team_type = 'Away'\n)\n\n, unioned as (\n    select\n        game_id\n        , player_id\n    from home_team_scratches\n\n    union all\n\n    select\n        game_id\n        , player_id\n    from away_team_scratches\n)\n\nselect * from unioned", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.nhl_data.f_games": {"database": "nhl-breakouts", "schema": "github", "name": "f_games", "resource_type": "model", "package_name": "nhl_data", "path": "analytics/intermediate/f_games.sql", "original_file_path": "models/analytics/intermediate/f_games.sql", "unique_id": "model.nhl_data.f_games", "fqn": ["nhl_data", "analytics", "intermediate", "f_games"], "alias": "f_games", "checksum": {"name": "sha256", "checksum": "0e6c9a2b840a8f26a8143662846c081cd92f876898155167cf71bb5e4db5e66f"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "NHL boxscore & linescore data from the NHL-API", "columns": {"game_id": {"name": "game_id", "description": "Unique identifier for an NHL game (game_id)\n##### More about game_id\nThe first 4 digits identify the season of the game (ie. 2017 for the 2017-2018 season). The next 2 digits give the type of game, where 01 = preseason, 02 = regular season, 03 = playoffs, 04 = all-star. The final 4 digits identify the specific game number.\n\nFor regular season and preseason games, this ranges from 0001 to the number of games played. (1271 for seasons with 31 teams (2017 and onwards) and 1230 for seasons with 30 teams).\n\nFor playoff games, the 2nd digit of the specific number gives the round of the playoffs, the 3rd digit specifies the matchup, and the 4th digit specifies the game (out of 7).\n\n[Credit to Drew Hynes' NHL API docs](https://gitlab.com/dword4/nhlapi/-/blob/master/stats-api.md#game-ids)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_team_id": {"name": "home_team_id", "description": "Foreign key that maps to an NHL team (home team)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "away_team_id": {"name": "away_team_id", "description": "Foreign key that maps to an NHL team (away team)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "game_score_description": {"name": "game_score_description", "description": "Description of the NHL game scoreline", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "game_matchup_description": {"name": "game_matchup_description", "description": "Description of the participants in the NHL game", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "game_winning_team_id": {"name": "game_winning_team_id", "description": "Winning team's team ID", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "game_winning_team_name": {"name": "game_winning_team_name", "description": "Winning team's team name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "game_absolute_goal_differential": {"name": "game_absolute_goal_differential", "description": "Absolute goal differential between the winner and loser", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_team_goals": {"name": "home_team_goals", "description": "Number of goals scored by the home team", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "away_team_goals": {"name": "away_team_goals", "description": "Number of goals scored by the away team", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_team_name": {"name": "home_team_name", "description": "Home team's team name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_team_pim": {"name": "home_team_pim", "description": "Number of penalty minutes taken by the home team", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_team_shots": {"name": "home_team_shots", "description": "Number of shots taken by the home team", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_team_powerplay_goals": {"name": "home_team_powerplay_goals", "description": "Number of powerplay goals scored by the home team", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_team_powerplay_opportunities": {"name": "home_team_powerplay_opportunities", "description": "Number of powerplay opportunities had by the home team", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_team_faceoff_percentage": {"name": "home_team_faceoff_percentage", "description": "Faceoff percentage (wins / attempts) of the home team", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_team_blocked": {"name": "home_team_blocked", "description": "Number of blocked shots by the home team", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_team_takeaways": {"name": "home_team_takeaways", "description": "Number of takeaways made by the home team", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_team_giveaways": {"name": "home_team_giveaways", "description": "Number of giveaways faulted for by the home team", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_team_hits": {"name": "home_team_hits", "description": "Number of hits made by the home team", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "away_team_name": {"name": "away_team_name", "description": "Away team's team name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "away_team_pim": {"name": "away_team_pim", "description": "Number of penalty minutes taken by the away team", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "away_team_shots": {"name": "away_team_shots", "description": "Number of shots taken by the away team", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "away_team_powerplay_goals": {"name": "away_team_powerplay_goals", "description": "Number of powerplay goals scored by the away team", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "away_team_powerplay_opportunities": {"name": "away_team_powerplay_opportunities", "description": "Number of powerplay opportunities had by the away team", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "away_team_faceoff_percentage": {"name": "away_team_faceoff_percentage", "description": "Faceoff percentage (wins / attempts) of the away team", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "away_team_blocked": {"name": "away_team_blocked", "description": "Number of blocked shots by the away team", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "away_team_takeaways": {"name": "away_team_takeaways", "description": "Number of takeaways made by the away team", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "away_team_giveaways": {"name": "away_team_giveaways", "description": "Number of giveaways faulted for by the away team", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "away_team_hits": {"name": "away_team_hits", "description": "Number of hits made by the away team", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "nhl_data://models/analytics/intermediate/f_games.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "intermediate"}, "created_at": 1695581342.7262778, "relation_name": "`nhl-breakouts`.`github`.`f_games`", "raw_code": "with\n\nlinescore as (\n    select * from {{ ref('stg_nhl__linescore') }}\n)\n\n, boxscore_home_team as (\n    select * from {{ ref('f_boxscore_team') }}\n    where team_type = 'Home'\n)\n\n, boxscore_away_team as (\n    select * from {{ ref('f_boxscore_team') }}\n    where team_type = 'Away'\n)\n\n, final as (\n    select\n    /* Primary Key */\n        linescore.game_id\n\n        /* Identifiers */\n        , linescore.home_team_id\n        , linescore.away_team_id\n\n        /* Properties */\n        -- Game-level stats\n        , linescore.game_score_description\n        , linescore.game_matchup_description\n        , linescore.game_winning_team_id\n        , linescore.game_winning_team_name\n        , linescore.game_absolute_goal_differential\n        , linescore.home_team_goals\n        , linescore.away_team_goals\n        -- Home team stats\n        , boxscore_home_team.team_name as home_team_name\n        , boxscore_home_team.team_pim as home_team_pim\n        , boxscore_home_team.team_shots as home_team_shots\n        , boxscore_home_team.team_powerplay_goals as home_team_powerplay_goals\n        , boxscore_home_team.team_powerplay_opportunities as home_team_powerplay_opportunities\n        , boxscore_home_team.team_faceoff_percentage as home_team_faceoff_percentage\n        , boxscore_home_team.team_blocked as home_team_blocked\n        , boxscore_home_team.team_takeaways as home_team_takeaways\n        , boxscore_home_team.team_giveaways as home_team_giveaways\n        , boxscore_home_team.team_hits as home_team_hits\n        -- Away team stats\n        , boxscore_away_team.team_name as away_team_name\n        , boxscore_away_team.team_pim as away_team_pim\n        , boxscore_away_team.team_shots as away_team_shots\n        , boxscore_away_team.team_powerplay_goals as away_team_powerplay_goals\n        , boxscore_away_team.team_powerplay_opportunities as away_team_powerplay_opportunities\n        , boxscore_away_team.team_faceoff_percentage as away_team_faceoff_percentage\n        , boxscore_away_team.team_blocked as away_team_blocked\n        , boxscore_away_team.team_takeaways as away_team_takeaways\n        , boxscore_away_team.team_giveaways as away_team_giveaways\n        , boxscore_away_team.team_hits as away_team_hits\n    from linescore\n    left join boxscore_home_team\n        on\n            linescore.game_id = boxscore_home_team.game_id\n            and linescore.home_team_id = boxscore_home_team.team_id\n    left join boxscore_away_team\n        on\n            linescore.game_id = boxscore_away_team.game_id\n            and linescore.away_team_id = boxscore_away_team.team_id\n)\n\nselect * from final", "language": "sql", "refs": [{"name": "stg_nhl__linescore", "package": null, "version": null}, {"name": "f_boxscore_team", "package": null, "version": null}, {"name": "f_boxscore_team", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.nhl_data.stg_nhl__linescore", "model.nhl_data.f_boxscore_team"]}, "compiled_path": "target/compiled/nhl_data/models/analytics/intermediate/f_games.sql", "compiled": true, "compiled_code": "with\n\nlinescore as (\n    select * from `nhl-breakouts`.`github`.`stg_nhl__linescore`\n)\n\n, boxscore_home_team as (\n    select * from `nhl-breakouts`.`github`.`f_boxscore_team`\n    where team_type = 'Home'\n)\n\n, boxscore_away_team as (\n    select * from `nhl-breakouts`.`github`.`f_boxscore_team`\n    where team_type = 'Away'\n)\n\n, final as (\n    select\n    /* Primary Key */\n        linescore.game_id\n\n        /* Identifiers */\n        , linescore.home_team_id\n        , linescore.away_team_id\n\n        /* Properties */\n        -- Game-level stats\n        , linescore.game_score_description\n        , linescore.game_matchup_description\n        , linescore.game_winning_team_id\n        , linescore.game_winning_team_name\n        , linescore.game_absolute_goal_differential\n        , linescore.home_team_goals\n        , linescore.away_team_goals\n        -- Home team stats\n        , boxscore_home_team.team_name as home_team_name\n        , boxscore_home_team.team_pim as home_team_pim\n        , boxscore_home_team.team_shots as home_team_shots\n        , boxscore_home_team.team_powerplay_goals as home_team_powerplay_goals\n        , boxscore_home_team.team_powerplay_opportunities as home_team_powerplay_opportunities\n        , boxscore_home_team.team_faceoff_percentage as home_team_faceoff_percentage\n        , boxscore_home_team.team_blocked as home_team_blocked\n        , boxscore_home_team.team_takeaways as home_team_takeaways\n        , boxscore_home_team.team_giveaways as home_team_giveaways\n        , boxscore_home_team.team_hits as home_team_hits\n        -- Away team stats\n        , boxscore_away_team.team_name as away_team_name\n        , boxscore_away_team.team_pim as away_team_pim\n        , boxscore_away_team.team_shots as away_team_shots\n        , boxscore_away_team.team_powerplay_goals as away_team_powerplay_goals\n        , boxscore_away_team.team_powerplay_opportunities as away_team_powerplay_opportunities\n        , boxscore_away_team.team_faceoff_percentage as away_team_faceoff_percentage\n        , boxscore_away_team.team_blocked as away_team_blocked\n        , boxscore_away_team.team_takeaways as away_team_takeaways\n        , boxscore_away_team.team_giveaways as away_team_giveaways\n        , boxscore_away_team.team_hits as away_team_hits\n    from linescore\n    left join boxscore_home_team\n        on\n            linescore.game_id = boxscore_home_team.game_id\n            and linescore.home_team_id = boxscore_home_team.team_id\n    left join boxscore_away_team\n        on\n            linescore.game_id = boxscore_away_team.game_id\n            and linescore.away_team_id = boxscore_away_team.team_id\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.nhl_data.d_conferences": {"database": "nhl-breakouts", "schema": "github", "name": "d_conferences", "resource_type": "model", "package_name": "nhl_data", "path": "analytics/intermediate/d_conferences.sql", "original_file_path": "models/analytics/intermediate/d_conferences.sql", "unique_id": "model.nhl_data.d_conferences", "fqn": ["nhl_data", "analytics", "intermediate", "d_conferences"], "alias": "d_conferences", "checksum": {"name": "sha256", "checksum": "6f9434fb0f36ab0bec6c7819b8c1d4f31888703884708bafc23d0474dd1be20e"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Staged NHL conferences data from the NHL-API", "columns": {"conference_id": {"name": "conference_id", "description": "Unique identifier for NHL conferences", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "conference_name": {"name": "conference_name", "description": "Name of the NHL conference", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "conference_url": {"name": "conference_url", "description": "URL endpoint", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "conference_abbreviation": {"name": "conference_abbreviation", "description": "Abbreviated NHL conference name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "conference_short_name": {"name": "conference_short_name", "description": "Short name for the NHL conference", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_active": {"name": "is_active", "description": "Whether or not the conference is still active", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "nhl_data://models/analytics/intermediate/d_conferences.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "intermediate"}, "created_at": 1695581342.879199, "relation_name": "`nhl-breakouts`.`github`.`d_conferences`", "raw_code": "select\n    /* Primary Key */\n    conference_id\n\n    /* Properties */\n    , conference_name\n    , conference_url\n    , conference_abbreviation\n    , conference_short_name\n    , is_active\nfrom {{ ref('stg_nhl__conferences') }}", "language": "sql", "refs": [{"name": "stg_nhl__conferences", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.nhl_data.stg_nhl__conferences"]}, "compiled_path": "target/compiled/nhl_data/models/analytics/intermediate/d_conferences.sql", "compiled": true, "compiled_code": "select\n    /* Primary Key */\n    conference_id\n\n    /* Properties */\n    , conference_name\n    , conference_url\n    , conference_abbreviation\n    , conference_short_name\n    , is_active\nfrom `nhl-breakouts`.`github`.`stg_nhl__conferences`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.nhl_data.d_shifts_time": {"database": "nhl-breakouts", "schema": "github", "name": "d_shifts_time", "resource_type": "model", "package_name": "nhl_data", "path": "analytics/intermediate/d_shifts_time.sql", "original_file_path": "models/analytics/intermediate/d_shifts_time.sql", "unique_id": "model.nhl_data.d_shifts_time", "fqn": ["nhl_data", "analytics", "intermediate", "d_shifts_time"], "alias": "d_shifts_time", "checksum": {"name": "sha256", "checksum": "ee1a29cc4f09e796859e3b57ccd096a37c3cfec693764f21dc9c59b728b1a55c"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "NHL shift-second level dataset, with each row being a second (s) of a player's shift in an NHL game", "columns": {"shift_id": {"name": "shift_id", "description": "Unique identifier for an NHL shift-second (e.g. {shift_id}_{second})", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "game_id": {"name": "game_id", "description": "Foreign key that maps to an NHL game\n##### More about game_id\nThe first 4 digits identify the season of the game (ie. 2017 for the 2017-2018 season). The next 2 digits give the type of game, where 01 = preseason, 02 = regular season, 03 = playoffs, 04 = all-star. The final 4 digits identify the specific game number.\n\nFor regular season and preseason games, this ranges from 0001 to the number of games played. (1271 for seasons with 31 teams (2017 and onwards) and 1230 for seasons with 30 teams).\n\nFor playoff games, the 2nd digit of the specific number gives the round of the playoffs, the 3rd digit specifies the matchup, and the 4th digit specifies the game (out of 7).\n\n[Credit to Drew Hynes' NHL API docs](https://gitlab.com/dword4/nhlapi/-/blob/master/stats-api.md#game-ids)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "player_id": {"name": "player_id", "description": "Foreign key that maps to an NHL player ID", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "team_id": {"name": "team_id", "description": "Foreign key that maps to an NHL team ID", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shift_number": {"name": "shift_number", "description": "Custom shift number, counted from the start of the game and excluding dups (e.g. 2 = player's second shift of game, 0 = goal)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shift_ids": {"name": "shift_ids", "description": "Concatenation of all of the shift_ids matched from the original shifts dataset for that play", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shift_numbers": {"name": "shift_numbers", "description": "Concatenation of all of the shift_numbers matched from the original shifts dataset for that play", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_numbers": {"name": "event_numbers", "description": "Concatenation of all of the event_numbers matched from the original shifts dataset for that play", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "start_time": {"name": "start_time", "description": "The start time of the shift, relative to the start of the period (e.g. 14:00)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "end_time": {"name": "end_time", "description": "The end time of the shift, relative to the start of the period (14:00)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "duration": {"name": "duration", "description": "The duration of the shift, relative to the start of the shift (00:41)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "duration_seconds_elapsed": {"name": "duration_seconds_elapsed", "description": "The time in seconds elapsed from the start of the shift to the end of the shift (repeats at the shift-level)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "start_seconds_elapsed": {"name": "start_seconds_elapsed", "description": "The time in seconds elapsed in the game at the start of the shift (repeats at the shift-level)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "end_seconds_elapsed": {"name": "end_seconds_elapsed", "description": "The time in seconds elapsed in the game at the end of the shift (repeats at the shift-level)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "period": {"name": "period", "description": "The period in which the event occured (e.g. 3)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "period_type": {"name": "period_type", "description": "The type of period in which the event occured (e.g. Regular)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_away_team": {"name": "home_away_team", "description": "Provides player's team visiting status (e.g. 'home', 'away')", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "game_type_description": {"name": "game_type_description", "description": "Description for the type of game played, enhancing game_type (e.g. Pre-season, Regular, Playoffs, All-star)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "type_code": {"name": "type_code", "description": "Provides the type code for a player's shift - these have meaning, but currently no dictionary has been found", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "detail_code": {"name": "detail_code", "description": "Provides the detail code for a player's shift - these have meaning, but currently no dictionary has been found", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "player_full_name": {"name": "player_full_name", "description": "The player's full name (first name, last name)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_goal": {"name": "is_goal", "description": "Boolean flag for whether or not the recorded shift was in-fact a goal", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_period_start": {"name": "is_period_start", "description": "Whether or not the second in which the play occured maps to the second in which the player started his shift and the period begins", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_period_end": {"name": "is_period_end", "description": "Whether or not the second in which the play occured maps to the second in which the player started his shift and the period finished", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "goal_game_state": {"name": "goal_game_state", "description": "Provides the state of the game for plays that resulted in a goal (e.g. PPG, EVG)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "goal_assisters": {"name": "goal_assisters", "description": "Provides the full names of the assisters when `is_goal = True` and the goal was assisted. Uses the following syntax - {Primary assister full name}, {Secondary assiter full name}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "goal_primary_assister_full_name": {"name": "goal_primary_assister_full_name", "description": "Full name of the primary assister when `is_goal = True` and the goal was assisted", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "goal_secondary_assister_full_name": {"name": "goal_secondary_assister_full_name", "description": "Full name of the secondary assister when `is_goal = True` and the goal had a primary and secondary assist", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "game_time_seconds": {"name": "game_time_seconds", "description": "The time in seconds elapsed in the entire game", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shift_time_seconds": {"name": "shift_time_seconds", "description": "The number of seconds elapsed into the shift for a given player", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_shift_start": {"name": "is_shift_start", "description": "Boolean flag for whether or not the recorded player-shift-second was at the start of the game", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_shift_end": {"name": "is_shift_end", "description": "Boolean flag for whether or not the recorded player-shift-second was at the end of the game", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_shift_start_period_start": {"name": "is_shift_start_period_start", "description": "Boolean flag for whether or not the recorded player-shift-second was the start of the shift and also the start of the game", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_shift_start_not_period_start": {"name": "is_shift_start_not_period_start", "description": "Boolean flag for whether or not the recorded player-shift-second was the start of the shift but not the start of the game", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_shift_end_period_end": {"name": "is_shift_end_period_end", "description": "Boolean flag for whether or not the recorded player-shift-second was the end of the shift and also the end of the game", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "game_state": {"name": "game_state", "description": "The game strength state in numbers (e.g. 5v5). Syntax used - {home players on ice}v{away players on ice}, excludes goalies", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "game_state_description": {"name": "game_state_description", "description": "The game strength state described in full (e.g. home:5-away:5). Syntax used - home:{home players on ice}-away:{away players on ice}, excludes goalies", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "game_state_skaters": {"name": "game_state_skaters", "description": "Grouped description of the game_state strength relative to the player's team (e.g. even strength, skater advantage)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_goalie_pulled": {"name": "home_goalie_pulled", "description": "Boolean flag for whether or not the recorded shift-second occured at the same time where the home team's goalie was pulled", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "away_goalie_pulled": {"name": "away_goalie_pulled", "description": "Boolean flag for whether or not the recorded shift-second occured at the same time where the away team's goalie was pulled", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_skaters": {"name": "home_skaters", "description": "Provides an array of player IDs for the home players that were on the ice at the same second in which the player-shift-second occured (e.g. 8479425,8481433,8477479,8477946,8470657), excludes goalies", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "away_skaters": {"name": "away_skaters", "description": "Provides an array of player IDs for the away players that were on the ice at the same second in which the player-shift-second occured (e.g. 8479425,8481433,8477479,8477946,8470657), excludes goalies", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_skaters_on_ice": {"name": "home_skaters_on_ice", "description": "The number of home skaters on the ice at the same second in which the player-shift-second occured, calculated as `home_defence_on_ice + home_forward_on_ice` (e.g. 5)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "away_skaters_on_ice": {"name": "away_skaters_on_ice", "description": "The number of away skaters on the ice at the same second in which the player-shift-second occured, calculated as `away_defence_on_ice + away_forward_on_ice` (e.g. 5)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_goalie_on_ice": {"name": "home_goalie_on_ice", "description": "The number of home goalies on the ice at the same second in which the player-shift-second occured", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_defence_on_ice": {"name": "home_defence_on_ice", "description": "The number of home defencemen on the ice at the same second in which the player-shift-second occured", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_forward_on_ice": {"name": "home_forward_on_ice", "description": "The number of home forwards on the ice at the same second in which the player-shift-second occured", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "away_goalie_on_ice": {"name": "away_goalie_on_ice", "description": "The number of away goalies on the ice at the same second in which the player-shift-second occured", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "away_defence_on_ice": {"name": "away_defence_on_ice", "description": "The number of away defencemen on the ice at the same second in which the player-shift-second occured", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "away_forward_on_ice": {"name": "away_forward_on_ice", "description": "The number of away forwards on the ice at the same second in which the player-shift-second occured", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "nhl_data://models/analytics/intermediate/d_shifts_time.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "intermediate"}, "created_at": 1695581342.887758, "relation_name": "`nhl-breakouts`.`github`.`d_shifts_time`", "raw_code": "with\n\ngame_seconds as (\n    -- generates a series of 10800 seconds\n    select -1 + row_number() over () as seconds\n    from unnest((select split(format(\"%10800s\", \"\"), '') as h from (select null))) as pos -- noqa: disable=L036,L042\n    order by seconds -- noqa: enable=L036,L042\n)\n\n, player_shift_seconds as (\n    select\n        concat(shifts.shift_id, \"_\", gs.seconds) as shift_id\n        , shifts.shift_number\n        , shifts.game_id\n        , shifts.player_id\n        , shifts.team_id\n        , shifts.home_away_team\n        , shifts.shift_ids\n        , shifts.shift_numbers\n        , shifts.event_numbers\n        , shifts.game_type_description\n        , shifts.type_code\n        , shifts.detail_code\n        , shifts.player_full_name\n        , shifts.is_goal\n        , shifts.is_period_start\n        , shifts.is_period_end\n        , shifts.goal_game_state\n        , shifts.goal_assisters\n        , shifts.goal_primary_assister_full_name\n        , shifts.goal_secondary_assister_full_name\n        , shifts.period\n        , shifts.period_type\n        , shifts.start_seconds_elapsed\n        , shifts.end_seconds_elapsed\n        , shifts.duration_seconds_elapsed\n        , shifts.start_time\n        , shifts.end_time\n        , shifts.duration\n        , gs.seconds as game_time_seconds\n        , (gs.seconds - shifts.start_seconds_elapsed) as shift_time_seconds\n        , players.primary_position_abbreviation\n        , coalesce(gs.seconds = shifts.start_seconds_elapsed, false) as is_shift_start\n        , coalesce(gs.seconds = shifts.end_seconds_elapsed, false) as is_shift_end\n        , coalesce(gs.seconds = shifts.start_seconds_elapsed and shifts.is_period_start is true, false) as is_shift_start_period_start\n        , coalesce(gs.seconds = shifts.start_seconds_elapsed and shifts.is_period_start is false, false) as is_shift_start_not_period_start\n        , coalesce(gs.seconds = shifts.start_seconds_elapsed and shifts.is_period_end is true, false) as is_shift_end_period_end\n\n    from {{ ref('d_shifts') }} as shifts\n    inner join game_seconds as gs on gs.seconds between shifts.start_seconds_elapsed and shifts.end_seconds_elapsed\n    left join {{ ref('d_players') }} as players on players.player_id = shifts.player_id\n    --where (case when gs.seconds = shifts.start_seconds_elapsed and is_period_end is true then true else false end) is false -- remove the shift that ends the period\n    {# where shifts.game_id = 2015021169 #}\n)\n\n-- lists players and count of positions on ice for each game second\n, game_second_skaters_on_ice as (\n    select\n        game_id\n        , period\n        , game_time_seconds\n        , sum(case when home_away_team = 'home' and primary_position_abbreviation = 'G' and is_shift_start_not_period_start is false then 1 else 0 end) as home_goalie_on_ice\n        , sum(case when home_away_team = 'away' and primary_position_abbreviation = 'G' and is_shift_start_not_period_start is false then 1 else 0 end) as away_goalie_on_ice\n        , sum(case when home_away_team = 'home' and primary_position_abbreviation = 'D' and is_shift_start_not_period_start is false then 1 else 0 end) as home_defence_on_ice\n        , sum(case when home_away_team = 'away' and primary_position_abbreviation = 'D' and is_shift_start_not_period_start is false then 1 else 0 end) as away_defence_on_ice\n        , sum(case when home_away_team = 'home' and primary_position_abbreviation not in ('G', 'D') and is_shift_start_not_period_start is false then 1 else 0 end) as home_forward_on_ice\n        , sum(case when home_away_team = 'away' and primary_position_abbreviation not in ('G', 'D') and is_shift_start_not_period_start is false then 1 else 0 end) as away_forward_on_ice\n        , array_agg(case when home_away_team = 'home' and is_shift_start_not_period_start is false then player_id end ignore nulls) as home_skaters\n        , array_agg(case when home_away_team = 'away' and is_shift_start_not_period_start is false then player_id end ignore nulls) as away_skaters\n    from player_shift_seconds\n    group by 1, 2, 3\n)\n\n-- as of 7/10/2022, 14k duplicates were introduced b/c of shifts that start and end back-to-back (yep, shifts data is brutal)\n-- rule: if a player's shift overlaps, choose the shift that started earlier as the one to keep (min takes the first shift, max takes the susbsequent)\n, dedup_game_time_seconds as (\n    select\n        pss.game_id\n        , pss.player_id\n        , pss.game_time_seconds\n        , pss.period\n        , min(shift_id) as keep_shift_id\n        , max(shift_id) as remove_shift_id\n        , count(*) as test\n        , string_agg(shift_id) as all_shift_ids\n    from player_shift_seconds as pss\n    where pss.is_goal is not true\n    group by 1, 2, 3, 4\n    having count(*) > 1\n    order by 1, 2, 3, 4\n)\n\nselect\n    sbs.shift_id\n    , sbs.game_id\n    , sbs.player_id\n    , sbs.team_id\n    , sbs.shift_number\n    , sbs.shift_ids\n    , sbs.shift_numbers\n    , sbs.event_numbers\n    , sbs.start_time\n    , sbs.end_time\n    , sbs.duration\n    , sbs.duration_seconds_elapsed\n    , sbs.start_seconds_elapsed\n    , sbs.end_seconds_elapsed\n    , sbs.period\n    , sbs.period_type\n    , sbs.home_away_team\n    , sbs.game_type_description\n    , sbs.type_code\n    , sbs.detail_code\n    , sbs.player_full_name\n    , sbs.is_goal\n    , sbs.is_period_start\n    , sbs.is_period_end\n    , sbs.goal_game_state\n    , sbs.goal_assisters\n    , sbs.goal_primary_assister_full_name\n    , sbs.goal_secondary_assister_full_name\n    , sbs.game_time_seconds\n    , sbs.shift_time_seconds\n    , sbs.is_shift_start\n    , sbs.is_shift_end\n    , sbs.is_shift_start_period_start\n    , sbs.is_shift_start_not_period_start\n    , sbs.is_shift_end_period_end\n    , concat((soi.home_defence_on_ice + soi.home_forward_on_ice), 'v', (soi.away_defence_on_ice + soi.away_forward_on_ice)) as game_state\n    , concat('home:', (soi.home_defence_on_ice + soi.home_forward_on_ice), '-away:', (soi.away_defence_on_ice + soi.away_forward_on_ice)) as game_state_description\n    , case\n        when (soi.home_defence_on_ice + soi.home_forward_on_ice) = (soi.away_defence_on_ice + soi.away_forward_on_ice) then 'even strength'\n        when sbs.home_away_team = 'home' and (soi.home_defence_on_ice + soi.home_forward_on_ice) > (soi.away_defence_on_ice + soi.away_forward_on_ice) then 'skater advantage'\n        when sbs.home_away_team = 'home' and (soi.home_defence_on_ice + soi.home_forward_on_ice) < (soi.away_defence_on_ice + soi.away_forward_on_ice) then 'skater disadvantage'\n        when sbs.home_away_team = 'away' and (soi.away_defence_on_ice + soi.away_forward_on_ice) > (soi.home_defence_on_ice + soi.home_forward_on_ice) then 'skater advantage'\n        when sbs.home_away_team = 'away' and (soi.away_defence_on_ice + soi.away_forward_on_ice) < (soi.home_defence_on_ice + soi.home_forward_on_ice) then 'skater disadvantage'\n        else 'unknown'\n    end as game_state_skaters\n    , soi.home_goalie_on_ice = 0 as home_goalie_pulled\n    , soi.away_goalie_on_ice = 0 as away_goalie_pulled\n    , soi.home_skaters\n    , soi.away_skaters\n    , (soi.home_defence_on_ice + soi.home_forward_on_ice) as home_skaters_on_ice\n    , (soi.away_defence_on_ice + soi.away_forward_on_ice) as away_skaters_on_ice\n    , soi.home_goalie_on_ice\n    , soi.home_defence_on_ice\n    , soi.home_forward_on_ice\n    , soi.away_goalie_on_ice\n    , soi.away_defence_on_ice\n    , soi.away_forward_on_ice\nfrom player_shift_seconds as sbs\nleft join game_second_skaters_on_ice as soi\n    on\n        sbs.game_id = soi.game_id\n        and sbs.game_time_seconds = soi.game_time_seconds\n        and sbs.period = soi.period\nleft join dedup_game_time_seconds as d on sbs.shift_id = d.remove_shift_id\nwhere d.remove_shift_id is null", "language": "sql", "refs": [{"name": "d_shifts", "package": null, "version": null}, {"name": "d_players", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.nhl_data.d_shifts", "model.nhl_data.d_players"]}, "compiled_path": "target/compiled/nhl_data/models/analytics/intermediate/d_shifts_time.sql", "compiled": true, "compiled_code": "with\n\ngame_seconds as (\n    -- generates a series of 10800 seconds\n    select -1 + row_number() over () as seconds\n    from unnest((select split(format(\"%10800s\", \"\"), '') as h from (select null))) as pos -- noqa: disable=L036,L042\n    order by seconds -- noqa: enable=L036,L042\n)\n\n, player_shift_seconds as (\n    select\n        concat(shifts.shift_id, \"_\", gs.seconds) as shift_id\n        , shifts.shift_number\n        , shifts.game_id\n        , shifts.player_id\n        , shifts.team_id\n        , shifts.home_away_team\n        , shifts.shift_ids\n        , shifts.shift_numbers\n        , shifts.event_numbers\n        , shifts.game_type_description\n        , shifts.type_code\n        , shifts.detail_code\n        , shifts.player_full_name\n        , shifts.is_goal\n        , shifts.is_period_start\n        , shifts.is_period_end\n        , shifts.goal_game_state\n        , shifts.goal_assisters\n        , shifts.goal_primary_assister_full_name\n        , shifts.goal_secondary_assister_full_name\n        , shifts.period\n        , shifts.period_type\n        , shifts.start_seconds_elapsed\n        , shifts.end_seconds_elapsed\n        , shifts.duration_seconds_elapsed\n        , shifts.start_time\n        , shifts.end_time\n        , shifts.duration\n        , gs.seconds as game_time_seconds\n        , (gs.seconds - shifts.start_seconds_elapsed) as shift_time_seconds\n        , players.primary_position_abbreviation\n        , coalesce(gs.seconds = shifts.start_seconds_elapsed, false) as is_shift_start\n        , coalesce(gs.seconds = shifts.end_seconds_elapsed, false) as is_shift_end\n        , coalesce(gs.seconds = shifts.start_seconds_elapsed and shifts.is_period_start is true, false) as is_shift_start_period_start\n        , coalesce(gs.seconds = shifts.start_seconds_elapsed and shifts.is_period_start is false, false) as is_shift_start_not_period_start\n        , coalesce(gs.seconds = shifts.start_seconds_elapsed and shifts.is_period_end is true, false) as is_shift_end_period_end\n\n    from `nhl-breakouts`.`github`.`d_shifts` as shifts\n    inner join game_seconds as gs on gs.seconds between shifts.start_seconds_elapsed and shifts.end_seconds_elapsed\n    left join `nhl-breakouts`.`github`.`d_players` as players on players.player_id = shifts.player_id\n    --where (case when gs.seconds = shifts.start_seconds_elapsed and is_period_end is true then true else false end) is false -- remove the shift that ends the period\n    \n)\n\n-- lists players and count of positions on ice for each game second\n, game_second_skaters_on_ice as (\n    select\n        game_id\n        , period\n        , game_time_seconds\n        , sum(case when home_away_team = 'home' and primary_position_abbreviation = 'G' and is_shift_start_not_period_start is false then 1 else 0 end) as home_goalie_on_ice\n        , sum(case when home_away_team = 'away' and primary_position_abbreviation = 'G' and is_shift_start_not_period_start is false then 1 else 0 end) as away_goalie_on_ice\n        , sum(case when home_away_team = 'home' and primary_position_abbreviation = 'D' and is_shift_start_not_period_start is false then 1 else 0 end) as home_defence_on_ice\n        , sum(case when home_away_team = 'away' and primary_position_abbreviation = 'D' and is_shift_start_not_period_start is false then 1 else 0 end) as away_defence_on_ice\n        , sum(case when home_away_team = 'home' and primary_position_abbreviation not in ('G', 'D') and is_shift_start_not_period_start is false then 1 else 0 end) as home_forward_on_ice\n        , sum(case when home_away_team = 'away' and primary_position_abbreviation not in ('G', 'D') and is_shift_start_not_period_start is false then 1 else 0 end) as away_forward_on_ice\n        , array_agg(case when home_away_team = 'home' and is_shift_start_not_period_start is false then player_id end ignore nulls) as home_skaters\n        , array_agg(case when home_away_team = 'away' and is_shift_start_not_period_start is false then player_id end ignore nulls) as away_skaters\n    from player_shift_seconds\n    group by 1, 2, 3\n)\n\n-- as of 7/10/2022, 14k duplicates were introduced b/c of shifts that start and end back-to-back (yep, shifts data is brutal)\n-- rule: if a player's shift overlaps, choose the shift that started earlier as the one to keep (min takes the first shift, max takes the susbsequent)\n, dedup_game_time_seconds as (\n    select\n        pss.game_id\n        , pss.player_id\n        , pss.game_time_seconds\n        , pss.period\n        , min(shift_id) as keep_shift_id\n        , max(shift_id) as remove_shift_id\n        , count(*) as test\n        , string_agg(shift_id) as all_shift_ids\n    from player_shift_seconds as pss\n    where pss.is_goal is not true\n    group by 1, 2, 3, 4\n    having count(*) > 1\n    order by 1, 2, 3, 4\n)\n\nselect\n    sbs.shift_id\n    , sbs.game_id\n    , sbs.player_id\n    , sbs.team_id\n    , sbs.shift_number\n    , sbs.shift_ids\n    , sbs.shift_numbers\n    , sbs.event_numbers\n    , sbs.start_time\n    , sbs.end_time\n    , sbs.duration\n    , sbs.duration_seconds_elapsed\n    , sbs.start_seconds_elapsed\n    , sbs.end_seconds_elapsed\n    , sbs.period\n    , sbs.period_type\n    , sbs.home_away_team\n    , sbs.game_type_description\n    , sbs.type_code\n    , sbs.detail_code\n    , sbs.player_full_name\n    , sbs.is_goal\n    , sbs.is_period_start\n    , sbs.is_period_end\n    , sbs.goal_game_state\n    , sbs.goal_assisters\n    , sbs.goal_primary_assister_full_name\n    , sbs.goal_secondary_assister_full_name\n    , sbs.game_time_seconds\n    , sbs.shift_time_seconds\n    , sbs.is_shift_start\n    , sbs.is_shift_end\n    , sbs.is_shift_start_period_start\n    , sbs.is_shift_start_not_period_start\n    , sbs.is_shift_end_period_end\n    , concat((soi.home_defence_on_ice + soi.home_forward_on_ice), 'v', (soi.away_defence_on_ice + soi.away_forward_on_ice)) as game_state\n    , concat('home:', (soi.home_defence_on_ice + soi.home_forward_on_ice), '-away:', (soi.away_defence_on_ice + soi.away_forward_on_ice)) as game_state_description\n    , case\n        when (soi.home_defence_on_ice + soi.home_forward_on_ice) = (soi.away_defence_on_ice + soi.away_forward_on_ice) then 'even strength'\n        when sbs.home_away_team = 'home' and (soi.home_defence_on_ice + soi.home_forward_on_ice) > (soi.away_defence_on_ice + soi.away_forward_on_ice) then 'skater advantage'\n        when sbs.home_away_team = 'home' and (soi.home_defence_on_ice + soi.home_forward_on_ice) < (soi.away_defence_on_ice + soi.away_forward_on_ice) then 'skater disadvantage'\n        when sbs.home_away_team = 'away' and (soi.away_defence_on_ice + soi.away_forward_on_ice) > (soi.home_defence_on_ice + soi.home_forward_on_ice) then 'skater advantage'\n        when sbs.home_away_team = 'away' and (soi.away_defence_on_ice + soi.away_forward_on_ice) < (soi.home_defence_on_ice + soi.home_forward_on_ice) then 'skater disadvantage'\n        else 'unknown'\n    end as game_state_skaters\n    , soi.home_goalie_on_ice = 0 as home_goalie_pulled\n    , soi.away_goalie_on_ice = 0 as away_goalie_pulled\n    , soi.home_skaters\n    , soi.away_skaters\n    , (soi.home_defence_on_ice + soi.home_forward_on_ice) as home_skaters_on_ice\n    , (soi.away_defence_on_ice + soi.away_forward_on_ice) as away_skaters_on_ice\n    , soi.home_goalie_on_ice\n    , soi.home_defence_on_ice\n    , soi.home_forward_on_ice\n    , soi.away_goalie_on_ice\n    , soi.away_defence_on_ice\n    , soi.away_forward_on_ice\nfrom player_shift_seconds as sbs\nleft join game_second_skaters_on_ice as soi\n    on\n        sbs.game_id = soi.game_id\n        and sbs.game_time_seconds = soi.game_time_seconds\n        and sbs.period = soi.period\nleft join dedup_game_time_seconds as d on sbs.shift_id = d.remove_shift_id\nwhere d.remove_shift_id is null", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.nhl_data.d_teams": {"database": "nhl-breakouts", "schema": "github", "name": "d_teams", "resource_type": "model", "package_name": "nhl_data", "path": "analytics/intermediate/d_teams.sql", "original_file_path": "models/analytics/intermediate/d_teams.sql", "unique_id": "model.nhl_data.d_teams", "fqn": ["nhl_data", "analytics", "intermediate", "d_teams"], "alias": "d_teams", "checksum": {"name": "sha256", "checksum": "b883e03c5cba0879cdcb192063cf1ab7a3db934002a85d16c3e7622192e9c369"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Staged NHL teams data from the NHL-API", "columns": {"team_id": {"name": "team_id", "description": "Unique identifier for NHL teams", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "venue_timezone_id": {"name": "venue_timezone_id", "description": "Foreign key that maps to the timezone ID of the venue (e.g. America/Vancouver)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "division_id": {"name": "division_id", "description": "Foreign key that maps to the division ID that the NHL team belongs to", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "conference_id": {"name": "conference_id", "description": "Foreign key that maps to the conference ID that the NHL team belongs to", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "franchise_id": {"name": "franchise_id", "description": "Foreign key that maps to the franchise ID that the NHL originates from", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "full_name": {"name": "full_name", "description": "Full name of the NHL team (e.g. Vancouver Canucks)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "team_url": {"name": "team_url", "description": "URL endpoint for the NHl team", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "venue_name": {"name": "venue_name", "description": "Name of the venue / arena that the NHL team plays in", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "venue_url": {"name": "venue_url", "description": "URL endpoint for the NHL team venue", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "venue_city": {"name": "venue_city", "description": "City that the venue / arena is in", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "venue_timezone_offset": {"name": "venue_timezone_offset", "description": "Offset necessary to correct for timezone differences (e.g. Vancouver = -7)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "venue_timezone_name": {"name": "venue_timezone_name", "description": "Abbreviated timezone for the venue (e.g. PDT)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "abbreviation": {"name": "abbreviation", "description": "Abbreviation for the NHL team (e.g. VAN)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "team_name": {"name": "team_name", "description": "Second part of the team name (e.g. Canucks)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "location_name": {"name": "location_name", "description": "First part of the team name (e.g. Vancouer)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "first_year_of_play": {"name": "first_year_of_play", "description": "The inaugural year for the NHL team (e.g. 1970)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "division_name": {"name": "division_name", "description": "Name of the division that the team currently plays in", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "division_short_name": {"name": "division_short_name", "description": "Short name for the division that the team currently plays in", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "division_url": {"name": "division_url", "description": "URL endpoint for division", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "division_abbreviation": {"name": "division_abbreviation", "description": "Abbreviated NHL division name (e.g. P)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "conference_name": {"name": "conference_name", "description": "Conference name that the team currently plays in", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "conference_url": {"name": "conference_url", "description": "URL endpoint for the conference", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "franchise_team_name": {"name": "franchise_team_name", "description": "Name of the franchise (second part of full team name)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "franchise_url": {"name": "franchise_url", "description": "URL endpoint for the franchise", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "short_name": {"name": "short_name", "description": "Slightly different short version of the team name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "official_site_url": {"name": "official_site_url", "description": "Official site URL", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_active": {"name": "is_active", "description": "Whether or not the team is currently active in the NHL", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "extracted_at": {"name": "extracted_at", "description": "Timestamp that the data was retrieved", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "loaded_at": {"name": "loaded_at", "description": "Timestamp that the data was loaded", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "nhl_data://models/analytics/intermediate/d_teams.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "intermediate"}, "created_at": 1695581342.7779536, "relation_name": "`nhl-breakouts`.`github`.`d_teams`", "raw_code": "with deduplicated as (\n    {{ dedupe(\n        ref('stg_nhl__teams'),\n        key_fields=['team_id'],\n        sort_fields=['season_id']\n    ) }}\n)\n\nselect\n    /* Primary Key */\n    team_id\n\n    /* Identifiers */\n    , venue_timezone_id\n    , division_id\n    , conference_id\n    , franchise_id\n\n    /* Properties */\n    , full_name\n    , team_url\n    , venue_name\n    , venue_url\n    , venue_city\n    , venue_timezone_name\n    , venue_timezone_offset\n    , abbreviation\n    , team_name\n    , location_name\n    , first_year_of_play\n    , short_name\n    , is_active\nfrom deduplicated", "language": "sql", "refs": [{"name": "stg_nhl__teams", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.nhl_data.dedupe"], "nodes": ["model.nhl_data.stg_nhl__teams"]}, "compiled_path": "target/compiled/nhl_data/models/analytics/intermediate/d_teams.sql", "compiled": true, "compiled_code": "with deduplicated as (\n    select *\n    from (\n        select *,\n            row_number() over (partition by team_id order by season_id) as rn\n        from `nhl-breakouts`.`github`.`stg_nhl__teams`\n    ) where rn = 1 -- dedupe\n)\n\nselect\n    /* Primary Key */\n    team_id\n\n    /* Identifiers */\n    , venue_timezone_id\n    , division_id\n    , conference_id\n    , franchise_id\n\n    /* Properties */\n    , full_name\n    , team_url\n    , venue_name\n    , venue_url\n    , venue_city\n    , venue_timezone_name\n    , venue_timezone_offset\n    , abbreviation\n    , team_name\n    , location_name\n    , first_year_of_play\n    , short_name\n    , is_active\nfrom deduplicated", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.nhl_data.d_seasons": {"database": "nhl-breakouts", "schema": "github", "name": "d_seasons", "resource_type": "model", "package_name": "nhl_data", "path": "analytics/intermediate/d_seasons.sql", "original_file_path": "models/analytics/intermediate/d_seasons.sql", "unique_id": "model.nhl_data.d_seasons", "fqn": ["nhl_data", "analytics", "intermediate", "d_seasons"], "alias": "d_seasons", "checksum": {"name": "sha256", "checksum": "9b7bffb8f9fc9de423526422610ee18b8703cb0e420a135ea95fc14c3fdcacb2"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Staged NHL seasons data from the NHL-API", "columns": {"season_id": {"name": "season_id", "description": "Unique identifier for an NHL season (e.g. \"20172018\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "regular_season_start_date": {"name": "regular_season_start_date", "description": "The first date of the NHL regular season (e.g. \"2017-10-04\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "regular_season_end_date": {"name": "regular_season_end_date", "description": "The last date of the NHL regular season (e.g. \"2018-04-08\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "season_end_date": {"name": "season_end_date", "description": "The last date of the NHL post season (e.g. \"2018-06-07\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "number_of_games": {"name": "number_of_games", "description": "The number of total games played by each NHL team", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "has_ties_in_use": {"name": "has_ties_in_use", "description": "Whether or not ties were possible for that season (True / False)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "has_olympics_participation": {"name": "has_olympics_participation", "description": "Whether or not olympic participation at the NHL level was allowed for that season (True / False)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "has_conferences_in_use": {"name": "has_conferences_in_use", "description": "Whether or not conferences were used for that season's playoff consideration (True / False)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "has_divisions_in_use": {"name": "has_divisions_in_use", "description": "Whether or not divisions were used for that season's playoff consideration (True / False)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "has_wildcard_in_use": {"name": "has_wildcard_in_use", "description": "Whether or not wildcards were used for that season's playoff consideration (True / False)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "extracted_at": {"name": "extracted_at", "description": "Timestamp that the data was retrieved", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "loaded_at": {"name": "loaded_at", "description": "Timestamp that the data was loaded", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "nhl_data://models/analytics/intermediate/d_seasons.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "intermediate"}, "created_at": 1695581342.873344, "relation_name": "`nhl-breakouts`.`github`.`d_seasons`", "raw_code": "select\n    /* Primary Key */\n    season_id\n\n    /* Properties */\n    , regular_season_start_date\n    , regular_season_end_date\n    , season_end_date\n    , number_of_games\n    , has_ties_in_use\n    , has_olympics_participation\n    , has_conferences_in_use\n    , has_divisions_in_use\n    , has_wildcard_in_use\nfrom {{ ref('stg_nhl__seasons') }}", "language": "sql", "refs": [{"name": "stg_nhl__seasons", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.nhl_data.stg_nhl__seasons"]}, "compiled_path": "target/compiled/nhl_data/models/analytics/intermediate/d_seasons.sql", "compiled": true, "compiled_code": "select\n    /* Primary Key */\n    season_id\n\n    /* Properties */\n    , regular_season_start_date\n    , regular_season_end_date\n    , season_end_date\n    , number_of_games\n    , has_ties_in_use\n    , has_olympics_participation\n    , has_conferences_in_use\n    , has_divisions_in_use\n    , has_wildcard_in_use\nfrom `nhl-breakouts`.`github`.`stg_nhl__seasons`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.nhl_data.f_plays": {"database": "nhl-breakouts", "schema": "github", "name": "f_plays", "resource_type": "model", "package_name": "nhl_data", "path": "analytics/intermediate/f_plays.sql", "original_file_path": "models/analytics/intermediate/f_plays.sql", "unique_id": "model.nhl_data.f_plays", "fqn": ["nhl_data", "analytics", "intermediate", "f_plays"], "alias": "f_plays", "checksum": {"name": "sha256", "checksum": "253eab68ca923dd1b3f9d0a3bc3dec4f9f7f9bd8a3c3762686220750d606ad8c"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Staged NHL event level data from the NHL-API (player-play level)", "columns": {"play_id": {"name": "play_id", "description": "Unique identifier for a player's event-level activity in an NHL game (hashed representation of game_id + team_id + player_id + event_id)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "game_id": {"name": "game_id", "description": "Foreign key that maps to an NHL game ID\n##### More about game_id\nThe first 4 digits identify the season of the game (ie. 2017 for the 2017-2018 season). The next 2 digits give the type of game, where 01 = preseason, 02 = regular season, 03 = playoffs, 04 = all-star. The final 4 digits identify the specific game number.\n\nFor regular season and preseason games, this ranges from 0001 to the number of games played. (1271 for seasons with 31 teams (2017 and onwards) and 1230 for seasons with 30 teams).\n\nFor playoff games, the 2nd digit of the specific number gives the round of the playoffs, the 3rd digit specifies the matchup, and the 4th digit specifies the game (out of 7).\n\n[Credit to Drew Hynes' NHL API docs](https://gitlab.com/dword4/nhlapi/-/blob/master/stats-api.md#game-ids)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_idx": {"name": "event_idx", "description": "Foreign key that maps to the sequence of the event relative to that game, in ascending order (e.g. 1 = first event, 2 - second event)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_id": {"name": "event_id", "description": "Foreign key that maps to a distinct event ID", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "player_id": {"name": "player_id", "description": "Foreign key that maps to an NHL player ID", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "team_id": {"name": "team_id", "description": "Foreign key that maps to an NHL team ID", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "player_full_name": {"name": "player_full_name", "description": "The player's full name (first name, last name)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "player_primary_assist": {"name": "player_primary_assist", "description": "Boolean flag for whether or not the play resulted in the player making a primary assist", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "player_secondary_assist": {"name": "player_secondary_assist", "description": "Boolean flag for whether or not the play resulted in the player making a secondary assist", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "player_role": {"name": "player_role", "description": "The role of the player in context to the event (e.g. Hitter, Hitee, Shooter, Winner, Loser, etc.)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "player_role_team": {"name": "player_role_team", "description": "The home / away status of the player's team", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_code": {"name": "event_code", "description": "Event code that is unique at the game-event level (e.g. PHI8, PHI10)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_type": {"name": "event_type", "description": "Short description of the event type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_secondary_type": {"name": "event_secondary_type", "description": "If the event_type can be further broken down, this field provides a sub-type, else null (e.g. TIP-IN, WRIST SHOT (shot-types), ROUGHING (penalty-types), etc.)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_description": {"name": "event_description", "description": "Long description of the event (repeated for all the player's involved in the event)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_player_role_team": {"name": "last_player_role_team", "description": "The home / away status of the player's team from the previous (most recent) play", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_play_event_type": {"name": "last_play_event_type", "description": "Short description of the previous play's event type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_play_event_secondary_type": {"name": "last_play_event_secondary_type", "description": "If the previous play's event_type can be further broken down, this field provides a sub-type, else null (e.g. TIP-IN, WRIST SHOT (shot-types), ROUGHING (penalty-types), etc.)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_play_event_description": {"name": "last_play_event_description", "description": "Long description of the previous play's event (repeated for all the player's involved in the event)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_play_period": {"name": "last_play_period", "description": "The period in which the previous play's event occured (e.g. 3)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "penalty_severity": {"name": "penalty_severity", "description": "If the play in question was a penalty, this column will describe its severity (e.g. MINOR, MAJOR), else null", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "penalty_minutes": {"name": "penalty_minutes", "description": "If the play in question was a penalty, this column will return the number of minutes the penalty was assessed for, else null", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "x_coordinate": {"name": "x_coordinate", "description": "The x-coordinate of where the event took place on the ice", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "y_coordinate": {"name": "y_coordinate", "description": "The y-coordinate of where the event took place on the ice", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "play_period": {"name": "play_period", "description": "The period in which the event occured (e.g. 3)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "play_period_type": {"name": "play_period_type", "description": "The type of period in which the event occured (e.g. Regular)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "play_period_time_elapsed": {"name": "play_period_time_elapsed", "description": "The time in minutes elapsed in the period", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "play_period_time_remaining": {"name": "play_period_time_remaining", "description": "The time in minutes remaining in the period", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "play_total_seconds_elapsed": {"name": "play_total_seconds_elapsed", "description": "The time in seconds elapsed in the entire game", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "play_time": {"name": "play_time", "description": "A timestamp of the event (e.g. 2021-01-13T22:32:45Z)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shots_away": {"name": "shots_away", "description": "Cumulative away team shots taken in the game at the point in time where the event occured", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shots_home": {"name": "shots_home", "description": "Cumulative ome team shots taken in the game at the point in time where the event occured", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hits_away": {"name": "hits_away", "description": "Cumulative away team hits made in the game at the point in time where the event occured", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hits_home": {"name": "hits_home", "description": "Cumulative home team hits made in the game at the point in time where the event occured", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "faceoffs_away": {"name": "faceoffs_away", "description": "Cumulative away team faceoffs won in the game at the point in time where the event occured", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "faceoffs_home": {"name": "faceoffs_home", "description": "Cumulative home team faceoffs won in the game at the point in time where the event occured", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "takeaways_away": {"name": "takeaways_away", "description": "Cumulative away team takeaways forced in the game at the point in time where the event occured", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "takeaways_home": {"name": "takeaways_home", "description": "Cumulative home team takeaways forced in the game at the point in time where the event occured", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "giveaways_away": {"name": "giveaways_away", "description": "Cumulative away team giveaways made in the game at the point in time where the event occured", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "giveaways_home": {"name": "giveaways_home", "description": "Cumulative home team giveaways made in the game at the point in time where the event occured", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "missedshots_away": {"name": "missedshots_away", "description": "Cumulative away team missed shots taken in the game at the point in time where the event occured", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "missedshots_home": {"name": "missedshots_home", "description": "Cumulative home team missed shots taken in the game at the point in time where the event occured", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "blockedshots_away": {"name": "blockedshots_away", "description": "Cumulative away team blocked shots made in the game at the point in time where the event occured", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "blockedshots_home": {"name": "blockedshots_home", "description": "Cumulative home team blocked shots made in the game at the point in time where the event occured", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "seconds_since_last_shot": {"name": "seconds_since_last_shot", "description": "Seconds since last shot - returns the time elapsed between shots if the shot was taken by same team, in the same period, and was on target but did not result in a goal", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shot_rebound_ind": {"name": "shot_rebound_ind", "description": "Rebounds indicator - returns a '1' if the shot was taken by same team, in the same period, was on target but did not result in a goal, and the time elapsed between shots was between 0 - 2 seconds", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "penalties_away": {"name": "penalties_away", "description": "Cumulative away team penalties in minutes taken in the game at the point in time where the event occured", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "penalties_home": {"name": "penalties_home", "description": "Cumulative home team penalties in minutes taken in the game at the point in time where the event occured", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "first_goal_scored": {"name": "first_goal_scored", "description": "Whether or not the event in question was the first goal of the game (1 or 0)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_goal_scored": {"name": "last_goal_scored", "description": "Whether or not the event in question was the last goal of the game (1 or 0)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "goals_away": {"name": "goals_away", "description": "Cumulative away team goals scored in the game at the point in time where the event occured", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "goals_home": {"name": "goals_home", "description": "Cumulative home team goals scored in the game at the point in time where the event occured", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "goal_difference_current": {"name": "goal_difference_current", "description": "The absolute value difference in goals between the home and away teams in the game at the point in time where the event occured", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "winning_team_current": {"name": "winning_team_current", "description": "The name of the team_type (e.g. \"Tie\", \"Home\" or \"Away\") for the team currently winning", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "game_state_current": {"name": "game_state_current", "description": "The current state of scoreboard (e.g. \"Tie\", \"Close\" (1 goal difference), \"Buffer\" (2 goal difference), \"Comfortable\" (3 goal difference), \"Blowout\" (4 goal difference))", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_result_of_play": {"name": "home_result_of_play", "description": "Description of the result of the current event / play for the home team (e.g. \"No change\", \"Chase goal\", \"Tying goal scored\", \"Tying goal allowed\", \"Go-ahead goal scored, Buffer goal\", \"Go-ahead goal allowed\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "away_result_of_play": {"name": "away_result_of_play", "description": "Description of the result of the current event / play for the away team (e.g. \"No change\", \"Chase goal\", \"Tying goal scored\", \"Tying goal allowed\", \"Go-ahead goal scored, Buffer goal\", \"Go-ahead goal allowed\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_goal_game_winning": {"name": "last_goal_game_winning", "description": "Whether or not the the current goal was the last goal and also the game winning goal (1 or 0)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_goal_game_tying": {"name": "last_goal_game_tying", "description": "Whether or not the the current goal was the last goal and also the game tying goal (1 or 0)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "goals_home_lag": {"name": "goals_home_lag", "description": "Cumulative home team goals scored in the game 1 play before the current play (e.g. if event prior to this event was a home team goal, and the current play was a hit, then the value for this column would be 1)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "goals_away_lag": {"name": "goals_away_lag", "description": "Cumulative away team goals scored in the game 1 play before the current play (e.g. if event prior to this event was a away team goal, and the current play was a hit, then the value for this column would be 1)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "goal_difference_lag": {"name": "goal_difference_lag", "description": "The absolute value difference in goals between the home and away teams in the game using the home and away team lagged goals scored", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "winning_team_lag": {"name": "winning_team_lag", "description": "Determines the previously winning team (e.g. \"Tie\", \"Home\" or \"Away\") before the play in question", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "game_state_lag": {"name": "game_state_lag", "description": "The previous state of scoreboard prior to the play in question (e.g. \"Tie\", \"Close\" (1 goal difference), \"Buffer\" (2 goal difference), \"Comfortable\" (3 goal difference), \"Blowout\" (4 goal difference))", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "adj_x_coordinate": {"name": "adj_x_coordinate", "description": "Adjusting the axis of plane of the play's x-coordinate based on where the oppsosing team's goalie net is as this is where they will be shooting towards", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "adj_y_coordinate": {"name": "adj_y_coordinate", "description": "Adjusting the axis of plane of the play's y-coordinate based on where the oppsosing team's goalie net is as this is where they will be shooting towards", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "play_distance": {"name": "play_distance", "description": "Distance from the opposing goal, calculated by making a right angle with the play's [x,y] and the net [89,0], and finding the hypotenuse with the formula c = sqrt(a^2 + b^2)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "play_angle": {"name": "play_angle", "description": "Angle from the play's [x,y] coordinates to the opposing team's net [89,0]", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rink_side": {"name": "rink_side", "description": "The side of the rink based on the y-coordinate (e.g. \"left\" means that the team is on the left side of the rink)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "zone_type": {"name": "zone_type", "description": "Classifying each of the zones by its type, based on the x-coordinate (e.g. \"offensive_zone\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "zone": {"name": "zone", "description": "The the area of the ice, determined by combining the x & y coordinates (e.g. \"r_1_high\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_shot_event_idx": {"name": "last_shot_event_idx", "description": "Looks back to the last (previous) shot, returns the event sequence (e.g. 1 = first event, 2 = second event)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_shot_team_id": {"name": "last_shot_team_id", "description": "Looks back to the last (previous) shot, returns the team_id for the shoot", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_shot_period": {"name": "last_shot_period", "description": "Looks back to the last (previous) shot, returns the period", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_shot_total_seconds_elapsed": {"name": "last_shot_total_seconds_elapsed", "description": "Looks back to the last (previous) shot, returns the total seconds elapsed", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_shot_event_type": {"name": "last_shot_event_type", "description": "Looks back to the last (previous) shot, returns the event type (e.g. 'GOAL', 'MISSED_SHOT', 'SHOT', 'GOAL')", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_shot_event_secondary_type": {"name": "last_shot_event_secondary_type", "description": "Looks back to the last (previous) shot, returns the event_secondary_type (e.g. basically, shot type)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_shot_x_coordinate": {"name": "last_shot_x_coordinate", "description": "Looks back to the last (previous) shot, returns the x_coordinate", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_shot_y_coordinate": {"name": "last_shot_y_coordinate", "description": "Looks back to the last (previous) shot, returns the y_coordinate", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_shot_saved_shot_ind": {"name": "last_shot_saved_shot_ind", "description": "Looks back to the last (previous) shot, returns a '1' if the shot was taken by same team, in the same period, and was on target but did not result in a goal", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_play_adj_x_coordinate": {"name": "last_play_adj_x_coordinate", "description": "Adjusting the axis of plane of the play's x-coordinate based on where the oppsosing team's goalie net is as this is where they will be shooting towards", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_play_y_coordinate": {"name": "last_play_y_coordinate", "description": "Adjusting the axis of plane of the play's y-coordinate based on where the oppsosing team's goalie net is as this is where they will be shooting towards", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_play_distance": {"name": "last_play_distance", "description": "Distance from the opposing goal, calculated by making a right angle with the play's [x,y] and the net [89,0], and finding the hypotenuse with the formula c = sqrt(a^2 + b^2)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_play_angle": {"name": "last_play_angle", "description": "Angle from the play's [x,y] coordinates to the opposing team's net [89,0]", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_play_rink_side": {"name": "last_play_rink_side", "description": "The side of the rink based on the y-coordinate (e.g. \"left\" means that the team is on the left side of the rink)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_play_zone_type": {"name": "last_play_zone_type", "description": "Classifying each of the zones by its type, based on the x-coordinate (e.g. \"offensive_zone\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_play_zone": {"name": "last_play_zone", "description": "The the area of the ice, determined by combining the x & y coordinates (e.g. \"r_1_high\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shift_id": {"name": "shift_id", "description": "Custom identifier for an NHL shift-second", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shift_number": {"name": "shift_number", "description": "Custom shift number, counted from the start of the game and excluding dups (e.g. 2 = player's second shift of game, 0 = goal)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shift_numbers": {"name": "shift_numbers", "description": "Concatenation of all of the shift_numbers matched from the original shifts dataset for that play", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shift_ids": {"name": "shift_ids", "description": "Concatenation of all of the shift_ids matched from the original shifts dataset for that play", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_numbers": {"name": "event_numbers", "description": "Concatenation of all of the event_numbers matched from the original shifts dataset for that play", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shift_start_time": {"name": "shift_start_time", "description": "The start time of the shift, relative to the start of the period (e.g. 14:00)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shift_end_time": {"name": "shift_end_time", "description": "The end time of the shift, relative to the start of the period (14:00)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shift_duration": {"name": "shift_duration", "description": "The duration of the shift, relative to the start of the shift (00:41)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "goal_game_state": {"name": "goal_game_state", "description": "Provides the state of the game for plays that resulted in a goal (e.g. PPG, EVG)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_shift_start": {"name": "is_shift_start", "description": "Whether or not the second in which the play occured is also the second in which the player started his shift", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_shift_end": {"name": "is_shift_end", "description": "Whether or not the second in which the play occured is also the second in which the player finished his shift", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_shift_start_period_start": {"name": "is_shift_start_period_start", "description": "Whether or not the second in which the play occured maps to the second in which the player started his shift and the period begins", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_shift_start_not_period_start": {"name": "is_shift_start_not_period_start", "description": "Whether or not the second in which the play occured maps to the second in which the player started his shift and the period was not just beginning", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_shift_end_period_end": {"name": "is_shift_end_period_end", "description": "Whether or not the second in which the play occured maps to the second in which the player started his shift and the period finished", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "game_state": {"name": "game_state", "description": "Provides the state of the game for all plays, excluding goalies (e.g. 5v5)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "game_state_description": {"name": "game_state_description", "description": "Descriptor that provides the number of home skaters and away skaters on all plays, excluding goalies (e.g. home:5-away:4)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "game_state_skaters": {"name": "game_state_skaters", "description": "Descriptor that summarizes the game state on all plays (e.g. skater advantage, even strength)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_goalie_pulled": {"name": "home_goalie_pulled", "description": "Whether or not the home goalie was pulled at the time of the play", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "away_goalie_pulled": {"name": "away_goalie_pulled", "description": "Whether or not the away goalie was pulled at the time of the play", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_skaters": {"name": "home_skaters", "description": "Array of home player IDs (including goalies) that were on the ice at the time of the play (note that players that began their shift in the same second as the play occured are not counted towards this or any other game state feature from the shifts dataset)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "away_skaters": {"name": "away_skaters", "description": "Array of away player IDs (including goalies) that were on the ice at the time of the play (note that players that began their shift in the same second as the play occured are not counted towards this or any other game state feature from the shifts dataset)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_skaters_on_ice": {"name": "home_skaters_on_ice", "description": "The number of home skaters on the ice, excludes goalies", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "away_skaters_on_ice": {"name": "away_skaters_on_ice", "description": "The number of away skaters on the ice, excludes goalies", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_defence_on_ice": {"name": "home_defence_on_ice", "description": "The number of home defencemen on the ice", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "away_defence_on_ice": {"name": "away_defence_on_ice", "description": "The number of away defencemen on the ice", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_forward_on_ice": {"name": "home_forward_on_ice", "description": "The number of home forwards on the ice", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "away_forward_on_ice": {"name": "away_forward_on_ice", "description": "The number of away forwards on the ice", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_goalie_on_ice": {"name": "home_goalie_on_ice", "description": "The number of home goalies on the ice (1 or 0)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "away_goalie_on_ice": {"name": "away_goalie_on_ice", "description": "The number of away goalies on the ice (1 or 0)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_shot_seconds": {"name": "last_shot_seconds", "description": "Seconds since last shot - returns the time elapsed between shots if the shot was taken by same team, in the same period, and was on target but did not result in a goal", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_shot_rebound_ind": {"name": "last_shot_rebound_ind", "description": "Rebounds indicator - returns a '1' if the shot was taken by same team, in the same period, was on target but did not result in a goal, and the time elapsed between shots was between 0 - 2 seconds", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "xg_model_id": {"name": "xg_model_id", "description": "Identifier with business logic to help identify model attributes for creating the xg", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "xg_strength_state_code": {"name": "xg_strength_state_code", "description": "Combines the home indicator and strength state to create 3 strength states (e.g. ev, pp, sh)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "xg_fenwick_shot": {"name": "xg_fenwick_shot", "description": "Identifier that indicates whether or not the shot was a fenwick shot", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "x_goal": {"name": "x_goal", "description": "Whether or not the fenwick shot in question resulted in a goal", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "xg_proba": {"name": "xg_proba", "description": "For any given fenwick shot, provides the expected goal (XG) model prediction probability (null if not a fenwick shot)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "nhl_data://models/analytics/intermediate/f_plays.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "intermediate"}, "created_at": 1695581342.8162863, "relation_name": "`nhl-breakouts`.`github`.`f_plays`", "raw_code": "select\n    /* Primary Key */\n    plays.stg_nhl__live_plays_id as play_id\n\n    /* Identifiers */\n    , plays.game_id\n    , plays.event_idx\n    , plays.event_id\n    , plays.player_id\n    , plays.team_id\n\n    /* Play properties */\n    , plays.player_full_name\n    , plays.player_primary_assist\n    , plays.player_secondary_assist\n    , plays.player_role\n    , plays.player_role_team\n    , plays.event_code\n    , plays.event_type\n    , plays.event_secondary_type\n    , plays.event_description\n    , plays.last_player_role_team\n    , plays.last_play_event_type\n    , plays.last_play_event_secondary_type\n    , plays.last_play_event_description\n    , plays.last_play_period\n    , plays.penalty_severity\n    , plays.penalty_minutes\n    , plays.play_x_coordinate\n    , plays.play_y_coordinate\n    , plays.play_total_seconds_elapsed\n    , plays.play_period\n    , plays.play_period_type\n    , plays.play_period_time_elapsed\n    , plays.play_period_time_remaining\n    , plays.play_time\n    , plays.shots_away\n    , plays.shots_home\n    , plays.hits_away\n    , plays.hits_home\n    , plays.faceoffs_away\n    , plays.faceoffs_home\n    , plays.takeaways_away\n    , plays.takeaways_home\n    , plays.giveaways_away\n    , plays.giveaways_home\n    , plays.missedshots_away\n    , plays.missedshots_home\n    , plays.blockedshots_away\n    , plays.blockedshots_home\n    -- seconds since last shot: if the last shot was taken by the same team in the same period, get the time elapsed between shots\n    , case\n        when plays.last_shot_saved_shot_ind = 1\n            then (plays.play_total_seconds_elapsed - plays.last_shot_total_seconds_elapsed)\n        else 0\n    end as seconds_since_last_shot\n    -- rebounds: if the last shot was take by the same team in the same period, and the time elapsed between shots was between 0 - 2 seconds, then 1 else 0\n    , case\n        when\n            plays.last_shot_saved_shot_ind = 1\n            and (plays.play_total_seconds_elapsed - plays.last_shot_total_seconds_elapsed) <= 2\n            then 1\n        else 0\n    end as shot_rebound_ind\n    , plays.penalties_away\n    , plays.penalties_home\n    , plays.first_goal_scored\n    , plays.last_goal_scored\n    , plays.goals_away\n    , plays.goals_home\n    , plays.goal_difference_current\n    , plays.winning_team_current\n    , plays.game_state_current\n    , plays.home_result_of_play\n    , plays.away_result_of_play\n    , plays.last_goal_game_winning\n    , plays.last_goal_game_tying\n    , plays.goals_home_lag\n    , plays.goals_away_lag\n    , plays.goal_difference_lag\n    , plays.winning_team_lag\n    , plays.game_state_lag\n\n    /* Location properties */\n    , loc.adj_play_x_coordinate as adj_x_coordinate\n    , loc.adj_play_y_coordinate as adj_y_coordinate\n    , loc.play_distance\n    , loc.play_angle\n    , loc.rink_side\n    , loc.zone_type\n    , loc.zone\n\n    /* Last shot location properties */\n    , plays.last_shot_event_idx\n    , plays.last_shot_team_id\n    , plays.last_shot_period\n    , plays.last_shot_total_seconds_elapsed\n    , plays.last_shot_event_type\n    , plays.last_shot_event_secondary_type\n    , plays.last_shot_x_coordinate\n    , plays.last_shot_y_coordinate\n    , plays.last_shot_saved_shot_ind\n    -- seconds since last shot: if the last shot was take by the same team in the same period, get the time elapsed between shots\n    , case\n        when plays.last_shot_saved_shot_ind = 1\n            then (plays.play_total_seconds_elapsed - plays.last_shot_total_seconds_elapsed)\n        else 0\n    end as last_shot_seconds\n    -- rebounds: if the last shot was take by the same team in the same period, and the time elapsed between shots was between 0 - 2 seconds, then 1 else 0\n    , case\n        when\n            plays.last_shot_saved_shot_ind = 1\n            and plays.last_play_period = plays.play_period\n            and lower(plays.last_play_event_type) in ('blocked_shot', 'missed_shot', 'shot', 'goal')\n            and (plays.play_total_seconds_elapsed - plays.last_shot_total_seconds_elapsed) <= 2\n            then 1\n        else 0\n    end as last_shot_rebound_ind\n\n    /* Last play location properties */\n    , lag(loc.adj_play_x_coordinate) over (partition by plays.game_id order by plays.event_idx) as last_play_adj_x_coordinate\n    , lag(loc.adj_play_y_coordinate) over (partition by plays.game_id order by plays.event_idx) as last_play_adj_y_coordinate\n    , lag(loc.play_distance) over (partition by plays.game_id order by plays.event_idx) as last_play_distance\n    , lag(loc.play_angle) over (partition by plays.game_id order by plays.event_idx) as last_play_angle\n    , lag(loc.rink_side) over (partition by plays.game_id order by plays.event_idx) as last_play_rink_side\n    , lag(loc.zone_type) over (partition by plays.game_id order by plays.event_idx) as last_play_zone_type\n    , lag(loc.zone) over (partition by plays.game_id order by plays.event_idx) as last_play_zone\n\n    /* Shift properties */\n    , shifts.shift_id\n    , shifts.shift_number\n    , shifts.shift_numbers\n    , shifts.shift_ids\n    , shifts.event_numbers as shift_event_numbers\n    , shifts.start_time as shift_start_time\n    , shifts.end_time as shift_end_time\n    , shifts.duration as shift_duration\n    , shifts.goal_game_state\n    , shifts.is_shift_start\n    , shifts.is_shift_end\n    , shifts.is_shift_start_period_start\n    , shifts.is_shift_start_not_period_start\n    , shifts.is_shift_end_period_end\n    , shifts.game_state\n    , shifts.game_state_description\n    , shifts.game_state_skaters\n    , shifts.home_goalie_on_ice = 0 as home_goalie_pulled\n    , shifts.away_goalie_on_ice = 0 as away_goalie_pulled\n    , shifts.home_skaters\n    , shifts.away_skaters\n    , shifts.home_skaters_on_ice\n    , shifts.away_skaters_on_ice\n    , shifts.home_defence_on_ice\n    , shifts.away_defence_on_ice\n    , shifts.home_forward_on_ice\n    , shifts.away_forward_on_ice\n    , shifts.home_goalie_on_ice\n    , shifts.away_goalie_on_ice\n\n    /* XG stuff */\n    , coalesce(xg.id_fenwick_shot, 0) as xg_fenwick_shot\n    , xg.x_goal\n    , xg.xg_model_id\n    , xg.id_strength_state_code as xg_strength_state_code\n    , xg.xg_proba\n\nfrom {{ ref('stg_nhl__live_plays') }} as plays\nleft join {{ ref('d_shifts_time') }} as shifts\n    on\n        shifts.game_id = plays.game_id\n        and shifts.game_time_seconds = plays.play_total_seconds_elapsed\n        and shifts.player_id = plays.player_id\n        and shifts.period = plays.play_period\n        and shifts.is_goal is false\nleft join {{ ref('stg_nhl__live_plays_location') }} as loc\n    on\n        loc.play_id = plays.stg_nhl__live_plays_id\n        and loc.game_id = plays.game_id\n        and loc.play_x_coordinate = cast(plays.play_x_coordinate as float64)\n        and loc.play_y_coordinate = cast(plays.play_y_coordinate as float64)\nleft join {{ ref('stg_nhl__xg') }} as xg\n    on\n        xg.id_play_id = plays.stg_nhl__live_plays_id\n        and xg.id_game_id = plays.game_id\n        and xg.id_player_id = plays.player_id", "language": "sql", "refs": [{"name": "stg_nhl__live_plays", "package": null, "version": null}, {"name": "d_shifts_time", "package": null, "version": null}, {"name": "stg_nhl__live_plays_location", "package": null, "version": null}, {"name": "stg_nhl__xg", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.nhl_data.stg_nhl__live_plays", "model.nhl_data.d_shifts_time", "model.nhl_data.stg_nhl__live_plays_location", "model.nhl_data.stg_nhl__xg"]}, "compiled_path": "target/compiled/nhl_data/models/analytics/intermediate/f_plays.sql", "compiled": true, "compiled_code": "select\n    /* Primary Key */\n    plays.stg_nhl__live_plays_id as play_id\n\n    /* Identifiers */\n    , plays.game_id\n    , plays.event_idx\n    , plays.event_id\n    , plays.player_id\n    , plays.team_id\n\n    /* Play properties */\n    , plays.player_full_name\n    , plays.player_primary_assist\n    , plays.player_secondary_assist\n    , plays.player_role\n    , plays.player_role_team\n    , plays.event_code\n    , plays.event_type\n    , plays.event_secondary_type\n    , plays.event_description\n    , plays.last_player_role_team\n    , plays.last_play_event_type\n    , plays.last_play_event_secondary_type\n    , plays.last_play_event_description\n    , plays.last_play_period\n    , plays.penalty_severity\n    , plays.penalty_minutes\n    , plays.play_x_coordinate\n    , plays.play_y_coordinate\n    , plays.play_total_seconds_elapsed\n    , plays.play_period\n    , plays.play_period_type\n    , plays.play_period_time_elapsed\n    , plays.play_period_time_remaining\n    , plays.play_time\n    , plays.shots_away\n    , plays.shots_home\n    , plays.hits_away\n    , plays.hits_home\n    , plays.faceoffs_away\n    , plays.faceoffs_home\n    , plays.takeaways_away\n    , plays.takeaways_home\n    , plays.giveaways_away\n    , plays.giveaways_home\n    , plays.missedshots_away\n    , plays.missedshots_home\n    , plays.blockedshots_away\n    , plays.blockedshots_home\n    -- seconds since last shot: if the last shot was taken by the same team in the same period, get the time elapsed between shots\n    , case\n        when plays.last_shot_saved_shot_ind = 1\n            then (plays.play_total_seconds_elapsed - plays.last_shot_total_seconds_elapsed)\n        else 0\n    end as seconds_since_last_shot\n    -- rebounds: if the last shot was take by the same team in the same period, and the time elapsed between shots was between 0 - 2 seconds, then 1 else 0\n    , case\n        when\n            plays.last_shot_saved_shot_ind = 1\n            and (plays.play_total_seconds_elapsed - plays.last_shot_total_seconds_elapsed) <= 2\n            then 1\n        else 0\n    end as shot_rebound_ind\n    , plays.penalties_away\n    , plays.penalties_home\n    , plays.first_goal_scored\n    , plays.last_goal_scored\n    , plays.goals_away\n    , plays.goals_home\n    , plays.goal_difference_current\n    , plays.winning_team_current\n    , plays.game_state_current\n    , plays.home_result_of_play\n    , plays.away_result_of_play\n    , plays.last_goal_game_winning\n    , plays.last_goal_game_tying\n    , plays.goals_home_lag\n    , plays.goals_away_lag\n    , plays.goal_difference_lag\n    , plays.winning_team_lag\n    , plays.game_state_lag\n\n    /* Location properties */\n    , loc.adj_play_x_coordinate as adj_x_coordinate\n    , loc.adj_play_y_coordinate as adj_y_coordinate\n    , loc.play_distance\n    , loc.play_angle\n    , loc.rink_side\n    , loc.zone_type\n    , loc.zone\n\n    /* Last shot location properties */\n    , plays.last_shot_event_idx\n    , plays.last_shot_team_id\n    , plays.last_shot_period\n    , plays.last_shot_total_seconds_elapsed\n    , plays.last_shot_event_type\n    , plays.last_shot_event_secondary_type\n    , plays.last_shot_x_coordinate\n    , plays.last_shot_y_coordinate\n    , plays.last_shot_saved_shot_ind\n    -- seconds since last shot: if the last shot was take by the same team in the same period, get the time elapsed between shots\n    , case\n        when plays.last_shot_saved_shot_ind = 1\n            then (plays.play_total_seconds_elapsed - plays.last_shot_total_seconds_elapsed)\n        else 0\n    end as last_shot_seconds\n    -- rebounds: if the last shot was take by the same team in the same period, and the time elapsed between shots was between 0 - 2 seconds, then 1 else 0\n    , case\n        when\n            plays.last_shot_saved_shot_ind = 1\n            and plays.last_play_period = plays.play_period\n            and lower(plays.last_play_event_type) in ('blocked_shot', 'missed_shot', 'shot', 'goal')\n            and (plays.play_total_seconds_elapsed - plays.last_shot_total_seconds_elapsed) <= 2\n            then 1\n        else 0\n    end as last_shot_rebound_ind\n\n    /* Last play location properties */\n    , lag(loc.adj_play_x_coordinate) over (partition by plays.game_id order by plays.event_idx) as last_play_adj_x_coordinate\n    , lag(loc.adj_play_y_coordinate) over (partition by plays.game_id order by plays.event_idx) as last_play_adj_y_coordinate\n    , lag(loc.play_distance) over (partition by plays.game_id order by plays.event_idx) as last_play_distance\n    , lag(loc.play_angle) over (partition by plays.game_id order by plays.event_idx) as last_play_angle\n    , lag(loc.rink_side) over (partition by plays.game_id order by plays.event_idx) as last_play_rink_side\n    , lag(loc.zone_type) over (partition by plays.game_id order by plays.event_idx) as last_play_zone_type\n    , lag(loc.zone) over (partition by plays.game_id order by plays.event_idx) as last_play_zone\n\n    /* Shift properties */\n    , shifts.shift_id\n    , shifts.shift_number\n    , shifts.shift_numbers\n    , shifts.shift_ids\n    , shifts.event_numbers as shift_event_numbers\n    , shifts.start_time as shift_start_time\n    , shifts.end_time as shift_end_time\n    , shifts.duration as shift_duration\n    , shifts.goal_game_state\n    , shifts.is_shift_start\n    , shifts.is_shift_end\n    , shifts.is_shift_start_period_start\n    , shifts.is_shift_start_not_period_start\n    , shifts.is_shift_end_period_end\n    , shifts.game_state\n    , shifts.game_state_description\n    , shifts.game_state_skaters\n    , shifts.home_goalie_on_ice = 0 as home_goalie_pulled\n    , shifts.away_goalie_on_ice = 0 as away_goalie_pulled\n    , shifts.home_skaters\n    , shifts.away_skaters\n    , shifts.home_skaters_on_ice\n    , shifts.away_skaters_on_ice\n    , shifts.home_defence_on_ice\n    , shifts.away_defence_on_ice\n    , shifts.home_forward_on_ice\n    , shifts.away_forward_on_ice\n    , shifts.home_goalie_on_ice\n    , shifts.away_goalie_on_ice\n\n    /* XG stuff */\n    , coalesce(xg.id_fenwick_shot, 0) as xg_fenwick_shot\n    , xg.x_goal\n    , xg.xg_model_id\n    , xg.id_strength_state_code as xg_strength_state_code\n    , xg.xg_proba\n\nfrom `nhl-breakouts`.`github`.`stg_nhl__live_plays` as plays\nleft join `nhl-breakouts`.`github`.`d_shifts_time` as shifts\n    on\n        shifts.game_id = plays.game_id\n        and shifts.game_time_seconds = plays.play_total_seconds_elapsed\n        and shifts.player_id = plays.player_id\n        and shifts.period = plays.play_period\n        and shifts.is_goal is false\nleft join `nhl-breakouts`.`github`.`stg_nhl__live_plays_location` as loc\n    on\n        loc.play_id = plays.stg_nhl__live_plays_id\n        and loc.game_id = plays.game_id\n        and loc.play_x_coordinate = cast(plays.play_x_coordinate as float64)\n        and loc.play_y_coordinate = cast(plays.play_y_coordinate as float64)\nleft join `nhl-breakouts`.`github`.`stg_nhl__xg` as xg\n    on\n        xg.id_play_id = plays.stg_nhl__live_plays_id\n        and xg.id_game_id = plays.game_id\n        and xg.id_player_id = plays.player_id", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.nhl_data.d_schedule": {"database": "nhl-breakouts", "schema": "github", "name": "d_schedule", "resource_type": "model", "package_name": "nhl_data", "path": "analytics/intermediate/d_schedule.sql", "original_file_path": "models/analytics/intermediate/d_schedule.sql", "unique_id": "model.nhl_data.d_schedule", "fqn": ["nhl_data", "analytics", "intermediate", "d_schedule"], "alias": "d_schedule", "checksum": {"name": "sha256", "checksum": "06236ddad29fbdcadd00840f3f90c2c2092a91a95ce33fe632dd1c13cf231b19"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Staged NHL schedule data from the NHL-API", "columns": {"schedule_id": {"name": "schedule_id", "description": "Unique identifier for NHL scheduled games", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "game_id": {"name": "game_id", "description": "Foreign key that maps to an NHL game\n##### More about game_id\nThe first 4 digits identify the season of the game (ie. 2017 for the 2017-2018 season). The next 2 digits give the type of game, where 01 = preseason, 02 = regular season, 03 = playoffs, 04 = all-star. The final 4 digits identify the specific game number.\n\nFor regular season and preseason games, this ranges from 0001 to the number of games played. (1271 for seasons with 31 teams (2017 and onwards) and 1230 for seasons with 30 teams).\n\nFor playoff games, the 2nd digit of the specific number gives the round of the playoffs, the 3rd digit specifies the matchup, and the 4th digit specifies the game (out of 7).\n\n[Credit to Drew Hynes' NHL API docs](https://gitlab.com/dword4/nhlapi/-/blob/master/stats-api.md#game-ids)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "season_id": {"name": "season_id", "description": "Foreign key that maps to an NHL season", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "away_team_id": {"name": "away_team_id", "description": "Foreign key that maps to an NHL team (away team)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_team_id": {"name": "home_team_id", "description": "Foreign key that maps to an NHL team (home team)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "venue_id": {"name": "venue_id", "description": "Foreign key that maps to a team's venue (home team)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "game_number": {"name": "game_number", "description": "Four digit number that is unique to a game in the context of a season (e.g. 0002)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "game_type": {"name": "game_type", "description": "Code for the type of game, which is retrieved by extracting the the 5th and 6th position from the game_id (e.g. 02 = regular season game)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "game_type_description": {"name": "game_type_description", "description": "Description for the type of game played, enhancing game_type (e.g. Pre-season, Regular, Playoffs, All-star)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "game_date": {"name": "game_date", "description": "Date that the game takes place (e.g. 2021-01-14)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "abstract_game_state": {"name": "abstract_game_state", "description": "Game state (e.g. Final)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "coded_game_state": {"name": "coded_game_state", "description": "Coded game state (e.g. 7)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "detailed_state": {"name": "detailed_state", "description": "Detailed game state (e.g. Final) - should be different that game state, but look similar", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status_code": {"name": "status_code", "description": "Unknown - looks similar to code_game_state", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_start_time_tbd": {"name": "is_start_time_tbd", "description": "Whether or not the start time is still to be decided (True / False)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "away_team_wins": {"name": "away_team_wins", "description": "Cumulative number of wins for the away team for the given season (wins for the team at that point in time)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "away_team_losses": {"name": "away_team_losses", "description": "Cumulative number of losses for the away team for the given season (losses for the team at that point in time)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "away_team_ot": {"name": "away_team_ot", "description": "Cumulative number of overtime wins for the away team for the given season (overtime wins for the team at that point in time)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "away_team_type": {"name": "away_team_type", "description": "Type of away team (e.g. League)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "away_team_score": {"name": "away_team_score", "description": "Goals scored by the away team", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "away_team_name": {"name": "away_team_name", "description": "Away team name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_team_wins": {"name": "home_team_wins", "description": "Cumulative number of wins for the home team for the given season (wins for the team at that point in time)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_team_losses": {"name": "home_team_losses", "description": "Cumulative number of losses for the home team for the given season (losses for the team at that point in time)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_team_ot": {"name": "home_team_ot", "description": "Cumulative number of overtime wins for the home team for the given season (overtime wins for the team at that point in time)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_team_type": {"name": "home_team_type", "description": "Type of home team (e.g. League)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_team_score": {"name": "home_team_score", "description": "Goals scored by the home team", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_team_name": {"name": "home_team_name", "description": "Home team name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_period1_shooting": {"name": "home_period1_shooting", "description": "The direction that the home team is shooting towards in period 1 ('left', 'right', 'missing')", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_period2_shooting": {"name": "home_period2_shooting", "description": "The direction that the home team is shooting towards in period 2 ('left', 'right', 'missing')", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_period3_shooting": {"name": "home_period3_shooting", "description": "The direction that the home team is shooting towards in period 3 ('left', 'right', 'missing')", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "away_period1_shooting": {"name": "away_period1_shooting", "description": "The direction that the away team is shooting towards in period 1 ('left', 'right', 'missing')", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "away_period2_shooting": {"name": "away_period2_shooting", "description": "The direction that the away team is shooting towards in period 2 ('left', 'right', 'missing')", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "away_period3_shooting": {"name": "away_period3_shooting", "description": "The direction that the away team is shooting towards in period 3 ('left', 'right', 'missing')", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "venue_name": {"name": "venue_name", "description": "Home team's venue / arena that the teams played in", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_team_url": {"name": "home_team_url", "description": "Home team URL endpoint", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "away_team_url": {"name": "away_team_url", "description": "Away team URL endpoint", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "venue_url": {"name": "venue_url", "description": "URL endpoint for the venue", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "content_url": {"name": "content_url", "description": "URL endpoint for the content", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "url": {"name": "url", "description": "URL endpoint for schedule", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "extracted_at": {"name": "extracted_at", "description": "Timestamp that the data was retrieved", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "loaded_at": {"name": "loaded_at", "description": "Timestamp that the data was loaded", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "nhl_data://models/analytics/intermediate/d_schedule.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "intermediate"}, "created_at": 1695581342.6989763, "relation_name": "`nhl-breakouts`.`github`.`d_schedule`", "raw_code": "select\n    /* Primary Key */\n    schedule.stg_nhl__schedule_id as schedule_id\n\n    /* Identifiers */\n    , schedule.game_id\n    , schedule.season_id\n    , schedule.away_team_id\n    , schedule.home_team_id\n    , schedule.venue_id\n\n    /* Schedule Properties */\n    , schedule.game_number\n    , schedule.game_type\n    , schedule.game_type_description\n    , schedule.game_date\n    , schedule.abstract_game_state\n    , schedule.coded_game_state\n    , schedule.detailed_state\n    , schedule.status_code\n    , schedule.is_start_time_tbd\n    , schedule.away_team_wins\n    , schedule.away_team_losses\n    , schedule.away_team_ot\n    , schedule.away_team_type\n    , schedule.away_team_score\n    , schedule.away_team_name\n    , schedule.home_team_wins\n    , schedule.home_team_losses\n    , schedule.home_team_ot\n    , schedule.home_team_type\n    , schedule.home_team_score\n    , schedule.home_team_name\n    , schedule.venue_name\n\n    /* Rink Shooting Properties */\n    -- ...this dataset brings in p1_shooting_location, which is the location where shots were going in period 1 for the home team\n\n    -- ... now, classify for the home team with the assumption that each period switches sides\n    , rs.p1_shooting_location as home_period1_shooting\n    , case\n        when rs.p1_shooting_location = 'right' then 'left'\n        when rs.p1_shooting_location = 'left' then 'right'\n        else rs.p1_shooting_location\n    end as home_period2_shooting\n    , rs.p1_shooting_location as home_period3_shooting\n    -- ... now, classify for the away team with the assumption that each period switches sides\n    , case\n        when rs.p1_shooting_location = 'right' then 'left'\n        when rs.p1_shooting_location = 'left' then 'right'\n        else rs.p1_shooting_location\n    end as away_period1_shooting\n    , rs.p1_shooting_location as away_period2_shooting\n    , case\n        when rs.p1_shooting_location = 'right' then 'left'\n        when rs.p1_shooting_location = 'left' then 'right'\n        else rs.p1_shooting_location\n    end as away_period3_shooting\n\n    /* Additioanl properties */\n    , schedule.home_team_url\n    , schedule.away_team_url\n    , schedule.venue_url\n    , schedule.content_url\n    , schedule.url\n    , schedule.extracted_at\n    , schedule.loaded_at\nfrom\n    {{ ref('stg_nhl__schedule') }} as schedule\nleft join {{ ref('stg_nhl__rink_shooting') }} as rs on rs.game_id = schedule.game_id", "language": "sql", "refs": [{"name": "stg_nhl__schedule", "package": null, "version": null}, {"name": "stg_nhl__rink_shooting", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.nhl_data.stg_nhl__schedule", "model.nhl_data.stg_nhl__rink_shooting"]}, "compiled_path": "target/compiled/nhl_data/models/analytics/intermediate/d_schedule.sql", "compiled": true, "compiled_code": "select\n    /* Primary Key */\n    schedule.stg_nhl__schedule_id as schedule_id\n\n    /* Identifiers */\n    , schedule.game_id\n    , schedule.season_id\n    , schedule.away_team_id\n    , schedule.home_team_id\n    , schedule.venue_id\n\n    /* Schedule Properties */\n    , schedule.game_number\n    , schedule.game_type\n    , schedule.game_type_description\n    , schedule.game_date\n    , schedule.abstract_game_state\n    , schedule.coded_game_state\n    , schedule.detailed_state\n    , schedule.status_code\n    , schedule.is_start_time_tbd\n    , schedule.away_team_wins\n    , schedule.away_team_losses\n    , schedule.away_team_ot\n    , schedule.away_team_type\n    , schedule.away_team_score\n    , schedule.away_team_name\n    , schedule.home_team_wins\n    , schedule.home_team_losses\n    , schedule.home_team_ot\n    , schedule.home_team_type\n    , schedule.home_team_score\n    , schedule.home_team_name\n    , schedule.venue_name\n\n    /* Rink Shooting Properties */\n    -- ...this dataset brings in p1_shooting_location, which is the location where shots were going in period 1 for the home team\n\n    -- ... now, classify for the home team with the assumption that each period switches sides\n    , rs.p1_shooting_location as home_period1_shooting\n    , case\n        when rs.p1_shooting_location = 'right' then 'left'\n        when rs.p1_shooting_location = 'left' then 'right'\n        else rs.p1_shooting_location\n    end as home_period2_shooting\n    , rs.p1_shooting_location as home_period3_shooting\n    -- ... now, classify for the away team with the assumption that each period switches sides\n    , case\n        when rs.p1_shooting_location = 'right' then 'left'\n        when rs.p1_shooting_location = 'left' then 'right'\n        else rs.p1_shooting_location\n    end as away_period1_shooting\n    , rs.p1_shooting_location as away_period2_shooting\n    , case\n        when rs.p1_shooting_location = 'right' then 'left'\n        when rs.p1_shooting_location = 'left' then 'right'\n        else rs.p1_shooting_location\n    end as away_period3_shooting\n\n    /* Additioanl properties */\n    , schedule.home_team_url\n    , schedule.away_team_url\n    , schedule.venue_url\n    , schedule.content_url\n    , schedule.url\n    , schedule.extracted_at\n    , schedule.loaded_at\nfrom\n    `nhl-breakouts`.`github`.`stg_nhl__schedule` as schedule\nleft join `nhl-breakouts`.`github`.`stg_nhl__rink_shooting` as rs on rs.game_id = schedule.game_id", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.nhl_data.f_player_season": {"database": "nhl-breakouts", "schema": "github", "name": "f_player_season", "resource_type": "model", "package_name": "nhl_data", "path": "analytics/core/f_player_season.sql", "original_file_path": "models/analytics/core/f_player_season.sql", "unique_id": "model.nhl_data.f_player_season", "fqn": ["nhl_data", "analytics", "core", "f_player_season"], "alias": "f_player_season", "checksum": {"name": "sha256", "checksum": "7316347f2cad22e9fb84e8f4079b45ef4653a3136263b3dea289bcb0c5dddce6"}, "config": {"enabled": true, "alias": null, "schema": "core", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Model-ready, feature rich dataset at the player-season-game_type level of granularity for regular season + playoffs", "columns": {"player_season_gametype_id": {"name": "player_season_gametype_id", "description": "Unique identifier for a player's summarized activity in an NHL season (player_id + season_id + game_type)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "player_id": {"name": "player_id", "description": "Foreign key that maps to an NHL player ID", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "season_id": {"name": "season_id", "description": "Foreign key that maps to an NHL season (e.g. \"20172018\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "game_type": {"name": "game_type", "description": "Code for the type of game, which is retrieved by extracting the the 5th and 6th position from the game_id (e.g. 02 = regular season game)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "game_type_description": {"name": "game_type_description", "description": "Description for the type of game played, enhancing game_type (e.g. Pre-season, Regular, Playoffs, All-star)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "regular_season_start_date": {"name": "regular_season_start_date", "description": "The first date of the NHL regular season (e.g. \"2017-10-04\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "regular_season_end_date": {"name": "regular_season_end_date", "description": "The last date of the NHL regular season (e.g. \"2018-04-08\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "full_season_games": {"name": "full_season_games", "description": "The number of regular season games scheduled (e.g. 56 games in 2020-21 season)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "boxscore_games": {"name": "boxscore_games", "description": "The number of regular season games played. It is possible that the number of games played is different to the number of games scheduled because of injuries, scratches, or trades", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "player_full_name": {"name": "player_full_name", "description": "Full name of the NHL player", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "time_on_ice_seconds": {"name": "time_on_ice_seconds", "description": "The number of total seconds played in the regular season", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "time_on_ice_minutes": {"name": "time_on_ice_minutes", "description": "The number of total minutes played in the regular season", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "avg_time_on_ice_mins": {"name": "avg_time_on_ice_mins", "description": "The number of minutes played in the regular seasons divided by the number of games played in the regular season (e.g. 20.5 = 20 minutes and 30 seconds)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "goals": {"name": "goals", "description": "The number of goals scored in the regular season", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "goals_gamewinning": {"name": "goals_gamewinning", "description": "The number of goals scored that ended up becoming the game winning goal (either last goal scored in regulation, or the OT winner)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "goals_chasegoal": {"name": "goals_chasegoal", "description": "The number of goals scored while behind by more than 1 goal", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "goals_gametying": {"name": "goals_gametying", "description": "The number of goals scored from behind that tied the game up", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "goals_goahead": {"name": "goals_goahead", "description": "The number of goals scored to break the tie and take the lead in the game", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "goals_buffergoal": {"name": "goals_buffergoal", "description": "The number of goals scored while the team was ahead by at least 1 goal", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "assists_primary": {"name": "assists_primary", "description": "The number of primary assists on goals in the regular season", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "assists_secondary": {"name": "assists_secondary", "description": "The number of secondary assists on goals in the regular season", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "assists": {"name": "assists", "description": "The number of assists on goals made in the regular season", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "points": {"name": "points", "description": "The number of points scored in the regular season", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "goals_pergame": {"name": "goals_pergame", "description": "The number of goals scored in the regular season divided by the number of games played", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "assists_pergame": {"name": "assists_pergame", "description": "The number of assists in the regular season divided by the number of games played", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "assists_primary_pergame": {"name": "assists_primary_pergame", "description": "The number of primary assists in the regular season divided by the number of games played", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "assists_secondary_pergame": {"name": "assists_secondary_pergame", "description": "The number of secondary assists in the regular season divided by the number of games played", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "points_pergame": {"name": "points_pergame", "description": "The number of points scored in the regular season divided by the number of games played", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "goals_per60": {"name": "goals_per60", "description": "The number of goals scored in the regular season divided by the number of minutes played per 60 (mins played / 60 mins)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "assists_per60": {"name": "assists_per60", "description": "The number of assists in the regular season divided by the number of minutes played per 60 (mins played / 60 mins)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "assists_primary_per60": {"name": "assists_primary_per60", "description": "The number of primary assists in the regular season divided by the number of minutes played per 60 (mins played / 60 mins)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "assists_secondary_per60": {"name": "assists_secondary_per60", "description": "The number of assists in the regular season divided by the number of minutes played per 60 (mins played / 60 mins)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "points_per60": {"name": "points_per60", "description": "The number of assists in the regular season divided by the number of minutes played per 60 (mins played / 60 mins)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shots_ff": {"name": "shots_ff", "description": "Fenwick shots for while on the ice (goals, saved shots, missed shots)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shots_fa": {"name": "shots_fa", "description": "Fenwick shots against while on the ice (goals, saved shots, missed shots)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shots_cf": {"name": "shots_cf", "description": "Corsi shots for while on the ice (goals, saved shots, missed shots, blocked shots)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shots_ca": {"name": "shots_ca", "description": "Corsi shots against while on the ice (goals, saved shots, missed shots, blocked shots)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shots_sf": {"name": "shots_sf", "description": "Shots for while on the ice (goals, saved shots)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shots_sa": {"name": "shots_sa", "description": "Shots against while on the ice (goals, saved shots)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shots_gf": {"name": "shots_gf", "description": "Goals for while on the ice (goals)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shots_ga": {"name": "shots_ga", "description": "Goals against while on the ice (goals)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shots_xgf": {"name": "shots_xgf", "description": "Expected goals for while on the ice (xg)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shots_xga": {"name": "shots_xga", "description": "Expected goals against while on the ice (xg)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shots_isog": {"name": "shots_isog", "description": "Total individual shots on goal (goals, saved shots)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shots_iff": {"name": "shots_iff", "description": "Total individual Fenwick shots for (goals, saved shots, missed shots)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shots_icf": {"name": "shots_icf", "description": "Total individual Corsi shots for (goals, saved shots, missed shots, blocked shots)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shots_iblocked": {"name": "shots_iblocked", "description": "Total individual shots that were blocked (blocked shots)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shots_imissed": {"name": "shots_imissed", "description": "Total individual shots that were missed (missed shots)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shots_isaved": {"name": "shots_isaved", "description": "Total individual shots that were saved (saved shots)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shots_iscored": {"name": "shots_iscored", "description": "Total individual shots that were goals (goals)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shots_ixg": {"name": "shots_ixg", "description": "The sum of an individual's expected goal probability (xg)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shots_ff_per60": {"name": "shots_ff_per60", "description": "Fenwick shots for while on the ice (goals, saved shots, missed shots) divided by the number of minutes played per 60 (mins played / 60 mins)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shots_fa_per60": {"name": "shots_fa_per60", "description": "Fenwick shots against while on the ice (goals, saved shots, missed shots) divided by the number of minutes played per 60 (mins played / 60 mins)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shots_cf_per60": {"name": "shots_cf_per60", "description": "Corsi shots for while on the ice (goals, saved shots, missed shots, blocked shots) divided by the number of minutes played per 60 (mins played / 60 mins)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shots_ca_per60": {"name": "shots_ca_per60", "description": "Corsi shots against while on the ice (goals, saved shots, missed shots, blocked shots) divided by the number of minutes played per 60 (mins played / 60 mins)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shots_sf_per60": {"name": "shots_sf_per60", "description": "Shots for while on the ice (goals, saved shots) divided by the number of minutes played per 60 (mins played / 60 mins)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shots_sa_per60": {"name": "shots_sa_per60", "description": "Shots against while on the ice (goals, saved shots) divided by the number of minutes played per 60 (mins played / 60 mins)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shots_gf_per60": {"name": "shots_gf_per60", "description": "Goals for while on the ice (goals) divided by the number of minutes played per 60 (mins played / 60 mins)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shots_ga_per60": {"name": "shots_ga_per60", "description": "Goals against while on the ice (goals) divided by the number of minutes played per 60 (mins played / 60 mins)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shots_xgf_per60": {"name": "shots_xgf_per60", "description": "Expected goals for while on the ice (xg) divided by the number of minutes played per 60 (mins played / 60 mins)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shots_xga_per60": {"name": "shots_xga_per60", "description": "Expected goals against while on the ice (xg) divided by the number of minutes played per 60 (mins played / 60 mins)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shots_isog_per60": {"name": "shots_isog_per60", "description": "Total individual shots on goal (goals, saved shots) divided by the number of minutes played per 60 (mins played / 60 mins)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shots_iff_per60": {"name": "shots_iff_per60", "description": "Total individual Fenwick shots for (goals, saved shots, missed shots) divided by the number of minutes played per 60 (mins played / 60 mins)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shots_icf_per60": {"name": "shots_icf_per60", "description": "Total individual Corsi shots for (goals, saved shots, missed shots, blocked shots) divided by the number of minutes played per 60 (mins played / 60 mins)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shots_iblocked_per60": {"name": "shots_iblocked_per60", "description": "Total individual shots that were blocked (blocked shots) divided by the number of minutes played per 60 (mins played / 60 mins)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shots_imissed_per60": {"name": "shots_imissed_per60", "description": "Total individual shots that were missed (missed shots) divided by the number of minutes played per 60 (mins played / 60 mins)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shots_isaved_per60": {"name": "shots_isaved_per60", "description": "Total individual shots that were saved (saved shots) divided by the number of minutes played per 60 (mins played / 60 mins)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shots_iscored_per60": {"name": "shots_iscored_per60", "description": "Total individual shots that were goals (goals) divided by the number of minutes played per 60 (mins played / 60 mins)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shots_ixg_per60": {"name": "shots_ixg_per60", "description": "The sum of an individual's expected goal probability (xg) divided by the number of minutes played per 60 (mins played / 60 mins)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shots_ev_isog": {"name": "shots_ev_isog", "description": "Total individual shots on goal (goals, saved shots) during even-strength minutes", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shots_ev_iff": {"name": "shots_ev_iff", "description": "Total individual Fenwick shots for (goals, saved shots, missed shots) during even-strength minutes", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shots_ev_icf": {"name": "shots_ev_icf", "description": "Total individual Corsi shots for (goals, saved shots, missed shots, blocked shots) during even-strength minutes", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shots_ev_iblocked": {"name": "shots_ev_iblocked", "description": "Total individual shots that were blocked (blocked shots) during even-strength minutes", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shots_ev_imissed": {"name": "shots_ev_imissed", "description": "Total individual shots that were missed (missed shots) during even-strength minutes", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shots_ev_isaved": {"name": "shots_ev_isaved", "description": "Total individual shots that were saved (saved shots) during even-strength minutes", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shots_ev_iscored": {"name": "shots_ev_iscored", "description": "Total individual shots that were goals (goals) during even-strength minutes", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shots_ev_ixg": {"name": "shots_ev_ixg", "description": "The sum of an individual's expected goal probability (xg) during even-strength minutes", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shots_pp_isog": {"name": "shots_pp_isog", "description": "Total individual shots on goal (goals, saved shots) during power-play minutes", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shots_pp_iff": {"name": "shots_pp_iff", "description": "Total individual Fenwick shots for (goals, saved shots, missed shots) during power-play minutes", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shots_pp_icf": {"name": "shots_pp_icf", "description": "Total individual Corsi shots for (goals, saved shots, missed shots, blocked shots) during power-play minutes", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shots_pp_iblocked": {"name": "shots_pp_iblocked", "description": "Total individual shots that were blocked (blocked shots) during power-play minutes", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shots_pp_imissed": {"name": "shots_pp_imissed", "description": "Total individual shots that were missed (missed shots) during power-play minutes", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shots_pp_isaved": {"name": "shots_pp_isaved", "description": "Total individual shots that were saved (saved shots) during power-play minutes", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shots_pp_iscored": {"name": "shots_pp_iscored", "description": "Total individual shots that were goals (goals) during power-play minutes", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shots_pp_ixg": {"name": "shots_pp_ixg", "description": "The sum of an individual's expected goal probability (xg) during power-play minutes", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shots_sh_isog": {"name": "shots_sh_isog", "description": "Total individual shots on goal (goals, saved shots) during short-handed minutes", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shots_sh_iff": {"name": "shots_sh_iff", "description": "Total individual Fenwick shots for (goals, saved shots, missed shots) during short-handed minutes", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shots_sh_icf": {"name": "shots_sh_icf", "description": "Total individual Corsi shots for (goals, saved shots, missed shots, blocked shots) during short-handed minutes", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shots_sh_iblocked": {"name": "shots_sh_iblocked", "description": "Total individual shots that were blocked (blocked shots) during short-handed minutes", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shots_sh_imissed": {"name": "shots_sh_imissed", "description": "Total individual shots that were missed (missed shots) during short-handed minutes", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shots_sh_isaved": {"name": "shots_sh_isaved", "description": "Total individual shots that were saved (saved shots) during short-handed minutes", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shots_sh_iscored": {"name": "shots_sh_iscored", "description": "Total individual shots that were goals (goals) during short-handed minutes", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shots_sh_ixg": {"name": "shots_sh_ixg", "description": "The sum of an individual's expected goal probability (xg) during short-handed minutes", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shots_backhand_all": {"name": "shots_backhand_all", "description": "The number of backhand shots that were either saved or were goals (no misses or blocks)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shots_deflected_all": {"name": "shots_deflected_all", "description": "The number of deflected shots that were either saved or were goals (no misses or blocks)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shots_slapshot_all": {"name": "shots_slapshot_all", "description": "The number of slapshot shots that were either saved or were goals (no misses or blocks)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shots_snapshot_all": {"name": "shots_snapshot_all", "description": "The number of snapshot shots that were either saved or were goals (no misses or blocks)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shots_tipin_all": {"name": "shots_tipin_all", "description": "The number of tip-in shots that were either saved or were goals (no misses or blocks)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shots_wraparound_all": {"name": "shots_wraparound_all", "description": "The number of wraparound shots that were either saved or were goals (no misses or blocks)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shots_wristshot_all": {"name": "shots_wristshot_all", "description": "The number of wristshot shots that were either saved or were goals (no misses or blocks)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shots_rebound_all": {"name": "shots_rebound_all", "description": "The number of rebounds (shot taken within 2 seconds of previous if taken by same team and same period) that were either saved or were goals (no misses or blocks)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shots_backhand_saved": {"name": "shots_backhand_saved", "description": "The number of backhand shots that were saved", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shots_deflected_saved": {"name": "shots_deflected_saved", "description": "The number of deflected shots that were saved", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shots_slapshot_saved": {"name": "shots_slapshot_saved", "description": "The number of slapshot shots that were saved", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shots_snapshot_saved": {"name": "shots_snapshot_saved", "description": "The number of snapshot shots that were saved", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shots_tipin_saved": {"name": "shots_tipin_saved", "description": "The number of tip-in shots that were saved", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shots_wraparound_saved": {"name": "shots_wraparound_saved", "description": "The number of wrap-around shots that were saved", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shots_wristshot_saved": {"name": "shots_wristshot_saved", "description": "The number of wristshot shots that were saved", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shots_rebound_saved": {"name": "shots_rebound_saved", "description": "The number of rebounds (shot taken within 2 seconds of previous if taken by same team and same period) that were saved", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shots_backhand_goal": {"name": "shots_backhand_goal", "description": "The number of backhand shots that were goals", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shots_deflected_goal": {"name": "shots_deflected_goal", "description": "The number of deflected shots that were goals", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shots_slapshot_goal": {"name": "shots_slapshot_goal", "description": "The number of slapshot shots that were goals", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shots_snapshot_goal": {"name": "shots_snapshot_goal", "description": "The number of snapshot shots that were goals", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shots_tipin_goal": {"name": "shots_tipin_goal", "description": "The number of tip-in shots that were goals", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shots_wraparound_goal": {"name": "shots_wraparound_goal", "description": "The number of wrap-around shots that were goals", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shots_wristshot_goal": {"name": "shots_wristshot_goal", "description": "The number of wristshot shots that were goals", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shots_rebound_goal": {"name": "shots_rebound_goal", "description": "The number of rebounds (shot taken within 2 seconds of previous if taken by same team and same period) that were goals", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shots_backhand_xg": {"name": "shots_backhand_xg", "description": "The sum of expected goals (xg) from backhand shots", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shots_deflected_xg": {"name": "shots_deflected_xg", "description": "The sum of expected goals (xg) from deflected shots", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shots_slapshot_xg": {"name": "shots_slapshot_xg", "description": "The sum of expected goals (xg) from slapshot shots", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shots_snapshot_xg": {"name": "shots_snapshot_xg", "description": "The sum of expected goals (xg) from snapshot shots", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shots_tipin_xg": {"name": "shots_tipin_xg", "description": "The sum of expected goals (xg) from tipin shots", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shots_wraparound_xg": {"name": "shots_wraparound_xg", "description": "The sum of expected goals (xg) from wrap-around shots", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shots_wristshot_xg": {"name": "shots_wristshot_xg", "description": "The sum of expected goals (xg) from wristshot shots", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shots_rebound_xg": {"name": "shots_rebound_xg", "description": "The sum of expected goals (xg) from rebound (shot taken within 2 seconds of previous if taken by same team and same period) shots", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pcnt_ff": {"name": "pcnt_ff", "description": "Fenwick for percentage (while on the ice) = Fenwick shots for / (Fenwick shots for + Fenwick shots against)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pcnt_cf": {"name": "pcnt_cf", "description": "Corsi for percentage (while on the ice) = Corsi shots for / (Corsi shots for + Corsi shots against)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pcnt_sf": {"name": "pcnt_sf", "description": "Shots for percentage (while on the ice) = Shots for / (Shots for + Shots against)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pcnt_gf": {"name": "pcnt_gf", "description": "Goals for percentage (while on the ice) = Goals for / (Goals  for + Goals against)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pcnt_xgf": {"name": "pcnt_xgf", "description": "Expected goals (xg) for percentage (while on the ice) = xg for / (xg for + xg against)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pcnt_shooting_all": {"name": "pcnt_shooting_all", "description": "The percent of all shots (blocked + misses + on-goal) that were goals (e.g. 10% shooting means 1 out of 10 shots taken were goals)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pcnt_shooting_ongoal": {"name": "pcnt_shooting_ongoal", "description": "The percent of all shots on goal that were goals (e.g. 10% shooting means 1 out of 10 shots on net were goals)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pcnt_shooting_backhand": {"name": "pcnt_shooting_backhand", "description": "The percent of all backhand shots on goal that were goals (e.g. 10% shooting means 1 out of 10 backhand shots on net were goals)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pcnt_shooting_deflected": {"name": "pcnt_shooting_deflected", "description": "The percent of all deflected shots on goal that were goals (e.g. 10% shooting means 1 out of 10 deflected shots on net were goals)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pcnt_shooting_slapshot": {"name": "pcnt_shooting_slapshot", "description": "The percent of all slapshot shots on goal that were goals (e.g. 10% shooting means 1 out of 10 slapshot shots on net were goals)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pcnt_shooting_snapshot": {"name": "pcnt_shooting_snapshot", "description": "The percent of all snapshot shots on goal that were goals (e.g. 10% shooting means 1 out of 10 snapshot shots on net were goals)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pcnt_shooting_tipin": {"name": "pcnt_shooting_tipin", "description": "The percent of all tip-in shots on goal that were goals (e.g. 10% shooting means 1 out of 10 tip-in shots on net were goals)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pcnt_shooting_wraparound": {"name": "pcnt_shooting_wraparound", "description": "The percent of all wrap-around shots on goal that were goals (e.g. 10% shooting means 1 out of 10 wrap-around shots on net were goals)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pcnt_shooting_wristshot": {"name": "pcnt_shooting_wristshot", "description": "The percent of all wristshot shots on goal that were goals (e.g. 10% shooting means 1 out of 10 wristshot shots on net were goals)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pcnt_shooting_rebound": {"name": "pcnt_shooting_rebound", "description": "The percent of all rebound shots on goal that were goals (e.g. 10% shooting means 1 out of 10 rebound shots on net were goals)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "faceoff_wins": {"name": "faceoff_wins", "description": "Number of faceoffs won", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "faceoff_taken": {"name": "faceoff_taken", "description": "Number of faceoffs taken", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pcnt_faceoffwins": {"name": "pcnt_faceoffwins", "description": "The percent of faceoffs taken that were won (e.g. 0.50 = 50% faceoffs won)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hits": {"name": "hits", "description": "Number of hits made", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "takeaways": {"name": "takeaways", "description": "Number of takeaways made", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "giveaways": {"name": "giveaways", "description": "Number of giveaways faulted for", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "blocked": {"name": "blocked", "description": "Number of blocked shots", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "plus_minus": {"name": "plus_minus", "description": "Total plus minus in the game - plus for every goal scored while on the ice for, minus for every goal allowed while on the ice", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pim": {"name": "pim", "description": "Penalties in minutes:seconds", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "powerplay_goals": {"name": "powerplay_goals", "description": "Number of powerplay goals scored", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "powerplay_assists": {"name": "powerplay_assists", "description": "Number of powerplay assists (primary & secondary)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "short_handed_goals": {"name": "short_handed_goals", "description": "Number of short-handed goals scored", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "short_handed_assists": {"name": "short_handed_assists", "description": "Number of short-handed assists made", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "saves": {"name": "saves", "description": "Number of saves made", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "powerplay_saves": {"name": "powerplay_saves", "description": "Number of saves made on the powerplay", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "even_saves": {"name": "even_saves", "description": "Number of saves made at event strength", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shorthanded_shots_against": {"name": "shorthanded_shots_against", "description": "Number of saves made on the penalty kill / short-handed", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "even_shots_against": {"name": "even_shots_against", "description": "Number of shots against at event strength", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "powerplay_shots_against": {"name": "powerplay_shots_against", "description": "Number of shots against on the powerplay / man advantage", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "nhl_data://models/analytics/core/f_player_season.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "core"}, "created_at": 1695581342.9625525, "relation_name": "`nhl-breakouts`.`github`.`f_player_season`", "raw_code": "with\n--cte#1: basis for player-season-game_type level data\nboxscore_stats as (\n    select\n        bp.player_id\n        , player.full_name as player_full_name\n        , schedule.game_type\n        , schedule.game_type_description\n        , season.season_id\n        , season.regular_season_start_date\n        , season.regular_season_end_date\n        , season.number_of_games as full_season_games\n        , count(distinct bp.game_id) as boxscore_games\n        , sum(ifnull(bp.assists, 0)) as assists\n        , sum(ifnull(bp.goals, 0)) as goals\n        , sum(ifnull(bp.shots, 0)) as shots\n        , sum(ifnull(bp.hits, 0)) as hits\n        , sum(bp.faceoff_wins) as faceoff_wins\n        , sum(bp.faceoff_taken) as faceoff_taken\n        , sum(ifnull(bp.takeaways, 0)) as takeaways\n        , sum(ifnull(bp.giveaways, 0)) as giveaways\n        , sum(ifnull(bp.blocked, 0)) as blocked\n        , sum(ifnull(bp.plus_minus, 0)) as plus_minus\n        , sum(ifnull(bp.pim, 0)) as pim\n        , sum(cast(split(bp.time_on_ice, ':')[offset(0)] as int)) as time_on_ice_mins_raw\n        , sum(cast(split(bp.time_on_ice, ':')[offset(1)] as int)) as time_on_ice_seconds_raw\n        , (sum(cast(split(bp.time_on_ice, ':')[offset(0)] as int)) * 60) + sum(cast(split(bp.time_on_ice, ':')[offset(1)] as int)) as time_on_ice_seconds\n        , sum(cast(split(bp.time_on_ice, ':')[offset(0)] as int)) + (sum(cast(split(bp.time_on_ice, ':')[offset(1)] as int)) / 60) as time_on_ice_minutes\n        , sum(ifnull(bp.powerplay_goals, 0)) as powerplay_goals\n        , sum(ifnull(bp.powerplay_assists, 0)) as powerplay_assists\n        , sum(ifnull(bp.short_handed_goals, 0)) as short_handed_goals\n        , sum(ifnull(bp.short_handed_assists, 0)) as short_handed_assists\n        , sum(ifnull(bp.saves, 0)) as saves\n        , sum(ifnull(bp.powerplay_saves, 0)) as powerplay_saves\n        , sum(ifnull(bp.even_saves, 0)) as even_saves\n        , sum(ifnull(bp.short_handed_shots_against, 0)) as shorthanded_shots_against\n        , sum(ifnull(bp.even_shots_against, 0)) as even_shots_against\n        , sum(ifnull(bp.powerplay_shots_against, 0)) as powerplay_shots_against\n    --,sum(case when bp.decision = \"w\" then 1 else 0) as wins\n    --,sum(case when bp.decision = \"l\" then 1 else 0) as losses\n    from {{ ref('f_boxscore_player') }} as bp\n    left join {{ ref('d_schedule') }} as schedule on schedule.game_id = bp.game_id\n    left join {{ ref('d_seasons') }} as season on season.season_id = schedule.season_id\n    left join {{ ref('d_players') }} as player on player.player_id = bp.player_id\n    left join {{ ref('f_games_scratches') }} as scratches on scratches.player_id = bp.player_id and scratches.game_id = bp.game_id\n\n    where\n        1 = 1\n        -- keep only regular season and playoff games\n        and schedule.game_type in ('02', '03')\n        -- remove scratches (fyi... should be the same same as `and bp.time_on_ice is not null`)\n        and scratches.player_id is null\n    group by\n        bp.player_id\n        , player.full_name\n        , season.season_id\n        , season.number_of_games\n        , season.regular_season_start_date\n        , season.regular_season_end_date\n        , schedule.game_type\n        , schedule.game_type_description\n    order by\n        count(distinct bp.game_id) desc\n        , sum(bp.goals) desc\n)\n\n-- #cte2: basis for on-ice-stats - play-by-play data for all shots, goals and assists\n, shots_goals_assists as (\n    select\n        plays.play_id\n        , plays.game_id\n        , plays.player_id\n        , season.season_id\n        , team.team_id\n        , team.team_name\n        , schedule.game_type\n        , plays.last_goal_game_winning\n        , plays.player_primary_assist\n        , plays.player_secondary_assist\n        , lower(schedule.game_type_description) as game_type_description\n        , lower(plays.event_description) as event_description\n        , lower(plays.event_type) as event_type\n        , lower(plays.event_secondary_type) as event_secondary_type\n        , lower(plays.player_role_team) as player_role_team\n        , lower(plays.player_role) as player_role\n        , lower(plays.play_period_type) as play_period_type\n        , lower(plays.home_result_of_play) as home_result_of_play\n        , lower(plays.away_result_of_play) as away_result_of_play\n        , plays.home_skaters\n        , plays.away_skaters\n        , plays.seconds_since_last_shot\n        , plays.shot_rebound_ind\n        , plays.last_shot_seconds\n        , plays.last_shot_rebound_ind\n        , plays.xg_fenwick_shot\n        , plays.x_goal\n        , plays.xg_model_id\n        , plays.xg_strength_state_code\n        , plays.xg_proba\n    from {{ ref('f_plays') }} as plays\n    left join {{ ref('d_schedule') }} as schedule on schedule.game_id = plays.game_id\n    left join {{ ref('d_seasons') }} as season on season.season_id = schedule.season_id\n    left join {{ ref('d_teams') }} as team on team.team_id = plays.team_id\n    where 1 = 1\n    -- remove shootout plays\n    and lower(plays.play_period_type) != 'shootout'\n    -- keep only regular season and playoff games\n    and schedule.game_type in ('02', '03')\n    -- keep roles involving the shooter, scorer or assister\n    and lower(plays.player_role) in ('shooter', 'scorer', 'assist')\n    -- keep blocked shots, missed shots, shots on target and goals\n    and lower(plays.event_type) in ('blocked_shot', 'missed_shot', 'shot', 'goal')\n)\n\n-- cte#3: flatten all shot events on both arrays (home_skaters & away_skaters) so that we can get corsi & fenwick features\n, shots_flat as (\n    select\n        *\n        , home_sga.player_role_team as shooting_team\n        , home_sga.player_id as shooter_player_id\n        , 'home' as skater_type\n    from shots_goals_assists as home_sga\n    , unnest(home_sga.home_skaters) as shot_player_id\n    where home_sga.player_role in ('shooter', 'scorer')\n    union all\n    select\n        *\n        , away_sga.player_role_team as shooting_team\n        , away_sga.player_id as shooter_player_id\n        , 'away' as skater_type\n    from shots_goals_assists as away_sga\n    , unnest(away_sga.away_skaters) as shot_player_id\n    where away_sga.player_role in ('shooter', 'scorer')\n)\n\n-- cte#4: on-ice shots stats - shot & goal summaries\n, shots_involvement as (\n    select\n        player.full_name as player_full_name\n        , s.shot_player_id\n        , s.game_id\n        , s.game_type\n        , s.season_id\n        -- shot descriptors\n        , case when s.shooting_team = s.skater_type then 'shot for' else 'shot against' end as shot_type\n        , case\n            when s.shooter_player_id = s.shot_player_id then 'shooter'\n            when s.shooting_team = s.skater_type then 'shooter teammate'\n            when s.shooting_team != s.skater_type then 'shooter opponent'\n        end as shooter_description\n        , s.shooting_team\n        , s.shooter_player_id\n        , s.skater_type\n        , s.event_type\n        , s.event_secondary_type\n        , s.shot_rebound_ind as shots_rebound\n        , s.last_shot_rebound_ind as last_shot_rebound\n        -- shot calculations\n        , case when s.event_type in ('goal', 'shot') then 1 else 0 end as shots_ongoal\n        , case when s.event_type = 'blocked_shot' then 1 else 0 end as shots_blocked\n        , case when s.event_type = 'missed_shot' then 1 else 0 end as shots_missed\n        , case when s.event_type = 'shot' then 1 else 0 end as shots_saved\n        , case when s.event_type = 'goal' then 1 else 0 end as shots_scored\n        , case when s.event_type in ('blocked_shot', 'missed_shot', 'shot', 'goal') then 1 else 0 end as corsi_shot\n        , case when s.event_type in ('missed_shot', 'shot', 'goal') then 1 else 0 end as fenwick_shot\n        , s.xg_fenwick_shot\n        , s.x_goal\n        , s.xg_model_id\n        , s.xg_strength_state_code\n        , s.xg_proba\n    from shots_flat as s\n    left join {{ ref('d_players') }} as player on player.player_id = s.shot_player_id\n    where lower(player.primary_position_code) != 'g'\n)\n\n-- cte#5: on-ice shots stats - summarizing individual shots (i) and on-ice shots\n, onice_shots_stats as (\n    select\n        game_type\n        , season_id\n        , shot_player_id\n        , player_full_name\n        -- on-ice shot calculations: fenwick shots for (ff), & fenwick shots against (fa)\n        , sum(case when shot_type = 'shot for' then fenwick_shot else 0 end) as shots_ff\n        , sum(case when shot_type = 'shot against' then fenwick_shot else 0 end) as shots_fa\n        -- on-ice shot calculations: corsi shots for (cf), & corsi shots against (ca)\n        , sum(case when shot_type = 'shot for' then corsi_shot else 0 end) as shots_cf\n        , sum(case when shot_type = 'shot against' then corsi_shot else 0 end) as shots_ca\n        -- on-ice shot calculations: shots for (sf), and shots against (sa)\n        , sum(case when shot_type = 'shot for' then shots_ongoal else 0 end) as shots_sf\n        , sum(case when shot_type = 'shot against' then shots_ongoal else 0 end) as shots_sa\n        -- on-ice shot calculations: goals for (gf), and goals against (ga)\n        , sum(case when shot_type = 'shot for' then shots_scored else 0 end) as shots_gf\n        , sum(case when shot_type = 'shot against' then shots_scored else 0 end) as shots_ga\n        -- on-ice xg shot calculations: probability of a fenwick shot being a goal\n        , sum(case when xg_fenwick_shot = 1 and shot_type = 'shot for' then shots_scored else 0 end) as shots_xgf\n        , sum(case when xg_fenwick_shot = 1 and shot_type = 'shot against' then shots_scored else 0 end) as shots_xga\n        -- individual (i) shot calculations: shots-on-goal, fenwick-for, corsi-for & expected goals (xg)\n        , sum(case when shooter_description = 'shooter' then shots_ongoal else 0 end) as shots_isog\n        , sum(case when shooter_description = 'shooter' then fenwick_shot else 0 end) as shots_iff\n        , sum(case when shooter_description = 'shooter' then corsi_shot else 0 end) as shots_icf\n        , sum(case when shooter_description = 'shooter' then shots_blocked else 0 end) as shots_iblocked\n        , sum(case when shooter_description = 'shooter' then shots_missed else 0 end) as shots_imissed\n        , sum(case when shooter_description = 'shooter' then shots_saved else 0 end) as shots_isaved\n        , sum(case when shooter_description = 'shooter' then shots_scored else 0 end) as shots_iscored\n        , sum(case when xg_fenwick_shot = 1 and shooter_description = 'shooter' then xg_proba else 0 end) as shots_ixg\n        -- individual shot calculations: (for shots on net) broken down by strength state, & shot results (cannot use corsi or blocked as xg_strength_state_code excludes blocked shots (fenwick only))\n        ----- even-strength (ev)\n        , sum(case when xg_fenwick_shot = 1 and xg_strength_state_code = 'ev' and shooter_description = 'shooter' then shots_ongoal else 0 end) as shots_ev_isog\n        , sum(case when xg_fenwick_shot = 1 and xg_strength_state_code = 'ev' and shooter_description = 'shooter' then fenwick_shot else 0 end) as shots_ev_iff\n        --, sum(case when xg_fenwick_shot = 1 and xg_strength_state_code = 'ev' and shooter_description = 'shooter' then corsi_shot else 0 end) as shots_ev_icf\n        --, sum(case when xg_fenwick_shot = 1 and xg_strength_state_code = 'ev' and shooter_description = 'shooter' then shots_blocked else 0 end) as shots_ev_iblocked\n        , sum(case when xg_fenwick_shot = 1 and xg_strength_state_code = 'ev' and shooter_description = 'shooter' then shots_missed else 0 end) as shots_ev_imissed\n        , sum(case when xg_fenwick_shot = 1 and xg_strength_state_code = 'ev' and shooter_description = 'shooter' then shots_saved else 0 end) as shots_ev_isaved\n        , sum(case when xg_fenwick_shot = 1 and xg_strength_state_code = 'ev' and shooter_description = 'shooter' then shots_scored else 0 end) as shots_ev_iscored\n        , sum(case when xg_fenwick_shot = 1 and xg_strength_state_code = 'ev' and shooter_description = 'shooter' then xg_proba else 0 end) as shots_ev_ixg\n        ----- power-play (pp)\n        , sum(case when xg_fenwick_shot = 1 and xg_strength_state_code = 'pp' and shooter_description = 'shooter' then shots_ongoal else 0 end) as shots_pp_isog\n        , sum(case when xg_fenwick_shot = 1 and xg_strength_state_code = 'pp' and shooter_description = 'shooter' then fenwick_shot else 0 end) as shots_pp_iff\n        --, sum(case when xg_fenwick_shot = 1 and xg_strength_state_code = 'pp' and shooter_description = 'shooter' then corsi_shot else 0 end) as shots_pp_icf\n        --, sum(case when xg_fenwick_shot = 1 and xg_strength_state_code = 'pp' and shooter_description = 'shooter' then shots_blocked else 0 end) as shots_pp_iblocked\n        , sum(case when xg_fenwick_shot = 1 and xg_strength_state_code = 'pp' and shooter_description = 'shooter' then shots_missed else 0 end) as shots_pp_imissed\n        , sum(case when xg_fenwick_shot = 1 and xg_strength_state_code = 'pp' and shooter_description = 'shooter' then shots_saved else 0 end) as shots_pp_isaved\n        , sum(case when xg_fenwick_shot = 1 and xg_strength_state_code = 'pp' and shooter_description = 'shooter' then shots_scored else 0 end) as shots_pp_iscored\n        , sum(case when xg_fenwick_shot = 1 and xg_strength_state_code = 'pp' and shooter_description = 'shooter' then xg_proba else 0 end) as shots_pp_ixg\n        ----- short-handed (sh)\n        , sum(case when xg_fenwick_shot = 1 and xg_strength_state_code = 'sh' and shooter_description = 'shooter' then shots_ongoal else 0 end) as shots_sh_isog\n        , sum(case when xg_fenwick_shot = 1 and xg_strength_state_code = 'sh' and shooter_description = 'shooter' then fenwick_shot else 0 end) as shots_sh_iff\n        --, sum(case when xg_fenwick_shot = 1 and xg_strength_state_code = 'sh' and shooter_description = 'shooter' then corsi_shot else 0 end) as shots_sh_icf\n        --, sum(case when xg_fenwick_shot = 1 and xg_strength_state_code = 'sh' and shooter_description = 'shooter' then shots_blocked else 0 end) as shots_sh_iblocked\n        , sum(case when xg_fenwick_shot = 1 and xg_strength_state_code = 'sh' and shooter_description = 'shooter' then shots_missed else 0 end) as shots_sh_imissed\n        , sum(case when xg_fenwick_shot = 1 and xg_strength_state_code = 'sh' and shooter_description = 'shooter' then shots_saved else 0 end) as shots_sh_isaved\n        , sum(case when xg_fenwick_shot = 1 and xg_strength_state_code = 'sh' and shooter_description = 'shooter' then shots_scored else 0 end) as shots_sh_iscored\n        , sum(case when xg_fenwick_shot = 1 and xg_strength_state_code = 'sh' and shooter_description = 'shooter' then xg_proba else 0 end) as shots_sh_ixg\n        -- individual shot calculations: (for shots on net) broken down by shot type, & shot results\n        ----- all individual shot types (corsi)\n        , sum(case when event_secondary_type = 'backhand' and shooter_description = 'shooter' then corsi_shot else 0 end) as shots_backhand_all\n        , sum(case when event_secondary_type = 'deflected' and shooter_description = 'shooter' then corsi_shot else 0 end) as shots_deflected_all\n        , sum(case when event_secondary_type = 'slap shot' and shooter_description = 'shooter' then corsi_shot else 0 end) as shots_slapshot_all\n        , sum(case when event_secondary_type = 'snap shot' and shooter_description = 'shooter' then corsi_shot else 0 end) as shots_snapshot_all\n        , sum(case when event_secondary_type = 'tip-in' and shooter_description = 'shooter' then corsi_shot else 0 end) as shots_tipin_all\n        , sum(case when event_secondary_type = 'wrap-around' and shooter_description = 'shooter' then corsi_shot else 0 end) as shots_wraparound_all\n        , sum(case when event_secondary_type = 'wrist shot' and shooter_description = 'shooter' then corsi_shot else 0 end) as shots_wristshot_all\n        , sum(case when shots_rebound = 1 and shooter_description = 'shooter' then corsi_shot else 0 end) as shots_rebound_all\n        ----- shot-saved (shots on-goal that were saved)\n        , sum(case when event_secondary_type = 'backhand' and shooter_description = 'shooter' then shots_saved else 0 end) as shots_backhand_saved\n        , sum(case when event_secondary_type = 'deflected' and shooter_description = 'shooter' then shots_saved else 0 end) as shots_deflected_saved\n        , sum(case when event_secondary_type = 'slap shot' and shooter_description = 'shooter' then shots_saved else 0 end) as shots_slapshot_saved\n        , sum(case when event_secondary_type = 'snap shot' and shooter_description = 'shooter' then shots_saved else 0 end) as shots_snapshot_saved\n        , sum(case when event_secondary_type = 'tip-in' and shooter_description = 'shooter' then shots_saved else 0 end) as shots_tipin_saved\n        , sum(case when event_secondary_type = 'wrap-around' and shooter_description = 'shooter' then shots_saved else 0 end) as shots_wraparound_saved\n        , sum(case when event_secondary_type = 'wrist shot' and shooter_description = 'shooter' then shots_saved else 0 end) as shots_wristshot_saved\n        , sum(case when shots_rebound = 1 and shooter_description = 'shooter' then shots_saved else 0 end) as shots_rebound_saved\n        ----- shot-goal (shots on-goal that were goals)\n        , sum(case when event_secondary_type = 'backhand' and shooter_description = 'shooter' then shots_scored else 0 end) as shots_backhand_goal\n        , sum(case when event_secondary_type = 'deflected' and shooter_description = 'shooter' then shots_scored else 0 end) as shots_deflected_goal\n        , sum(case when event_secondary_type = 'slap shot' and shooter_description = 'shooter' then shots_scored else 0 end) as shots_slapshot_goal\n        , sum(case when event_secondary_type = 'snap shot' and shooter_description = 'shooter' then shots_scored else 0 end) as shots_snapshot_goal\n        , sum(case when event_secondary_type = 'tip-in' and shooter_description = 'shooter' then shots_scored else 0 end) as shots_tipin_goal\n        , sum(case when event_secondary_type = 'wrap-around' and shooter_description = 'shooter' then shots_scored else 0 end) as shots_wraparound_goal\n        , sum(case when event_secondary_type = 'wrist shot' and shooter_description = 'shooter' then shots_scored else 0 end) as shots_wristshot_goal\n        , sum(case when shots_rebound = 1 and shooter_description = 'shooter' then shots_scored else 0 end) as shots_rebound_goal\n        ----- xg (expected goals by shot type)\n        , sum(case when xg_fenwick_shot = 1 and event_secondary_type = 'backhand' and shooter_description = 'shooter' then xg_proba else 0 end) as shots_backhand_xg\n        , sum(case when xg_fenwick_shot = 1 and event_secondary_type = 'deflected' and shooter_description = 'shooter' then xg_proba else 0 end) as shots_deflected_xg\n        , sum(case when xg_fenwick_shot = 1 and event_secondary_type = 'slap shot' and shooter_description = 'shooter' then xg_proba else 0 end) as shots_slapshot_xg\n        , sum(case when xg_fenwick_shot = 1 and event_secondary_type = 'snap shot' and shooter_description = 'shooter' then xg_proba else 0 end) as shots_snapshot_xg\n        , sum(case when xg_fenwick_shot = 1 and event_secondary_type = 'tip-in' and shooter_description = 'shooter' then xg_proba else 0 end) as shots_tipin_xg\n        , sum(case when xg_fenwick_shot = 1 and event_secondary_type = 'wrap-around' and shooter_description = 'shooter' then xg_proba else 0 end) as shots_wraparound_xg\n        , sum(case when xg_fenwick_shot = 1 and event_secondary_type = 'wrist shot' and shooter_description = 'shooter' then xg_proba else 0 end) as shots_wristshot_xg\n        , sum(case when xg_fenwick_shot = 1 and shots_rebound = 1 and shooter_description = 'shooter' then xg_proba else 0 end) as shots_rebound_xg\n    from shots_involvement\n    group by\n        game_type\n        , season_id\n        , shot_player_id\n        , player_full_name\n)\n\n-- cte#6: on-ice goal stats: goal & assist summaries\n, onice_goals_stats as (\n    select\n        sga.player_id\n        , sga.season_id\n        , sga.game_type\n        , max(sga.event_description) as example_eventdescription\n        -- goal types\n        , sum(case when sga.last_goal_game_winning = 1 and sga.player_role = 'scorer' then 1 else 0 end) as goals_gamewinning\n        , sum(case when (sga.home_result_of_play = 'chase goal' or sga.away_result_of_play = 'chase goal') and sga.player_role = 'scorer' then 1 else 0 end) as goals_chasegoal\n        , sum(case when (sga.home_result_of_play = 'tying goal scored' or sga.away_result_of_play = 'tying goal scored') and sga.player_role = 'scorer' then 1 else 0 end) as goals_gametying\n        , sum(case when (sga.home_result_of_play = 'go-ahead goal scored' or sga.away_result_of_play = 'go-ahead goal scored') and sga.player_role = 'scorer' then 1 else 0 end) as goals_goahead\n        , sum(case when (sga.home_result_of_play = 'buffer goal' or sga.away_result_of_play = 'buffer goal') and sga.player_role = 'scorer' then 1 else 0 end) as goals_buffergoal\n        -- assist types\n        , sum(case when sga.player_primary_assist = true and sga.player_role = 'assist' and sga.event_type = 'goal' then 1 else 0 end) as assists_primary\n        , sum(case when sga.player_secondary_assist = true and sga.player_role = 'assist' and sga.event_type = 'goal' then 1 else 0 end) as assists_secondary\n    from shots_goals_assists as sga\n    group by\n        sga.player_id\n        , sga.season_id\n        , sga.game_type\n--order by sum(case when sga.event_type = 'goal' and sga.player_role = 'scorer' then 1 else 0 end) desc\n)\n\n-- #return: combine boxscore_stats & onice_stats at the player-season-game_type level of granularity\nselect\n    /* primary key */\n    {{ dbt_utils.surrogate_key(['boxscore_stats.player_id', 'boxscore_stats.season_id', 'boxscore_stats.game_type']) }} as player_season_gametype_id\n    /* foreign keys */\n    , boxscore_stats.player_id\n    , boxscore_stats.season_id\n    , boxscore_stats.game_type\n    /* season properties */\n    , boxscore_stats.game_type_description\n    , boxscore_stats.regular_season_start_date\n    , boxscore_stats.regular_season_end_date\n    , boxscore_stats.full_season_games\n    , boxscore_stats.boxscore_games\n    /* player properties */\n    , boxscore_stats.player_full_name\n    /* on-ice player stats */\n    -- time on ice\n    -- time on ice\n    --, (boxscore_stats.time_on_ice_mins_raw * 60) + (boxscore_stats.time_on_ice_seconds_raw) as time_on_ice_seconds\n    --, round((boxscore_stats.time_on_ice_mins_raw) + (boxscore_stats.time_on_ice_seconds_raw / 60), 2) as time_on_ice_minutes\n    , boxscore_stats.time_on_ice_seconds\n    , round(boxscore_stats.time_on_ice_minutes, 2) as time_on_ice_minutes\n    , round(boxscore_stats.time_on_ice_minutes / boxscore_stats.boxscore_games, 2) as avg_time_on_ice_mins\n    -- goal-scoring skater events (goals, assists, points)\n    , boxscore_stats.goals\n    , ogs.goals_gamewinning\n    , ogs.goals_chasegoal\n    , ogs.goals_gametying\n    , ogs.goals_goahead\n    , ogs.goals_buffergoal\n    , boxscore_stats.assists\n    , ogs.assists_primary\n    , ogs.assists_secondary\n    , boxscore_stats.goals + boxscore_stats.assists as points\n    , case when boxscore_stats.boxscore_games > 0 then round(boxscore_stats.goals / boxscore_stats.boxscore_games, 4) end as goals_pergame\n    , case when boxscore_stats.boxscore_games > 0 then round(boxscore_stats.assists / boxscore_stats.boxscore_games, 4) end as assists_pergame\n    , case when boxscore_stats.boxscore_games > 0 then round(ogs.assists_primary / boxscore_stats.boxscore_games, 4) end as assists_primary_pergame\n    , case when boxscore_stats.boxscore_games > 0 then round(ogs.assists_secondary / boxscore_stats.boxscore_games, 4) end as assists_secondary_pergame\n    , case when boxscore_stats.boxscore_games > 0 then round((boxscore_stats.goals + boxscore_stats.assists) / boxscore_stats.boxscore_games, 4) end as points_pergame\n    , case when boxscore_stats.time_on_ice_seconds > 0 then round(boxscore_stats.goals / (boxscore_stats.time_on_ice_minutes / 60), 4) end as goals_per60\n    , case when boxscore_stats.time_on_ice_seconds > 0 then round(boxscore_stats.assists / (boxscore_stats.time_on_ice_minutes / 60), 4) end as assists_per60\n    , case when boxscore_stats.time_on_ice_seconds > 0 then round(ogs.assists_primary / (boxscore_stats.time_on_ice_minutes / 60), 4) end as asissts_primary_per60\n    , case when boxscore_stats.time_on_ice_seconds > 0 then round(ogs.assists_secondary / (boxscore_stats.time_on_ice_minutes / 60), 4) end as assists_secondary_per60\n    , case when boxscore_stats.time_on_ice_seconds > 0 then round((boxscore_stats.goals + boxscore_stats.assists) / (boxscore_stats.time_on_ice_minutes / 60), 4) end as points_per60\n    -- on-ice shot calculations: fenwick, corsi, shots-on-goal (goals + saves), & goals\n    , oss.shots_ff\n    , oss.shots_fa\n    , oss.shots_cf\n    , oss.shots_ca\n    , oss.shots_sf\n    , oss.shots_sa\n    , oss.shots_gf\n    , oss.shots_ga\n    , oss.shots_xgf\n    , oss.shots_xga\n    -- individual (i) shot calculations: shots-on-goal, fenwick-for, & corsi-for\n    , oss.shots_isog\n    , oss.shots_iff\n    , oss.shots_icf\n    , oss.shots_iblocked\n    , oss.shots_imissed\n    , oss.shots_isaved\n    , oss.shots_iscored\n    , oss.shots_ixg\n    -- per-60-on-ice shot calculations: fenwick, corsi, shots-on-goal (goals + saves), & goals\n    , case when boxscore_stats.time_on_ice_seconds > 0 then round(oss.shots_ff / (boxscore_stats.time_on_ice_minutes / 60), 4) end as shots_ff_per60\n    , case when boxscore_stats.time_on_ice_seconds > 0 then round(oss.shots_fa / (boxscore_stats.time_on_ice_minutes / 60), 4) end as shots_fa_per60\n    , case when boxscore_stats.time_on_ice_seconds > 0 then round(oss.shots_cf / (boxscore_stats.time_on_ice_minutes / 60), 4) end as shots_cf_per60\n    , case when boxscore_stats.time_on_ice_seconds > 0 then round(oss.shots_ca / (boxscore_stats.time_on_ice_minutes / 60), 4) end as shots_ca_per60\n    , case when boxscore_stats.time_on_ice_seconds > 0 then round(oss.shots_sf / (boxscore_stats.time_on_ice_minutes / 60), 4) end as shots_sf_per60\n    , case when boxscore_stats.time_on_ice_seconds > 0 then round(oss.shots_sa / (boxscore_stats.time_on_ice_minutes / 60), 4) end as shots_sa_per60\n    , case when boxscore_stats.time_on_ice_seconds > 0 then round(oss.shots_gf / (boxscore_stats.time_on_ice_minutes / 60), 4) end as shots_gf_per60\n    , case when boxscore_stats.time_on_ice_seconds > 0 then round(oss.shots_ga / (boxscore_stats.time_on_ice_minutes / 60), 4) end as shots_ga_per60\n    , case when boxscore_stats.time_on_ice_seconds > 0 then round(oss.shots_xgf / (boxscore_stats.time_on_ice_minutes / 60), 4) end as shots_xgf_per60\n    , case when boxscore_stats.time_on_ice_seconds > 0 then round(oss.shots_xga / (boxscore_stats.time_on_ice_minutes / 60), 4) end as shots_xga_per60\n    -- per-60-individual (i) shot calculations: shots-on-goal, fenwick-for, & corsi-for\n    , case when boxscore_stats.time_on_ice_seconds > 0 then round(oss.shots_isog / (boxscore_stats.time_on_ice_minutes / 60), 4) end as shots_isog_per60\n    , case when boxscore_stats.time_on_ice_seconds > 0 then round(oss.shots_iff / (boxscore_stats.time_on_ice_minutes / 60), 4) end as shots_iff_per60\n    , case when boxscore_stats.time_on_ice_seconds > 0 then round(oss.shots_icf / (boxscore_stats.time_on_ice_minutes / 60), 4) end as shots_icf_per60\n    , case when boxscore_stats.time_on_ice_seconds > 0 then round(oss.shots_iblocked / (boxscore_stats.time_on_ice_minutes / 60), 4) end as shots_iblocked_per60\n    , case when boxscore_stats.time_on_ice_seconds > 0 then round(oss.shots_imissed / (boxscore_stats.time_on_ice_minutes / 60), 4) end as shots_imissed_per60\n    , case when boxscore_stats.time_on_ice_seconds > 0 then round(oss.shots_isaved / (boxscore_stats.time_on_ice_minutes / 60), 4) end as shots_isaved_per60\n    , case when boxscore_stats.time_on_ice_seconds > 0 then round(oss.shots_iscored / (boxscore_stats.time_on_ice_minutes / 60), 4) end as shots_iscored_per60\n    , case when boxscore_stats.time_on_ice_seconds > 0 then round(oss.shots_ixg / (boxscore_stats.time_on_ice_minutes / 60), 4) end as shots_ixg_per60\n    -- individual shot calculations: (for shots on net) broken down by strength state\n    ----- even-strength (ev)\n    , oss.shots_ev_isog\n    , oss.shots_ev_iff\n    , oss.shots_ev_imissed\n    , oss.shots_ev_isaved\n    , oss.shots_ev_iscored\n    , oss.shots_ev_ixg\n    ----- power-play (pp)\n    , oss.shots_pp_isog\n    , oss.shots_pp_iff\n    , oss.shots_pp_imissed\n    , oss.shots_pp_isaved\n    , oss.shots_pp_iscored\n    , oss.shots_pp_ixg\n    ----- power-play (pp)\n    , oss.shots_sh_isog\n    , oss.shots_sh_iff\n    , oss.shots_sh_imissed\n    , oss.shots_sh_isaved\n    , oss.shots_sh_iscored\n    , oss.shots_sh_ixg\n    -- individual shot calculations: (for shots on net) broken down by shot type, & shot results ... exclude rebounds from agg. calculations\n    ----- all individual shot types (corsi)\n    , oss.shots_backhand_all\n    , oss.shots_deflected_all\n    , oss.shots_slapshot_all\n    , oss.shots_snapshot_all\n    , oss.shots_tipin_all\n    , oss.shots_wraparound_all\n    , oss.shots_wristshot_all\n    , oss.shots_rebound_all\n    ----- shot-saved (shots on-goal that were saved)\n    , oss.shots_backhand_saved\n    , oss.shots_deflected_saved\n    , oss.shots_slapshot_saved\n    , oss.shots_snapshot_saved\n    , oss.shots_tipin_saved\n    , oss.shots_wraparound_saved\n    , oss.shots_wristshot_saved\n    , oss.shots_rebound_saved\n    ----- shot-goal (shots on-goal that were goals)\n    , oss.shots_backhand_goal\n    , oss.shots_deflected_goal\n    , oss.shots_slapshot_goal\n    , oss.shots_snapshot_goal\n    , oss.shots_tipin_goal\n    , oss.shots_wraparound_goal\n    , oss.shots_wristshot_goal\n    , oss.shots_rebound_goal\n    ----- shot-xg (sum of expected goals)\n    , oss.shots_backhand_xg\n    , oss.shots_deflected_xg\n    , oss.shots_slapshot_xg\n    , oss.shots_snapshot_xg\n    , oss.shots_tipin_xg\n    , oss.shots_wraparound_xg\n    , oss.shots_wristshot_xg\n    , oss.shots_rebound_xg\n    ---- on-ice pcnt (%) shooting\n    , case when (oss.shots_ff + oss.shots_fa) < 1 then 0 else round(100 * (oss.shots_ff / (oss.shots_ff + oss.shots_fa)), 2) end as pcnt_ff\n    , case when (oss.shots_cf + oss.shots_ca) < 1 then 0 else round(100 * (oss.shots_cf / (oss.shots_cf + oss.shots_ca)), 2) end as pcnt_cf\n    , case when (oss.shots_sf + oss.shots_sa) < 1 then 0 else round(100 * (oss.shots_sf / (oss.shots_sf + oss.shots_sa)), 2) end as pcnt_sf\n    , case when (oss.shots_gf + oss.shots_ga) < 1 then 0 else round(100 * (oss.shots_gf / (oss.shots_gf + oss.shots_ga)), 2) end as pcnt_gf\n    , case when (oss.shots_xgf + oss.shots_xga) < 1 then 0 else round(100 * (oss.shots_xgf / (oss.shots_xgf + oss.shots_xga)), 2) end as pcnt_xgf -- this work?\n    ---- individual (i) on-ice pcnt (%) shooting\n    ---- #todo filter to a specific number of shots to be in consideration\n    , case when (oss.shots_icf) < 1 then 0 else round(100 * (boxscore_stats.goals / oss.shots_icf), 2) end as pcnt_shooting_all\n    --, case when (oss.shots_icf) < 1 then 0 else round((boxscore_stats.goals / oss.shots_isog), 2) end as pcnt_shooting_sog\n    , case when boxscore_stats.shots < 1 then 0 else round(100 * (boxscore_stats.goals / boxscore_stats.shots), 2) end as pcnt_shooting_ongoal\n    , case when oss.shots_backhand_all < 1 then 0 else round(100 * (oss.shots_backhand_goal / oss.shots_backhand_all), 2) end as pcnt_shooting_backhand\n    , case when oss.shots_deflected_all < 1 then 0 else round(100 * (oss.shots_deflected_goal / oss.shots_deflected_all), 2) end as pcnt_shooting_deflected\n    , case when oss.shots_slapshot_all < 1 then 0 else round(100 * (oss.shots_slapshot_goal / oss.shots_slapshot_all), 2) end as pcnt_shooting_slapshot\n    , case when oss.shots_snapshot_all < 1 then 0 else round(100 * (oss.shots_snapshot_goal / oss.shots_snapshot_all), 2) end as pcnt_shooting_snapshot\n    , case when oss.shots_tipin_all < 1 then 0 else round(100 * (oss.shots_tipin_goal / oss.shots_tipin_all), 2) end as pcnt_shooting_tipin\n    , case when oss.shots_wraparound_all < 1 then 0 else round(100 * (oss.shots_wraparound_goal / oss.shots_wraparound_all), 2) end as pcnt_shooting_wraparound\n    , case when oss.shots_wristshot_all < 1 then 0 else round(100 * (oss.shots_wristshot_goal / oss.shots_wristshot_all), 2) end as pcnt_shooting_wristshot\n    , case when oss.shots_rebound_all < 1 then 0 else round(100 * (oss.shots_rebound_goal / oss.shots_rebound_all), 2) end as pcnt_shooting_rebound\n    -- other skater events\n    , boxscore_stats.faceoff_wins\n    , boxscore_stats.faceoff_taken\n    , case when boxscore_stats.faceoff_taken < 1 then 0 else round(100 * (boxscore_stats.faceoff_wins / boxscore_stats.faceoff_taken), 2) end as pcnt_faceoffwins\n    , boxscore_stats.hits\n    , boxscore_stats.takeaways\n    , boxscore_stats.giveaways\n    , boxscore_stats.blocked\n    , boxscore_stats.plus_minus\n    , boxscore_stats.pim\n    -- special teams skater events\n    , boxscore_stats.powerplay_goals\n    , boxscore_stats.powerplay_assists\n    , boxscore_stats.short_handed_goals\n    , boxscore_stats.short_handed_assists\n    -- goalie events\n    , boxscore_stats.saves\n    , boxscore_stats.powerplay_saves\n    , boxscore_stats.even_saves\n    , boxscore_stats.shorthanded_shots_against\n    , boxscore_stats.even_shots_against\n    , boxscore_stats.powerplay_shots_against\n--,boxscore_stats.wins\n--,boxscore_stats.losses\nfrom boxscore_stats\nleft join onice_shots_stats as oss\n    on\n        boxscore_stats.player_id = oss.shot_player_id\n        and boxscore_stats.season_id = oss.season_id\n        and boxscore_stats.game_type = oss.game_type\nleft join onice_goals_stats as ogs\n    on\n        boxscore_stats.player_id = ogs.player_id\n        and boxscore_stats.season_id = ogs.season_id\n        and boxscore_stats.game_type = ogs.game_type\norder by\n    boxscore_stats.goals desc", "language": "sql", "refs": [{"name": "f_boxscore_player", "package": null, "version": null}, {"name": "d_schedule", "package": null, "version": null}, {"name": "d_seasons", "package": null, "version": null}, {"name": "d_players", "package": null, "version": null}, {"name": "f_games_scratches", "package": null, "version": null}, {"name": "f_plays", "package": null, "version": null}, {"name": "d_schedule", "package": null, "version": null}, {"name": "d_seasons", "package": null, "version": null}, {"name": "d_teams", "package": null, "version": null}, {"name": "d_players", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["model.nhl_data.f_boxscore_player", "model.nhl_data.d_schedule", "model.nhl_data.d_seasons", "model.nhl_data.d_players", "model.nhl_data.f_games_scratches", "model.nhl_data.f_plays", "model.nhl_data.d_teams"]}, "compiled_path": "target/compiled/nhl_data/models/analytics/core/f_player_season.sql", "compiled": true, "compiled_code": "with\n--cte#1: basis for player-season-game_type level data\nboxscore_stats as (\n    select\n        bp.player_id\n        , player.full_name as player_full_name\n        , schedule.game_type\n        , schedule.game_type_description\n        , season.season_id\n        , season.regular_season_start_date\n        , season.regular_season_end_date\n        , season.number_of_games as full_season_games\n        , count(distinct bp.game_id) as boxscore_games\n        , sum(ifnull(bp.assists, 0)) as assists\n        , sum(ifnull(bp.goals, 0)) as goals\n        , sum(ifnull(bp.shots, 0)) as shots\n        , sum(ifnull(bp.hits, 0)) as hits\n        , sum(bp.faceoff_wins) as faceoff_wins\n        , sum(bp.faceoff_taken) as faceoff_taken\n        , sum(ifnull(bp.takeaways, 0)) as takeaways\n        , sum(ifnull(bp.giveaways, 0)) as giveaways\n        , sum(ifnull(bp.blocked, 0)) as blocked\n        , sum(ifnull(bp.plus_minus, 0)) as plus_minus\n        , sum(ifnull(bp.pim, 0)) as pim\n        , sum(cast(split(bp.time_on_ice, ':')[offset(0)] as int)) as time_on_ice_mins_raw\n        , sum(cast(split(bp.time_on_ice, ':')[offset(1)] as int)) as time_on_ice_seconds_raw\n        , (sum(cast(split(bp.time_on_ice, ':')[offset(0)] as int)) * 60) + sum(cast(split(bp.time_on_ice, ':')[offset(1)] as int)) as time_on_ice_seconds\n        , sum(cast(split(bp.time_on_ice, ':')[offset(0)] as int)) + (sum(cast(split(bp.time_on_ice, ':')[offset(1)] as int)) / 60) as time_on_ice_minutes\n        , sum(ifnull(bp.powerplay_goals, 0)) as powerplay_goals\n        , sum(ifnull(bp.powerplay_assists, 0)) as powerplay_assists\n        , sum(ifnull(bp.short_handed_goals, 0)) as short_handed_goals\n        , sum(ifnull(bp.short_handed_assists, 0)) as short_handed_assists\n        , sum(ifnull(bp.saves, 0)) as saves\n        , sum(ifnull(bp.powerplay_saves, 0)) as powerplay_saves\n        , sum(ifnull(bp.even_saves, 0)) as even_saves\n        , sum(ifnull(bp.short_handed_shots_against, 0)) as shorthanded_shots_against\n        , sum(ifnull(bp.even_shots_against, 0)) as even_shots_against\n        , sum(ifnull(bp.powerplay_shots_against, 0)) as powerplay_shots_against\n    --,sum(case when bp.decision = \"w\" then 1 else 0) as wins\n    --,sum(case when bp.decision = \"l\" then 1 else 0) as losses\n    from `nhl-breakouts`.`github`.`f_boxscore_player` as bp\n    left join `nhl-breakouts`.`github`.`d_schedule` as schedule on schedule.game_id = bp.game_id\n    left join `nhl-breakouts`.`github`.`d_seasons` as season on season.season_id = schedule.season_id\n    left join `nhl-breakouts`.`github`.`d_players` as player on player.player_id = bp.player_id\n    left join `nhl-breakouts`.`github`.`f_games_scratches` as scratches on scratches.player_id = bp.player_id and scratches.game_id = bp.game_id\n\n    where\n        1 = 1\n        -- keep only regular season and playoff games\n        and schedule.game_type in ('02', '03')\n        -- remove scratches (fyi... should be the same same as `and bp.time_on_ice is not null`)\n        and scratches.player_id is null\n    group by\n        bp.player_id\n        , player.full_name\n        , season.season_id\n        , season.number_of_games\n        , season.regular_season_start_date\n        , season.regular_season_end_date\n        , schedule.game_type\n        , schedule.game_type_description\n    order by\n        count(distinct bp.game_id) desc\n        , sum(bp.goals) desc\n)\n\n-- #cte2: basis for on-ice-stats - play-by-play data for all shots, goals and assists\n, shots_goals_assists as (\n    select\n        plays.play_id\n        , plays.game_id\n        , plays.player_id\n        , season.season_id\n        , team.team_id\n        , team.team_name\n        , schedule.game_type\n        , plays.last_goal_game_winning\n        , plays.player_primary_assist\n        , plays.player_secondary_assist\n        , lower(schedule.game_type_description) as game_type_description\n        , lower(plays.event_description) as event_description\n        , lower(plays.event_type) as event_type\n        , lower(plays.event_secondary_type) as event_secondary_type\n        , lower(plays.player_role_team) as player_role_team\n        , lower(plays.player_role) as player_role\n        , lower(plays.play_period_type) as play_period_type\n        , lower(plays.home_result_of_play) as home_result_of_play\n        , lower(plays.away_result_of_play) as away_result_of_play\n        , plays.home_skaters\n        , plays.away_skaters\n        , plays.seconds_since_last_shot\n        , plays.shot_rebound_ind\n        , plays.last_shot_seconds\n        , plays.last_shot_rebound_ind\n        , plays.xg_fenwick_shot\n        , plays.x_goal\n        , plays.xg_model_id\n        , plays.xg_strength_state_code\n        , plays.xg_proba\n    from `nhl-breakouts`.`github`.`f_plays` as plays\n    left join `nhl-breakouts`.`github`.`d_schedule` as schedule on schedule.game_id = plays.game_id\n    left join `nhl-breakouts`.`github`.`d_seasons` as season on season.season_id = schedule.season_id\n    left join `nhl-breakouts`.`github`.`d_teams` as team on team.team_id = plays.team_id\n    where 1 = 1\n    -- remove shootout plays\n    and lower(plays.play_period_type) != 'shootout'\n    -- keep only regular season and playoff games\n    and schedule.game_type in ('02', '03')\n    -- keep roles involving the shooter, scorer or assister\n    and lower(plays.player_role) in ('shooter', 'scorer', 'assist')\n    -- keep blocked shots, missed shots, shots on target and goals\n    and lower(plays.event_type) in ('blocked_shot', 'missed_shot', 'shot', 'goal')\n)\n\n-- cte#3: flatten all shot events on both arrays (home_skaters & away_skaters) so that we can get corsi & fenwick features\n, shots_flat as (\n    select\n        *\n        , home_sga.player_role_team as shooting_team\n        , home_sga.player_id as shooter_player_id\n        , 'home' as skater_type\n    from shots_goals_assists as home_sga\n    , unnest(home_sga.home_skaters) as shot_player_id\n    where home_sga.player_role in ('shooter', 'scorer')\n    union all\n    select\n        *\n        , away_sga.player_role_team as shooting_team\n        , away_sga.player_id as shooter_player_id\n        , 'away' as skater_type\n    from shots_goals_assists as away_sga\n    , unnest(away_sga.away_skaters) as shot_player_id\n    where away_sga.player_role in ('shooter', 'scorer')\n)\n\n-- cte#4: on-ice shots stats - shot & goal summaries\n, shots_involvement as (\n    select\n        player.full_name as player_full_name\n        , s.shot_player_id\n        , s.game_id\n        , s.game_type\n        , s.season_id\n        -- shot descriptors\n        , case when s.shooting_team = s.skater_type then 'shot for' else 'shot against' end as shot_type\n        , case\n            when s.shooter_player_id = s.shot_player_id then 'shooter'\n            when s.shooting_team = s.skater_type then 'shooter teammate'\n            when s.shooting_team != s.skater_type then 'shooter opponent'\n        end as shooter_description\n        , s.shooting_team\n        , s.shooter_player_id\n        , s.skater_type\n        , s.event_type\n        , s.event_secondary_type\n        , s.shot_rebound_ind as shots_rebound\n        , s.last_shot_rebound_ind as last_shot_rebound\n        -- shot calculations\n        , case when s.event_type in ('goal', 'shot') then 1 else 0 end as shots_ongoal\n        , case when s.event_type = 'blocked_shot' then 1 else 0 end as shots_blocked\n        , case when s.event_type = 'missed_shot' then 1 else 0 end as shots_missed\n        , case when s.event_type = 'shot' then 1 else 0 end as shots_saved\n        , case when s.event_type = 'goal' then 1 else 0 end as shots_scored\n        , case when s.event_type in ('blocked_shot', 'missed_shot', 'shot', 'goal') then 1 else 0 end as corsi_shot\n        , case when s.event_type in ('missed_shot', 'shot', 'goal') then 1 else 0 end as fenwick_shot\n        , s.xg_fenwick_shot\n        , s.x_goal\n        , s.xg_model_id\n        , s.xg_strength_state_code\n        , s.xg_proba\n    from shots_flat as s\n    left join `nhl-breakouts`.`github`.`d_players` as player on player.player_id = s.shot_player_id\n    where lower(player.primary_position_code) != 'g'\n)\n\n-- cte#5: on-ice shots stats - summarizing individual shots (i) and on-ice shots\n, onice_shots_stats as (\n    select\n        game_type\n        , season_id\n        , shot_player_id\n        , player_full_name\n        -- on-ice shot calculations: fenwick shots for (ff), & fenwick shots against (fa)\n        , sum(case when shot_type = 'shot for' then fenwick_shot else 0 end) as shots_ff\n        , sum(case when shot_type = 'shot against' then fenwick_shot else 0 end) as shots_fa\n        -- on-ice shot calculations: corsi shots for (cf), & corsi shots against (ca)\n        , sum(case when shot_type = 'shot for' then corsi_shot else 0 end) as shots_cf\n        , sum(case when shot_type = 'shot against' then corsi_shot else 0 end) as shots_ca\n        -- on-ice shot calculations: shots for (sf), and shots against (sa)\n        , sum(case when shot_type = 'shot for' then shots_ongoal else 0 end) as shots_sf\n        , sum(case when shot_type = 'shot against' then shots_ongoal else 0 end) as shots_sa\n        -- on-ice shot calculations: goals for (gf), and goals against (ga)\n        , sum(case when shot_type = 'shot for' then shots_scored else 0 end) as shots_gf\n        , sum(case when shot_type = 'shot against' then shots_scored else 0 end) as shots_ga\n        -- on-ice xg shot calculations: probability of a fenwick shot being a goal\n        , sum(case when xg_fenwick_shot = 1 and shot_type = 'shot for' then shots_scored else 0 end) as shots_xgf\n        , sum(case when xg_fenwick_shot = 1 and shot_type = 'shot against' then shots_scored else 0 end) as shots_xga\n        -- individual (i) shot calculations: shots-on-goal, fenwick-for, corsi-for & expected goals (xg)\n        , sum(case when shooter_description = 'shooter' then shots_ongoal else 0 end) as shots_isog\n        , sum(case when shooter_description = 'shooter' then fenwick_shot else 0 end) as shots_iff\n        , sum(case when shooter_description = 'shooter' then corsi_shot else 0 end) as shots_icf\n        , sum(case when shooter_description = 'shooter' then shots_blocked else 0 end) as shots_iblocked\n        , sum(case when shooter_description = 'shooter' then shots_missed else 0 end) as shots_imissed\n        , sum(case when shooter_description = 'shooter' then shots_saved else 0 end) as shots_isaved\n        , sum(case when shooter_description = 'shooter' then shots_scored else 0 end) as shots_iscored\n        , sum(case when xg_fenwick_shot = 1 and shooter_description = 'shooter' then xg_proba else 0 end) as shots_ixg\n        -- individual shot calculations: (for shots on net) broken down by strength state, & shot results (cannot use corsi or blocked as xg_strength_state_code excludes blocked shots (fenwick only))\n        ----- even-strength (ev)\n        , sum(case when xg_fenwick_shot = 1 and xg_strength_state_code = 'ev' and shooter_description = 'shooter' then shots_ongoal else 0 end) as shots_ev_isog\n        , sum(case when xg_fenwick_shot = 1 and xg_strength_state_code = 'ev' and shooter_description = 'shooter' then fenwick_shot else 0 end) as shots_ev_iff\n        --, sum(case when xg_fenwick_shot = 1 and xg_strength_state_code = 'ev' and shooter_description = 'shooter' then corsi_shot else 0 end) as shots_ev_icf\n        --, sum(case when xg_fenwick_shot = 1 and xg_strength_state_code = 'ev' and shooter_description = 'shooter' then shots_blocked else 0 end) as shots_ev_iblocked\n        , sum(case when xg_fenwick_shot = 1 and xg_strength_state_code = 'ev' and shooter_description = 'shooter' then shots_missed else 0 end) as shots_ev_imissed\n        , sum(case when xg_fenwick_shot = 1 and xg_strength_state_code = 'ev' and shooter_description = 'shooter' then shots_saved else 0 end) as shots_ev_isaved\n        , sum(case when xg_fenwick_shot = 1 and xg_strength_state_code = 'ev' and shooter_description = 'shooter' then shots_scored else 0 end) as shots_ev_iscored\n        , sum(case when xg_fenwick_shot = 1 and xg_strength_state_code = 'ev' and shooter_description = 'shooter' then xg_proba else 0 end) as shots_ev_ixg\n        ----- power-play (pp)\n        , sum(case when xg_fenwick_shot = 1 and xg_strength_state_code = 'pp' and shooter_description = 'shooter' then shots_ongoal else 0 end) as shots_pp_isog\n        , sum(case when xg_fenwick_shot = 1 and xg_strength_state_code = 'pp' and shooter_description = 'shooter' then fenwick_shot else 0 end) as shots_pp_iff\n        --, sum(case when xg_fenwick_shot = 1 and xg_strength_state_code = 'pp' and shooter_description = 'shooter' then corsi_shot else 0 end) as shots_pp_icf\n        --, sum(case when xg_fenwick_shot = 1 and xg_strength_state_code = 'pp' and shooter_description = 'shooter' then shots_blocked else 0 end) as shots_pp_iblocked\n        , sum(case when xg_fenwick_shot = 1 and xg_strength_state_code = 'pp' and shooter_description = 'shooter' then shots_missed else 0 end) as shots_pp_imissed\n        , sum(case when xg_fenwick_shot = 1 and xg_strength_state_code = 'pp' and shooter_description = 'shooter' then shots_saved else 0 end) as shots_pp_isaved\n        , sum(case when xg_fenwick_shot = 1 and xg_strength_state_code = 'pp' and shooter_description = 'shooter' then shots_scored else 0 end) as shots_pp_iscored\n        , sum(case when xg_fenwick_shot = 1 and xg_strength_state_code = 'pp' and shooter_description = 'shooter' then xg_proba else 0 end) as shots_pp_ixg\n        ----- short-handed (sh)\n        , sum(case when xg_fenwick_shot = 1 and xg_strength_state_code = 'sh' and shooter_description = 'shooter' then shots_ongoal else 0 end) as shots_sh_isog\n        , sum(case when xg_fenwick_shot = 1 and xg_strength_state_code = 'sh' and shooter_description = 'shooter' then fenwick_shot else 0 end) as shots_sh_iff\n        --, sum(case when xg_fenwick_shot = 1 and xg_strength_state_code = 'sh' and shooter_description = 'shooter' then corsi_shot else 0 end) as shots_sh_icf\n        --, sum(case when xg_fenwick_shot = 1 and xg_strength_state_code = 'sh' and shooter_description = 'shooter' then shots_blocked else 0 end) as shots_sh_iblocked\n        , sum(case when xg_fenwick_shot = 1 and xg_strength_state_code = 'sh' and shooter_description = 'shooter' then shots_missed else 0 end) as shots_sh_imissed\n        , sum(case when xg_fenwick_shot = 1 and xg_strength_state_code = 'sh' and shooter_description = 'shooter' then shots_saved else 0 end) as shots_sh_isaved\n        , sum(case when xg_fenwick_shot = 1 and xg_strength_state_code = 'sh' and shooter_description = 'shooter' then shots_scored else 0 end) as shots_sh_iscored\n        , sum(case when xg_fenwick_shot = 1 and xg_strength_state_code = 'sh' and shooter_description = 'shooter' then xg_proba else 0 end) as shots_sh_ixg\n        -- individual shot calculations: (for shots on net) broken down by shot type, & shot results\n        ----- all individual shot types (corsi)\n        , sum(case when event_secondary_type = 'backhand' and shooter_description = 'shooter' then corsi_shot else 0 end) as shots_backhand_all\n        , sum(case when event_secondary_type = 'deflected' and shooter_description = 'shooter' then corsi_shot else 0 end) as shots_deflected_all\n        , sum(case when event_secondary_type = 'slap shot' and shooter_description = 'shooter' then corsi_shot else 0 end) as shots_slapshot_all\n        , sum(case when event_secondary_type = 'snap shot' and shooter_description = 'shooter' then corsi_shot else 0 end) as shots_snapshot_all\n        , sum(case when event_secondary_type = 'tip-in' and shooter_description = 'shooter' then corsi_shot else 0 end) as shots_tipin_all\n        , sum(case when event_secondary_type = 'wrap-around' and shooter_description = 'shooter' then corsi_shot else 0 end) as shots_wraparound_all\n        , sum(case when event_secondary_type = 'wrist shot' and shooter_description = 'shooter' then corsi_shot else 0 end) as shots_wristshot_all\n        , sum(case when shots_rebound = 1 and shooter_description = 'shooter' then corsi_shot else 0 end) as shots_rebound_all\n        ----- shot-saved (shots on-goal that were saved)\n        , sum(case when event_secondary_type = 'backhand' and shooter_description = 'shooter' then shots_saved else 0 end) as shots_backhand_saved\n        , sum(case when event_secondary_type = 'deflected' and shooter_description = 'shooter' then shots_saved else 0 end) as shots_deflected_saved\n        , sum(case when event_secondary_type = 'slap shot' and shooter_description = 'shooter' then shots_saved else 0 end) as shots_slapshot_saved\n        , sum(case when event_secondary_type = 'snap shot' and shooter_description = 'shooter' then shots_saved else 0 end) as shots_snapshot_saved\n        , sum(case when event_secondary_type = 'tip-in' and shooter_description = 'shooter' then shots_saved else 0 end) as shots_tipin_saved\n        , sum(case when event_secondary_type = 'wrap-around' and shooter_description = 'shooter' then shots_saved else 0 end) as shots_wraparound_saved\n        , sum(case when event_secondary_type = 'wrist shot' and shooter_description = 'shooter' then shots_saved else 0 end) as shots_wristshot_saved\n        , sum(case when shots_rebound = 1 and shooter_description = 'shooter' then shots_saved else 0 end) as shots_rebound_saved\n        ----- shot-goal (shots on-goal that were goals)\n        , sum(case when event_secondary_type = 'backhand' and shooter_description = 'shooter' then shots_scored else 0 end) as shots_backhand_goal\n        , sum(case when event_secondary_type = 'deflected' and shooter_description = 'shooter' then shots_scored else 0 end) as shots_deflected_goal\n        , sum(case when event_secondary_type = 'slap shot' and shooter_description = 'shooter' then shots_scored else 0 end) as shots_slapshot_goal\n        , sum(case when event_secondary_type = 'snap shot' and shooter_description = 'shooter' then shots_scored else 0 end) as shots_snapshot_goal\n        , sum(case when event_secondary_type = 'tip-in' and shooter_description = 'shooter' then shots_scored else 0 end) as shots_tipin_goal\n        , sum(case when event_secondary_type = 'wrap-around' and shooter_description = 'shooter' then shots_scored else 0 end) as shots_wraparound_goal\n        , sum(case when event_secondary_type = 'wrist shot' and shooter_description = 'shooter' then shots_scored else 0 end) as shots_wristshot_goal\n        , sum(case when shots_rebound = 1 and shooter_description = 'shooter' then shots_scored else 0 end) as shots_rebound_goal\n        ----- xg (expected goals by shot type)\n        , sum(case when xg_fenwick_shot = 1 and event_secondary_type = 'backhand' and shooter_description = 'shooter' then xg_proba else 0 end) as shots_backhand_xg\n        , sum(case when xg_fenwick_shot = 1 and event_secondary_type = 'deflected' and shooter_description = 'shooter' then xg_proba else 0 end) as shots_deflected_xg\n        , sum(case when xg_fenwick_shot = 1 and event_secondary_type = 'slap shot' and shooter_description = 'shooter' then xg_proba else 0 end) as shots_slapshot_xg\n        , sum(case when xg_fenwick_shot = 1 and event_secondary_type = 'snap shot' and shooter_description = 'shooter' then xg_proba else 0 end) as shots_snapshot_xg\n        , sum(case when xg_fenwick_shot = 1 and event_secondary_type = 'tip-in' and shooter_description = 'shooter' then xg_proba else 0 end) as shots_tipin_xg\n        , sum(case when xg_fenwick_shot = 1 and event_secondary_type = 'wrap-around' and shooter_description = 'shooter' then xg_proba else 0 end) as shots_wraparound_xg\n        , sum(case when xg_fenwick_shot = 1 and event_secondary_type = 'wrist shot' and shooter_description = 'shooter' then xg_proba else 0 end) as shots_wristshot_xg\n        , sum(case when xg_fenwick_shot = 1 and shots_rebound = 1 and shooter_description = 'shooter' then xg_proba else 0 end) as shots_rebound_xg\n    from shots_involvement\n    group by\n        game_type\n        , season_id\n        , shot_player_id\n        , player_full_name\n)\n\n-- cte#6: on-ice goal stats: goal & assist summaries\n, onice_goals_stats as (\n    select\n        sga.player_id\n        , sga.season_id\n        , sga.game_type\n        , max(sga.event_description) as example_eventdescription\n        -- goal types\n        , sum(case when sga.last_goal_game_winning = 1 and sga.player_role = 'scorer' then 1 else 0 end) as goals_gamewinning\n        , sum(case when (sga.home_result_of_play = 'chase goal' or sga.away_result_of_play = 'chase goal') and sga.player_role = 'scorer' then 1 else 0 end) as goals_chasegoal\n        , sum(case when (sga.home_result_of_play = 'tying goal scored' or sga.away_result_of_play = 'tying goal scored') and sga.player_role = 'scorer' then 1 else 0 end) as goals_gametying\n        , sum(case when (sga.home_result_of_play = 'go-ahead goal scored' or sga.away_result_of_play = 'go-ahead goal scored') and sga.player_role = 'scorer' then 1 else 0 end) as goals_goahead\n        , sum(case when (sga.home_result_of_play = 'buffer goal' or sga.away_result_of_play = 'buffer goal') and sga.player_role = 'scorer' then 1 else 0 end) as goals_buffergoal\n        -- assist types\n        , sum(case when sga.player_primary_assist = true and sga.player_role = 'assist' and sga.event_type = 'goal' then 1 else 0 end) as assists_primary\n        , sum(case when sga.player_secondary_assist = true and sga.player_role = 'assist' and sga.event_type = 'goal' then 1 else 0 end) as assists_secondary\n    from shots_goals_assists as sga\n    group by\n        sga.player_id\n        , sga.season_id\n        , sga.game_type\n--order by sum(case when sga.event_type = 'goal' and sga.player_role = 'scorer' then 1 else 0 end) desc\n)\n\n-- #return: combine boxscore_stats & onice_stats at the player-season-game_type level of granularity\nselect\n    /* primary key */\n    to_hex(md5(cast(coalesce(cast(boxscore_stats.player_id as \n    string\n), '') || '-' || coalesce(cast(boxscore_stats.season_id as \n    string\n), '') || '-' || coalesce(cast(boxscore_stats.game_type as \n    string\n), '') as \n    string\n))) as player_season_gametype_id\n    /* foreign keys */\n    , boxscore_stats.player_id\n    , boxscore_stats.season_id\n    , boxscore_stats.game_type\n    /* season properties */\n    , boxscore_stats.game_type_description\n    , boxscore_stats.regular_season_start_date\n    , boxscore_stats.regular_season_end_date\n    , boxscore_stats.full_season_games\n    , boxscore_stats.boxscore_games\n    /* player properties */\n    , boxscore_stats.player_full_name\n    /* on-ice player stats */\n    -- time on ice\n    -- time on ice\n    --, (boxscore_stats.time_on_ice_mins_raw * 60) + (boxscore_stats.time_on_ice_seconds_raw) as time_on_ice_seconds\n    --, round((boxscore_stats.time_on_ice_mins_raw) + (boxscore_stats.time_on_ice_seconds_raw / 60), 2) as time_on_ice_minutes\n    , boxscore_stats.time_on_ice_seconds\n    , round(boxscore_stats.time_on_ice_minutes, 2) as time_on_ice_minutes\n    , round(boxscore_stats.time_on_ice_minutes / boxscore_stats.boxscore_games, 2) as avg_time_on_ice_mins\n    -- goal-scoring skater events (goals, assists, points)\n    , boxscore_stats.goals\n    , ogs.goals_gamewinning\n    , ogs.goals_chasegoal\n    , ogs.goals_gametying\n    , ogs.goals_goahead\n    , ogs.goals_buffergoal\n    , boxscore_stats.assists\n    , ogs.assists_primary\n    , ogs.assists_secondary\n    , boxscore_stats.goals + boxscore_stats.assists as points\n    , case when boxscore_stats.boxscore_games > 0 then round(boxscore_stats.goals / boxscore_stats.boxscore_games, 4) end as goals_pergame\n    , case when boxscore_stats.boxscore_games > 0 then round(boxscore_stats.assists / boxscore_stats.boxscore_games, 4) end as assists_pergame\n    , case when boxscore_stats.boxscore_games > 0 then round(ogs.assists_primary / boxscore_stats.boxscore_games, 4) end as assists_primary_pergame\n    , case when boxscore_stats.boxscore_games > 0 then round(ogs.assists_secondary / boxscore_stats.boxscore_games, 4) end as assists_secondary_pergame\n    , case when boxscore_stats.boxscore_games > 0 then round((boxscore_stats.goals + boxscore_stats.assists) / boxscore_stats.boxscore_games, 4) end as points_pergame\n    , case when boxscore_stats.time_on_ice_seconds > 0 then round(boxscore_stats.goals / (boxscore_stats.time_on_ice_minutes / 60), 4) end as goals_per60\n    , case when boxscore_stats.time_on_ice_seconds > 0 then round(boxscore_stats.assists / (boxscore_stats.time_on_ice_minutes / 60), 4) end as assists_per60\n    , case when boxscore_stats.time_on_ice_seconds > 0 then round(ogs.assists_primary / (boxscore_stats.time_on_ice_minutes / 60), 4) end as asissts_primary_per60\n    , case when boxscore_stats.time_on_ice_seconds > 0 then round(ogs.assists_secondary / (boxscore_stats.time_on_ice_minutes / 60), 4) end as assists_secondary_per60\n    , case when boxscore_stats.time_on_ice_seconds > 0 then round((boxscore_stats.goals + boxscore_stats.assists) / (boxscore_stats.time_on_ice_minutes / 60), 4) end as points_per60\n    -- on-ice shot calculations: fenwick, corsi, shots-on-goal (goals + saves), & goals\n    , oss.shots_ff\n    , oss.shots_fa\n    , oss.shots_cf\n    , oss.shots_ca\n    , oss.shots_sf\n    , oss.shots_sa\n    , oss.shots_gf\n    , oss.shots_ga\n    , oss.shots_xgf\n    , oss.shots_xga\n    -- individual (i) shot calculations: shots-on-goal, fenwick-for, & corsi-for\n    , oss.shots_isog\n    , oss.shots_iff\n    , oss.shots_icf\n    , oss.shots_iblocked\n    , oss.shots_imissed\n    , oss.shots_isaved\n    , oss.shots_iscored\n    , oss.shots_ixg\n    -- per-60-on-ice shot calculations: fenwick, corsi, shots-on-goal (goals + saves), & goals\n    , case when boxscore_stats.time_on_ice_seconds > 0 then round(oss.shots_ff / (boxscore_stats.time_on_ice_minutes / 60), 4) end as shots_ff_per60\n    , case when boxscore_stats.time_on_ice_seconds > 0 then round(oss.shots_fa / (boxscore_stats.time_on_ice_minutes / 60), 4) end as shots_fa_per60\n    , case when boxscore_stats.time_on_ice_seconds > 0 then round(oss.shots_cf / (boxscore_stats.time_on_ice_minutes / 60), 4) end as shots_cf_per60\n    , case when boxscore_stats.time_on_ice_seconds > 0 then round(oss.shots_ca / (boxscore_stats.time_on_ice_minutes / 60), 4) end as shots_ca_per60\n    , case when boxscore_stats.time_on_ice_seconds > 0 then round(oss.shots_sf / (boxscore_stats.time_on_ice_minutes / 60), 4) end as shots_sf_per60\n    , case when boxscore_stats.time_on_ice_seconds > 0 then round(oss.shots_sa / (boxscore_stats.time_on_ice_minutes / 60), 4) end as shots_sa_per60\n    , case when boxscore_stats.time_on_ice_seconds > 0 then round(oss.shots_gf / (boxscore_stats.time_on_ice_minutes / 60), 4) end as shots_gf_per60\n    , case when boxscore_stats.time_on_ice_seconds > 0 then round(oss.shots_ga / (boxscore_stats.time_on_ice_minutes / 60), 4) end as shots_ga_per60\n    , case when boxscore_stats.time_on_ice_seconds > 0 then round(oss.shots_xgf / (boxscore_stats.time_on_ice_minutes / 60), 4) end as shots_xgf_per60\n    , case when boxscore_stats.time_on_ice_seconds > 0 then round(oss.shots_xga / (boxscore_stats.time_on_ice_minutes / 60), 4) end as shots_xga_per60\n    -- per-60-individual (i) shot calculations: shots-on-goal, fenwick-for, & corsi-for\n    , case when boxscore_stats.time_on_ice_seconds > 0 then round(oss.shots_isog / (boxscore_stats.time_on_ice_minutes / 60), 4) end as shots_isog_per60\n    , case when boxscore_stats.time_on_ice_seconds > 0 then round(oss.shots_iff / (boxscore_stats.time_on_ice_minutes / 60), 4) end as shots_iff_per60\n    , case when boxscore_stats.time_on_ice_seconds > 0 then round(oss.shots_icf / (boxscore_stats.time_on_ice_minutes / 60), 4) end as shots_icf_per60\n    , case when boxscore_stats.time_on_ice_seconds > 0 then round(oss.shots_iblocked / (boxscore_stats.time_on_ice_minutes / 60), 4) end as shots_iblocked_per60\n    , case when boxscore_stats.time_on_ice_seconds > 0 then round(oss.shots_imissed / (boxscore_stats.time_on_ice_minutes / 60), 4) end as shots_imissed_per60\n    , case when boxscore_stats.time_on_ice_seconds > 0 then round(oss.shots_isaved / (boxscore_stats.time_on_ice_minutes / 60), 4) end as shots_isaved_per60\n    , case when boxscore_stats.time_on_ice_seconds > 0 then round(oss.shots_iscored / (boxscore_stats.time_on_ice_minutes / 60), 4) end as shots_iscored_per60\n    , case when boxscore_stats.time_on_ice_seconds > 0 then round(oss.shots_ixg / (boxscore_stats.time_on_ice_minutes / 60), 4) end as shots_ixg_per60\n    -- individual shot calculations: (for shots on net) broken down by strength state\n    ----- even-strength (ev)\n    , oss.shots_ev_isog\n    , oss.shots_ev_iff\n    , oss.shots_ev_imissed\n    , oss.shots_ev_isaved\n    , oss.shots_ev_iscored\n    , oss.shots_ev_ixg\n    ----- power-play (pp)\n    , oss.shots_pp_isog\n    , oss.shots_pp_iff\n    , oss.shots_pp_imissed\n    , oss.shots_pp_isaved\n    , oss.shots_pp_iscored\n    , oss.shots_pp_ixg\n    ----- power-play (pp)\n    , oss.shots_sh_isog\n    , oss.shots_sh_iff\n    , oss.shots_sh_imissed\n    , oss.shots_sh_isaved\n    , oss.shots_sh_iscored\n    , oss.shots_sh_ixg\n    -- individual shot calculations: (for shots on net) broken down by shot type, & shot results ... exclude rebounds from agg. calculations\n    ----- all individual shot types (corsi)\n    , oss.shots_backhand_all\n    , oss.shots_deflected_all\n    , oss.shots_slapshot_all\n    , oss.shots_snapshot_all\n    , oss.shots_tipin_all\n    , oss.shots_wraparound_all\n    , oss.shots_wristshot_all\n    , oss.shots_rebound_all\n    ----- shot-saved (shots on-goal that were saved)\n    , oss.shots_backhand_saved\n    , oss.shots_deflected_saved\n    , oss.shots_slapshot_saved\n    , oss.shots_snapshot_saved\n    , oss.shots_tipin_saved\n    , oss.shots_wraparound_saved\n    , oss.shots_wristshot_saved\n    , oss.shots_rebound_saved\n    ----- shot-goal (shots on-goal that were goals)\n    , oss.shots_backhand_goal\n    , oss.shots_deflected_goal\n    , oss.shots_slapshot_goal\n    , oss.shots_snapshot_goal\n    , oss.shots_tipin_goal\n    , oss.shots_wraparound_goal\n    , oss.shots_wristshot_goal\n    , oss.shots_rebound_goal\n    ----- shot-xg (sum of expected goals)\n    , oss.shots_backhand_xg\n    , oss.shots_deflected_xg\n    , oss.shots_slapshot_xg\n    , oss.shots_snapshot_xg\n    , oss.shots_tipin_xg\n    , oss.shots_wraparound_xg\n    , oss.shots_wristshot_xg\n    , oss.shots_rebound_xg\n    ---- on-ice pcnt (%) shooting\n    , case when (oss.shots_ff + oss.shots_fa) < 1 then 0 else round(100 * (oss.shots_ff / (oss.shots_ff + oss.shots_fa)), 2) end as pcnt_ff\n    , case when (oss.shots_cf + oss.shots_ca) < 1 then 0 else round(100 * (oss.shots_cf / (oss.shots_cf + oss.shots_ca)), 2) end as pcnt_cf\n    , case when (oss.shots_sf + oss.shots_sa) < 1 then 0 else round(100 * (oss.shots_sf / (oss.shots_sf + oss.shots_sa)), 2) end as pcnt_sf\n    , case when (oss.shots_gf + oss.shots_ga) < 1 then 0 else round(100 * (oss.shots_gf / (oss.shots_gf + oss.shots_ga)), 2) end as pcnt_gf\n    , case when (oss.shots_xgf + oss.shots_xga) < 1 then 0 else round(100 * (oss.shots_xgf / (oss.shots_xgf + oss.shots_xga)), 2) end as pcnt_xgf -- this work?\n    ---- individual (i) on-ice pcnt (%) shooting\n    ---- #todo filter to a specific number of shots to be in consideration\n    , case when (oss.shots_icf) < 1 then 0 else round(100 * (boxscore_stats.goals / oss.shots_icf), 2) end as pcnt_shooting_all\n    --, case when (oss.shots_icf) < 1 then 0 else round((boxscore_stats.goals / oss.shots_isog), 2) end as pcnt_shooting_sog\n    , case when boxscore_stats.shots < 1 then 0 else round(100 * (boxscore_stats.goals / boxscore_stats.shots), 2) end as pcnt_shooting_ongoal\n    , case when oss.shots_backhand_all < 1 then 0 else round(100 * (oss.shots_backhand_goal / oss.shots_backhand_all), 2) end as pcnt_shooting_backhand\n    , case when oss.shots_deflected_all < 1 then 0 else round(100 * (oss.shots_deflected_goal / oss.shots_deflected_all), 2) end as pcnt_shooting_deflected\n    , case when oss.shots_slapshot_all < 1 then 0 else round(100 * (oss.shots_slapshot_goal / oss.shots_slapshot_all), 2) end as pcnt_shooting_slapshot\n    , case when oss.shots_snapshot_all < 1 then 0 else round(100 * (oss.shots_snapshot_goal / oss.shots_snapshot_all), 2) end as pcnt_shooting_snapshot\n    , case when oss.shots_tipin_all < 1 then 0 else round(100 * (oss.shots_tipin_goal / oss.shots_tipin_all), 2) end as pcnt_shooting_tipin\n    , case when oss.shots_wraparound_all < 1 then 0 else round(100 * (oss.shots_wraparound_goal / oss.shots_wraparound_all), 2) end as pcnt_shooting_wraparound\n    , case when oss.shots_wristshot_all < 1 then 0 else round(100 * (oss.shots_wristshot_goal / oss.shots_wristshot_all), 2) end as pcnt_shooting_wristshot\n    , case when oss.shots_rebound_all < 1 then 0 else round(100 * (oss.shots_rebound_goal / oss.shots_rebound_all), 2) end as pcnt_shooting_rebound\n    -- other skater events\n    , boxscore_stats.faceoff_wins\n    , boxscore_stats.faceoff_taken\n    , case when boxscore_stats.faceoff_taken < 1 then 0 else round(100 * (boxscore_stats.faceoff_wins / boxscore_stats.faceoff_taken), 2) end as pcnt_faceoffwins\n    , boxscore_stats.hits\n    , boxscore_stats.takeaways\n    , boxscore_stats.giveaways\n    , boxscore_stats.blocked\n    , boxscore_stats.plus_minus\n    , boxscore_stats.pim\n    -- special teams skater events\n    , boxscore_stats.powerplay_goals\n    , boxscore_stats.powerplay_assists\n    , boxscore_stats.short_handed_goals\n    , boxscore_stats.short_handed_assists\n    -- goalie events\n    , boxscore_stats.saves\n    , boxscore_stats.powerplay_saves\n    , boxscore_stats.even_saves\n    , boxscore_stats.shorthanded_shots_against\n    , boxscore_stats.even_shots_against\n    , boxscore_stats.powerplay_shots_against\n--,boxscore_stats.wins\n--,boxscore_stats.losses\nfrom boxscore_stats\nleft join onice_shots_stats as oss\n    on\n        boxscore_stats.player_id = oss.shot_player_id\n        and boxscore_stats.season_id = oss.season_id\n        and boxscore_stats.game_type = oss.game_type\nleft join onice_goals_stats as ogs\n    on\n        boxscore_stats.player_id = ogs.player_id\n        and boxscore_stats.season_id = ogs.season_id\n        and boxscore_stats.game_type = ogs.game_type\norder by\n    boxscore_stats.goals desc", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.nhl_data.f_team_season": {"database": "nhl-breakouts", "schema": "github", "name": "f_team_season", "resource_type": "model", "package_name": "nhl_data", "path": "analytics/core/f_team_season.sql", "original_file_path": "models/analytics/core/f_team_season.sql", "unique_id": "model.nhl_data.f_team_season", "fqn": ["nhl_data", "analytics", "core", "f_team_season"], "alias": "f_team_season", "checksum": {"name": "sha256", "checksum": "e12eff498143743f26533160495fb56ff10905f4605875cd9936df162f9f2e78"}, "config": {"enabled": true, "alias": null, "schema": "core", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Model-ready, feature rich dataset at the team-season-stage level of granularity", "columns": {"team_season_stage_id": {"name": "team_season_stage_id", "description": "Unique identifier for a team's summarized activity in an NHL season and stage (player_id + season_id + game_type_description)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "team_id": {"name": "team_id", "description": "Foreign key that maps to an NHL team ID", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "season_id": {"name": "season_id", "description": "Foreign key that maps to an NHL season (e.g. \"20172018\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "team_name": {"name": "team_name", "description": "Full name of the NHL team (e.g. Vancouver Canucks)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "game_type": {"name": "game_type", "description": "Code for the type of game, which is retrieved by extracting the the 5th and 6th position from the game_id (e.g. 02 = regular season game)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "game_type_description": {"name": "game_type_description", "description": "Foreign key that maps to an NHL season stage (e.g. \"Playoffs\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "games_played": {"name": "games_played", "description": "The number of games played in season and stage by the team", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "wins": {"name": "wins", "description": "Games won by team", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "team_goals": {"name": "team_goals", "description": "Goals scored by team", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "team_goal_differential": {"name": "team_goal_differential", "description": "Team goal differential", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "team_pim": {"name": "team_pim", "description": "Penalty minutes accrued by team", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "team_shots": {"name": "team_shots", "description": "Shots on goal by team", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "team_powerplay_goals": {"name": "team_powerplay_goals", "description": "The number of power play goals scored by the team", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "team_hits": {"name": "team_hits", "description": "The number of hits delivered by the team", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "team_blocked": {"name": "team_blocked", "description": "The number of shot attempts blocked by the team", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "team_giveaways": {"name": "team_giveaways", "description": "The number of giveaways by the team", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "team_takeaways": {"name": "team_takeaways", "description": "The number of takeaways by the team", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "nhl_data://models/analytics/core/f_team_season.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "core"}, "created_at": 1695581342.9773023, "relation_name": "`nhl-breakouts`.`github`.`f_team_season`", "raw_code": "with t1 as (\n    select\n        boxscore.*\n        , schedule.season_id\n        , schedule.game_type_description\n        , schedule.game_type\n    from {{ ref('f_boxscore_team') }} as boxscore\n    left join {{ ref('d_schedule') }} as schedule\n        on boxscore.game_id = schedule.game_id\n)\n\n, team_season as (\n    select\n        team_id\n        , team_name\n        , season_id\n        , game_type\n        , game_type_description\n        , count(*) as games_played\n        , sum(case when team_winner = true then 1 else 0 end) as wins\n        , sum(coalesce(team_goals, 0)) as team_goals\n        , sum(coalesce(team_goal_differential, 0)) as team_goal_differential\n        , sum(coalesce(team_pim, 0)) as team_pim\n        , sum(coalesce(team_shots, 0)) as team_shots\n        , round(sum(coalesce(team_powerplay_goals, 0)), 0) as team_powerplay_goals\n        , sum(coalesce(team_hits, 0)) as team_hits\n        , sum(coalesce(team_blocked, 0)) as team_blocked\n        , sum(coalesce(team_takeaways, 0)) as team_takeaways\n        , sum(coalesce(team_giveaways, 0)) as team_giveaways\n    from t1\n    group by 1, 2, 3, 4, 5\n)\n\nselect\n    /* Primary Key */\n    {{ dbt_utils.surrogate_key(['team_season.team_id', 'team_season.season_id', 'team_season.game_type_description']) }} as team_season_stage_id\n    /* Foreign Keys */\n    , team_season.team_id\n    , team_season.season_id\n    /* Team & Season Properties */\n    , team_season.team_name\n    , team_season.game_type\n    , team_season.game_type_description\n    , games_played\n    /* Team Stats */\n    , wins\n    , team_goals\n    , team_goal_differential\n    , team_pim\n    , team_shots\n    , team_powerplay_goals\n    , team_hits\n    , team_blocked\n    , team_giveaways\n    , team_takeaways\nfrom team_season\norder by team_season.season_id, team_season.game_type", "language": "sql", "refs": [{"name": "f_boxscore_team", "package": null, "version": null}, {"name": "d_schedule", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["model.nhl_data.f_boxscore_team", "model.nhl_data.d_schedule"]}, "compiled_path": "target/compiled/nhl_data/models/analytics/core/f_team_season.sql", "compiled": true, "compiled_code": "with t1 as (\n    select\n        boxscore.*\n        , schedule.season_id\n        , schedule.game_type_description\n        , schedule.game_type\n    from `nhl-breakouts`.`github`.`f_boxscore_team` as boxscore\n    left join `nhl-breakouts`.`github`.`d_schedule` as schedule\n        on boxscore.game_id = schedule.game_id\n)\n\n, team_season as (\n    select\n        team_id\n        , team_name\n        , season_id\n        , game_type\n        , game_type_description\n        , count(*) as games_played\n        , sum(case when team_winner = true then 1 else 0 end) as wins\n        , sum(coalesce(team_goals, 0)) as team_goals\n        , sum(coalesce(team_goal_differential, 0)) as team_goal_differential\n        , sum(coalesce(team_pim, 0)) as team_pim\n        , sum(coalesce(team_shots, 0)) as team_shots\n        , round(sum(coalesce(team_powerplay_goals, 0)), 0) as team_powerplay_goals\n        , sum(coalesce(team_hits, 0)) as team_hits\n        , sum(coalesce(team_blocked, 0)) as team_blocked\n        , sum(coalesce(team_takeaways, 0)) as team_takeaways\n        , sum(coalesce(team_giveaways, 0)) as team_giveaways\n    from t1\n    group by 1, 2, 3, 4, 5\n)\n\nselect\n    /* Primary Key */\n    to_hex(md5(cast(coalesce(cast(team_season.team_id as \n    string\n), '') || '-' || coalesce(cast(team_season.season_id as \n    string\n), '') || '-' || coalesce(cast(team_season.game_type_description as \n    string\n), '') as \n    string\n))) as team_season_stage_id\n    /* Foreign Keys */\n    , team_season.team_id\n    , team_season.season_id\n    /* Team & Season Properties */\n    , team_season.team_name\n    , team_season.game_type\n    , team_season.game_type_description\n    , games_played\n    /* Team Stats */\n    , wins\n    , team_goals\n    , team_goal_differential\n    , team_pim\n    , team_shots\n    , team_powerplay_goals\n    , team_hits\n    , team_blocked\n    , team_giveaways\n    , team_takeaways\nfrom team_season\norder by team_season.season_id, team_season.game_type", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.nhl_data.dates": {"database": "nhl-breakouts", "schema": "github", "name": "dates", "resource_type": "model", "package_name": "nhl_data", "path": "utils/dates.sql", "original_file_path": "models/utils/dates.sql", "unique_id": "model.nhl_data.dates", "fqn": ["nhl_data", "utils", "dates"], "alias": "dates", "checksum": {"name": "sha256", "checksum": "cd84611886bcb84abd0051ce8af720c94f434f8ada88eae0b4aeb336aa521046"}, "config": {"enabled": true, "alias": null, "schema": "utils", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Date spine containing calendar dates from 2010-01-01 through 2030-01-01", "columns": {"date_id": {"name": "date_id", "description": "Unique identifier for the date in YYYYMMDD format", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "Calendar date in YYYY-MM-DD format", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "day_of_week_name": {"name": "day_of_week_name", "description": "Three letter name for the day of week (i.e. Mon, Tue, Wed, Thu, Fri, Sat, Sun)\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "quarter_number": {"name": "quarter_number", "description": "Quarter of the year number ranging from 1 (Q1) to 4 (Q4)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "quarter_desc": {"name": "quarter_desc", "description": "Description of the quarter (i.e. Q1 2022 for Quarter 1 2022)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "month_number": {"name": "month_number", "description": "Month of the year number ranging from 1 (January) to 12 (December)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "month_name": {"name": "month_name", "description": "Abbreviated name of the month (i.e. Jan, Feb, Mar)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "month_desc": {"name": "month_desc", "description": "Description of the month (i.e. M01 2022 for January 2022)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "week_number": {"name": "week_number", "description": "Week of the year number ranging from 1 to 52", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "week_desc": {"name": "week_desc", "description": "Description of the week (i.e. W52 2022 for the last calendar week of 2022)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "nhl_data://models/utils/dates.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "utils"}, "created_at": 1695581342.983432, "relation_name": "`nhl-breakouts`.`github`.`dates`", "raw_code": "with date_spine as (\n{{ dbt_utils.date_spine(\n        datepart=\"day\",\n        start_date=\"cast('2010-01-01' as date)\",\n        end_date=\"cast('2030-01-01' as date)\"\n        )\n    }}\n)\n\n, date_periods as (\n    select\n        date_day\n        , format_datetime('%Y%m%d', date_day) as date_id\n        , extract(year from date_day) as year_number\n        , extract(quarter from date_day) as quarter_number\n        , extract(month from date_day) as month_number\n        , extract(week from date_day) as week_number\n        , format_datetime('%b', date_day) as month_name\n        , format_datetime('%a', date_day) as day_of_week_name\n    from date_spine\n)\n\nselect\n    date_id\n    , date_day\n    , day_of_week_name\n    , quarter_number\n    , concat(\"Q\", quarter_number, ' ', year_number) as quarter_desc\n    , month_number\n    , month_name\n    , concat(\"M\", lpad(cast(month_number as string), 2, '0'), ' ', year_number) as month_desc\n    , week_number\n    , concat(\"Wk \", lpad(cast(week_number as string), 2, '0'), ' ', year_number) as week_desc\nfrom date_periods", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.date_spine"], "nodes": []}, "compiled_path": "target/compiled/nhl_data/models/utils/dates.sql", "compiled": true, "compiled_code": "with date_spine as (\n\n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n     + \n    \n    p9.generated_number * power(2, 9)\n     + \n    \n    p10.generated_number * power(2, 10)\n     + \n    \n    p11.generated_number * power(2, 11)\n     + \n    \n    p12.generated_number * power(2, 12)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n     cross join \n    \n    p as p11\n     cross join \n    \n    p as p12\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 7305\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n        datetime_add(\n            cast( cast('2010-01-01' as date) as datetime),\n        interval row_number() over (order by 1) - 1 day\n        )\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= cast('2030-01-01' as date)\n\n)\n\nselect * from filtered\n\n\n)\n\n, date_periods as (\n    select\n        date_day\n        , format_datetime('%Y%m%d', date_day) as date_id\n        , extract(year from date_day) as year_number\n        , extract(quarter from date_day) as quarter_number\n        , extract(month from date_day) as month_number\n        , extract(week from date_day) as week_number\n        , format_datetime('%b', date_day) as month_name\n        , format_datetime('%a', date_day) as day_of_week_name\n    from date_spine\n)\n\nselect\n    date_id\n    , date_day\n    , day_of_week_name\n    , quarter_number\n    , concat(\"Q\", quarter_number, ' ', year_number) as quarter_desc\n    , month_number\n    , month_name\n    , concat(\"M\", lpad(cast(month_number as string), 2, '0'), ' ', year_number) as month_desc\n    , week_number\n    , concat(\"Wk \", lpad(cast(week_number as string), 2, '0'), ' ', year_number) as week_desc\nfrom date_periods", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "analysis.nhl_data.seconds_between_shifts": {"database": "nhl-breakouts", "schema": "github", "name": "seconds_between_shifts", "resource_type": "analysis", "package_name": "nhl_data", "path": "analysis/archive/seconds_between_shifts.sql", "original_file_path": "analyses/archive/seconds_between_shifts.sql", "unique_id": "analysis.nhl_data.seconds_between_shifts", "fqn": ["nhl_data", "analysis", "archive", "seconds_between_shifts"], "alias": "seconds_between_shifts", "checksum": {"name": "sha256", "checksum": "3daee6251e02f95cc0e4cfa29cb01f8f2bcd82be0eb3b0020315c1e7c4c98487"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1695581342.1488843, "relation_name": null, "raw_code": "with game_seconds as (\n    select -1 + row_number() over() as seconds\n    from unnest((select split(format(\"%10800s\", \"\"), '') as h from (select null))) as pos\n    order by seconds\n)\n\n, seconds_between_shifts as (\n    select\n        concat(shifts.shift_id, '_', gs.seconds) as new_shift_id\n        , gs.seconds as game_time_seconds\n        , (gs.seconds - shifts.start_seconds_elapsed) as shift_time_seconds\n        , players.primary_position_abbreviation\n        , case when gs.seconds = shifts.start_seconds_elapsed then true else false end as is_shift_start\n        , case when gs.seconds = shifts.end_seconds_elapsed then true else false end as is_shift_end\n        , shifts.*\n    from `nhl-breakouts.dbt_dom.stg_nhl__shifts` as shifts\n    inner join game_seconds as gs on gs.seconds between shifts.start_seconds_elapsed and shifts.end_seconds_elapsed\n    left join `nhl-breakouts.dbt_dom.d_players` as players on players.player_id = shifts.player_id\n    where 1 = 1\n        and shifts.game_id = 2015021169\n)\n\n, home_player_lists as (\n    select\n        sbs.team_id\n        , sbs.home_away_team\n        , sbs.game_time_seconds\n        , string_agg(cast(sbs.player_id as string)) as player_list\n        , sum(case when sbs.primary_position_abbreviation = 'G' then 1 else 0 end) as goalie_on_ice\n        , sum(case when sbs.primary_position_abbreviation = 'D' then 1 else 0 end) as defence_on_ice\n        , sum(case when sbs.primary_position_abbreviation not in ('G', 'D') then 1 else 0 end) as forward_on_ice\n    from seconds_between_shifts as sbs\n    where 1 = 1\n        and sbs.home_away_team = 'home'\n        and sbs.is_shift_start is false -- do not include those who just started their shift\n    group by\n        sbs.team_id\n        , sbs.home_away_team\n        , sbs.game_time_seconds\n)\n\n, away_player_lists as (\n    select\n        sbs.team_id\n        , sbs.home_away_team\n        , sbs.game_time_seconds\n        , string_agg(cast(sbs.player_id as string)) as player_list\n        , sum(case when sbs.primary_position_abbreviation = 'G' then 1 else 0 end) as goalie_on_ice\n        , sum(case when sbs.primary_position_abbreviation = 'D' then 1 else 0 end) as defence_on_ice\n        , sum(case when sbs.primary_position_abbreviation not in ('G', 'D') then 1 else 0 end) as forward_on_ice\n    from seconds_between_shifts as sbs\n    where 1 = 1\n        and sbs.home_away_team = 'away'\n        and sbs.is_shift_start is false -- do not include those who just started their shift\n    group by\n        sbs.team_id\n        , sbs.home_away_team\n        , sbs.game_time_seconds\n)\n\nselect\n    sbs.new_shift_id\n    , sbs.shift_number\n    , sbs.game_id\n    , sbs.player_id\n    , sbs.team_id\n    , sbs.home_away_team\n    , sbs.game_type_description\n    , sbs.event_number\n    , sbs.type_code\n    , sbs.detail_code\n    , sbs.player_full_name\n    , sbs.is_goal\n    , sbs.goal_game_state\n    , sbs.goal_assisters\n    , sbs.goal_primary_assister_full_name\n    , sbs.goal_secondary_assister_full_name\n    , sbs.period\n    , sbs.period_type\n    , sbs.game_time_seconds\n    , sbs.shift_time_seconds\n    , sbs.is_shift_start\n    , sbs.is_shift_end\n    , sbs.start_seconds_elapsed\n    , sbs.end_seconds_elapsed\n    , sbs.duration_seconds_elapsed\n    , sbs.start_time\n    , sbs.end_time\n    , sbs.duration\n    , concat((hpl.defence_on_ice + hpl.forward_on_ice), 'v', (apl.defence_on_ice + apl.forward_on_ice)) as game_state\n    , concat('home:', (hpl.defence_on_ice + hpl.forward_on_ice), '-away:', (apl.defence_on_ice + apl.forward_on_ice)) as game_state_description\n    , case\n        when (hpl.defence_on_ice + hpl.forward_on_ice) = (apl.defence_on_ice + apl.forward_on_ice) then 'even strength'\n        when sbs.home_away_team = 'home' and (hpl.defence_on_ice + hpl.forward_on_ice) > (apl.defence_on_ice + apl.forward_on_ice) then 'skater advantage'\n        when sbs.home_away_team = 'home' and (hpl.defence_on_ice + hpl.forward_on_ice) < (apl.defence_on_ice + apl.forward_on_ice) then 'skater disadvantage'\n        when sbs.home_away_team = 'away' and (apl.defence_on_ice + apl.forward_on_ice) > (hpl.defence_on_ice + hpl.forward_on_ice) then 'skater advantage'\n        when sbs.home_away_team = 'away' and (apl.defence_on_ice + apl.forward_on_ice) < (hpl.defence_on_ice + hpl.forward_on_ice) then 'skater disadvantage'\n        else 'unknown'\n        end as game_state_skaters\n    , case when hpl.goalie_on_ice = 0 then true else false end as home_goalie_pulled\n    , case when apl.goalie_on_ice = 0 then true else false end as away_goalie_pulled\n    , hpl.player_list as home_player_list\n    , apl.player_list as away_player_list\n    , (hpl.defence_on_ice + hpl.forward_on_ice) as home_skaters_on_ice\n    , (apl.defence_on_ice + apl.forward_on_ice) as away_skaters_on_ice\n    , hpl.goalie_on_ice as home_goalie_on_ice\n    , hpl.defence_on_ice as home_defence_on_ice\n    , hpl.forward_on_ice as home_forward_on_ice\n    , apl.goalie_on_ice as away_goalie_on_ice\n    , apl.defence_on_ice as away_defence_on_ice\n    , apl.forward_on_ice as away_forward_on_ice\nfrom seconds_between_shifts as sbs\nleft join home_player_lists as hpl on hpl.game_time_seconds = sbs.game_time_seconds\nleft join away_player_lists as apl on apl.game_time_seconds = sbs.game_time_seconds", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/nhl_data/analyses/archive/seconds_between_shifts.sql", "compiled": true, "compiled_code": "with game_seconds as (\n    select -1 + row_number() over() as seconds\n    from unnest((select split(format(\"%10800s\", \"\"), '') as h from (select null))) as pos\n    order by seconds\n)\n\n, seconds_between_shifts as (\n    select\n        concat(shifts.shift_id, '_', gs.seconds) as new_shift_id\n        , gs.seconds as game_time_seconds\n        , (gs.seconds - shifts.start_seconds_elapsed) as shift_time_seconds\n        , players.primary_position_abbreviation\n        , case when gs.seconds = shifts.start_seconds_elapsed then true else false end as is_shift_start\n        , case when gs.seconds = shifts.end_seconds_elapsed then true else false end as is_shift_end\n        , shifts.*\n    from `nhl-breakouts.dbt_dom.stg_nhl__shifts` as shifts\n    inner join game_seconds as gs on gs.seconds between shifts.start_seconds_elapsed and shifts.end_seconds_elapsed\n    left join `nhl-breakouts.dbt_dom.d_players` as players on players.player_id = shifts.player_id\n    where 1 = 1\n        and shifts.game_id = 2015021169\n)\n\n, home_player_lists as (\n    select\n        sbs.team_id\n        , sbs.home_away_team\n        , sbs.game_time_seconds\n        , string_agg(cast(sbs.player_id as string)) as player_list\n        , sum(case when sbs.primary_position_abbreviation = 'G' then 1 else 0 end) as goalie_on_ice\n        , sum(case when sbs.primary_position_abbreviation = 'D' then 1 else 0 end) as defence_on_ice\n        , sum(case when sbs.primary_position_abbreviation not in ('G', 'D') then 1 else 0 end) as forward_on_ice\n    from seconds_between_shifts as sbs\n    where 1 = 1\n        and sbs.home_away_team = 'home'\n        and sbs.is_shift_start is false -- do not include those who just started their shift\n    group by\n        sbs.team_id\n        , sbs.home_away_team\n        , sbs.game_time_seconds\n)\n\n, away_player_lists as (\n    select\n        sbs.team_id\n        , sbs.home_away_team\n        , sbs.game_time_seconds\n        , string_agg(cast(sbs.player_id as string)) as player_list\n        , sum(case when sbs.primary_position_abbreviation = 'G' then 1 else 0 end) as goalie_on_ice\n        , sum(case when sbs.primary_position_abbreviation = 'D' then 1 else 0 end) as defence_on_ice\n        , sum(case when sbs.primary_position_abbreviation not in ('G', 'D') then 1 else 0 end) as forward_on_ice\n    from seconds_between_shifts as sbs\n    where 1 = 1\n        and sbs.home_away_team = 'away'\n        and sbs.is_shift_start is false -- do not include those who just started their shift\n    group by\n        sbs.team_id\n        , sbs.home_away_team\n        , sbs.game_time_seconds\n)\n\nselect\n    sbs.new_shift_id\n    , sbs.shift_number\n    , sbs.game_id\n    , sbs.player_id\n    , sbs.team_id\n    , sbs.home_away_team\n    , sbs.game_type_description\n    , sbs.event_number\n    , sbs.type_code\n    , sbs.detail_code\n    , sbs.player_full_name\n    , sbs.is_goal\n    , sbs.goal_game_state\n    , sbs.goal_assisters\n    , sbs.goal_primary_assister_full_name\n    , sbs.goal_secondary_assister_full_name\n    , sbs.period\n    , sbs.period_type\n    , sbs.game_time_seconds\n    , sbs.shift_time_seconds\n    , sbs.is_shift_start\n    , sbs.is_shift_end\n    , sbs.start_seconds_elapsed\n    , sbs.end_seconds_elapsed\n    , sbs.duration_seconds_elapsed\n    , sbs.start_time\n    , sbs.end_time\n    , sbs.duration\n    , concat((hpl.defence_on_ice + hpl.forward_on_ice), 'v', (apl.defence_on_ice + apl.forward_on_ice)) as game_state\n    , concat('home:', (hpl.defence_on_ice + hpl.forward_on_ice), '-away:', (apl.defence_on_ice + apl.forward_on_ice)) as game_state_description\n    , case\n        when (hpl.defence_on_ice + hpl.forward_on_ice) = (apl.defence_on_ice + apl.forward_on_ice) then 'even strength'\n        when sbs.home_away_team = 'home' and (hpl.defence_on_ice + hpl.forward_on_ice) > (apl.defence_on_ice + apl.forward_on_ice) then 'skater advantage'\n        when sbs.home_away_team = 'home' and (hpl.defence_on_ice + hpl.forward_on_ice) < (apl.defence_on_ice + apl.forward_on_ice) then 'skater disadvantage'\n        when sbs.home_away_team = 'away' and (apl.defence_on_ice + apl.forward_on_ice) > (hpl.defence_on_ice + hpl.forward_on_ice) then 'skater advantage'\n        when sbs.home_away_team = 'away' and (apl.defence_on_ice + apl.forward_on_ice) < (hpl.defence_on_ice + hpl.forward_on_ice) then 'skater disadvantage'\n        else 'unknown'\n        end as game_state_skaters\n    , case when hpl.goalie_on_ice = 0 then true else false end as home_goalie_pulled\n    , case when apl.goalie_on_ice = 0 then true else false end as away_goalie_pulled\n    , hpl.player_list as home_player_list\n    , apl.player_list as away_player_list\n    , (hpl.defence_on_ice + hpl.forward_on_ice) as home_skaters_on_ice\n    , (apl.defence_on_ice + apl.forward_on_ice) as away_skaters_on_ice\n    , hpl.goalie_on_ice as home_goalie_on_ice\n    , hpl.defence_on_ice as home_defence_on_ice\n    , hpl.forward_on_ice as home_forward_on_ice\n    , apl.goalie_on_ice as away_goalie_on_ice\n    , apl.defence_on_ice as away_defence_on_ice\n    , apl.forward_on_ice as away_forward_on_ice\nfrom seconds_between_shifts as sbs\nleft join home_player_lists as hpl on hpl.game_time_seconds = sbs.game_time_seconds\nleft join away_player_lists as apl on apl.game_time_seconds = sbs.game_time_seconds", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}}, "analysis.nhl_data.assist_type_test": {"database": "nhl-breakouts", "schema": "github", "name": "assist_type_test", "resource_type": "analysis", "package_name": "nhl_data", "path": "analysis/archive/assist_type_test.sql", "original_file_path": "analyses/archive/assist_type_test.sql", "unique_id": "analysis.nhl_data.assist_type_test", "fqn": ["nhl_data", "analysis", "archive", "assist_type_test"], "alias": "assist_type_test", "checksum": {"name": "sha256", "checksum": "9144cad2ef64b9f2ddcf161260cd3f494d89e459cbaa8d91a486dbea1f2c4c69"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1695581342.154269, "relation_name": null, "raw_code": "with test as (\n  select \n    player.full_name as pfn\n    , REGEXP_SUBSTR(plays.event_description, \": (.*)\") as assist_description\n    , schedule.game_type\n    , plays.* \n  from `nhl-breakouts.dbt_dom.f_plays` as plays\n  left join `nhl-breakouts.dbt_dom.d_players` as player on player.player_id = plays.player_id\n  left join`nhl-breakouts.dbt_dom.d_schedule` as schedule on schedule.game_id = plays.game_id\n  left join `nhl-breakouts.dbt_dom.d_seasons` as season on season.season_id = schedule.season_id\n  where 1 = 1\n    and schedule.game_type = '02'\n    and plays.event_type = 'GOAL'\n    and plays.player_role = 'ASSIST'\n    and plays.play_period_type <> 'SHOOTOUT'\n)\n\n,test2 as (\nselect \n  test.assist_description\n  , TRIM(REGEXP_SUBSTR(test.assist_description, \"[^()]+\")) as assist_primary_player_full_name\n  , TRIM(REGEXP_SUBSTR ( REGEXP_SUBSTR(test.assist_description, \", (.*)\"), \"[^()]+\")) as assist_secondary_player_full_name\n  , test.*\nfrom test\n)\n\n,test3 as (\nselect \n  test2.pfn\n  ,case when test2.pfn = test2.assist_primary_player_full_name then 1 else 0 end as assist_primary\n  ,case when test2.pfn = test2.assist_secondary_player_full_name then 1 else 0 end as assist_secondary\n  ,test2.*\nfrom test2\n)\n\nselect test3.* \nfrom test3\nwhere (assist_primary + assist_secondary) = 0\n\n\n-- problem: only way to get primary or secondary assist is from the event_description... which we can do. But, if the player's name is spelt incorrectly or nicknamed, there is no way to tie it back as there is no \"nickame\" at the row level, and the join back to d_players will have a diff name\n-- solution: fuzzy join? mapping table? include the name from stg_nhl__live_plays and use this in the case when?\n;", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/nhl_data/analyses/archive/assist_type_test.sql", "compiled": true, "compiled_code": "with test as (\n  select \n    player.full_name as pfn\n    , REGEXP_SUBSTR(plays.event_description, \": (.*)\") as assist_description\n    , schedule.game_type\n    , plays.* \n  from `nhl-breakouts.dbt_dom.f_plays` as plays\n  left join `nhl-breakouts.dbt_dom.d_players` as player on player.player_id = plays.player_id\n  left join`nhl-breakouts.dbt_dom.d_schedule` as schedule on schedule.game_id = plays.game_id\n  left join `nhl-breakouts.dbt_dom.d_seasons` as season on season.season_id = schedule.season_id\n  where 1 = 1\n    and schedule.game_type = '02'\n    and plays.event_type = 'GOAL'\n    and plays.player_role = 'ASSIST'\n    and plays.play_period_type <> 'SHOOTOUT'\n)\n\n,test2 as (\nselect \n  test.assist_description\n  , TRIM(REGEXP_SUBSTR(test.assist_description, \"[^()]+\")) as assist_primary_player_full_name\n  , TRIM(REGEXP_SUBSTR ( REGEXP_SUBSTR(test.assist_description, \", (.*)\"), \"[^()]+\")) as assist_secondary_player_full_name\n  , test.*\nfrom test\n)\n\n,test3 as (\nselect \n  test2.pfn\n  ,case when test2.pfn = test2.assist_primary_player_full_name then 1 else 0 end as assist_primary\n  ,case when test2.pfn = test2.assist_secondary_player_full_name then 1 else 0 end as assist_secondary\n  ,test2.*\nfrom test2\n)\n\nselect test3.* \nfrom test3\nwhere (assist_primary + assist_secondary) = 0\n\n\n-- problem: only way to get primary or secondary assist is from the event_description... which we can do. But, if the player's name is spelt incorrectly or nicknamed, there is no way to tie it back as there is no \"nickame\" at the row level, and the join back to d_players will have a diff name\n-- solution: fuzzy join? mapping table? include the name from stg_nhl__live_plays and use this in the case when?\n;", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}}, "analysis.nhl_data.test_game_state": {"database": "nhl-breakouts", "schema": "github", "name": "test_game_state", "resource_type": "analysis", "package_name": "nhl_data", "path": "analysis/archive/test_game_state.sql", "original_file_path": "analyses/archive/test_game_state.sql", "unique_id": "analysis.nhl_data.test_game_state", "fqn": ["nhl_data", "analysis", "archive", "test_game_state"], "alias": "test_game_state", "checksum": {"name": "sha256", "checksum": "97bf48896a85b900a893413b7e8ea6a7fcf6da530b8fd7f55dd2049d3efb1921"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1695581342.1605983, "relation_name": null, "raw_code": "--select *\n--from `nhl-breakouts.dbt_dom.stg_nhl__shifts_time` as shifts_time\n--where game_id = 2015020001 and game_time_seconds = 1200;\n\n\nwith\n\ngame_seconds as (\n    -- generates a series of 10800 seconds\n    select -1 + row_number() over() as seconds\n    from unnest((select split(format(\"%10800s\", \"\"), '') as h from (select null))) as pos -- noqa: disable=L036,L042\n    order by seconds -- noqa: enable=L036,L042\n)\n\n, player_shift_seconds as (\n    select\n        concat(shifts.shift_id, '_', gs.seconds) as new_shift_id\n        , shifts.shift_number\n        , shifts.game_id\n        , shifts.player_id\n        , shifts.team_id\n        , shifts.home_away_team\n        , shifts.game_type_description\n        , shifts.event_number\n        , shifts.type_code\n        , shifts.detail_code\n        , shifts.player_full_name\n        , shifts.is_goal\n        , shifts.is_period_start\n        , shifts.is_period_end\n        , shifts.goal_game_state\n        , shifts.goal_assisters\n        , shifts.goal_primary_assister_full_name\n        , shifts.goal_secondary_assister_full_name\n        , shifts.period\n        , shifts.period_type\n        , shifts.start_seconds_elapsed\n        , shifts.end_seconds_elapsed\n        , shifts.duration_seconds_elapsed\n        , shifts.start_time\n        , shifts.end_time\n        , shifts.duration\n        , gs.seconds as game_time_seconds\n        , (gs.seconds - shifts.start_seconds_elapsed) as shift_time_seconds\n        , players.primary_position_abbreviation\n        , case when gs.seconds = shifts.start_seconds_elapsed then true else false end as is_shift_start\n        , case when gs.seconds = shifts.end_seconds_elapsed then true else false end as is_shift_end\n        , case when gs.seconds = shifts.start_seconds_elapsed and is_period_start is true then true else false end as is_shift_start_period_start\n        , case when gs.seconds = shifts.start_seconds_elapsed and is_period_start is false then true else false end as is_shift_start_not_period_start\n        , case when gs.seconds = shifts.start_seconds_elapsed and is_period_end is true then true else false end as is_shift_end_period_end\n\n    from `nhl-breakouts`.`dbt_dom`.`stg_nhl__shifts` as shifts\n    inner join game_seconds as gs on gs.seconds between shifts.start_seconds_elapsed and shifts.end_seconds_elapsed\n    left join `nhl-breakouts`.`dbt_dom`.`d_players` as players on players.player_id = shifts.player_id\n\n)\n\n, game_second_skaters_on_ice as (\n    -- lists players and count of positions on ice for each game second\n    select\n        game_id\n        , game_time_seconds\n        , sum(case when home_away_team = 'home' and primary_position_abbreviation = 'G' and is_shift_start_not_period_start is false then 1 else 0 end) as home_goalie_on_ice\n        , sum(case when home_away_team = 'away' and primary_position_abbreviation = 'G' and is_shift_start_not_period_start is false then 1 else 0 end) as away_goalie_on_ice\n        , sum(case when home_away_team = 'home' and primary_position_abbreviation = 'D' and is_shift_start_not_period_start is false then 1 else 0 end) as home_defence_on_ice\n        , sum(case when home_away_team = 'away' and primary_position_abbreviation = 'D' and is_shift_start_not_period_start is false then 1 else 0 end) as away_defence_on_ice\n        , sum(case when home_away_team = 'home' and primary_position_abbreviation not in ('G', 'D') and is_shift_start_not_period_start is false then 1 else 0 end) as home_forward_on_ice\n        , sum(case when home_away_team = 'away' and primary_position_abbreviation not in ('G', 'D') and is_shift_start_not_period_start is false then 1 else 0 end) as away_forward_on_ice\n        , array_agg(case when home_away_team = 'home' and is_shift_start_not_period_start is false then player_id end ignore nulls) as home_skaters\n        , array_agg(case when home_away_team = 'away' and is_shift_start_not_period_start is false then player_id end ignore nulls) as away_skaters\n    from player_shift_seconds\n    where is_period_end is false\n    group by 1, 2\n)\n\n,test as (\nselect\n    sbs.new_shift_id\n    , sbs.shift_number\n    , sbs.game_id\n    , sbs.player_id\n    , sbs.team_id\n    , sbs.home_away_team\n    , sbs.game_type_description\n    , sbs.event_number\n    , sbs.type_code\n    , sbs.detail_code\n    , sbs.player_full_name\n    , sbs.is_goal\n    , sbs.goal_game_state\n    , sbs.goal_assisters\n    , sbs.goal_primary_assister_full_name\n    , sbs.goal_secondary_assister_full_name\n    , sbs.period\n    , sbs.period_type\n    , sbs.game_time_seconds\n    , sbs.shift_time_seconds\n    , sbs.is_shift_start\n    , sbs.is_shift_end\n    , sbs.is_shift_start_period_start\n    , sbs.is_shift_start_not_period_start\n    , sbs.is_shift_end_period_end\n    , sbs.start_seconds_elapsed\n    , sbs.end_seconds_elapsed\n    , sbs.duration_seconds_elapsed\n    , sbs.start_time\n    , sbs.end_time\n    , sbs.duration\n    , sbs.is_period_start\n    , sbs.is_period_end\n    , concat((soi.home_defence_on_ice + soi.home_forward_on_ice), 'v', (soi.away_defence_on_ice + soi.away_forward_on_ice)) as game_state\n    , concat('home:', (soi.home_defence_on_ice + soi.home_forward_on_ice), '-away:', (soi.away_defence_on_ice + soi.away_forward_on_ice)) as game_state_description\n    , case\n        when (soi.home_defence_on_ice + soi.home_forward_on_ice) = (soi.away_defence_on_ice + soi.away_forward_on_ice) then 'even strength'\n        when sbs.home_away_team = 'home' and (soi.home_defence_on_ice + soi.home_forward_on_ice) > (soi.away_defence_on_ice + soi.away_forward_on_ice) then 'skater advantage'\n        when sbs.home_away_team = 'home' and (soi.home_defence_on_ice + soi.home_forward_on_ice) < (soi.away_defence_on_ice + soi.away_forward_on_ice) then 'skater disadvantage'\n        when sbs.home_away_team = 'away' and (soi.away_defence_on_ice + soi.away_forward_on_ice) > (soi.home_defence_on_ice + soi.home_forward_on_ice) then 'skater advantage'\n        when sbs.home_away_team = 'away' and (soi.away_defence_on_ice + soi.away_forward_on_ice) < (soi.home_defence_on_ice + soi.home_forward_on_ice) then 'skater disadvantage'\n        else 'unknown'\n    end as game_state_skaters\n    , soi.home_goalie_on_ice = 0 as home_goalie_pulled\n    , soi.away_goalie_on_ice = 0 as away_goalie_pulled\n    , soi.home_skaters\n    , soi.away_skaters\n    , (soi.home_defence_on_ice + soi.home_forward_on_ice) as home_skaters_on_ice\n    , (soi.away_defence_on_ice + soi.away_forward_on_ice) as away_skaters_on_ice\n    , soi.home_goalie_on_ice\n    , soi.home_defence_on_ice\n    , soi.home_forward_on_ice\n    , soi.away_goalie_on_ice\n    , soi.away_defence_on_ice\n    , soi.away_forward_on_ice\nfrom player_shift_seconds as sbs\nleft join game_second_skaters_on_ice as soi\n    on sbs.game_id = soi.game_id\n        and sbs.game_time_seconds = soi.game_time_seconds\n\n)\n\nselect  test.*\nfrom    test\nwhere (test.home_defence_on_ice + test.home_forward_on_ice) < 3\nlimit 100;", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/nhl_data/analyses/archive/test_game_state.sql", "compiled": true, "compiled_code": "--select *\n--from `nhl-breakouts.dbt_dom.stg_nhl__shifts_time` as shifts_time\n--where game_id = 2015020001 and game_time_seconds = 1200;\n\n\nwith\n\ngame_seconds as (\n    -- generates a series of 10800 seconds\n    select -1 + row_number() over() as seconds\n    from unnest((select split(format(\"%10800s\", \"\"), '') as h from (select null))) as pos -- noqa: disable=L036,L042\n    order by seconds -- noqa: enable=L036,L042\n)\n\n, player_shift_seconds as (\n    select\n        concat(shifts.shift_id, '_', gs.seconds) as new_shift_id\n        , shifts.shift_number\n        , shifts.game_id\n        , shifts.player_id\n        , shifts.team_id\n        , shifts.home_away_team\n        , shifts.game_type_description\n        , shifts.event_number\n        , shifts.type_code\n        , shifts.detail_code\n        , shifts.player_full_name\n        , shifts.is_goal\n        , shifts.is_period_start\n        , shifts.is_period_end\n        , shifts.goal_game_state\n        , shifts.goal_assisters\n        , shifts.goal_primary_assister_full_name\n        , shifts.goal_secondary_assister_full_name\n        , shifts.period\n        , shifts.period_type\n        , shifts.start_seconds_elapsed\n        , shifts.end_seconds_elapsed\n        , shifts.duration_seconds_elapsed\n        , shifts.start_time\n        , shifts.end_time\n        , shifts.duration\n        , gs.seconds as game_time_seconds\n        , (gs.seconds - shifts.start_seconds_elapsed) as shift_time_seconds\n        , players.primary_position_abbreviation\n        , case when gs.seconds = shifts.start_seconds_elapsed then true else false end as is_shift_start\n        , case when gs.seconds = shifts.end_seconds_elapsed then true else false end as is_shift_end\n        , case when gs.seconds = shifts.start_seconds_elapsed and is_period_start is true then true else false end as is_shift_start_period_start\n        , case when gs.seconds = shifts.start_seconds_elapsed and is_period_start is false then true else false end as is_shift_start_not_period_start\n        , case when gs.seconds = shifts.start_seconds_elapsed and is_period_end is true then true else false end as is_shift_end_period_end\n\n    from `nhl-breakouts`.`dbt_dom`.`stg_nhl__shifts` as shifts\n    inner join game_seconds as gs on gs.seconds between shifts.start_seconds_elapsed and shifts.end_seconds_elapsed\n    left join `nhl-breakouts`.`dbt_dom`.`d_players` as players on players.player_id = shifts.player_id\n\n)\n\n, game_second_skaters_on_ice as (\n    -- lists players and count of positions on ice for each game second\n    select\n        game_id\n        , game_time_seconds\n        , sum(case when home_away_team = 'home' and primary_position_abbreviation = 'G' and is_shift_start_not_period_start is false then 1 else 0 end) as home_goalie_on_ice\n        , sum(case when home_away_team = 'away' and primary_position_abbreviation = 'G' and is_shift_start_not_period_start is false then 1 else 0 end) as away_goalie_on_ice\n        , sum(case when home_away_team = 'home' and primary_position_abbreviation = 'D' and is_shift_start_not_period_start is false then 1 else 0 end) as home_defence_on_ice\n        , sum(case when home_away_team = 'away' and primary_position_abbreviation = 'D' and is_shift_start_not_period_start is false then 1 else 0 end) as away_defence_on_ice\n        , sum(case when home_away_team = 'home' and primary_position_abbreviation not in ('G', 'D') and is_shift_start_not_period_start is false then 1 else 0 end) as home_forward_on_ice\n        , sum(case when home_away_team = 'away' and primary_position_abbreviation not in ('G', 'D') and is_shift_start_not_period_start is false then 1 else 0 end) as away_forward_on_ice\n        , array_agg(case when home_away_team = 'home' and is_shift_start_not_period_start is false then player_id end ignore nulls) as home_skaters\n        , array_agg(case when home_away_team = 'away' and is_shift_start_not_period_start is false then player_id end ignore nulls) as away_skaters\n    from player_shift_seconds\n    where is_period_end is false\n    group by 1, 2\n)\n\n,test as (\nselect\n    sbs.new_shift_id\n    , sbs.shift_number\n    , sbs.game_id\n    , sbs.player_id\n    , sbs.team_id\n    , sbs.home_away_team\n    , sbs.game_type_description\n    , sbs.event_number\n    , sbs.type_code\n    , sbs.detail_code\n    , sbs.player_full_name\n    , sbs.is_goal\n    , sbs.goal_game_state\n    , sbs.goal_assisters\n    , sbs.goal_primary_assister_full_name\n    , sbs.goal_secondary_assister_full_name\n    , sbs.period\n    , sbs.period_type\n    , sbs.game_time_seconds\n    , sbs.shift_time_seconds\n    , sbs.is_shift_start\n    , sbs.is_shift_end\n    , sbs.is_shift_start_period_start\n    , sbs.is_shift_start_not_period_start\n    , sbs.is_shift_end_period_end\n    , sbs.start_seconds_elapsed\n    , sbs.end_seconds_elapsed\n    , sbs.duration_seconds_elapsed\n    , sbs.start_time\n    , sbs.end_time\n    , sbs.duration\n    , sbs.is_period_start\n    , sbs.is_period_end\n    , concat((soi.home_defence_on_ice + soi.home_forward_on_ice), 'v', (soi.away_defence_on_ice + soi.away_forward_on_ice)) as game_state\n    , concat('home:', (soi.home_defence_on_ice + soi.home_forward_on_ice), '-away:', (soi.away_defence_on_ice + soi.away_forward_on_ice)) as game_state_description\n    , case\n        when (soi.home_defence_on_ice + soi.home_forward_on_ice) = (soi.away_defence_on_ice + soi.away_forward_on_ice) then 'even strength'\n        when sbs.home_away_team = 'home' and (soi.home_defence_on_ice + soi.home_forward_on_ice) > (soi.away_defence_on_ice + soi.away_forward_on_ice) then 'skater advantage'\n        when sbs.home_away_team = 'home' and (soi.home_defence_on_ice + soi.home_forward_on_ice) < (soi.away_defence_on_ice + soi.away_forward_on_ice) then 'skater disadvantage'\n        when sbs.home_away_team = 'away' and (soi.away_defence_on_ice + soi.away_forward_on_ice) > (soi.home_defence_on_ice + soi.home_forward_on_ice) then 'skater advantage'\n        when sbs.home_away_team = 'away' and (soi.away_defence_on_ice + soi.away_forward_on_ice) < (soi.home_defence_on_ice + soi.home_forward_on_ice) then 'skater disadvantage'\n        else 'unknown'\n    end as game_state_skaters\n    , soi.home_goalie_on_ice = 0 as home_goalie_pulled\n    , soi.away_goalie_on_ice = 0 as away_goalie_pulled\n    , soi.home_skaters\n    , soi.away_skaters\n    , (soi.home_defence_on_ice + soi.home_forward_on_ice) as home_skaters_on_ice\n    , (soi.away_defence_on_ice + soi.away_forward_on_ice) as away_skaters_on_ice\n    , soi.home_goalie_on_ice\n    , soi.home_defence_on_ice\n    , soi.home_forward_on_ice\n    , soi.away_goalie_on_ice\n    , soi.away_defence_on_ice\n    , soi.away_forward_on_ice\nfrom player_shift_seconds as sbs\nleft join game_second_skaters_on_ice as soi\n    on sbs.game_id = soi.game_id\n        and sbs.game_time_seconds = soi.game_time_seconds\n\n)\n\nselect  test.*\nfrom    test\nwhere (test.home_defence_on_ice + test.home_forward_on_ice) < 3\nlimit 100;", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}}, "analysis.nhl_data.goalshifts": {"database": "nhl-breakouts", "schema": "github", "name": "goalshifts", "resource_type": "analysis", "package_name": "nhl_data", "path": "analysis/archive/goalshifts.sql", "original_file_path": "analyses/archive/goalshifts.sql", "unique_id": "analysis.nhl_data.goalshifts", "fqn": ["nhl_data", "analysis", "archive", "goalshifts"], "alias": "goalshifts", "checksum": {"name": "sha256", "checksum": "2c5ab5def091d5363e666578d08eeb060c518659fa70484c1bb05c4cb78619c9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1695581342.1658018, "relation_name": null, "raw_code": "with\n\ngoal_shifts as (\n    select distinct\n        CONCAT(s.gameid, '_', s.playerid, '_', s.eventnumber) as goalshift_id\n        , s.eventnumber as event_number\n        , s.playerid as player_id\n        , s.gameid as game_id\n        , s.teamid as team_id\n        , s.period\n        , s.starttime as start_time\n        , s.typecode as type_code\n        , s.detailcode as detail_code\n        , s.eventdescription as game_state\n        , CONCAT(s.firstname, \" \", s.lastname) as player_full_name\n        , s.eventdetails as assist_player_description\n        , case\n            when s.eventdetails is null then 'Unassisted'\n            when LENGTH(s.eventdetails) - LENGTH(REPLACE(s.eventdetails, ',', '')) > 0 then '2 Assisters'\n            else '1 Assister'\n        end as assist_count\n    from {{ source('meltano', 'shifts') }} as s\n\n    where\n        1 = 1\n        and s.typecode = 505 -- goals\n        and s.playerid is not null\n        -- Manually removing shift IDs of goals that were duplicated with different values (either in time of goal, or eventDetails)\n        -- Method: cross referenced the gameId with the NHL boxscore, manually removed the incorrect line-item\n        and not (s.gameid = 2020020279 and s.eventnumber = 820 and s.id = 10501471) -- eventDetails were off\n        and not (s.gameid = 2020020038 and s.eventnumber = 668 and s.id = 10335336) -- time of goal was off\n        and not (s.gameid = 2020020249 and s.eventnumber = 61 and s.id = 10481186) -- time of goal was off\n        and not (s.gameid = 2020020274 and s.eventnumber = 472 and s.id = 10498099) -- time of goal and eventDetails were off\n        and not (s.gameid = 2020020129 and s.eventnumber = 630 and s.id = 10408031) -- time of goal was way off\n        and not (s.gameid = 2020030113 and s.eventnumber = 57 and s.id = 10995042) -- time of goal was off\n        and not (s.gameid = 2020020056 and s.eventnumber = 538 and s.id = 10349144) -- eventDetails were off\n        and not (s.gameid = 2020020792 and s.eventnumber = 220 and s.id = 10900308) -- time of goal was off\n        and not (s.gameid = 2020020279 and s.eventnumber = 566 and s.id = 10501469) -- time of goal was off\n        and not (s.gameid = 2020020003 and s.eventnumber = 222 and s.id = 10310433) -- time of goal was off\n        and not (s.gameid = 2020020001 and s.eventnumber = 70 and s.id = 10309429) -- time of goal was off\n        and not (s.gameid = 2020030412 and s.eventnumber = 614 and s.id = 11050284) -- time of goal was off\n        and not (s.gameid = 2020020745 and s.eventnumber = 485 and s.id = 10875539) -- time of goal was off\n        and not (s.gameid = 2020020767 and s.eventnumber = 209 and s.id = 10639438) -- time of goal was off\n)\n\nselect distinct\n    /* Primary Key */\n    {{ dbt_utils.surrogate_key(['g.goalshift_id']) }} as stg_nhl__shift_id\n\n    /* Identifiers */\n    , g.player_id\n    , g.game_id\n    , g.team_id\n    , g.type_code\n    , g.detail_code\n    , g.event_number\n\n    /* Properties */\n    , g.period\n    , g.start_time\n    , g.game_state\n    , g.player_full_name\n    , g.assist_player_description\n    , case\n        when g.assist_count = '2 Assisters' then TRIM(SPLIT(g.assist_player_description, ',')[OFFSET(0)])\n        when g.assist_count = '1 Assister' then g.assist_player_description\n        else 'None'\n    end as assist_primary_player_full_name\n    , case\n        when g.assist_count = '2 Assisters' then TRIM(SPLIT(g.assist_player_description, ', ')[OFFSET(1)])\n        else 'None'\n    end as assist_secondary_player_full_name\n    , g.assist_count\nfrom goal_shifts as g", "language": "sql", "refs": [], "sources": [["meltano", "shifts"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["source.nhl_data.meltano.shifts"]}, "compiled_path": "target/compiled/nhl_data/analyses/archive/goalshifts.sql", "compiled": true, "compiled_code": "with\n\ngoal_shifts as (\n    select distinct\n        CONCAT(s.gameid, '_', s.playerid, '_', s.eventnumber) as goalshift_id\n        , s.eventnumber as event_number\n        , s.playerid as player_id\n        , s.gameid as game_id\n        , s.teamid as team_id\n        , s.period\n        , s.starttime as start_time\n        , s.typecode as type_code\n        , s.detailcode as detail_code\n        , s.eventdescription as game_state\n        , CONCAT(s.firstname, \" \", s.lastname) as player_full_name\n        , s.eventdetails as assist_player_description\n        , case\n            when s.eventdetails is null then 'Unassisted'\n            when LENGTH(s.eventdetails) - LENGTH(REPLACE(s.eventdetails, ',', '')) > 0 then '2 Assisters'\n            else '1 Assister'\n        end as assist_count\n    from `nhl-breakouts`.`raw`.`shifts` as s\n\n    where\n        1 = 1\n        and s.typecode = 505 -- goals\n        and s.playerid is not null\n        -- Manually removing shift IDs of goals that were duplicated with different values (either in time of goal, or eventDetails)\n        -- Method: cross referenced the gameId with the NHL boxscore, manually removed the incorrect line-item\n        and not (s.gameid = 2020020279 and s.eventnumber = 820 and s.id = 10501471) -- eventDetails were off\n        and not (s.gameid = 2020020038 and s.eventnumber = 668 and s.id = 10335336) -- time of goal was off\n        and not (s.gameid = 2020020249 and s.eventnumber = 61 and s.id = 10481186) -- time of goal was off\n        and not (s.gameid = 2020020274 and s.eventnumber = 472 and s.id = 10498099) -- time of goal and eventDetails were off\n        and not (s.gameid = 2020020129 and s.eventnumber = 630 and s.id = 10408031) -- time of goal was way off\n        and not (s.gameid = 2020030113 and s.eventnumber = 57 and s.id = 10995042) -- time of goal was off\n        and not (s.gameid = 2020020056 and s.eventnumber = 538 and s.id = 10349144) -- eventDetails were off\n        and not (s.gameid = 2020020792 and s.eventnumber = 220 and s.id = 10900308) -- time of goal was off\n        and not (s.gameid = 2020020279 and s.eventnumber = 566 and s.id = 10501469) -- time of goal was off\n        and not (s.gameid = 2020020003 and s.eventnumber = 222 and s.id = 10310433) -- time of goal was off\n        and not (s.gameid = 2020020001 and s.eventnumber = 70 and s.id = 10309429) -- time of goal was off\n        and not (s.gameid = 2020030412 and s.eventnumber = 614 and s.id = 11050284) -- time of goal was off\n        and not (s.gameid = 2020020745 and s.eventnumber = 485 and s.id = 10875539) -- time of goal was off\n        and not (s.gameid = 2020020767 and s.eventnumber = 209 and s.id = 10639438) -- time of goal was off\n)\n\nselect distinct\n    /* Primary Key */\n    to_hex(md5(cast(coalesce(cast(g.goalshift_id as \n    string\n), '') as \n    string\n))) as stg_nhl__shift_id\n\n    /* Identifiers */\n    , g.player_id\n    , g.game_id\n    , g.team_id\n    , g.type_code\n    , g.detail_code\n    , g.event_number\n\n    /* Properties */\n    , g.period\n    , g.start_time\n    , g.game_state\n    , g.player_full_name\n    , g.assist_player_description\n    , case\n        when g.assist_count = '2 Assisters' then TRIM(SPLIT(g.assist_player_description, ',')[OFFSET(0)])\n        when g.assist_count = '1 Assister' then g.assist_player_description\n        else 'None'\n    end as assist_primary_player_full_name\n    , case\n        when g.assist_count = '2 Assisters' then TRIM(SPLIT(g.assist_player_description, ', ')[OFFSET(1)])\n        else 'None'\n    end as assist_secondary_player_full_name\n    , g.assist_count\nfrom goal_shifts as g", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}}, "analysis.nhl_data.plays_shifts": {"database": "nhl-breakouts", "schema": "github", "name": "plays_shifts", "resource_type": "analysis", "package_name": "nhl_data", "path": "analysis/archive/plays_shifts.sql", "original_file_path": "analyses/archive/plays_shifts.sql", "unique_id": "analysis.nhl_data.plays_shifts", "fqn": ["nhl_data", "analysis", "archive", "plays_shifts"], "alias": "plays_shifts", "checksum": {"name": "sha256", "checksum": "fab4f97b9270515299b52147e70f9cc1a6970fb08044f40aa4ad39fc5fa06eb0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1695581342.1748867, "relation_name": null, "raw_code": "-- query #1: summarize missing shifts\nwith plays_shifts as (\nselect plays.*, plays.game_id as plays_game_id, shifts.*, schedule.schedule_id, schedule.game_type, schedule.game_type_description, season.season_id\nfrom  `nhl-breakouts.dbt_dom.f_plays` as plays\nleft join `nhl-breakouts.dbt_dom.stg_nhl__shifts_time` as shifts on shifts.game_id = plays.game_id and shifts.game_time_seconds = plays.play_total_seconds_elapsed and shifts.player_id = plays.player_id\nleft join `nhl-breakouts.dbt_dom.d_schedule` as schedule on schedule.game_id = plays.game_id\nleft join `nhl-breakouts.dbt_dom.d_seasons` as season on season.season_id = schedule.season_id\n)\n\nselect\n  p.event_type\n  , sum(case when p.new_shift_id is null then 1 else 0 end) as missing_shift\n  , sum(case when p.new_shift_id is not null then 1 else 0 end) as has_shift\n  , round((sum(case when p.new_shift_id is not null then 1 else 0 end) / count(*)), 4) as pcnt_has_shift\n  , count(*) as ct\nfrom plays_shifts as p\nwhere\n  1 = 1\n  and p.new_shift_id is null\n  and game_type in ('03', '02')\n  and lower(play_period_type) <> 'shootout'\ngroup by p.event_type\norder by count(*) desc;\n\n/**\n-- gameids to investigate\n2015020497 -- 487 missing plays-shifts (we are missing this game entirely)\n2016021070 -- 102 missing plays-shifts (this one we are just missing a bunch... why?)\n2019030016 -- 37 missing plays-shifts\n2016020282 -- 33 missing plays-shifts\n2019020259 -- 27 missing plays-shifts\n2019020021 -- 26 missing plays-shifts\n2018020732 -- 25 missing plays-shifts\n2019020457 -- 24 missing plays-shifts\n2019020169 -- 21 missing plays-shifts\n2019020963 -- 19 missing plays-shifts\n**/\n\n-- query #2: drill into missing shifts\nwith plays_shifts as (\nselect plays.*, plays.game_id as plays_game_id, shifts.*, schedule.schedule_id, schedule.game_type, schedule.game_type_description, season.season_id\nfrom  `nhl-breakouts.dbt_dom.f_plays` as plays\nleft join `nhl-breakouts.dbt_dom.stg_nhl__shifts_time` as shifts on shifts.game_id = plays.game_id and shifts.game_time_seconds = plays.play_total_seconds_elapsed and shifts.player_id = plays.player_id\nleft join `nhl-breakouts.dbt_dom.d_schedule` as schedule on schedule.game_id = plays.game_id\nleft join `nhl-breakouts.dbt_dom.d_seasons` as season on season.season_id = schedule.season_id\n)\n\nselect *\nfrom plays_shifts as p\nwhere\n    1 = 1\n    and p.new_shift_id is null\n    and game_type in ('03', '02')\n    and lower(play_period_type) <> 'shootout'\n    and plays_game_id = 2016021070\n\n--query#3: drill into missing shifts\nwith plays_shifts as (\nselect\n    plays.*\n    -- shifts-time stuff\n    ,shifts.new_shift_id\n    ,shifts.shift_number\n    ,shifts.is_shift_start\n    ,shifts.is_shift_end\n    ,shifts.start_time\n    ,shifts.end_time\n    ,shifts.duration\n    ,shifts.shift_time_seconds\n    ,shifts.start_seconds_elapsed\n    ,shifts.end_seconds_elapsed\n    ,shifts.duration_seconds_elapsed\n    ,shifts.home_away_team\n    ,shifts.game_type_description\n    ,shifts.is_goal\n    ,shifts.goal_game_state\n    ,shifts.goal_assisters\n    ,shifts.goal_primary_assister_full_name\n    ,shifts.goal_secondary_assister_full_name\n    ,shifts.period_type\n    ,shifts.game_state\n    ,shifts.game_state_description\n    ,shifts.game_state_skaters\n    ,shifts.home_goalie_pulled\n    ,shifts.away_goalie_pulled\n    ,shifts.home_skaters\n    ,shifts.away_skaters\n    ,shifts.home_skaters_on_ice\n    ,shifts.away_skaters_on_ice\n    ,shifts.home_goalie_on_ice\n    ,shifts.home_defence_on_ice\n    ,shifts.home_forward_on_ice\n    ,shifts.away_goalie_on_ice\n    ,shifts.away_defence_on_ice\n    ,shifts.away_forward_on_ice\n    -- schedule stuff\n    ,schedule.schedule_id\n    ,schedule.game_type\n    ,schedule.game_type_description\n    -- season stuff\n    ,season.season_id\nfrom  `nhl-breakouts.dbt_dom.f_plays` as plays\nleft join `nhl-breakouts.dbt_dom.stg_nhl__shifts_time` as shifts on shifts.game_id = plays.game_id and shifts.game_time_seconds = plays.play_total_seconds_elapsed and shifts.player_id = plays.player_id and shifts.is_shift_start is false\nleft join `nhl-breakouts.dbt_dom.d_schedule` as schedule on schedule.game_id = plays.game_id\nleft join `nhl-breakouts.dbt_dom.d_seasons` as season on season.season_id = schedule.season_id\n)\n\nselect *\nfrom plays_shifts as p\nwhere\n    1 = 1\n    --and p.new_shift_id is null\n    and game_type in ('03', '02')\n    and lower(play_period_type) <> 'shootout'\n    and game_id <> 2015020497\nlimit 10000", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/nhl_data/analyses/archive/plays_shifts.sql", "compiled": true, "compiled_code": "-- query #1: summarize missing shifts\nwith plays_shifts as (\nselect plays.*, plays.game_id as plays_game_id, shifts.*, schedule.schedule_id, schedule.game_type, schedule.game_type_description, season.season_id\nfrom  `nhl-breakouts.dbt_dom.f_plays` as plays\nleft join `nhl-breakouts.dbt_dom.stg_nhl__shifts_time` as shifts on shifts.game_id = plays.game_id and shifts.game_time_seconds = plays.play_total_seconds_elapsed and shifts.player_id = plays.player_id\nleft join `nhl-breakouts.dbt_dom.d_schedule` as schedule on schedule.game_id = plays.game_id\nleft join `nhl-breakouts.dbt_dom.d_seasons` as season on season.season_id = schedule.season_id\n)\n\nselect\n  p.event_type\n  , sum(case when p.new_shift_id is null then 1 else 0 end) as missing_shift\n  , sum(case when p.new_shift_id is not null then 1 else 0 end) as has_shift\n  , round((sum(case when p.new_shift_id is not null then 1 else 0 end) / count(*)), 4) as pcnt_has_shift\n  , count(*) as ct\nfrom plays_shifts as p\nwhere\n  1 = 1\n  and p.new_shift_id is null\n  and game_type in ('03', '02')\n  and lower(play_period_type) <> 'shootout'\ngroup by p.event_type\norder by count(*) desc;\n\n/**\n-- gameids to investigate\n2015020497 -- 487 missing plays-shifts (we are missing this game entirely)\n2016021070 -- 102 missing plays-shifts (this one we are just missing a bunch... why?)\n2019030016 -- 37 missing plays-shifts\n2016020282 -- 33 missing plays-shifts\n2019020259 -- 27 missing plays-shifts\n2019020021 -- 26 missing plays-shifts\n2018020732 -- 25 missing plays-shifts\n2019020457 -- 24 missing plays-shifts\n2019020169 -- 21 missing plays-shifts\n2019020963 -- 19 missing plays-shifts\n**/\n\n-- query #2: drill into missing shifts\nwith plays_shifts as (\nselect plays.*, plays.game_id as plays_game_id, shifts.*, schedule.schedule_id, schedule.game_type, schedule.game_type_description, season.season_id\nfrom  `nhl-breakouts.dbt_dom.f_plays` as plays\nleft join `nhl-breakouts.dbt_dom.stg_nhl__shifts_time` as shifts on shifts.game_id = plays.game_id and shifts.game_time_seconds = plays.play_total_seconds_elapsed and shifts.player_id = plays.player_id\nleft join `nhl-breakouts.dbt_dom.d_schedule` as schedule on schedule.game_id = plays.game_id\nleft join `nhl-breakouts.dbt_dom.d_seasons` as season on season.season_id = schedule.season_id\n)\n\nselect *\nfrom plays_shifts as p\nwhere\n    1 = 1\n    and p.new_shift_id is null\n    and game_type in ('03', '02')\n    and lower(play_period_type) <> 'shootout'\n    and plays_game_id = 2016021070\n\n--query#3: drill into missing shifts\nwith plays_shifts as (\nselect\n    plays.*\n    -- shifts-time stuff\n    ,shifts.new_shift_id\n    ,shifts.shift_number\n    ,shifts.is_shift_start\n    ,shifts.is_shift_end\n    ,shifts.start_time\n    ,shifts.end_time\n    ,shifts.duration\n    ,shifts.shift_time_seconds\n    ,shifts.start_seconds_elapsed\n    ,shifts.end_seconds_elapsed\n    ,shifts.duration_seconds_elapsed\n    ,shifts.home_away_team\n    ,shifts.game_type_description\n    ,shifts.is_goal\n    ,shifts.goal_game_state\n    ,shifts.goal_assisters\n    ,shifts.goal_primary_assister_full_name\n    ,shifts.goal_secondary_assister_full_name\n    ,shifts.period_type\n    ,shifts.game_state\n    ,shifts.game_state_description\n    ,shifts.game_state_skaters\n    ,shifts.home_goalie_pulled\n    ,shifts.away_goalie_pulled\n    ,shifts.home_skaters\n    ,shifts.away_skaters\n    ,shifts.home_skaters_on_ice\n    ,shifts.away_skaters_on_ice\n    ,shifts.home_goalie_on_ice\n    ,shifts.home_defence_on_ice\n    ,shifts.home_forward_on_ice\n    ,shifts.away_goalie_on_ice\n    ,shifts.away_defence_on_ice\n    ,shifts.away_forward_on_ice\n    -- schedule stuff\n    ,schedule.schedule_id\n    ,schedule.game_type\n    ,schedule.game_type_description\n    -- season stuff\n    ,season.season_id\nfrom  `nhl-breakouts.dbt_dom.f_plays` as plays\nleft join `nhl-breakouts.dbt_dom.stg_nhl__shifts_time` as shifts on shifts.game_id = plays.game_id and shifts.game_time_seconds = plays.play_total_seconds_elapsed and shifts.player_id = plays.player_id and shifts.is_shift_start is false\nleft join `nhl-breakouts.dbt_dom.d_schedule` as schedule on schedule.game_id = plays.game_id\nleft join `nhl-breakouts.dbt_dom.d_seasons` as season on season.season_id = schedule.season_id\n)\n\nselect *\nfrom plays_shifts as p\nwhere\n    1 = 1\n    --and p.new_shift_id is null\n    and game_type in ('03', '02')\n    and lower(play_period_type) <> 'shootout'\n    and game_id <> 2015020497\nlimit 10000", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}}, "analysis.nhl_data.rink_dimensions": {"database": "nhl-breakouts", "schema": "github", "name": "rink_dimensions", "resource_type": "analysis", "package_name": "nhl_data", "path": "analysis/archive/rink_dimensions.sql", "original_file_path": "analyses/archive/rink_dimensions.sql", "unique_id": "analysis.nhl_data.rink_dimensions", "fqn": ["nhl_data", "analysis", "archive", "rink_dimensions"], "alias": "rink_dimensions", "checksum": {"name": "sha256", "checksum": "0a7d1d07f1ff7b99e554897ac85b5fecb5979e4734c9c13d5cfd1acc7749f2bd"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1695581342.1801279, "relation_name": null, "raw_code": "-- CTE to pull all home team shots in the first period from non-goalie skaters\nWITH home_shot_data AS (\n  SELECT\n    p.play_id\n    , DATE(p.play_time) AS game_date\n    , p.game_id\n    , p.event_id\n    , p.event_type\n    , p.team_id\n    , t.full_name AS team_full_name\n    , p.player_role_team\n    , p.player_id\n    , p.player_full_name\n    , p.event_code\n    , p.event_description\n    , p.play_x_coordinate\n    , p.play_y_coordinate\n    , p.play_period\n    , p.play_period_time_elapsed\n\n  FROM\n    `nhl-breakouts.analytics_intermediate.f_plays` p\n    INNER JOIN `nhl-breakouts.analytics_intermediate.d_teams` t ON p.team_id = t.team_id\n    INNER JOIN `nhl-breakouts.analytics_intermediate.d_players`pl ON p.player_id = pl.player_id\n\n  WHERE 1=1\n    AND p.event_type IN ('GOAL', 'MISSED_SHOT', 'SHOT')\n    AND p.play_period = 1\n    AND p.player_role_team = 'HOME'\n    AND pl.primary_position_name <> 'Goalie'\n\n  ORDER BY\n    DATE(p.play_time) DESC\n)\n\n-- Determine which end the home team is shooting at during the first period for each team\n, first_period_shot_location AS (\n  SELECT\n    sd.team_id\n    , sd.team_full_name\n    , SUM(CASE WHEN CAST(sd.play_x_coordinate AS FLOAT64) > 0 THEN 1 ELSE 0 END) AS right_end\n    , SUM(CASE WHEN CAST(sd.play_x_coordinate AS FLOAT64) < 0 THEN 1 ELSE 0 END) AS left_end\n\n  FROM\n    home_shot_data sd\n\n  WHERE 1=1\n\n  GROUP BY\n    sd.team_id\n    , sd.team_full_name\n)\n\n-- Depending on which end a majority of shots are towards, assign each team a home_first_period_shooting_end\n, shooting_end AS (\n  SELECT\n    DISTINCT sd.team_id\n    , CASE WHEN fp.right_end > fp.left_end THEN 'right_end' ELSE 'left_end' END AS home_first_period_shooting_end\n\n  FROM\n    home_shot_data sd\n    INNER JOIN first_period_shot_location fp ON sd.team_id = fp.team_id\n)\n\n-- Depending on which end the team is shooting on, adjust the x and y play coordinates so that all shots are taken towards the same end (all shots towards right end)\n, adjusted_coordinates AS (\n  SELECT\n    p.play_id\n    , DATE(p.play_time) AS game_date\n    , p.game_id\n    , p.event_id\n    , p.event_type\n    , p.team_id\n    , t.full_name AS team_full_name\n    , p.player_role_team\n    , p.player_id\n    , p.player_full_name\n    , p.event_code\n    , p.event_description\n    , p.play_x_coordinate\n    , p.play_y_coordinate\n    , CASE\n        WHEN p.player_role_team = 'HOME' AND se.home_first_period_shooting_end = 'left_end' AND MOD(p.play_period, 2) > 0 THEN CAST(p.play_x_coordinate AS FLOAT64)*-1\n        WHEN p.player_role_team = 'HOME' AND se.home_first_period_shooting_end = 'left_end' AND MOD(p.play_period, 2) = 0 THEN CAST(p.play_x_coordinate AS FLOAT64)\n        WHEN p.player_role_team = 'HOME' AND se.home_first_period_shooting_end = 'right_end' AND MOD(p.play_period, 2) > 0 THEN CAST(p.play_x_coordinate AS FLOAT64)\n        WHEN p.player_role_team = 'HOME' AND se.home_first_period_shooting_end = 'right_end' AND MOD(p.play_period, 2) = 0 THEN CAST(p.play_x_coordinate AS FLOAT64)*-1\n        WHEN p.player_role_team = 'AWAY' AND se.home_first_period_shooting_end = 'left_end' AND MOD(p.play_period, 2) > 0 THEN CAST(p.play_x_coordinate AS FLOAT64)\n        WHEN p.player_role_team = 'AWAY' AND se.home_first_period_shooting_end = 'left_end' AND MOD(p.play_period, 2) = 0 THEN CAST(p.play_x_coordinate AS FLOAT64)*-1\n        WHEN p.player_role_team = 'AWAY' AND se.home_first_period_shooting_end = 'right_end' AND MOD(p.play_period, 2) > 0 THEN CAST(p.play_x_coordinate AS FLOAT64)*-1\n        WHEN p.player_role_team = 'AWAY' AND se.home_first_period_shooting_end = 'right_end' AND MOD(p.play_period, 2) = 0 THEN CAST(p.play_x_coordinate AS FLOAT64)\n      END AS adj_play_x_coordinate\n    , CASE\n        WHEN p.player_role_team = 'HOME' AND se.home_first_period_shooting_end = 'left_end' AND MOD(p.play_period, 2) > 0 THEN CAST(p.play_y_coordinate AS FLOAT64)*-1\n        WHEN p.player_role_team = 'HOME' AND se.home_first_period_shooting_end = 'left_end' AND MOD(p.play_period, 2) = 0 THEN CAST(p.play_y_coordinate AS FLOAT64)\n        WHEN p.player_role_team = 'HOME' AND se.home_first_period_shooting_end = 'right_end' AND MOD(p.play_period, 2) > 0 THEN CAST(p.play_y_coordinate AS FLOAT64)\n        WHEN p.player_role_team = 'HOME' AND se.home_first_period_shooting_end = 'right_end' AND MOD(p.play_period, 2) = 0 THEN CAST(p.play_y_coordinate AS FLOAT64)*-1\n        WHEN p.player_role_team = 'AWAY' AND se.home_first_period_shooting_end = 'left_end' AND MOD(p.play_period, 2) > 0 THEN CAST(p.play_y_coordinate AS FLOAT64)\n        WHEN p.player_role_team = 'AWAY' AND se.home_first_period_shooting_end = 'left_end' AND MOD(p.play_period, 2) = 0 THEN CAST(p.play_y_coordinate AS FLOAT64)*-1\n        WHEN p.player_role_team = 'AWAY' AND se.home_first_period_shooting_end = 'right_end' AND MOD(p.play_period, 2) > 0 THEN CAST(p.play_y_coordinate AS FLOAT64)*-1\n        WHEN p.player_role_team = 'AWAY' AND se.home_first_period_shooting_end = 'right_end' AND MOD(p.play_period, 2) = 0 THEN CAST(p.play_y_coordinate AS FLOAT64)\n      END AS adj_play_y_coordinate\n    , p.play_period\n    , p.play_period_time_elapsed\n    , g.home_team_id\n    , g.away_team_id\n    , se.home_first_period_shooting_end\n\n  FROM\n    `nhl-breakouts.analytics_intermediate.f_plays` p\n    INNER JOIN `nhl-breakouts.analytics_intermediate.d_teams` t ON p.team_id = t.team_id\n    INNER JOIN `nhl-breakouts.analytics_intermediate.d_players` pl ON p.player_id = pl.player_id\n    INNER JOIN `nhl-breakouts.analytics_intermediate.f_games` g ON p.game_id = g.game_id\n    INNER JOIN shooting_end se ON g.home_team_id = se.team_id\n\n  WHERE 1=1\n    AND p.event_type IN ('GOAL', 'MISSED_SHOT', 'SHOT')\n)\n\n-- Assign each shot a zone based on the adjusted coordinates\n, rink_dimensions AS (\n  SELECT\n    ac.*\n    , CASE\n      WHEN adj_play_x_coordinate BETWEEN -25 AND 25 THEN 'NEUTRAL_ZONE'\n      WHEN adj_play_x_coordinate BETWEEN -100 AND -25 THEN 'DEFENSIVE_ZONE'\n      WHEN (adj_play_x_coordinate BETWEEN 25 AND 54) AND (adj_play_y_coordinate BETWEEN -42.5 AND -7) THEN 'R_POINT'\n      WHEN (adj_play_x_coordinate BETWEEN 25 AND 54) AND (adj_play_y_coordinate BETWEEN -7 AND 7) THEN 'C_POINT'\n      WHEN (adj_play_x_coordinate BETWEEN 25 AND 54) AND (adj_play_y_coordinate BETWEEN 7 AND 42.5) THEN 'L_POINT'\n      WHEN (adj_play_x_coordinate BETWEEN 54 AND 69) AND (adj_play_y_coordinate BETWEEN -42.5 AND -22) THEN 'R_1_HIGH'\n      WHEN (adj_play_x_coordinate BETWEEN 54 AND 69) AND (adj_play_y_coordinate BETWEEN -22 AND -7) THEN 'R_2_HIGH'\n      WHEN (adj_play_x_coordinate BETWEEN 52 AND 69) AND (adj_play_y_coordinate BETWEEN -7 AND 7) THEN 'HIGH_SLOT'\n      WHEN (adj_play_x_coordinate BETWEEN 52 AND 69) AND (adj_play_y_coordinate BETWEEN 7 AND 22) THEN 'L_2_HIGH'\n      WHEN (adj_play_x_coordinate BETWEEN 52 AND 69) AND (adj_play_y_coordinate BETWEEN 22 AND 42.5) THEN 'L_1_HIGH'\n      WHEN (adj_play_x_coordinate BETWEEN 69 AND 89) AND (adj_play_y_coordinate BETWEEN -42.5 AND -22) THEN 'R_1_LOW'\n      WHEN (adj_play_x_coordinate BETWEEN 69 AND 89) AND (adj_play_y_coordinate BETWEEN -22 AND -7) THEN 'R_2_LOW'\n      WHEN (adj_play_x_coordinate BETWEEN 69 AND 89) AND (adj_play_y_coordinate BETWEEN -7 AND 7) THEN 'LOW_SLOT'\n      WHEN (adj_play_x_coordinate BETWEEN 69 AND 89) AND (adj_play_y_coordinate BETWEEN 7 AND 22) THEN 'L_2_LOW'\n      WHEN (adj_play_x_coordinate BETWEEN 69 AND 89) AND (adj_play_y_coordinate BETWEEN 22 AND 42.5) THEN 'L_1_LOW'\n      WHEN (adj_play_x_coordinate BETWEEN 89 AND 100) THEN 'DOWN_LOW'\n    END AS zone\n  FROM\n    adjusted_coordinates ac\n)\n\n-- QC results\nSELECT *\nFROM rink_dimensions\nLIMIT 5;", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/nhl_data/analyses/archive/rink_dimensions.sql", "compiled": true, "compiled_code": "-- CTE to pull all home team shots in the first period from non-goalie skaters\nWITH home_shot_data AS (\n  SELECT\n    p.play_id\n    , DATE(p.play_time) AS game_date\n    , p.game_id\n    , p.event_id\n    , p.event_type\n    , p.team_id\n    , t.full_name AS team_full_name\n    , p.player_role_team\n    , p.player_id\n    , p.player_full_name\n    , p.event_code\n    , p.event_description\n    , p.play_x_coordinate\n    , p.play_y_coordinate\n    , p.play_period\n    , p.play_period_time_elapsed\n\n  FROM\n    `nhl-breakouts.analytics_intermediate.f_plays` p\n    INNER JOIN `nhl-breakouts.analytics_intermediate.d_teams` t ON p.team_id = t.team_id\n    INNER JOIN `nhl-breakouts.analytics_intermediate.d_players`pl ON p.player_id = pl.player_id\n\n  WHERE 1=1\n    AND p.event_type IN ('GOAL', 'MISSED_SHOT', 'SHOT')\n    AND p.play_period = 1\n    AND p.player_role_team = 'HOME'\n    AND pl.primary_position_name <> 'Goalie'\n\n  ORDER BY\n    DATE(p.play_time) DESC\n)\n\n-- Determine which end the home team is shooting at during the first period for each team\n, first_period_shot_location AS (\n  SELECT\n    sd.team_id\n    , sd.team_full_name\n    , SUM(CASE WHEN CAST(sd.play_x_coordinate AS FLOAT64) > 0 THEN 1 ELSE 0 END) AS right_end\n    , SUM(CASE WHEN CAST(sd.play_x_coordinate AS FLOAT64) < 0 THEN 1 ELSE 0 END) AS left_end\n\n  FROM\n    home_shot_data sd\n\n  WHERE 1=1\n\n  GROUP BY\n    sd.team_id\n    , sd.team_full_name\n)\n\n-- Depending on which end a majority of shots are towards, assign each team a home_first_period_shooting_end\n, shooting_end AS (\n  SELECT\n    DISTINCT sd.team_id\n    , CASE WHEN fp.right_end > fp.left_end THEN 'right_end' ELSE 'left_end' END AS home_first_period_shooting_end\n\n  FROM\n    home_shot_data sd\n    INNER JOIN first_period_shot_location fp ON sd.team_id = fp.team_id\n)\n\n-- Depending on which end the team is shooting on, adjust the x and y play coordinates so that all shots are taken towards the same end (all shots towards right end)\n, adjusted_coordinates AS (\n  SELECT\n    p.play_id\n    , DATE(p.play_time) AS game_date\n    , p.game_id\n    , p.event_id\n    , p.event_type\n    , p.team_id\n    , t.full_name AS team_full_name\n    , p.player_role_team\n    , p.player_id\n    , p.player_full_name\n    , p.event_code\n    , p.event_description\n    , p.play_x_coordinate\n    , p.play_y_coordinate\n    , CASE\n        WHEN p.player_role_team = 'HOME' AND se.home_first_period_shooting_end = 'left_end' AND MOD(p.play_period, 2) > 0 THEN CAST(p.play_x_coordinate AS FLOAT64)*-1\n        WHEN p.player_role_team = 'HOME' AND se.home_first_period_shooting_end = 'left_end' AND MOD(p.play_period, 2) = 0 THEN CAST(p.play_x_coordinate AS FLOAT64)\n        WHEN p.player_role_team = 'HOME' AND se.home_first_period_shooting_end = 'right_end' AND MOD(p.play_period, 2) > 0 THEN CAST(p.play_x_coordinate AS FLOAT64)\n        WHEN p.player_role_team = 'HOME' AND se.home_first_period_shooting_end = 'right_end' AND MOD(p.play_period, 2) = 0 THEN CAST(p.play_x_coordinate AS FLOAT64)*-1\n        WHEN p.player_role_team = 'AWAY' AND se.home_first_period_shooting_end = 'left_end' AND MOD(p.play_period, 2) > 0 THEN CAST(p.play_x_coordinate AS FLOAT64)\n        WHEN p.player_role_team = 'AWAY' AND se.home_first_period_shooting_end = 'left_end' AND MOD(p.play_period, 2) = 0 THEN CAST(p.play_x_coordinate AS FLOAT64)*-1\n        WHEN p.player_role_team = 'AWAY' AND se.home_first_period_shooting_end = 'right_end' AND MOD(p.play_period, 2) > 0 THEN CAST(p.play_x_coordinate AS FLOAT64)*-1\n        WHEN p.player_role_team = 'AWAY' AND se.home_first_period_shooting_end = 'right_end' AND MOD(p.play_period, 2) = 0 THEN CAST(p.play_x_coordinate AS FLOAT64)\n      END AS adj_play_x_coordinate\n    , CASE\n        WHEN p.player_role_team = 'HOME' AND se.home_first_period_shooting_end = 'left_end' AND MOD(p.play_period, 2) > 0 THEN CAST(p.play_y_coordinate AS FLOAT64)*-1\n        WHEN p.player_role_team = 'HOME' AND se.home_first_period_shooting_end = 'left_end' AND MOD(p.play_period, 2) = 0 THEN CAST(p.play_y_coordinate AS FLOAT64)\n        WHEN p.player_role_team = 'HOME' AND se.home_first_period_shooting_end = 'right_end' AND MOD(p.play_period, 2) > 0 THEN CAST(p.play_y_coordinate AS FLOAT64)\n        WHEN p.player_role_team = 'HOME' AND se.home_first_period_shooting_end = 'right_end' AND MOD(p.play_period, 2) = 0 THEN CAST(p.play_y_coordinate AS FLOAT64)*-1\n        WHEN p.player_role_team = 'AWAY' AND se.home_first_period_shooting_end = 'left_end' AND MOD(p.play_period, 2) > 0 THEN CAST(p.play_y_coordinate AS FLOAT64)\n        WHEN p.player_role_team = 'AWAY' AND se.home_first_period_shooting_end = 'left_end' AND MOD(p.play_period, 2) = 0 THEN CAST(p.play_y_coordinate AS FLOAT64)*-1\n        WHEN p.player_role_team = 'AWAY' AND se.home_first_period_shooting_end = 'right_end' AND MOD(p.play_period, 2) > 0 THEN CAST(p.play_y_coordinate AS FLOAT64)*-1\n        WHEN p.player_role_team = 'AWAY' AND se.home_first_period_shooting_end = 'right_end' AND MOD(p.play_period, 2) = 0 THEN CAST(p.play_y_coordinate AS FLOAT64)\n      END AS adj_play_y_coordinate\n    , p.play_period\n    , p.play_period_time_elapsed\n    , g.home_team_id\n    , g.away_team_id\n    , se.home_first_period_shooting_end\n\n  FROM\n    `nhl-breakouts.analytics_intermediate.f_plays` p\n    INNER JOIN `nhl-breakouts.analytics_intermediate.d_teams` t ON p.team_id = t.team_id\n    INNER JOIN `nhl-breakouts.analytics_intermediate.d_players` pl ON p.player_id = pl.player_id\n    INNER JOIN `nhl-breakouts.analytics_intermediate.f_games` g ON p.game_id = g.game_id\n    INNER JOIN shooting_end se ON g.home_team_id = se.team_id\n\n  WHERE 1=1\n    AND p.event_type IN ('GOAL', 'MISSED_SHOT', 'SHOT')\n)\n\n-- Assign each shot a zone based on the adjusted coordinates\n, rink_dimensions AS (\n  SELECT\n    ac.*\n    , CASE\n      WHEN adj_play_x_coordinate BETWEEN -25 AND 25 THEN 'NEUTRAL_ZONE'\n      WHEN adj_play_x_coordinate BETWEEN -100 AND -25 THEN 'DEFENSIVE_ZONE'\n      WHEN (adj_play_x_coordinate BETWEEN 25 AND 54) AND (adj_play_y_coordinate BETWEEN -42.5 AND -7) THEN 'R_POINT'\n      WHEN (adj_play_x_coordinate BETWEEN 25 AND 54) AND (adj_play_y_coordinate BETWEEN -7 AND 7) THEN 'C_POINT'\n      WHEN (adj_play_x_coordinate BETWEEN 25 AND 54) AND (adj_play_y_coordinate BETWEEN 7 AND 42.5) THEN 'L_POINT'\n      WHEN (adj_play_x_coordinate BETWEEN 54 AND 69) AND (adj_play_y_coordinate BETWEEN -42.5 AND -22) THEN 'R_1_HIGH'\n      WHEN (adj_play_x_coordinate BETWEEN 54 AND 69) AND (adj_play_y_coordinate BETWEEN -22 AND -7) THEN 'R_2_HIGH'\n      WHEN (adj_play_x_coordinate BETWEEN 52 AND 69) AND (adj_play_y_coordinate BETWEEN -7 AND 7) THEN 'HIGH_SLOT'\n      WHEN (adj_play_x_coordinate BETWEEN 52 AND 69) AND (adj_play_y_coordinate BETWEEN 7 AND 22) THEN 'L_2_HIGH'\n      WHEN (adj_play_x_coordinate BETWEEN 52 AND 69) AND (adj_play_y_coordinate BETWEEN 22 AND 42.5) THEN 'L_1_HIGH'\n      WHEN (adj_play_x_coordinate BETWEEN 69 AND 89) AND (adj_play_y_coordinate BETWEEN -42.5 AND -22) THEN 'R_1_LOW'\n      WHEN (adj_play_x_coordinate BETWEEN 69 AND 89) AND (adj_play_y_coordinate BETWEEN -22 AND -7) THEN 'R_2_LOW'\n      WHEN (adj_play_x_coordinate BETWEEN 69 AND 89) AND (adj_play_y_coordinate BETWEEN -7 AND 7) THEN 'LOW_SLOT'\n      WHEN (adj_play_x_coordinate BETWEEN 69 AND 89) AND (adj_play_y_coordinate BETWEEN 7 AND 22) THEN 'L_2_LOW'\n      WHEN (adj_play_x_coordinate BETWEEN 69 AND 89) AND (adj_play_y_coordinate BETWEEN 22 AND 42.5) THEN 'L_1_LOW'\n      WHEN (adj_play_x_coordinate BETWEEN 89 AND 100) THEN 'DOWN_LOW'\n    END AS zone\n  FROM\n    adjusted_coordinates ac\n)\n\n-- QC results\nSELECT *\nFROM rink_dimensions\nLIMIT 5;", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}}, "analysis.nhl_data.rink_location": {"database": "nhl-breakouts", "schema": "github", "name": "rink_location", "resource_type": "analysis", "package_name": "nhl_data", "path": "analysis/archive/rink_location.sql", "original_file_path": "analyses/archive/rink_location.sql", "unique_id": "analysis.nhl_data.rink_location", "fqn": ["nhl_data", "analysis", "archive", "rink_location"], "alias": "rink_location", "checksum": {"name": "sha256", "checksum": "7167973fe5c41d9bbd65a4bf7077cc6c26547d5415cb2287cc757e05a5dcc6ac"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1695581342.1854572, "relation_name": null, "raw_code": "-- #cte: depending on which end the team is shooting on, adjust the x and y play coordinates so that all plays are going towards the same end (all shots towards right end)\nwith adj_coordinates as (\n  select\n    plays.play_id\n    , plays.event_type\n    , plays.play_x_coordinate\n    , plays.play_y_coordinate\n    , lower(plays.player_role_team) as player_role_team\n    , plays.play_period\n    , schedule.home_period1_shooting\n    -- Flip the x-y coords based on where the player's team was shooting in the first period of the game (reminder that when mod(x, 2) = 0 then odd number, but when > 0 then  even number)\n      , case\n          when lower(plays.player_role_team) = 'home' and schedule.home_period1_shooting = 'left' and mod(plays.play_period, 2) > 0 then cast(plays.play_x_coordinate as float64)*-1\n          when lower(plays.player_role_team) = 'home' and schedule.home_period1_shooting = 'left' and mod(plays.play_period, 2) = 0 then cast(plays.play_x_coordinate as float64)\n          when lower(plays.player_role_team) = 'home' and schedule.home_period1_shooting = 'right' and mod(plays.play_period, 2) > 0 then cast(plays.play_x_coordinate as float64)\n          when lower(plays.player_role_team) = 'home' and schedule.home_period1_shooting = 'right' and mod(plays.play_period, 2) = 0 then cast(plays.play_x_coordinate as float64)*-1\n          when lower(plays.player_role_team) = 'away' and schedule.home_period1_shooting = 'left' and mod(plays.play_period, 2) > 0 then cast(plays.play_x_coordinate as float64)\n          when lower(plays.player_role_team) = 'away' and schedule.home_period1_shooting = 'left' and mod(plays.play_period, 2) = 0 then cast(plays.play_x_coordinate as float64)*-1\n          when lower(plays.player_role_team) = 'away' and schedule.home_period1_shooting = 'right' and mod(plays.play_period, 2) > 0 then cast(plays.play_x_coordinate as float64)*-1\n          when lower(plays.player_role_team) = 'away' and schedule.home_period1_shooting = 'right' and mod(plays.play_period, 2) = 0 then cast(plays.play_x_coordinate as float64)\n        end as adj_play_x_coordinate\n      , case\n          when lower(plays.player_role_team) = 'home' and schedule.home_period1_shooting = 'left' and mod(plays.play_period, 2) > 0 then cast(plays.play_y_coordinate as float64)*-1\n          when lower(plays.player_role_team) = 'home' and schedule.home_period1_shooting = 'left' and mod(plays.play_period, 2) = 0 then cast(plays.play_y_coordinate as float64)\n          when lower(plays.player_role_team) = 'home' and schedule.home_period1_shooting = 'right' and mod(plays.play_period, 2) > 0 then cast(plays.play_y_coordinate as float64)\n          when lower(plays.player_role_team) = 'home' and schedule.home_period1_shooting = 'right' and mod(plays.play_period, 2) = 0 then cast(plays.play_y_coordinate as float64)*-1\n          when lower(plays.player_role_team) = 'away' and schedule.home_period1_shooting = 'left' and mod(plays.play_period, 2) > 0 then cast(plays.play_y_coordinate as float64)\n          when lower(plays.player_role_team) = 'away' and schedule.home_period1_shooting = 'left' and mod(plays.play_period, 2) = 0 then cast(plays.play_y_coordinate as float64)*-1\n          when lower(plays.player_role_team) = 'away' and schedule.home_period1_shooting = 'right' and mod(plays.play_period, 2) > 0 then cast(plays.play_y_coordinate as float64)*-1\n          when lower(plays.player_role_team) = 'away' and schedule.home_period1_shooting = 'right' and mod(plays.play_period, 2) = 0 then cast(plays.play_y_coordinate as float64)\n        end as adj_play_y_coordinate\n  from `nhl-breakouts.dbt_dom.f_plays` as plays\n  left join `nhl-breakouts.dbt_dom.d_schedule` as schedule on schedule.game_id = plays.game_id\n)\n\nselect\n  ac.*\n-- Rink distance from goal (shooting)\n  , sqrt(power((89 - abs(adj_play_x_coordinate)),2) + power(adj_play_y_coordinate,2)) as goal_distance\n-- Rink angle from goal (shooting)\n  , atan( (adj_play_y_coordinate / (89 - adj_play_x_coordinate)) ) * (180 / (acos(-1))) as angle\n-- Rink zones\n  , case\n    when adj_play_x_coordinate between -25 and 25 then 'neutral_zone'\n    when adj_play_x_coordinate between -100 and -25 then 'defensive_zone'\n    else 'offensive_zone'\n    end as zone_type\n  , case\n    when adj_play_x_coordinate between -25 and 25 then 'neutral_zone'\n    when adj_play_x_coordinate between -100 and -25 then 'defensive_zone'\n    when (adj_play_x_coordinate between 25 and 54) and (adj_play_y_coordinate between -42.5 and -7) then 'r_point'\n    when (adj_play_x_coordinate between 25 and 54) and (adj_play_y_coordinate between -7 and 7) then 'c_point'\n    when (adj_play_x_coordinate between 25 and 54) and (adj_play_y_coordinate between 7 and 42.5) then 'l_point'\n    when (adj_play_x_coordinate between 54 and 69) and (adj_play_y_coordinate between -42.5 and -22) then 'r_1_high'\n    when (adj_play_x_coordinate between 54 and 69) and (adj_play_y_coordinate between -22 and -7) then 'r_2_high'\n    when (adj_play_x_coordinate between 52 and 69) and (adj_play_y_coordinate between -7 and 7) then 'high_slot'\n    when (adj_play_x_coordinate between 52 and 69) and (adj_play_y_coordinate between 7 and 22) then 'l_2_high'\n    when (adj_play_x_coordinate between 52 and 69) and (adj_play_y_coordinate between 22 and 42.5) then 'l_1_high'\n    when (adj_play_x_coordinate between 69 and 89) and (adj_play_y_coordinate between -42.5 and -22) then 'r_1_low'\n    when (adj_play_x_coordinate between 69 and 89) and (adj_play_y_coordinate between -22 and -7) then 'r_2_low'\n    when (adj_play_x_coordinate between 69 and 89) and (adj_play_y_coordinate between -7 and 7) then 'low_slot'\n    when (adj_play_x_coordinate between 69 and 89) and (adj_play_y_coordinate between 7 and 22) then 'l_2_low'\n    when (adj_play_x_coordinate between 69 and 89) and (adj_play_y_coordinate between 22 and 42.5) then 'l_1_low'\n    when (adj_play_x_coordinate between 89 and 100) then 'down_low'\n    end as zone\nfrom adj_coordinates as ac\nlimit 1000", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/nhl_data/analyses/archive/rink_location.sql", "compiled": true, "compiled_code": "-- #cte: depending on which end the team is shooting on, adjust the x and y play coordinates so that all plays are going towards the same end (all shots towards right end)\nwith adj_coordinates as (\n  select\n    plays.play_id\n    , plays.event_type\n    , plays.play_x_coordinate\n    , plays.play_y_coordinate\n    , lower(plays.player_role_team) as player_role_team\n    , plays.play_period\n    , schedule.home_period1_shooting\n    -- Flip the x-y coords based on where the player's team was shooting in the first period of the game (reminder that when mod(x, 2) = 0 then odd number, but when > 0 then  even number)\n      , case\n          when lower(plays.player_role_team) = 'home' and schedule.home_period1_shooting = 'left' and mod(plays.play_period, 2) > 0 then cast(plays.play_x_coordinate as float64)*-1\n          when lower(plays.player_role_team) = 'home' and schedule.home_period1_shooting = 'left' and mod(plays.play_period, 2) = 0 then cast(plays.play_x_coordinate as float64)\n          when lower(plays.player_role_team) = 'home' and schedule.home_period1_shooting = 'right' and mod(plays.play_period, 2) > 0 then cast(plays.play_x_coordinate as float64)\n          when lower(plays.player_role_team) = 'home' and schedule.home_period1_shooting = 'right' and mod(plays.play_period, 2) = 0 then cast(plays.play_x_coordinate as float64)*-1\n          when lower(plays.player_role_team) = 'away' and schedule.home_period1_shooting = 'left' and mod(plays.play_period, 2) > 0 then cast(plays.play_x_coordinate as float64)\n          when lower(plays.player_role_team) = 'away' and schedule.home_period1_shooting = 'left' and mod(plays.play_period, 2) = 0 then cast(plays.play_x_coordinate as float64)*-1\n          when lower(plays.player_role_team) = 'away' and schedule.home_period1_shooting = 'right' and mod(plays.play_period, 2) > 0 then cast(plays.play_x_coordinate as float64)*-1\n          when lower(plays.player_role_team) = 'away' and schedule.home_period1_shooting = 'right' and mod(plays.play_period, 2) = 0 then cast(plays.play_x_coordinate as float64)\n        end as adj_play_x_coordinate\n      , case\n          when lower(plays.player_role_team) = 'home' and schedule.home_period1_shooting = 'left' and mod(plays.play_period, 2) > 0 then cast(plays.play_y_coordinate as float64)*-1\n          when lower(plays.player_role_team) = 'home' and schedule.home_period1_shooting = 'left' and mod(plays.play_period, 2) = 0 then cast(plays.play_y_coordinate as float64)\n          when lower(plays.player_role_team) = 'home' and schedule.home_period1_shooting = 'right' and mod(plays.play_period, 2) > 0 then cast(plays.play_y_coordinate as float64)\n          when lower(plays.player_role_team) = 'home' and schedule.home_period1_shooting = 'right' and mod(plays.play_period, 2) = 0 then cast(plays.play_y_coordinate as float64)*-1\n          when lower(plays.player_role_team) = 'away' and schedule.home_period1_shooting = 'left' and mod(plays.play_period, 2) > 0 then cast(plays.play_y_coordinate as float64)\n          when lower(plays.player_role_team) = 'away' and schedule.home_period1_shooting = 'left' and mod(plays.play_period, 2) = 0 then cast(plays.play_y_coordinate as float64)*-1\n          when lower(plays.player_role_team) = 'away' and schedule.home_period1_shooting = 'right' and mod(plays.play_period, 2) > 0 then cast(plays.play_y_coordinate as float64)*-1\n          when lower(plays.player_role_team) = 'away' and schedule.home_period1_shooting = 'right' and mod(plays.play_period, 2) = 0 then cast(plays.play_y_coordinate as float64)\n        end as adj_play_y_coordinate\n  from `nhl-breakouts.dbt_dom.f_plays` as plays\n  left join `nhl-breakouts.dbt_dom.d_schedule` as schedule on schedule.game_id = plays.game_id\n)\n\nselect\n  ac.*\n-- Rink distance from goal (shooting)\n  , sqrt(power((89 - abs(adj_play_x_coordinate)),2) + power(adj_play_y_coordinate,2)) as goal_distance\n-- Rink angle from goal (shooting)\n  , atan( (adj_play_y_coordinate / (89 - adj_play_x_coordinate)) ) * (180 / (acos(-1))) as angle\n-- Rink zones\n  , case\n    when adj_play_x_coordinate between -25 and 25 then 'neutral_zone'\n    when adj_play_x_coordinate between -100 and -25 then 'defensive_zone'\n    else 'offensive_zone'\n    end as zone_type\n  , case\n    when adj_play_x_coordinate between -25 and 25 then 'neutral_zone'\n    when adj_play_x_coordinate between -100 and -25 then 'defensive_zone'\n    when (adj_play_x_coordinate between 25 and 54) and (adj_play_y_coordinate between -42.5 and -7) then 'r_point'\n    when (adj_play_x_coordinate between 25 and 54) and (adj_play_y_coordinate between -7 and 7) then 'c_point'\n    when (adj_play_x_coordinate between 25 and 54) and (adj_play_y_coordinate between 7 and 42.5) then 'l_point'\n    when (adj_play_x_coordinate between 54 and 69) and (adj_play_y_coordinate between -42.5 and -22) then 'r_1_high'\n    when (adj_play_x_coordinate between 54 and 69) and (adj_play_y_coordinate between -22 and -7) then 'r_2_high'\n    when (adj_play_x_coordinate between 52 and 69) and (adj_play_y_coordinate between -7 and 7) then 'high_slot'\n    when (adj_play_x_coordinate between 52 and 69) and (adj_play_y_coordinate between 7 and 22) then 'l_2_high'\n    when (adj_play_x_coordinate between 52 and 69) and (adj_play_y_coordinate between 22 and 42.5) then 'l_1_high'\n    when (adj_play_x_coordinate between 69 and 89) and (adj_play_y_coordinate between -42.5 and -22) then 'r_1_low'\n    when (adj_play_x_coordinate between 69 and 89) and (adj_play_y_coordinate between -22 and -7) then 'r_2_low'\n    when (adj_play_x_coordinate between 69 and 89) and (adj_play_y_coordinate between -7 and 7) then 'low_slot'\n    when (adj_play_x_coordinate between 69 and 89) and (adj_play_y_coordinate between 7 and 22) then 'l_2_low'\n    when (adj_play_x_coordinate between 69 and 89) and (adj_play_y_coordinate between 22 and 42.5) then 'l_1_low'\n    when (adj_play_x_coordinate between 89 and 100) then 'down_low'\n    end as zone\nfrom adj_coordinates as ac\nlimit 1000", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}}, "test.nhl_data.unique_stg_nhl__draft_prospects_stg_nhl__draft_prospects_id.81b61a4ac5": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "stg_nhl__draft_prospects_id", "model": "{{ get_where_subquery(ref('stg_nhl__draft_prospects')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "unique_stg_nhl__draft_prospects_stg_nhl__draft_prospects_id", "resource_type": "test", "package_name": "nhl_data", "path": "unique_stg_nhl__draft_prospects_stg_nhl__draft_prospects_id.sql", "original_file_path": "models/staging/stg_nhl__draft_prospects.yml", "unique_id": "test.nhl_data.unique_stg_nhl__draft_prospects_stg_nhl__draft_prospects_id.81b61a4ac5", "fqn": ["nhl_data", "staging", "unique_stg_nhl__draft_prospects_stg_nhl__draft_prospects_id"], "alias": "unique_stg_nhl__draft_prospects_stg_nhl__draft_prospects_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.353385, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_nhl__draft_prospects", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.stg_nhl__draft_prospects"]}, "compiled_path": "target/compiled/nhl_data/models/staging/stg_nhl__draft_prospects.yml/unique_stg_nhl__draft_prospects_stg_nhl__draft_prospects_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select stg_nhl__draft_prospects_id as unique_field\n  from `nhl-breakouts`.`github`.`stg_nhl__draft_prospects`\n  where stg_nhl__draft_prospects_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "stg_nhl__draft_prospects_id", "file_key_name": "models.stg_nhl__draft_prospects", "attached_node": "model.nhl_data.stg_nhl__draft_prospects"}, "test.nhl_data.not_null_stg_nhl__draft_prospects_stg_nhl__draft_prospects_id.1866c4a0e2": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "stg_nhl__draft_prospects_id", "model": "{{ get_where_subquery(ref('stg_nhl__draft_prospects')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "not_null_stg_nhl__draft_prospects_stg_nhl__draft_prospects_id", "resource_type": "test", "package_name": "nhl_data", "path": "not_null_stg_nhl__draft_prospects_stg_nhl__draft_prospects_id.sql", "original_file_path": "models/staging/stg_nhl__draft_prospects.yml", "unique_id": "test.nhl_data.not_null_stg_nhl__draft_prospects_stg_nhl__draft_prospects_id.1866c4a0e2", "fqn": ["nhl_data", "staging", "not_null_stg_nhl__draft_prospects_stg_nhl__draft_prospects_id"], "alias": "not_null_stg_nhl__draft_prospects_stg_nhl__draft_prospects_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.3558285, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_nhl__draft_prospects", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.stg_nhl__draft_prospects"]}, "compiled_path": "target/compiled/nhl_data/models/staging/stg_nhl__draft_prospects.yml/not_null_stg_nhl__draft_prospects_stg_nhl__draft_prospects_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect stg_nhl__draft_prospects_id\nfrom `nhl-breakouts`.`github`.`stg_nhl__draft_prospects`\nwhere stg_nhl__draft_prospects_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "stg_nhl__draft_prospects_id", "file_key_name": "models.stg_nhl__draft_prospects", "attached_node": "model.nhl_data.stg_nhl__draft_prospects"}, "test.nhl_data.not_null_stg_nhl__draft_prospects_draft_prospect_id.c2f4218bb5": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "draft_prospect_id", "model": "{{ get_where_subquery(ref('stg_nhl__draft_prospects')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "not_null_stg_nhl__draft_prospects_draft_prospect_id", "resource_type": "test", "package_name": "nhl_data", "path": "not_null_stg_nhl__draft_prospects_draft_prospect_id.sql", "original_file_path": "models/staging/stg_nhl__draft_prospects.yml", "unique_id": "test.nhl_data.not_null_stg_nhl__draft_prospects_draft_prospect_id.c2f4218bb5", "fqn": ["nhl_data", "staging", "not_null_stg_nhl__draft_prospects_draft_prospect_id"], "alias": "not_null_stg_nhl__draft_prospects_draft_prospect_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.3579924, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_nhl__draft_prospects", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.stg_nhl__draft_prospects"]}, "compiled_path": "target/compiled/nhl_data/models/staging/stg_nhl__draft_prospects.yml/not_null_stg_nhl__draft_prospects_draft_prospect_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect draft_prospect_id\nfrom `nhl-breakouts`.`github`.`stg_nhl__draft_prospects`\nwhere draft_prospect_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "draft_prospect_id", "file_key_name": "models.stg_nhl__draft_prospects", "attached_node": "model.nhl_data.stg_nhl__draft_prospects"}, "test.nhl_data.unique_stg_nhl__draft_prospects_draft_prospect_id.439cea6ec2": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "draft_prospect_id", "model": "{{ get_where_subquery(ref('stg_nhl__draft_prospects')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "unique_stg_nhl__draft_prospects_draft_prospect_id", "resource_type": "test", "package_name": "nhl_data", "path": "unique_stg_nhl__draft_prospects_draft_prospect_id.sql", "original_file_path": "models/staging/stg_nhl__draft_prospects.yml", "unique_id": "test.nhl_data.unique_stg_nhl__draft_prospects_draft_prospect_id.439cea6ec2", "fqn": ["nhl_data", "staging", "unique_stg_nhl__draft_prospects_draft_prospect_id"], "alias": "unique_stg_nhl__draft_prospects_draft_prospect_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.360349, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_nhl__draft_prospects", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.stg_nhl__draft_prospects"]}, "compiled_path": "target/compiled/nhl_data/models/staging/stg_nhl__draft_prospects.yml/unique_stg_nhl__draft_prospects_draft_prospect_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select draft_prospect_id as unique_field\n  from `nhl-breakouts`.`github`.`stg_nhl__draft_prospects`\n  where draft_prospect_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "draft_prospect_id", "file_key_name": "models.stg_nhl__draft_prospects", "attached_node": "model.nhl_data.stg_nhl__draft_prospects"}, "test.nhl_data.unique_stg_nhl__seasons_stg_nhl__seasons_id.3ef0f38a83": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "stg_nhl__seasons_id", "model": "{{ get_where_subquery(ref('stg_nhl__seasons')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "unique_stg_nhl__seasons_stg_nhl__seasons_id", "resource_type": "test", "package_name": "nhl_data", "path": "unique_stg_nhl__seasons_stg_nhl__seasons_id.sql", "original_file_path": "models/staging/stg_nhl__seasons.yml", "unique_id": "test.nhl_data.unique_stg_nhl__seasons_stg_nhl__seasons_id.3ef0f38a83", "fqn": ["nhl_data", "staging", "unique_stg_nhl__seasons_stg_nhl__seasons_id"], "alias": "unique_stg_nhl__seasons_stg_nhl__seasons_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.3702466, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_nhl__seasons", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.stg_nhl__seasons"]}, "compiled_path": "target/compiled/nhl_data/models/staging/stg_nhl__seasons.yml/unique_stg_nhl__seasons_stg_nhl__seasons_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select stg_nhl__seasons_id as unique_field\n  from `nhl-breakouts`.`github`.`stg_nhl__seasons`\n  where stg_nhl__seasons_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "stg_nhl__seasons_id", "file_key_name": "models.stg_nhl__seasons", "attached_node": "model.nhl_data.stg_nhl__seasons"}, "test.nhl_data.not_null_stg_nhl__seasons_stg_nhl__seasons_id.e0d5931aa0": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "stg_nhl__seasons_id", "model": "{{ get_where_subquery(ref('stg_nhl__seasons')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "not_null_stg_nhl__seasons_stg_nhl__seasons_id", "resource_type": "test", "package_name": "nhl_data", "path": "not_null_stg_nhl__seasons_stg_nhl__seasons_id.sql", "original_file_path": "models/staging/stg_nhl__seasons.yml", "unique_id": "test.nhl_data.not_null_stg_nhl__seasons_stg_nhl__seasons_id.e0d5931aa0", "fqn": ["nhl_data", "staging", "not_null_stg_nhl__seasons_stg_nhl__seasons_id"], "alias": "not_null_stg_nhl__seasons_stg_nhl__seasons_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.3723722, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_nhl__seasons", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.stg_nhl__seasons"]}, "compiled_path": "target/compiled/nhl_data/models/staging/stg_nhl__seasons.yml/not_null_stg_nhl__seasons_stg_nhl__seasons_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect stg_nhl__seasons_id\nfrom `nhl-breakouts`.`github`.`stg_nhl__seasons`\nwhere stg_nhl__seasons_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "stg_nhl__seasons_id", "file_key_name": "models.stg_nhl__seasons", "attached_node": "model.nhl_data.stg_nhl__seasons"}, "test.nhl_data.unique_stg_nhl__seasons_season_id.9b4d7cf6f0": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "season_id", "model": "{{ get_where_subquery(ref('stg_nhl__seasons')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "unique_stg_nhl__seasons_season_id", "resource_type": "test", "package_name": "nhl_data", "path": "unique_stg_nhl__seasons_season_id.sql", "original_file_path": "models/staging/stg_nhl__seasons.yml", "unique_id": "test.nhl_data.unique_stg_nhl__seasons_season_id.9b4d7cf6f0", "fqn": ["nhl_data", "staging", "unique_stg_nhl__seasons_season_id"], "alias": "unique_stg_nhl__seasons_season_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.3744597, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_nhl__seasons", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.stg_nhl__seasons"]}, "compiled_path": "target/compiled/nhl_data/models/staging/stg_nhl__seasons.yml/unique_stg_nhl__seasons_season_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select season_id as unique_field\n  from `nhl-breakouts`.`github`.`stg_nhl__seasons`\n  where season_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "season_id", "file_key_name": "models.stg_nhl__seasons", "attached_node": "model.nhl_data.stg_nhl__seasons"}, "test.nhl_data.not_null_stg_nhl__seasons_season_id.a335e0b9f9": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "season_id", "model": "{{ get_where_subquery(ref('stg_nhl__seasons')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "not_null_stg_nhl__seasons_season_id", "resource_type": "test", "package_name": "nhl_data", "path": "not_null_stg_nhl__seasons_season_id.sql", "original_file_path": "models/staging/stg_nhl__seasons.yml", "unique_id": "test.nhl_data.not_null_stg_nhl__seasons_season_id.a335e0b9f9", "fqn": ["nhl_data", "staging", "not_null_stg_nhl__seasons_season_id"], "alias": "not_null_stg_nhl__seasons_season_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.3765817, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_nhl__seasons", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.stg_nhl__seasons"]}, "compiled_path": "target/compiled/nhl_data/models/staging/stg_nhl__seasons.yml/not_null_stg_nhl__seasons_season_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect season_id\nfrom `nhl-breakouts`.`github`.`stg_nhl__seasons`\nwhere season_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "season_id", "file_key_name": "models.stg_nhl__seasons", "attached_node": "model.nhl_data.stg_nhl__seasons"}, "test.nhl_data.unique_stg_nhl__live_plays_stg_nhl__live_plays_id.e5043c61a1": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "stg_nhl__live_plays_id", "model": "{{ get_where_subquery(ref('stg_nhl__live_plays')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "unique_stg_nhl__live_plays_stg_nhl__live_plays_id", "resource_type": "test", "package_name": "nhl_data", "path": "unique_stg_nhl__live_plays_stg_nhl__live_plays_id.sql", "original_file_path": "models/staging/stg_nhl__live_plays.yml", "unique_id": "test.nhl_data.unique_stg_nhl__live_plays_stg_nhl__live_plays_id.e5043c61a1", "fqn": ["nhl_data", "staging", "unique_stg_nhl__live_plays_stg_nhl__live_plays_id"], "alias": "unique_stg_nhl__live_plays_stg_nhl__live_plays_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.4150126, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_nhl__live_plays", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.stg_nhl__live_plays"]}, "compiled_path": "target/compiled/nhl_data/models/staging/stg_nhl__live_plays.yml/unique_stg_nhl__live_plays_stg_nhl__live_plays_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select stg_nhl__live_plays_id as unique_field\n  from `nhl-breakouts`.`github`.`stg_nhl__live_plays`\n  where stg_nhl__live_plays_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "stg_nhl__live_plays_id", "file_key_name": "models.stg_nhl__live_plays", "attached_node": "model.nhl_data.stg_nhl__live_plays"}, "test.nhl_data.not_null_stg_nhl__live_plays_stg_nhl__live_plays_id.180653fbd3": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "stg_nhl__live_plays_id", "model": "{{ get_where_subquery(ref('stg_nhl__live_plays')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "not_null_stg_nhl__live_plays_stg_nhl__live_plays_id", "resource_type": "test", "package_name": "nhl_data", "path": "not_null_stg_nhl__live_plays_stg_nhl__live_plays_id.sql", "original_file_path": "models/staging/stg_nhl__live_plays.yml", "unique_id": "test.nhl_data.not_null_stg_nhl__live_plays_stg_nhl__live_plays_id.180653fbd3", "fqn": ["nhl_data", "staging", "not_null_stg_nhl__live_plays_stg_nhl__live_plays_id"], "alias": "not_null_stg_nhl__live_plays_stg_nhl__live_plays_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.417353, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_nhl__live_plays", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.stg_nhl__live_plays"]}, "compiled_path": "target/compiled/nhl_data/models/staging/stg_nhl__live_plays.yml/not_null_stg_nhl__live_plays_stg_nhl__live_plays_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect stg_nhl__live_plays_id\nfrom `nhl-breakouts`.`github`.`stg_nhl__live_plays`\nwhere stg_nhl__live_plays_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "stg_nhl__live_plays_id", "file_key_name": "models.stg_nhl__live_plays", "attached_node": "model.nhl_data.stg_nhl__live_plays"}, "test.nhl_data.unique_stg_nhl__shifts_shift_id.05ca6dee93": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "shift_id", "model": "{{ get_where_subquery(ref('stg_nhl__shifts')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "unique_stg_nhl__shifts_shift_id", "resource_type": "test", "package_name": "nhl_data", "path": "unique_stg_nhl__shifts_shift_id.sql", "original_file_path": "models/staging/stg_nhl__shifts.yml", "unique_id": "test.nhl_data.unique_stg_nhl__shifts_shift_id.05ca6dee93", "fqn": ["nhl_data", "staging", "unique_stg_nhl__shifts_shift_id"], "alias": "unique_stg_nhl__shifts_shift_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.4326963, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_nhl__shifts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.stg_nhl__shifts"]}, "compiled_path": "target/compiled/nhl_data/models/staging/stg_nhl__shifts.yml/unique_stg_nhl__shifts_shift_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select shift_id as unique_field\n  from `nhl-breakouts`.`github`.`stg_nhl__shifts`\n  where shift_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "shift_id", "file_key_name": "models.stg_nhl__shifts", "attached_node": "model.nhl_data.stg_nhl__shifts"}, "test.nhl_data.not_null_stg_nhl__shifts_shift_id.6fa7d45c7f": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "shift_id", "model": "{{ get_where_subquery(ref('stg_nhl__shifts')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "not_null_stg_nhl__shifts_shift_id", "resource_type": "test", "package_name": "nhl_data", "path": "not_null_stg_nhl__shifts_shift_id.sql", "original_file_path": "models/staging/stg_nhl__shifts.yml", "unique_id": "test.nhl_data.not_null_stg_nhl__shifts_shift_id.6fa7d45c7f", "fqn": ["nhl_data", "staging", "not_null_stg_nhl__shifts_shift_id"], "alias": "not_null_stg_nhl__shifts_shift_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.4350944, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_nhl__shifts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.stg_nhl__shifts"]}, "compiled_path": "target/compiled/nhl_data/models/staging/stg_nhl__shifts.yml/not_null_stg_nhl__shifts_shift_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect shift_id\nfrom `nhl-breakouts`.`github`.`stg_nhl__shifts`\nwhere shift_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "shift_id", "file_key_name": "models.stg_nhl__shifts", "attached_node": "model.nhl_data.stg_nhl__shifts"}, "test.nhl_data.not_null_stg_nhl__shifts_game_id.5071b1af9b": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "game_id", "model": "{{ get_where_subquery(ref('stg_nhl__shifts')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "not_null_stg_nhl__shifts_game_id", "resource_type": "test", "package_name": "nhl_data", "path": "not_null_stg_nhl__shifts_game_id.sql", "original_file_path": "models/staging/stg_nhl__shifts.yml", "unique_id": "test.nhl_data.not_null_stg_nhl__shifts_game_id.5071b1af9b", "fqn": ["nhl_data", "staging", "not_null_stg_nhl__shifts_game_id"], "alias": "not_null_stg_nhl__shifts_game_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.4372256, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_nhl__shifts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.stg_nhl__shifts"]}, "compiled_path": "target/compiled/nhl_data/models/staging/stg_nhl__shifts.yml/not_null_stg_nhl__shifts_game_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect game_id\nfrom `nhl-breakouts`.`github`.`stg_nhl__shifts`\nwhere game_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "game_id", "file_key_name": "models.stg_nhl__shifts", "attached_node": "model.nhl_data.stg_nhl__shifts"}, "test.nhl_data.not_null_stg_nhl__shifts_player_id.15cc05b8a9": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "player_id", "model": "{{ get_where_subquery(ref('stg_nhl__shifts')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "not_null_stg_nhl__shifts_player_id", "resource_type": "test", "package_name": "nhl_data", "path": "not_null_stg_nhl__shifts_player_id.sql", "original_file_path": "models/staging/stg_nhl__shifts.yml", "unique_id": "test.nhl_data.not_null_stg_nhl__shifts_player_id.15cc05b8a9", "fqn": ["nhl_data", "staging", "not_null_stg_nhl__shifts_player_id"], "alias": "not_null_stg_nhl__shifts_player_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.4393122, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_nhl__shifts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.stg_nhl__shifts"]}, "compiled_path": "target/compiled/nhl_data/models/staging/stg_nhl__shifts.yml/not_null_stg_nhl__shifts_player_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect player_id\nfrom `nhl-breakouts`.`github`.`stg_nhl__shifts`\nwhere player_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "player_id", "file_key_name": "models.stg_nhl__shifts", "attached_node": "model.nhl_data.stg_nhl__shifts"}, "test.nhl_data.not_null_stg_nhl__boxscore_stg_nhl__boxscore_id.f531645344": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "stg_nhl__boxscore_id", "model": "{{ get_where_subquery(ref('stg_nhl__boxscore')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "not_null_stg_nhl__boxscore_stg_nhl__boxscore_id", "resource_type": "test", "package_name": "nhl_data", "path": "not_null_stg_nhl__boxscore_stg_nhl__boxscore_id.sql", "original_file_path": "models/staging/stg_nhl__boxscore.yml", "unique_id": "test.nhl_data.not_null_stg_nhl__boxscore_stg_nhl__boxscore_id.f531645344", "fqn": ["nhl_data", "staging", "not_null_stg_nhl__boxscore_stg_nhl__boxscore_id"], "alias": "not_null_stg_nhl__boxscore_stg_nhl__boxscore_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.4653838, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_nhl__boxscore", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.stg_nhl__boxscore"]}, "compiled_path": "target/compiled/nhl_data/models/staging/stg_nhl__boxscore.yml/not_null_stg_nhl__boxscore_stg_nhl__boxscore_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect stg_nhl__boxscore_id\nfrom `nhl-breakouts`.`github`.`stg_nhl__boxscore`\nwhere stg_nhl__boxscore_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "stg_nhl__boxscore_id", "file_key_name": "models.stg_nhl__boxscore", "attached_node": "model.nhl_data.stg_nhl__boxscore"}, "test.nhl_data.unique_stg_nhl__boxscore_stg_nhl__boxscore_id.5cb4ed999d": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "stg_nhl__boxscore_id", "model": "{{ get_where_subquery(ref('stg_nhl__boxscore')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "unique_stg_nhl__boxscore_stg_nhl__boxscore_id", "resource_type": "test", "package_name": "nhl_data", "path": "unique_stg_nhl__boxscore_stg_nhl__boxscore_id.sql", "original_file_path": "models/staging/stg_nhl__boxscore.yml", "unique_id": "test.nhl_data.unique_stg_nhl__boxscore_stg_nhl__boxscore_id.5cb4ed999d", "fqn": ["nhl_data", "staging", "unique_stg_nhl__boxscore_stg_nhl__boxscore_id"], "alias": "unique_stg_nhl__boxscore_stg_nhl__boxscore_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.4677062, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_nhl__boxscore", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.stg_nhl__boxscore"]}, "compiled_path": "target/compiled/nhl_data/models/staging/stg_nhl__boxscore.yml/unique_stg_nhl__boxscore_stg_nhl__boxscore_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select stg_nhl__boxscore_id as unique_field\n  from `nhl-breakouts`.`github`.`stg_nhl__boxscore`\n  where stg_nhl__boxscore_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "stg_nhl__boxscore_id", "file_key_name": "models.stg_nhl__boxscore", "attached_node": "model.nhl_data.stg_nhl__boxscore"}, "test.nhl_data.unique_stg_nhl__players_stg_nhl__players_id.a676defad4": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "stg_nhl__players_id", "model": "{{ get_where_subquery(ref('stg_nhl__players')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "unique_stg_nhl__players_stg_nhl__players_id", "resource_type": "test", "package_name": "nhl_data", "path": "unique_stg_nhl__players_stg_nhl__players_id.sql", "original_file_path": "models/staging/stg_nhl__players.yml", "unique_id": "test.nhl_data.unique_stg_nhl__players_stg_nhl__players_id.a676defad4", "fqn": ["nhl_data", "staging", "unique_stg_nhl__players_stg_nhl__players_id"], "alias": "unique_stg_nhl__players_stg_nhl__players_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.4831548, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_nhl__players", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.stg_nhl__players"]}, "compiled_path": "target/compiled/nhl_data/models/staging/stg_nhl__players.yml/unique_stg_nhl__players_stg_nhl__players_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select stg_nhl__players_id as unique_field\n  from `nhl-breakouts`.`github`.`stg_nhl__players`\n  where stg_nhl__players_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "stg_nhl__players_id", "file_key_name": "models.stg_nhl__players", "attached_node": "model.nhl_data.stg_nhl__players"}, "test.nhl_data.not_null_stg_nhl__players_stg_nhl__players_id.cf9bfc0f93": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "stg_nhl__players_id", "model": "{{ get_where_subquery(ref('stg_nhl__players')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "not_null_stg_nhl__players_stg_nhl__players_id", "resource_type": "test", "package_name": "nhl_data", "path": "not_null_stg_nhl__players_stg_nhl__players_id.sql", "original_file_path": "models/staging/stg_nhl__players.yml", "unique_id": "test.nhl_data.not_null_stg_nhl__players_stg_nhl__players_id.cf9bfc0f93", "fqn": ["nhl_data", "staging", "not_null_stg_nhl__players_stg_nhl__players_id"], "alias": "not_null_stg_nhl__players_stg_nhl__players_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.485608, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_nhl__players", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.stg_nhl__players"]}, "compiled_path": "target/compiled/nhl_data/models/staging/stg_nhl__players.yml/not_null_stg_nhl__players_stg_nhl__players_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect stg_nhl__players_id\nfrom `nhl-breakouts`.`github`.`stg_nhl__players`\nwhere stg_nhl__players_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "stg_nhl__players_id", "file_key_name": "models.stg_nhl__players", "attached_node": "model.nhl_data.stg_nhl__players"}, "test.nhl_data.not_null_stg_nhl__players_player_id.f9c1dc568f": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "player_id", "model": "{{ get_where_subquery(ref('stg_nhl__players')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "not_null_stg_nhl__players_player_id", "resource_type": "test", "package_name": "nhl_data", "path": "not_null_stg_nhl__players_player_id.sql", "original_file_path": "models/staging/stg_nhl__players.yml", "unique_id": "test.nhl_data.not_null_stg_nhl__players_player_id.f9c1dc568f", "fqn": ["nhl_data", "staging", "not_null_stg_nhl__players_player_id"], "alias": "not_null_stg_nhl__players_player_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.487791, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_nhl__players", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.stg_nhl__players"]}, "compiled_path": "target/compiled/nhl_data/models/staging/stg_nhl__players.yml/not_null_stg_nhl__players_player_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect player_id\nfrom `nhl-breakouts`.`github`.`stg_nhl__players`\nwhere player_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "player_id", "file_key_name": "models.stg_nhl__players", "attached_node": "model.nhl_data.stg_nhl__players"}, "test.nhl_data.unique_stg_nhl__draft_stg_nhl__draft_id.e0b1a661b5": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "stg_nhl__draft_id", "model": "{{ get_where_subquery(ref('stg_nhl__draft')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "unique_stg_nhl__draft_stg_nhl__draft_id", "resource_type": "test", "package_name": "nhl_data", "path": "unique_stg_nhl__draft_stg_nhl__draft_id.sql", "original_file_path": "models/staging/stg_nhl__draft.yml", "unique_id": "test.nhl_data.unique_stg_nhl__draft_stg_nhl__draft_id.e0b1a661b5", "fqn": ["nhl_data", "staging", "unique_stg_nhl__draft_stg_nhl__draft_id"], "alias": "unique_stg_nhl__draft_stg_nhl__draft_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.4962847, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_nhl__draft", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.stg_nhl__draft"]}, "compiled_path": "target/compiled/nhl_data/models/staging/stg_nhl__draft.yml/unique_stg_nhl__draft_stg_nhl__draft_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select stg_nhl__draft_id as unique_field\n  from `nhl-breakouts`.`github`.`stg_nhl__draft`\n  where stg_nhl__draft_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "stg_nhl__draft_id", "file_key_name": "models.stg_nhl__draft", "attached_node": "model.nhl_data.stg_nhl__draft"}, "test.nhl_data.not_null_stg_nhl__draft_stg_nhl__draft_id.b677065bc5": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "stg_nhl__draft_id", "model": "{{ get_where_subquery(ref('stg_nhl__draft')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "not_null_stg_nhl__draft_stg_nhl__draft_id", "resource_type": "test", "package_name": "nhl_data", "path": "not_null_stg_nhl__draft_stg_nhl__draft_id.sql", "original_file_path": "models/staging/stg_nhl__draft.yml", "unique_id": "test.nhl_data.not_null_stg_nhl__draft_stg_nhl__draft_id.b677065bc5", "fqn": ["nhl_data", "staging", "not_null_stg_nhl__draft_stg_nhl__draft_id"], "alias": "not_null_stg_nhl__draft_stg_nhl__draft_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.4984355, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_nhl__draft", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.stg_nhl__draft"]}, "compiled_path": "target/compiled/nhl_data/models/staging/stg_nhl__draft.yml/not_null_stg_nhl__draft_stg_nhl__draft_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect stg_nhl__draft_id\nfrom `nhl-breakouts`.`github`.`stg_nhl__draft`\nwhere stg_nhl__draft_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "stg_nhl__draft_id", "file_key_name": "models.stg_nhl__draft", "attached_node": "model.nhl_data.stg_nhl__draft"}, "test.nhl_data.unique_stg_nhl__linescore_stg_nhl__linescore_id.ada282fc78": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "stg_nhl__linescore_id", "model": "{{ get_where_subquery(ref('stg_nhl__linescore')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "unique_stg_nhl__linescore_stg_nhl__linescore_id", "resource_type": "test", "package_name": "nhl_data", "path": "unique_stg_nhl__linescore_stg_nhl__linescore_id.sql", "original_file_path": "models/staging/stg_nhl__linescore.yml", "unique_id": "test.nhl_data.unique_stg_nhl__linescore_stg_nhl__linescore_id.ada282fc78", "fqn": ["nhl_data", "staging", "unique_stg_nhl__linescore_stg_nhl__linescore_id"], "alias": "unique_stg_nhl__linescore_stg_nhl__linescore_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.507278, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_nhl__linescore", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.stg_nhl__linescore"]}, "compiled_path": "target/compiled/nhl_data/models/staging/stg_nhl__linescore.yml/unique_stg_nhl__linescore_stg_nhl__linescore_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select stg_nhl__linescore_id as unique_field\n  from `nhl-breakouts`.`github`.`stg_nhl__linescore`\n  where stg_nhl__linescore_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "stg_nhl__linescore_id", "file_key_name": "models.stg_nhl__linescore", "attached_node": "model.nhl_data.stg_nhl__linescore"}, "test.nhl_data.not_null_stg_nhl__linescore_stg_nhl__linescore_id.e449d10122": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "stg_nhl__linescore_id", "model": "{{ get_where_subquery(ref('stg_nhl__linescore')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "not_null_stg_nhl__linescore_stg_nhl__linescore_id", "resource_type": "test", "package_name": "nhl_data", "path": "not_null_stg_nhl__linescore_stg_nhl__linescore_id.sql", "original_file_path": "models/staging/stg_nhl__linescore.yml", "unique_id": "test.nhl_data.not_null_stg_nhl__linescore_stg_nhl__linescore_id.e449d10122", "fqn": ["nhl_data", "staging", "not_null_stg_nhl__linescore_stg_nhl__linescore_id"], "alias": "not_null_stg_nhl__linescore_stg_nhl__linescore_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.5094357, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_nhl__linescore", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.stg_nhl__linescore"]}, "compiled_path": "target/compiled/nhl_data/models/staging/stg_nhl__linescore.yml/not_null_stg_nhl__linescore_stg_nhl__linescore_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect stg_nhl__linescore_id\nfrom `nhl-breakouts`.`github`.`stg_nhl__linescore`\nwhere stg_nhl__linescore_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "stg_nhl__linescore_id", "file_key_name": "models.stg_nhl__linescore", "attached_node": "model.nhl_data.stg_nhl__linescore"}, "test.nhl_data.accepted_values_stg_nhl__linescore_game_winning_team_type__True__Home__Away__Undetermined.84a73915f6": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["Home", "Away", "Undetermined"], "quote": true, "column_name": "game_winning_team_type", "model": "{{ get_where_subquery(ref('stg_nhl__linescore')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "accepted_values_stg_nhl__linescore_game_winning_team_type__True__Home__Away__Undetermined", "resource_type": "test", "package_name": "nhl_data", "path": "accepted_values_stg_nhl__lines_20de280a80ac853c1222a674fc8c7f84.sql", "original_file_path": "models/staging/stg_nhl__linescore.yml", "unique_id": "test.nhl_data.accepted_values_stg_nhl__linescore_game_winning_team_type__True__Home__Away__Undetermined.84a73915f6", "fqn": ["nhl_data", "staging", "accepted_values_stg_nhl__linescore_game_winning_team_type__True__Home__Away__Undetermined"], "alias": "accepted_values_stg_nhl__lines_20de280a80ac853c1222a674fc8c7f84", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_stg_nhl__lines_20de280a80ac853c1222a674fc8c7f84", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_stg_nhl__lines_20de280a80ac853c1222a674fc8c7f84"}, "created_at": 1695581342.512172, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_stg_nhl__lines_20de280a80ac853c1222a674fc8c7f84\") }}", "language": "sql", "refs": [{"name": "stg_nhl__linescore", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.stg_nhl__linescore"]}, "compiled_path": "target/compiled/nhl_data/models/staging/stg_nhl__linescore.yml/accepted_values_stg_nhl__lines_20de280a80ac853c1222a674fc8c7f84.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        game_winning_team_type as value_field,\n        count(*) as n_records\n\n    from `nhl-breakouts`.`github`.`stg_nhl__linescore`\n    group by game_winning_team_type\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Home','Away','Undetermined'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "game_winning_team_type", "file_key_name": "models.stg_nhl__linescore", "attached_node": "model.nhl_data.stg_nhl__linescore"}, "test.nhl_data.unique_stg_nhl__conferences_stg_nhl__conferences_id.894c9c38c2": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "stg_nhl__conferences_id", "model": "{{ get_where_subquery(ref('stg_nhl__conferences')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "unique_stg_nhl__conferences_stg_nhl__conferences_id", "resource_type": "test", "package_name": "nhl_data", "path": "unique_stg_nhl__conferences_stg_nhl__conferences_id.sql", "original_file_path": "models/staging/stg_nhl__conferences.yml", "unique_id": "test.nhl_data.unique_stg_nhl__conferences_stg_nhl__conferences_id.894c9c38c2", "fqn": ["nhl_data", "staging", "unique_stg_nhl__conferences_stg_nhl__conferences_id"], "alias": "unique_stg_nhl__conferences_stg_nhl__conferences_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.5328524, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_nhl__conferences", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.stg_nhl__conferences"]}, "compiled_path": "target/compiled/nhl_data/models/staging/stg_nhl__conferences.yml/unique_stg_nhl__conferences_stg_nhl__conferences_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select stg_nhl__conferences_id as unique_field\n  from `nhl-breakouts`.`github`.`stg_nhl__conferences`\n  where stg_nhl__conferences_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "stg_nhl__conferences_id", "file_key_name": "models.stg_nhl__conferences", "attached_node": "model.nhl_data.stg_nhl__conferences"}, "test.nhl_data.not_null_stg_nhl__conferences_stg_nhl__conferences_id.a13a757e3c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "stg_nhl__conferences_id", "model": "{{ get_where_subquery(ref('stg_nhl__conferences')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "not_null_stg_nhl__conferences_stg_nhl__conferences_id", "resource_type": "test", "package_name": "nhl_data", "path": "not_null_stg_nhl__conferences_stg_nhl__conferences_id.sql", "original_file_path": "models/staging/stg_nhl__conferences.yml", "unique_id": "test.nhl_data.not_null_stg_nhl__conferences_stg_nhl__conferences_id.a13a757e3c", "fqn": ["nhl_data", "staging", "not_null_stg_nhl__conferences_stg_nhl__conferences_id"], "alias": "not_null_stg_nhl__conferences_stg_nhl__conferences_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.5353718, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_nhl__conferences", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.stg_nhl__conferences"]}, "compiled_path": "target/compiled/nhl_data/models/staging/stg_nhl__conferences.yml/not_null_stg_nhl__conferences_stg_nhl__conferences_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect stg_nhl__conferences_id\nfrom `nhl-breakouts`.`github`.`stg_nhl__conferences`\nwhere stg_nhl__conferences_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "stg_nhl__conferences_id", "file_key_name": "models.stg_nhl__conferences", "attached_node": "model.nhl_data.stg_nhl__conferences"}, "test.nhl_data.unique_stg_nhl__conferences_conference_id.31d27aa7cd": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "conference_id", "model": "{{ get_where_subquery(ref('stg_nhl__conferences')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "unique_stg_nhl__conferences_conference_id", "resource_type": "test", "package_name": "nhl_data", "path": "unique_stg_nhl__conferences_conference_id.sql", "original_file_path": "models/staging/stg_nhl__conferences.yml", "unique_id": "test.nhl_data.unique_stg_nhl__conferences_conference_id.31d27aa7cd", "fqn": ["nhl_data", "staging", "unique_stg_nhl__conferences_conference_id"], "alias": "unique_stg_nhl__conferences_conference_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.5374885, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_nhl__conferences", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.stg_nhl__conferences"]}, "compiled_path": "target/compiled/nhl_data/models/staging/stg_nhl__conferences.yml/unique_stg_nhl__conferences_conference_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select conference_id as unique_field\n  from `nhl-breakouts`.`github`.`stg_nhl__conferences`\n  where conference_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "conference_id", "file_key_name": "models.stg_nhl__conferences", "attached_node": "model.nhl_data.stg_nhl__conferences"}, "test.nhl_data.not_null_stg_nhl__conferences_conference_id.5900814b75": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "conference_id", "model": "{{ get_where_subquery(ref('stg_nhl__conferences')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "not_null_stg_nhl__conferences_conference_id", "resource_type": "test", "package_name": "nhl_data", "path": "not_null_stg_nhl__conferences_conference_id.sql", "original_file_path": "models/staging/stg_nhl__conferences.yml", "unique_id": "test.nhl_data.not_null_stg_nhl__conferences_conference_id.5900814b75", "fqn": ["nhl_data", "staging", "not_null_stg_nhl__conferences_conference_id"], "alias": "not_null_stg_nhl__conferences_conference_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.5395489, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_nhl__conferences", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.stg_nhl__conferences"]}, "compiled_path": "target/compiled/nhl_data/models/staging/stg_nhl__conferences.yml/not_null_stg_nhl__conferences_conference_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect conference_id\nfrom `nhl-breakouts`.`github`.`stg_nhl__conferences`\nwhere conference_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "conference_id", "file_key_name": "models.stg_nhl__conferences", "attached_node": "model.nhl_data.stg_nhl__conferences"}, "test.nhl_data.unique_stg_nhl__live_plays_location_play_id.410d0be44d": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "play_id", "model": "{{ get_where_subquery(ref('stg_nhl__live_plays_location')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "unique_stg_nhl__live_plays_location_play_id", "resource_type": "test", "package_name": "nhl_data", "path": "unique_stg_nhl__live_plays_location_play_id.sql", "original_file_path": "models/staging/stg_nhl__live_plays_location.yml", "unique_id": "test.nhl_data.unique_stg_nhl__live_plays_location_play_id.410d0be44d", "fqn": ["nhl_data", "staging", "unique_stg_nhl__live_plays_location_play_id"], "alias": "unique_stg_nhl__live_plays_location_play_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.5476978, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_nhl__live_plays_location", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.stg_nhl__live_plays_location"]}, "compiled_path": "target/compiled/nhl_data/models/staging/stg_nhl__live_plays_location.yml/unique_stg_nhl__live_plays_location_play_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select play_id as unique_field\n  from `nhl-breakouts`.`github`.`stg_nhl__live_plays_location`\n  where play_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "play_id", "file_key_name": "models.stg_nhl__live_plays_location", "attached_node": "model.nhl_data.stg_nhl__live_plays_location"}, "test.nhl_data.not_null_stg_nhl__live_plays_location_play_id.6cdb35d9ee": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "play_id", "model": "{{ get_where_subquery(ref('stg_nhl__live_plays_location')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "not_null_stg_nhl__live_plays_location_play_id", "resource_type": "test", "package_name": "nhl_data", "path": "not_null_stg_nhl__live_plays_location_play_id.sql", "original_file_path": "models/staging/stg_nhl__live_plays_location.yml", "unique_id": "test.nhl_data.not_null_stg_nhl__live_plays_location_play_id.6cdb35d9ee", "fqn": ["nhl_data", "staging", "not_null_stg_nhl__live_plays_location_play_id"], "alias": "not_null_stg_nhl__live_plays_location_play_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.5498328, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_nhl__live_plays_location", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.stg_nhl__live_plays_location"]}, "compiled_path": "target/compiled/nhl_data/models/staging/stg_nhl__live_plays_location.yml/not_null_stg_nhl__live_plays_location_play_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect play_id\nfrom `nhl-breakouts`.`github`.`stg_nhl__live_plays_location`\nwhere play_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "play_id", "file_key_name": "models.stg_nhl__live_plays_location", "attached_node": "model.nhl_data.stg_nhl__live_plays_location"}, "test.nhl_data.unique_stg_nhl__divisions_stg_nhl__divisions_id.c441593bdd": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "stg_nhl__divisions_id", "model": "{{ get_where_subquery(ref('stg_nhl__divisions')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "unique_stg_nhl__divisions_stg_nhl__divisions_id", "resource_type": "test", "package_name": "nhl_data", "path": "unique_stg_nhl__divisions_stg_nhl__divisions_id.sql", "original_file_path": "models/staging/stg_nhl__divisions.yml", "unique_id": "test.nhl_data.unique_stg_nhl__divisions_stg_nhl__divisions_id.c441593bdd", "fqn": ["nhl_data", "staging", "unique_stg_nhl__divisions_stg_nhl__divisions_id"], "alias": "unique_stg_nhl__divisions_stg_nhl__divisions_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.5561905, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_nhl__divisions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.stg_nhl__divisions"]}, "compiled_path": "target/compiled/nhl_data/models/staging/stg_nhl__divisions.yml/unique_stg_nhl__divisions_stg_nhl__divisions_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select stg_nhl__divisions_id as unique_field\n  from `nhl-breakouts`.`github`.`stg_nhl__divisions`\n  where stg_nhl__divisions_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "stg_nhl__divisions_id", "file_key_name": "models.stg_nhl__divisions", "attached_node": "model.nhl_data.stg_nhl__divisions"}, "test.nhl_data.not_null_stg_nhl__divisions_stg_nhl__divisions_id.09bf3b6736": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "stg_nhl__divisions_id", "model": "{{ get_where_subquery(ref('stg_nhl__divisions')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "not_null_stg_nhl__divisions_stg_nhl__divisions_id", "resource_type": "test", "package_name": "nhl_data", "path": "not_null_stg_nhl__divisions_stg_nhl__divisions_id.sql", "original_file_path": "models/staging/stg_nhl__divisions.yml", "unique_id": "test.nhl_data.not_null_stg_nhl__divisions_stg_nhl__divisions_id.09bf3b6736", "fqn": ["nhl_data", "staging", "not_null_stg_nhl__divisions_stg_nhl__divisions_id"], "alias": "not_null_stg_nhl__divisions_stg_nhl__divisions_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.5583007, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_nhl__divisions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.stg_nhl__divisions"]}, "compiled_path": "target/compiled/nhl_data/models/staging/stg_nhl__divisions.yml/not_null_stg_nhl__divisions_stg_nhl__divisions_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect stg_nhl__divisions_id\nfrom `nhl-breakouts`.`github`.`stg_nhl__divisions`\nwhere stg_nhl__divisions_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "stg_nhl__divisions_id", "file_key_name": "models.stg_nhl__divisions", "attached_node": "model.nhl_data.stg_nhl__divisions"}, "test.nhl_data.unique_stg_nhl__divisions_division_id.765d509a33": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "division_id", "model": "{{ get_where_subquery(ref('stg_nhl__divisions')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "unique_stg_nhl__divisions_division_id", "resource_type": "test", "package_name": "nhl_data", "path": "unique_stg_nhl__divisions_division_id.sql", "original_file_path": "models/staging/stg_nhl__divisions.yml", "unique_id": "test.nhl_data.unique_stg_nhl__divisions_division_id.765d509a33", "fqn": ["nhl_data", "staging", "unique_stg_nhl__divisions_division_id"], "alias": "unique_stg_nhl__divisions_division_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.56071, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_nhl__divisions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.stg_nhl__divisions"]}, "compiled_path": "target/compiled/nhl_data/models/staging/stg_nhl__divisions.yml/unique_stg_nhl__divisions_division_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select division_id as unique_field\n  from `nhl-breakouts`.`github`.`stg_nhl__divisions`\n  where division_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "division_id", "file_key_name": "models.stg_nhl__divisions", "attached_node": "model.nhl_data.stg_nhl__divisions"}, "test.nhl_data.not_null_stg_nhl__divisions_division_id.e799976dcb": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "division_id", "model": "{{ get_where_subquery(ref('stg_nhl__divisions')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "not_null_stg_nhl__divisions_division_id", "resource_type": "test", "package_name": "nhl_data", "path": "not_null_stg_nhl__divisions_division_id.sql", "original_file_path": "models/staging/stg_nhl__divisions.yml", "unique_id": "test.nhl_data.not_null_stg_nhl__divisions_division_id.e799976dcb", "fqn": ["nhl_data", "staging", "not_null_stg_nhl__divisions_division_id"], "alias": "not_null_stg_nhl__divisions_division_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.5627756, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_nhl__divisions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.stg_nhl__divisions"]}, "compiled_path": "target/compiled/nhl_data/models/staging/stg_nhl__divisions.yml/not_null_stg_nhl__divisions_division_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect division_id\nfrom `nhl-breakouts`.`github`.`stg_nhl__divisions`\nwhere division_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "division_id", "file_key_name": "models.stg_nhl__divisions", "attached_node": "model.nhl_data.stg_nhl__divisions"}, "test.nhl_data.unique_stg_nhl__xg_stg_nhl__xg_id.807576794f": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "stg_nhl__xg_id", "model": "{{ get_where_subquery(ref('stg_nhl__xg')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "unique_stg_nhl__xg_stg_nhl__xg_id", "resource_type": "test", "package_name": "nhl_data", "path": "unique_stg_nhl__xg_stg_nhl__xg_id.sql", "original_file_path": "models/staging/stg_nhl__xg.yml", "unique_id": "test.nhl_data.unique_stg_nhl__xg_stg_nhl__xg_id.807576794f", "fqn": ["nhl_data", "staging", "unique_stg_nhl__xg_stg_nhl__xg_id"], "alias": "unique_stg_nhl__xg_stg_nhl__xg_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.589226, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_nhl__xg", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.stg_nhl__xg"]}, "compiled_path": "target/compiled/nhl_data/models/staging/stg_nhl__xg.yml/unique_stg_nhl__xg_stg_nhl__xg_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select stg_nhl__xg_id as unique_field\n  from `nhl-breakouts`.`github`.`stg_nhl__xg`\n  where stg_nhl__xg_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "stg_nhl__xg_id", "file_key_name": "models.stg_nhl__xg", "attached_node": "model.nhl_data.stg_nhl__xg"}, "test.nhl_data.not_null_stg_nhl__xg_stg_nhl__xg_id.0d229c8dce": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "stg_nhl__xg_id", "model": "{{ get_where_subquery(ref('stg_nhl__xg')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "not_null_stg_nhl__xg_stg_nhl__xg_id", "resource_type": "test", "package_name": "nhl_data", "path": "not_null_stg_nhl__xg_stg_nhl__xg_id.sql", "original_file_path": "models/staging/stg_nhl__xg.yml", "unique_id": "test.nhl_data.not_null_stg_nhl__xg_stg_nhl__xg_id.0d229c8dce", "fqn": ["nhl_data", "staging", "not_null_stg_nhl__xg_stg_nhl__xg_id"], "alias": "not_null_stg_nhl__xg_stg_nhl__xg_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.591483, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_nhl__xg", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.stg_nhl__xg"]}, "compiled_path": "target/compiled/nhl_data/models/staging/stg_nhl__xg.yml/not_null_stg_nhl__xg_stg_nhl__xg_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect stg_nhl__xg_id\nfrom `nhl-breakouts`.`github`.`stg_nhl__xg`\nwhere stg_nhl__xg_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "stg_nhl__xg_id", "file_key_name": "models.stg_nhl__xg", "attached_node": "model.nhl_data.stg_nhl__xg"}, "test.nhl_data.unique_stg_nhl__xg_id_play_id.3694ca2347": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "id_play_id", "model": "{{ get_where_subquery(ref('stg_nhl__xg')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "unique_stg_nhl__xg_id_play_id", "resource_type": "test", "package_name": "nhl_data", "path": "unique_stg_nhl__xg_id_play_id.sql", "original_file_path": "models/staging/stg_nhl__xg.yml", "unique_id": "test.nhl_data.unique_stg_nhl__xg_id_play_id.3694ca2347", "fqn": ["nhl_data", "staging", "unique_stg_nhl__xg_id_play_id"], "alias": "unique_stg_nhl__xg_id_play_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.5936253, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_nhl__xg", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.stg_nhl__xg"]}, "compiled_path": "target/compiled/nhl_data/models/staging/stg_nhl__xg.yml/unique_stg_nhl__xg_id_play_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select id_play_id as unique_field\n  from `nhl-breakouts`.`github`.`stg_nhl__xg`\n  where id_play_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "id_play_id", "file_key_name": "models.stg_nhl__xg", "attached_node": "model.nhl_data.stg_nhl__xg"}, "test.nhl_data.not_null_stg_nhl__xg_id_play_id.90d58e4acc": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id_play_id", "model": "{{ get_where_subquery(ref('stg_nhl__xg')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "not_null_stg_nhl__xg_id_play_id", "resource_type": "test", "package_name": "nhl_data", "path": "not_null_stg_nhl__xg_id_play_id.sql", "original_file_path": "models/staging/stg_nhl__xg.yml", "unique_id": "test.nhl_data.not_null_stg_nhl__xg_id_play_id.90d58e4acc", "fqn": ["nhl_data", "staging", "not_null_stg_nhl__xg_id_play_id"], "alias": "not_null_stg_nhl__xg_id_play_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.5957189, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_nhl__xg", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.stg_nhl__xg"]}, "compiled_path": "target/compiled/nhl_data/models/staging/stg_nhl__xg.yml/not_null_stg_nhl__xg_id_play_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id_play_id\nfrom `nhl-breakouts`.`github`.`stg_nhl__xg`\nwhere id_play_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "id_play_id", "file_key_name": "models.stg_nhl__xg", "attached_node": "model.nhl_data.stg_nhl__xg"}, "test.nhl_data.unique_stg_nhl__schedule_stg_nhl__schedule_id.02ca3a9680": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "stg_nhl__schedule_id", "model": "{{ get_where_subquery(ref('stg_nhl__schedule')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "unique_stg_nhl__schedule_stg_nhl__schedule_id", "resource_type": "test", "package_name": "nhl_data", "path": "unique_stg_nhl__schedule_stg_nhl__schedule_id.sql", "original_file_path": "models/staging/stg_nhl__schedule.yml", "unique_id": "test.nhl_data.unique_stg_nhl__schedule_stg_nhl__schedule_id.02ca3a9680", "fqn": ["nhl_data", "staging", "unique_stg_nhl__schedule_stg_nhl__schedule_id"], "alias": "unique_stg_nhl__schedule_stg_nhl__schedule_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.6311295, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_nhl__schedule", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.stg_nhl__schedule"]}, "compiled_path": "target/compiled/nhl_data/models/staging/stg_nhl__schedule.yml/unique_stg_nhl__schedule_stg_nhl__schedule_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select stg_nhl__schedule_id as unique_field\n  from `nhl-breakouts`.`github`.`stg_nhl__schedule`\n  where stg_nhl__schedule_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "stg_nhl__schedule_id", "file_key_name": "models.stg_nhl__schedule", "attached_node": "model.nhl_data.stg_nhl__schedule"}, "test.nhl_data.not_null_stg_nhl__schedule_stg_nhl__schedule_id.22069ed10b": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "stg_nhl__schedule_id", "model": "{{ get_where_subquery(ref('stg_nhl__schedule')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "not_null_stg_nhl__schedule_stg_nhl__schedule_id", "resource_type": "test", "package_name": "nhl_data", "path": "not_null_stg_nhl__schedule_stg_nhl__schedule_id.sql", "original_file_path": "models/staging/stg_nhl__schedule.yml", "unique_id": "test.nhl_data.not_null_stg_nhl__schedule_stg_nhl__schedule_id.22069ed10b", "fqn": ["nhl_data", "staging", "not_null_stg_nhl__schedule_stg_nhl__schedule_id"], "alias": "not_null_stg_nhl__schedule_stg_nhl__schedule_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.6336157, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_nhl__schedule", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.stg_nhl__schedule"]}, "compiled_path": "target/compiled/nhl_data/models/staging/stg_nhl__schedule.yml/not_null_stg_nhl__schedule_stg_nhl__schedule_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect stg_nhl__schedule_id\nfrom `nhl-breakouts`.`github`.`stg_nhl__schedule`\nwhere stg_nhl__schedule_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "stg_nhl__schedule_id", "file_key_name": "models.stg_nhl__schedule", "attached_node": "model.nhl_data.stg_nhl__schedule"}, "test.nhl_data.not_null_stg_nhl__schedule_game_id.5980307620": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "game_id", "model": "{{ get_where_subquery(ref('stg_nhl__schedule')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "not_null_stg_nhl__schedule_game_id", "resource_type": "test", "package_name": "nhl_data", "path": "not_null_stg_nhl__schedule_game_id.sql", "original_file_path": "models/staging/stg_nhl__schedule.yml", "unique_id": "test.nhl_data.not_null_stg_nhl__schedule_game_id.5980307620", "fqn": ["nhl_data", "staging", "not_null_stg_nhl__schedule_game_id"], "alias": "not_null_stg_nhl__schedule_game_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.6357658, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_nhl__schedule", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.stg_nhl__schedule"]}, "compiled_path": "target/compiled/nhl_data/models/staging/stg_nhl__schedule.yml/not_null_stg_nhl__schedule_game_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect game_id\nfrom `nhl-breakouts`.`github`.`stg_nhl__schedule`\nwhere game_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "game_id", "file_key_name": "models.stg_nhl__schedule", "attached_node": "model.nhl_data.stg_nhl__schedule"}, "test.nhl_data.unique_stg_nhl__schedule_game_id.a33bfba589": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "game_id", "model": "{{ get_where_subquery(ref('stg_nhl__schedule')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "unique_stg_nhl__schedule_game_id", "resource_type": "test", "package_name": "nhl_data", "path": "unique_stg_nhl__schedule_game_id.sql", "original_file_path": "models/staging/stg_nhl__schedule.yml", "unique_id": "test.nhl_data.unique_stg_nhl__schedule_game_id.a33bfba589", "fqn": ["nhl_data", "staging", "unique_stg_nhl__schedule_game_id"], "alias": "unique_stg_nhl__schedule_game_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.6378555, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_nhl__schedule", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.stg_nhl__schedule"]}, "compiled_path": "target/compiled/nhl_data/models/staging/stg_nhl__schedule.yml/unique_stg_nhl__schedule_game_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select game_id as unique_field\n  from `nhl-breakouts`.`github`.`stg_nhl__schedule`\n  where game_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "game_id", "file_key_name": "models.stg_nhl__schedule", "attached_node": "model.nhl_data.stg_nhl__schedule"}, "test.nhl_data.not_null_stg_nhl__schedule_season_id.89ee97b591": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "season_id", "model": "{{ get_where_subquery(ref('stg_nhl__schedule')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "not_null_stg_nhl__schedule_season_id", "resource_type": "test", "package_name": "nhl_data", "path": "not_null_stg_nhl__schedule_season_id.sql", "original_file_path": "models/staging/stg_nhl__schedule.yml", "unique_id": "test.nhl_data.not_null_stg_nhl__schedule_season_id.89ee97b591", "fqn": ["nhl_data", "staging", "not_null_stg_nhl__schedule_season_id"], "alias": "not_null_stg_nhl__schedule_season_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.640288, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_nhl__schedule", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.stg_nhl__schedule"]}, "compiled_path": "target/compiled/nhl_data/models/staging/stg_nhl__schedule.yml/not_null_stg_nhl__schedule_season_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect season_id\nfrom `nhl-breakouts`.`github`.`stg_nhl__schedule`\nwhere season_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "season_id", "file_key_name": "models.stg_nhl__schedule", "attached_node": "model.nhl_data.stg_nhl__schedule"}, "test.nhl_data.not_null_stg_nhl__schedule_away_team_id.8366912c5b": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "away_team_id", "model": "{{ get_where_subquery(ref('stg_nhl__schedule')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "not_null_stg_nhl__schedule_away_team_id", "resource_type": "test", "package_name": "nhl_data", "path": "not_null_stg_nhl__schedule_away_team_id.sql", "original_file_path": "models/staging/stg_nhl__schedule.yml", "unique_id": "test.nhl_data.not_null_stg_nhl__schedule_away_team_id.8366912c5b", "fqn": ["nhl_data", "staging", "not_null_stg_nhl__schedule_away_team_id"], "alias": "not_null_stg_nhl__schedule_away_team_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.642394, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_nhl__schedule", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.stg_nhl__schedule"]}, "compiled_path": "target/compiled/nhl_data/models/staging/stg_nhl__schedule.yml/not_null_stg_nhl__schedule_away_team_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect away_team_id\nfrom `nhl-breakouts`.`github`.`stg_nhl__schedule`\nwhere away_team_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "away_team_id", "file_key_name": "models.stg_nhl__schedule", "attached_node": "model.nhl_data.stg_nhl__schedule"}, "test.nhl_data.not_null_stg_nhl__schedule_home_team_id.f4f7114670": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "home_team_id", "model": "{{ get_where_subquery(ref('stg_nhl__schedule')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "not_null_stg_nhl__schedule_home_team_id", "resource_type": "test", "package_name": "nhl_data", "path": "not_null_stg_nhl__schedule_home_team_id.sql", "original_file_path": "models/staging/stg_nhl__schedule.yml", "unique_id": "test.nhl_data.not_null_stg_nhl__schedule_home_team_id.f4f7114670", "fqn": ["nhl_data", "staging", "not_null_stg_nhl__schedule_home_team_id"], "alias": "not_null_stg_nhl__schedule_home_team_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.6444774, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_nhl__schedule", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.stg_nhl__schedule"]}, "compiled_path": "target/compiled/nhl_data/models/staging/stg_nhl__schedule.yml/not_null_stg_nhl__schedule_home_team_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect home_team_id\nfrom `nhl-breakouts`.`github`.`stg_nhl__schedule`\nwhere home_team_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "home_team_id", "file_key_name": "models.stg_nhl__schedule", "attached_node": "model.nhl_data.stg_nhl__schedule"}, "test.nhl_data.unique_stg_nhl__rink_shooting_game_id.2c72f41593": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "game_id", "model": "{{ get_where_subquery(ref('stg_nhl__rink_shooting')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "unique_stg_nhl__rink_shooting_game_id", "resource_type": "test", "package_name": "nhl_data", "path": "unique_stg_nhl__rink_shooting_game_id.sql", "original_file_path": "models/staging/stg_nhl__rink_shooting.yml", "unique_id": "test.nhl_data.unique_stg_nhl__rink_shooting_game_id.2c72f41593", "fqn": ["nhl_data", "staging", "unique_stg_nhl__rink_shooting_game_id"], "alias": "unique_stg_nhl__rink_shooting_game_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.652135, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_nhl__rink_shooting", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.stg_nhl__rink_shooting"]}, "compiled_path": "target/compiled/nhl_data/models/staging/stg_nhl__rink_shooting.yml/unique_stg_nhl__rink_shooting_game_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select game_id as unique_field\n  from `nhl-breakouts`.`github`.`stg_nhl__rink_shooting`\n  where game_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "game_id", "file_key_name": "models.stg_nhl__rink_shooting", "attached_node": "model.nhl_data.stg_nhl__rink_shooting"}, "test.nhl_data.not_null_stg_nhl__rink_shooting_game_id.be3dbc1e85": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "game_id", "model": "{{ get_where_subquery(ref('stg_nhl__rink_shooting')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "not_null_stg_nhl__rink_shooting_game_id", "resource_type": "test", "package_name": "nhl_data", "path": "not_null_stg_nhl__rink_shooting_game_id.sql", "original_file_path": "models/staging/stg_nhl__rink_shooting.yml", "unique_id": "test.nhl_data.not_null_stg_nhl__rink_shooting_game_id.be3dbc1e85", "fqn": ["nhl_data", "staging", "not_null_stg_nhl__rink_shooting_game_id"], "alias": "not_null_stg_nhl__rink_shooting_game_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.6545231, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_nhl__rink_shooting", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.stg_nhl__rink_shooting"]}, "compiled_path": "target/compiled/nhl_data/models/staging/stg_nhl__rink_shooting.yml/not_null_stg_nhl__rink_shooting_game_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect game_id\nfrom `nhl-breakouts`.`github`.`stg_nhl__rink_shooting`\nwhere game_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "game_id", "file_key_name": "models.stg_nhl__rink_shooting", "attached_node": "model.nhl_data.stg_nhl__rink_shooting"}, "test.nhl_data.unique_stg_nhl__teams_stg_nhl__teams_id.b6f2cc8f8f": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "stg_nhl__teams_id", "model": "{{ get_where_subquery(ref('stg_nhl__teams')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "unique_stg_nhl__teams_stg_nhl__teams_id", "resource_type": "test", "package_name": "nhl_data", "path": "unique_stg_nhl__teams_stg_nhl__teams_id.sql", "original_file_path": "models/staging/stg_nhl__teams.yml", "unique_id": "test.nhl_data.unique_stg_nhl__teams_stg_nhl__teams_id.b6f2cc8f8f", "fqn": ["nhl_data", "staging", "unique_stg_nhl__teams_stg_nhl__teams_id"], "alias": "unique_stg_nhl__teams_stg_nhl__teams_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.6668363, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_nhl__teams", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.stg_nhl__teams"]}, "compiled_path": "target/compiled/nhl_data/models/staging/stg_nhl__teams.yml/unique_stg_nhl__teams_stg_nhl__teams_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select stg_nhl__teams_id as unique_field\n  from `nhl-breakouts`.`github`.`stg_nhl__teams`\n  where stg_nhl__teams_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "stg_nhl__teams_id", "file_key_name": "models.stg_nhl__teams", "attached_node": "model.nhl_data.stg_nhl__teams"}, "test.nhl_data.not_null_stg_nhl__teams_stg_nhl__teams_id.e03adc9f63": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "stg_nhl__teams_id", "model": "{{ get_where_subquery(ref('stg_nhl__teams')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "not_null_stg_nhl__teams_stg_nhl__teams_id", "resource_type": "test", "package_name": "nhl_data", "path": "not_null_stg_nhl__teams_stg_nhl__teams_id.sql", "original_file_path": "models/staging/stg_nhl__teams.yml", "unique_id": "test.nhl_data.not_null_stg_nhl__teams_stg_nhl__teams_id.e03adc9f63", "fqn": ["nhl_data", "staging", "not_null_stg_nhl__teams_stg_nhl__teams_id"], "alias": "not_null_stg_nhl__teams_stg_nhl__teams_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.6695118, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_nhl__teams", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.stg_nhl__teams"]}, "compiled_path": "target/compiled/nhl_data/models/staging/stg_nhl__teams.yml/not_null_stg_nhl__teams_stg_nhl__teams_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect stg_nhl__teams_id\nfrom `nhl-breakouts`.`github`.`stg_nhl__teams`\nwhere stg_nhl__teams_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "stg_nhl__teams_id", "file_key_name": "models.stg_nhl__teams", "attached_node": "model.nhl_data.stg_nhl__teams"}, "test.nhl_data.not_null_stg_nhl__teams_team_id.7c3a30af17": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "team_id", "model": "{{ get_where_subquery(ref('stg_nhl__teams')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "not_null_stg_nhl__teams_team_id", "resource_type": "test", "package_name": "nhl_data", "path": "not_null_stg_nhl__teams_team_id.sql", "original_file_path": "models/staging/stg_nhl__teams.yml", "unique_id": "test.nhl_data.not_null_stg_nhl__teams_team_id.7c3a30af17", "fqn": ["nhl_data", "staging", "not_null_stg_nhl__teams_team_id"], "alias": "not_null_stg_nhl__teams_team_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.671877, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_nhl__teams", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.stg_nhl__teams"]}, "compiled_path": "target/compiled/nhl_data/models/staging/stg_nhl__teams.yml/not_null_stg_nhl__teams_team_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect team_id\nfrom `nhl-breakouts`.`github`.`stg_nhl__teams`\nwhere team_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "team_id", "file_key_name": "models.stg_nhl__teams", "attached_node": "model.nhl_data.stg_nhl__teams"}, "test.nhl_data.unique_f_boxscore_team_boxscore_team_id.4861e1676d": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "boxscore_team_id", "model": "{{ get_where_subquery(ref('f_boxscore_team')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "unique_f_boxscore_team_boxscore_team_id", "resource_type": "test", "package_name": "nhl_data", "path": "unique_f_boxscore_team_boxscore_team_id.sql", "original_file_path": "models/analytics/intermediate/f_boxscore_team.yml", "unique_id": "test.nhl_data.unique_f_boxscore_team_boxscore_team_id.4861e1676d", "fqn": ["nhl_data", "analytics", "intermediate", "unique_f_boxscore_team_boxscore_team_id"], "alias": "unique_f_boxscore_team_boxscore_team_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.6778648, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "f_boxscore_team", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.f_boxscore_team"]}, "compiled_path": "target/compiled/nhl_data/models/analytics/intermediate/f_boxscore_team.yml/unique_f_boxscore_team_boxscore_team_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select boxscore_team_id as unique_field\n  from `nhl-breakouts`.`github`.`f_boxscore_team`\n  where boxscore_team_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "boxscore_team_id", "file_key_name": "models.f_boxscore_team", "attached_node": "model.nhl_data.f_boxscore_team"}, "test.nhl_data.not_null_f_boxscore_team_boxscore_team_id.e62d4c1299": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "boxscore_team_id", "model": "{{ get_where_subquery(ref('f_boxscore_team')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "not_null_f_boxscore_team_boxscore_team_id", "resource_type": "test", "package_name": "nhl_data", "path": "not_null_f_boxscore_team_boxscore_team_id.sql", "original_file_path": "models/analytics/intermediate/f_boxscore_team.yml", "unique_id": "test.nhl_data.not_null_f_boxscore_team_boxscore_team_id.e62d4c1299", "fqn": ["nhl_data", "analytics", "intermediate", "not_null_f_boxscore_team_boxscore_team_id"], "alias": "not_null_f_boxscore_team_boxscore_team_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.6807141, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "f_boxscore_team", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.f_boxscore_team"]}, "compiled_path": "target/compiled/nhl_data/models/analytics/intermediate/f_boxscore_team.yml/not_null_f_boxscore_team_boxscore_team_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect boxscore_team_id\nfrom `nhl-breakouts`.`github`.`f_boxscore_team`\nwhere boxscore_team_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "boxscore_team_id", "file_key_name": "models.f_boxscore_team", "attached_node": "model.nhl_data.f_boxscore_team"}, "test.nhl_data.unique_d_draft_prospects_draft_prospects_id.3bb3d156ed": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "draft_prospects_id", "model": "{{ get_where_subquery(ref('d_draft_prospects')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "unique_d_draft_prospects_draft_prospects_id", "resource_type": "test", "package_name": "nhl_data", "path": "unique_d_draft_prospects_draft_prospects_id.sql", "original_file_path": "models/analytics/intermediate/d_draft_prospects.yml", "unique_id": "test.nhl_data.unique_d_draft_prospects_draft_prospects_id.3bb3d156ed", "fqn": ["nhl_data", "analytics", "intermediate", "unique_d_draft_prospects_draft_prospects_id"], "alias": "unique_d_draft_prospects_draft_prospects_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.6860855, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "d_draft_prospects", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.d_draft_prospects"]}, "compiled_path": "target/compiled/nhl_data/models/analytics/intermediate/d_draft_prospects.yml/unique_d_draft_prospects_draft_prospects_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select draft_prospects_id as unique_field\n  from `nhl-breakouts`.`github`.`d_draft_prospects`\n  where draft_prospects_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "draft_prospects_id", "file_key_name": "models.d_draft_prospects", "attached_node": "model.nhl_data.d_draft_prospects"}, "test.nhl_data.not_null_d_draft_prospects_draft_prospects_id.97f60c1ad0": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "draft_prospects_id", "model": "{{ get_where_subquery(ref('d_draft_prospects')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "not_null_d_draft_prospects_draft_prospects_id", "resource_type": "test", "package_name": "nhl_data", "path": "not_null_d_draft_prospects_draft_prospects_id.sql", "original_file_path": "models/analytics/intermediate/d_draft_prospects.yml", "unique_id": "test.nhl_data.not_null_d_draft_prospects_draft_prospects_id.97f60c1ad0", "fqn": ["nhl_data", "analytics", "intermediate", "not_null_d_draft_prospects_draft_prospects_id"], "alias": "not_null_d_draft_prospects_draft_prospects_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.6888173, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "d_draft_prospects", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.d_draft_prospects"]}, "compiled_path": "target/compiled/nhl_data/models/analytics/intermediate/d_draft_prospects.yml/not_null_d_draft_prospects_draft_prospects_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect draft_prospects_id\nfrom `nhl-breakouts`.`github`.`d_draft_prospects`\nwhere draft_prospects_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "draft_prospects_id", "file_key_name": "models.d_draft_prospects", "attached_node": "model.nhl_data.d_draft_prospects"}, "test.nhl_data.not_null_d_draft_prospects_prospect_category_id.a27ca2b454": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "prospect_category_id", "model": "{{ get_where_subquery(ref('d_draft_prospects')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "not_null_d_draft_prospects_prospect_category_id", "resource_type": "test", "package_name": "nhl_data", "path": "not_null_d_draft_prospects_prospect_category_id.sql", "original_file_path": "models/analytics/intermediate/d_draft_prospects.yml", "unique_id": "test.nhl_data.not_null_d_draft_prospects_prospect_category_id.a27ca2b454", "fqn": ["nhl_data", "analytics", "intermediate", "not_null_d_draft_prospects_prospect_category_id"], "alias": "not_null_d_draft_prospects_prospect_category_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.6911693, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "d_draft_prospects", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.d_draft_prospects"]}, "compiled_path": "target/compiled/nhl_data/models/analytics/intermediate/d_draft_prospects.yml/not_null_d_draft_prospects_prospect_category_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect prospect_category_id\nfrom `nhl-breakouts`.`github`.`d_draft_prospects`\nwhere prospect_category_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "prospect_category_id", "file_key_name": "models.d_draft_prospects", "attached_node": "model.nhl_data.d_draft_prospects"}, "test.nhl_data.unique_d_schedule_schedule_id.5268ef07af": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "schedule_id", "model": "{{ get_where_subquery(ref('d_schedule')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "unique_d_schedule_schedule_id", "resource_type": "test", "package_name": "nhl_data", "path": "unique_d_schedule_schedule_id.sql", "original_file_path": "models/analytics/intermediate/d_schedule.yml", "unique_id": "test.nhl_data.unique_d_schedule_schedule_id.5268ef07af", "fqn": ["nhl_data", "analytics", "intermediate", "unique_d_schedule_schedule_id"], "alias": "unique_d_schedule_schedule_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.700259, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "d_schedule", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.d_schedule"]}, "compiled_path": "target/compiled/nhl_data/models/analytics/intermediate/d_schedule.yml/unique_d_schedule_schedule_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select schedule_id as unique_field\n  from `nhl-breakouts`.`github`.`d_schedule`\n  where schedule_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "schedule_id", "file_key_name": "models.d_schedule", "attached_node": "model.nhl_data.d_schedule"}, "test.nhl_data.not_null_d_schedule_schedule_id.05b7735a58": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "schedule_id", "model": "{{ get_where_subquery(ref('d_schedule')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "not_null_d_schedule_schedule_id", "resource_type": "test", "package_name": "nhl_data", "path": "not_null_d_schedule_schedule_id.sql", "original_file_path": "models/analytics/intermediate/d_schedule.yml", "unique_id": "test.nhl_data.not_null_d_schedule_schedule_id.05b7735a58", "fqn": ["nhl_data", "analytics", "intermediate", "not_null_d_schedule_schedule_id"], "alias": "not_null_d_schedule_schedule_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.702678, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "d_schedule", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.d_schedule"]}, "compiled_path": "target/compiled/nhl_data/models/analytics/intermediate/d_schedule.yml/not_null_d_schedule_schedule_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect schedule_id\nfrom `nhl-breakouts`.`github`.`d_schedule`\nwhere schedule_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "schedule_id", "file_key_name": "models.d_schedule", "attached_node": "model.nhl_data.d_schedule"}, "test.nhl_data.not_null_d_schedule_game_id.16aa7a404b": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "game_id", "model": "{{ get_where_subquery(ref('d_schedule')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "not_null_d_schedule_game_id", "resource_type": "test", "package_name": "nhl_data", "path": "not_null_d_schedule_game_id.sql", "original_file_path": "models/analytics/intermediate/d_schedule.yml", "unique_id": "test.nhl_data.not_null_d_schedule_game_id.16aa7a404b", "fqn": ["nhl_data", "analytics", "intermediate", "not_null_d_schedule_game_id"], "alias": "not_null_d_schedule_game_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.7050626, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "d_schedule", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.d_schedule"]}, "compiled_path": "target/compiled/nhl_data/models/analytics/intermediate/d_schedule.yml/not_null_d_schedule_game_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect game_id\nfrom `nhl-breakouts`.`github`.`d_schedule`\nwhere game_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "game_id", "file_key_name": "models.d_schedule", "attached_node": "model.nhl_data.d_schedule"}, "test.nhl_data.unique_d_schedule_game_id.195e8d1feb": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "game_id", "model": "{{ get_where_subquery(ref('d_schedule')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "unique_d_schedule_game_id", "resource_type": "test", "package_name": "nhl_data", "path": "unique_d_schedule_game_id.sql", "original_file_path": "models/analytics/intermediate/d_schedule.yml", "unique_id": "test.nhl_data.unique_d_schedule_game_id.195e8d1feb", "fqn": ["nhl_data", "analytics", "intermediate", "unique_d_schedule_game_id"], "alias": "unique_d_schedule_game_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.707405, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "d_schedule", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.d_schedule"]}, "compiled_path": "target/compiled/nhl_data/models/analytics/intermediate/d_schedule.yml/unique_d_schedule_game_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select game_id as unique_field\n  from `nhl-breakouts`.`github`.`d_schedule`\n  where game_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "game_id", "file_key_name": "models.d_schedule", "attached_node": "model.nhl_data.d_schedule"}, "test.nhl_data.not_null_d_schedule_season_id.231c1ee113": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "season_id", "model": "{{ get_where_subquery(ref('d_schedule')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "not_null_d_schedule_season_id", "resource_type": "test", "package_name": "nhl_data", "path": "not_null_d_schedule_season_id.sql", "original_file_path": "models/analytics/intermediate/d_schedule.yml", "unique_id": "test.nhl_data.not_null_d_schedule_season_id.231c1ee113", "fqn": ["nhl_data", "analytics", "intermediate", "not_null_d_schedule_season_id"], "alias": "not_null_d_schedule_season_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.7095103, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "d_schedule", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.d_schedule"]}, "compiled_path": "target/compiled/nhl_data/models/analytics/intermediate/d_schedule.yml/not_null_d_schedule_season_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect season_id\nfrom `nhl-breakouts`.`github`.`d_schedule`\nwhere season_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "season_id", "file_key_name": "models.d_schedule", "attached_node": "model.nhl_data.d_schedule"}, "test.nhl_data.not_null_d_schedule_away_team_id.a0c1750c24": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "away_team_id", "model": "{{ get_where_subquery(ref('d_schedule')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "not_null_d_schedule_away_team_id", "resource_type": "test", "package_name": "nhl_data", "path": "not_null_d_schedule_away_team_id.sql", "original_file_path": "models/analytics/intermediate/d_schedule.yml", "unique_id": "test.nhl_data.not_null_d_schedule_away_team_id.a0c1750c24", "fqn": ["nhl_data", "analytics", "intermediate", "not_null_d_schedule_away_team_id"], "alias": "not_null_d_schedule_away_team_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.711585, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "d_schedule", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.d_schedule"]}, "compiled_path": "target/compiled/nhl_data/models/analytics/intermediate/d_schedule.yml/not_null_d_schedule_away_team_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect away_team_id\nfrom `nhl-breakouts`.`github`.`d_schedule`\nwhere away_team_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "away_team_id", "file_key_name": "models.d_schedule", "attached_node": "model.nhl_data.d_schedule"}, "test.nhl_data.not_null_d_schedule_home_team_id.5bd88d400b": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "home_team_id", "model": "{{ get_where_subquery(ref('d_schedule')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "not_null_d_schedule_home_team_id", "resource_type": "test", "package_name": "nhl_data", "path": "not_null_d_schedule_home_team_id.sql", "original_file_path": "models/analytics/intermediate/d_schedule.yml", "unique_id": "test.nhl_data.not_null_d_schedule_home_team_id.5bd88d400b", "fqn": ["nhl_data", "analytics", "intermediate", "not_null_d_schedule_home_team_id"], "alias": "not_null_d_schedule_home_team_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.7137194, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "d_schedule", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.d_schedule"]}, "compiled_path": "target/compiled/nhl_data/models/analytics/intermediate/d_schedule.yml/not_null_d_schedule_home_team_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect home_team_id\nfrom `nhl-breakouts`.`github`.`d_schedule`\nwhere home_team_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "home_team_id", "file_key_name": "models.d_schedule", "attached_node": "model.nhl_data.d_schedule"}, "test.nhl_data.not_null_f_games_game_id.12c36fc40e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "game_id", "model": "{{ get_where_subquery(ref('f_games')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "not_null_f_games_game_id", "resource_type": "test", "package_name": "nhl_data", "path": "not_null_f_games_game_id.sql", "original_file_path": "models/analytics/intermediate/f_games.yml", "unique_id": "test.nhl_data.not_null_f_games_game_id.12c36fc40e", "fqn": ["nhl_data", "analytics", "intermediate", "not_null_f_games_game_id"], "alias": "not_null_f_games_game_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.7274172, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "f_games", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.f_games"]}, "compiled_path": "target/compiled/nhl_data/models/analytics/intermediate/f_games.yml/not_null_f_games_game_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect game_id\nfrom `nhl-breakouts`.`github`.`f_games`\nwhere game_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "game_id", "file_key_name": "models.f_games", "attached_node": "model.nhl_data.f_games"}, "test.nhl_data.unique_f_games_game_id.61c2bee3b0": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "game_id", "model": "{{ get_where_subquery(ref('f_games')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "unique_f_games_game_id", "resource_type": "test", "package_name": "nhl_data", "path": "unique_f_games_game_id.sql", "original_file_path": "models/analytics/intermediate/f_games.yml", "unique_id": "test.nhl_data.unique_f_games_game_id.61c2bee3b0", "fqn": ["nhl_data", "analytics", "intermediate", "unique_f_games_game_id"], "alias": "unique_f_games_game_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.7296886, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "f_games", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.f_games"]}, "compiled_path": "target/compiled/nhl_data/models/analytics/intermediate/f_games.yml/unique_f_games_game_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select game_id as unique_field\n  from `nhl-breakouts`.`github`.`f_games`\n  where game_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "game_id", "file_key_name": "models.f_games", "attached_node": "model.nhl_data.f_games"}, "test.nhl_data.unique_f_linescore_linescore_id.c88b3cc327": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "linescore_id", "model": "{{ get_where_subquery(ref('f_linescore')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "unique_f_linescore_linescore_id", "resource_type": "test", "package_name": "nhl_data", "path": "unique_f_linescore_linescore_id.sql", "original_file_path": "models/analytics/intermediate/f_linescore.yml", "unique_id": "test.nhl_data.unique_f_linescore_linescore_id.c88b3cc327", "fqn": ["nhl_data", "analytics", "intermediate", "unique_f_linescore_linescore_id"], "alias": "unique_f_linescore_linescore_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.7343178, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "f_linescore", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.f_linescore"]}, "compiled_path": "target/compiled/nhl_data/models/analytics/intermediate/f_linescore.yml/unique_f_linescore_linescore_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select linescore_id as unique_field\n  from `nhl-breakouts`.`github`.`f_linescore`\n  where linescore_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "linescore_id", "file_key_name": "models.f_linescore", "attached_node": "model.nhl_data.f_linescore"}, "test.nhl_data.not_null_f_linescore_linescore_id.0d3f94c5dc": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "linescore_id", "model": "{{ get_where_subquery(ref('f_linescore')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "not_null_f_linescore_linescore_id", "resource_type": "test", "package_name": "nhl_data", "path": "not_null_f_linescore_linescore_id.sql", "original_file_path": "models/analytics/intermediate/f_linescore.yml", "unique_id": "test.nhl_data.not_null_f_linescore_linescore_id.0d3f94c5dc", "fqn": ["nhl_data", "analytics", "intermediate", "not_null_f_linescore_linescore_id"], "alias": "not_null_f_linescore_linescore_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.7364676, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "f_linescore", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.f_linescore"]}, "compiled_path": "target/compiled/nhl_data/models/analytics/intermediate/f_linescore.yml/not_null_f_linescore_linescore_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect linescore_id\nfrom `nhl-breakouts`.`github`.`f_linescore`\nwhere linescore_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "linescore_id", "file_key_name": "models.f_linescore", "attached_node": "model.nhl_data.f_linescore"}, "test.nhl_data.not_null_f_linescore_home_team_id.a4238ef224": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "home_team_id", "model": "{{ get_where_subquery(ref('f_linescore')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "not_null_f_linescore_home_team_id", "resource_type": "test", "package_name": "nhl_data", "path": "not_null_f_linescore_home_team_id.sql", "original_file_path": "models/analytics/intermediate/f_linescore.yml", "unique_id": "test.nhl_data.not_null_f_linescore_home_team_id.a4238ef224", "fqn": ["nhl_data", "analytics", "intermediate", "not_null_f_linescore_home_team_id"], "alias": "not_null_f_linescore_home_team_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.7388961, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "f_linescore", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.f_linescore"]}, "compiled_path": "target/compiled/nhl_data/models/analytics/intermediate/f_linescore.yml/not_null_f_linescore_home_team_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect home_team_id\nfrom `nhl-breakouts`.`github`.`f_linescore`\nwhere home_team_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "home_team_id", "file_key_name": "models.f_linescore", "attached_node": "model.nhl_data.f_linescore"}, "test.nhl_data.not_null_f_linescore_away_team_id.f71f2cffd0": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "away_team_id", "model": "{{ get_where_subquery(ref('f_linescore')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "not_null_f_linescore_away_team_id", "resource_type": "test", "package_name": "nhl_data", "path": "not_null_f_linescore_away_team_id.sql", "original_file_path": "models/analytics/intermediate/f_linescore.yml", "unique_id": "test.nhl_data.not_null_f_linescore_away_team_id.f71f2cffd0", "fqn": ["nhl_data", "analytics", "intermediate", "not_null_f_linescore_away_team_id"], "alias": "not_null_f_linescore_away_team_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.741066, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "f_linescore", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.f_linescore"]}, "compiled_path": "target/compiled/nhl_data/models/analytics/intermediate/f_linescore.yml/not_null_f_linescore_away_team_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect away_team_id\nfrom `nhl-breakouts`.`github`.`f_linescore`\nwhere away_team_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "away_team_id", "file_key_name": "models.f_linescore", "attached_node": "model.nhl_data.f_linescore"}, "test.nhl_data.not_null_f_linescore_game_winning_team_id.08e106d171": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "game_winning_team_id", "model": "{{ get_where_subquery(ref('f_linescore')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "not_null_f_linescore_game_winning_team_id", "resource_type": "test", "package_name": "nhl_data", "path": "not_null_f_linescore_game_winning_team_id.sql", "original_file_path": "models/analytics/intermediate/f_linescore.yml", "unique_id": "test.nhl_data.not_null_f_linescore_game_winning_team_id.08e106d171", "fqn": ["nhl_data", "analytics", "intermediate", "not_null_f_linescore_game_winning_team_id"], "alias": "not_null_f_linescore_game_winning_team_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.7431405, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "f_linescore", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.f_linescore"]}, "compiled_path": "target/compiled/nhl_data/models/analytics/intermediate/f_linescore.yml/not_null_f_linescore_game_winning_team_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect game_winning_team_id\nfrom `nhl-breakouts`.`github`.`f_linescore`\nwhere game_winning_team_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "game_winning_team_id", "file_key_name": "models.f_linescore", "attached_node": "model.nhl_data.f_linescore"}, "test.nhl_data.accepted_values_f_linescore_game_winning_team_type__True__Home__Away__Tie__Undetermined.d86d0c6474": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["Home", "Away", "Tie", "Undetermined"], "quote": true, "column_name": "game_winning_team_type", "model": "{{ get_where_subquery(ref('f_linescore')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "accepted_values_f_linescore_game_winning_team_type__True__Home__Away__Tie__Undetermined", "resource_type": "test", "package_name": "nhl_data", "path": "accepted_values_f_linescore_6ec107475411fbc3815ca25bb322d11a.sql", "original_file_path": "models/analytics/intermediate/f_linescore.yml", "unique_id": "test.nhl_data.accepted_values_f_linescore_game_winning_team_type__True__Home__Away__Tie__Undetermined.d86d0c6474", "fqn": ["nhl_data", "analytics", "intermediate", "accepted_values_f_linescore_game_winning_team_type__True__Home__Away__Tie__Undetermined"], "alias": "accepted_values_f_linescore_6ec107475411fbc3815ca25bb322d11a", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_f_linescore_6ec107475411fbc3815ca25bb322d11a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_f_linescore_6ec107475411fbc3815ca25bb322d11a"}, "created_at": 1695581342.745276, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_f_linescore_6ec107475411fbc3815ca25bb322d11a\") }}", "language": "sql", "refs": [{"name": "f_linescore", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.f_linescore"]}, "compiled_path": "target/compiled/nhl_data/models/analytics/intermediate/f_linescore.yml/accepted_values_f_linescore_6ec107475411fbc3815ca25bb322d11a.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        game_winning_team_type as value_field,\n        count(*) as n_records\n\n    from `nhl-breakouts`.`github`.`f_linescore`\n    group by game_winning_team_type\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Home','Away','Tie','Undetermined'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "game_winning_team_type", "file_key_name": "models.f_linescore", "attached_node": "model.nhl_data.f_linescore"}, "test.nhl_data.unique_d_draft_draft_id.74ebc0e053": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "draft_id", "model": "{{ get_where_subquery(ref('d_draft')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "unique_d_draft_draft_id", "resource_type": "test", "package_name": "nhl_data", "path": "unique_d_draft_draft_id.sql", "original_file_path": "models/analytics/intermediate/d_draft.yml", "unique_id": "test.nhl_data.unique_d_draft_draft_id.74ebc0e053", "fqn": ["nhl_data", "analytics", "intermediate", "unique_d_draft_draft_id"], "alias": "unique_d_draft_draft_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.753849, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "d_draft", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.d_draft"]}, "compiled_path": "target/compiled/nhl_data/models/analytics/intermediate/d_draft.yml/unique_d_draft_draft_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select draft_id as unique_field\n  from `nhl-breakouts`.`github`.`d_draft`\n  where draft_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "draft_id", "file_key_name": "models.d_draft", "attached_node": "model.nhl_data.d_draft"}, "test.nhl_data.not_null_d_draft_draft_id.2d93ef0913": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "draft_id", "model": "{{ get_where_subquery(ref('d_draft')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "not_null_d_draft_draft_id", "resource_type": "test", "package_name": "nhl_data", "path": "not_null_d_draft_draft_id.sql", "original_file_path": "models/analytics/intermediate/d_draft.yml", "unique_id": "test.nhl_data.not_null_d_draft_draft_id.2d93ef0913", "fqn": ["nhl_data", "analytics", "intermediate", "not_null_d_draft_draft_id"], "alias": "not_null_d_draft_draft_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.7563417, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "d_draft", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.d_draft"]}, "compiled_path": "target/compiled/nhl_data/models/analytics/intermediate/d_draft.yml/not_null_d_draft_draft_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect draft_id\nfrom `nhl-breakouts`.`github`.`d_draft`\nwhere draft_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "draft_id", "file_key_name": "models.d_draft", "attached_node": "model.nhl_data.d_draft"}, "test.nhl_data.not_null_f_boxscore_player_boxscore_player_id.e3fb20d4c1": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "boxscore_player_id", "model": "{{ get_where_subquery(ref('f_boxscore_player')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "not_null_f_boxscore_player_boxscore_player_id", "resource_type": "test", "package_name": "nhl_data", "path": "not_null_f_boxscore_player_boxscore_player_id.sql", "original_file_path": "models/analytics/intermediate/f_boxscore_player.yml", "unique_id": "test.nhl_data.not_null_f_boxscore_player_boxscore_player_id.e3fb20d4c1", "fqn": ["nhl_data", "analytics", "intermediate", "not_null_f_boxscore_player_boxscore_player_id"], "alias": "not_null_f_boxscore_player_boxscore_player_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.761663, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "f_boxscore_player", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.f_boxscore_player"]}, "compiled_path": "target/compiled/nhl_data/models/analytics/intermediate/f_boxscore_player.yml/not_null_f_boxscore_player_boxscore_player_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect boxscore_player_id\nfrom `nhl-breakouts`.`github`.`f_boxscore_player`\nwhere boxscore_player_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "boxscore_player_id", "file_key_name": "models.f_boxscore_player", "attached_node": "model.nhl_data.f_boxscore_player"}, "test.nhl_data.unique_f_boxscore_player_boxscore_player_id.b8346d82bf": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "boxscore_player_id", "model": "{{ get_where_subquery(ref('f_boxscore_player')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "unique_f_boxscore_player_boxscore_player_id", "resource_type": "test", "package_name": "nhl_data", "path": "unique_f_boxscore_player_boxscore_player_id.sql", "original_file_path": "models/analytics/intermediate/f_boxscore_player.yml", "unique_id": "test.nhl_data.unique_f_boxscore_player_boxscore_player_id.b8346d82bf", "fqn": ["nhl_data", "analytics", "intermediate", "unique_f_boxscore_player_boxscore_player_id"], "alias": "unique_f_boxscore_player_boxscore_player_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.7640219, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "f_boxscore_player", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.f_boxscore_player"]}, "compiled_path": "target/compiled/nhl_data/models/analytics/intermediate/f_boxscore_player.yml/unique_f_boxscore_player_boxscore_player_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select boxscore_player_id as unique_field\n  from `nhl-breakouts`.`github`.`f_boxscore_player`\n  where boxscore_player_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "boxscore_player_id", "file_key_name": "models.f_boxscore_player", "attached_node": "model.nhl_data.f_boxscore_player"}, "test.nhl_data.not_null_d_date_date_id.17765c9312": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "date_id", "model": "{{ get_where_subquery(ref('d_date')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "not_null_d_date_date_id", "resource_type": "test", "package_name": "nhl_data", "path": "not_null_d_date_date_id.sql", "original_file_path": "models/analytics/intermediate/d_date.yml", "unique_id": "test.nhl_data.not_null_d_date_date_id.17765c9312", "fqn": ["nhl_data", "analytics", "intermediate", "not_null_d_date_date_id"], "alias": "not_null_d_date_date_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.7719457, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "d_date", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.d_date"]}, "compiled_path": "target/compiled/nhl_data/models/analytics/intermediate/d_date.yml/not_null_d_date_date_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date_id\nfrom `nhl-breakouts`.`github`.`d_date`\nwhere date_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "date_id", "file_key_name": "models.d_date", "attached_node": "model.nhl_data.d_date"}, "test.nhl_data.unique_d_date_date_id.bd95340cc8": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "date_id", "model": "{{ get_where_subquery(ref('d_date')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "unique_d_date_date_id", "resource_type": "test", "package_name": "nhl_data", "path": "unique_d_date_date_id.sql", "original_file_path": "models/analytics/intermediate/d_date.yml", "unique_id": "test.nhl_data.unique_d_date_date_id.bd95340cc8", "fqn": ["nhl_data", "analytics", "intermediate", "unique_d_date_date_id"], "alias": "unique_d_date_date_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.7744339, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "d_date", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.d_date"]}, "compiled_path": "target/compiled/nhl_data/models/analytics/intermediate/d_date.yml/unique_d_date_date_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select date_id as unique_field\n  from `nhl-breakouts`.`github`.`d_date`\n  where date_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "date_id", "file_key_name": "models.d_date", "attached_node": "model.nhl_data.d_date"}, "test.nhl_data.unique_d_teams_team_id.c26fd9864c": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "team_id", "model": "{{ get_where_subquery(ref('d_teams')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "unique_d_teams_team_id", "resource_type": "test", "package_name": "nhl_data", "path": "unique_d_teams_team_id.sql", "original_file_path": "models/analytics/intermediate/d_teams.yml", "unique_id": "test.nhl_data.unique_d_teams_team_id.c26fd9864c", "fqn": ["nhl_data", "analytics", "intermediate", "unique_d_teams_team_id"], "alias": "unique_d_teams_team_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.7790504, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "d_teams", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.d_teams"]}, "compiled_path": "target/compiled/nhl_data/models/analytics/intermediate/d_teams.yml/unique_d_teams_team_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select team_id as unique_field\n  from `nhl-breakouts`.`github`.`d_teams`\n  where team_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "team_id", "file_key_name": "models.d_teams", "attached_node": "model.nhl_data.d_teams"}, "test.nhl_data.not_null_d_teams_team_id.453d8c80dc": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "team_id", "model": "{{ get_where_subquery(ref('d_teams')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "not_null_d_teams_team_id", "resource_type": "test", "package_name": "nhl_data", "path": "not_null_d_teams_team_id.sql", "original_file_path": "models/analytics/intermediate/d_teams.yml", "unique_id": "test.nhl_data.not_null_d_teams_team_id.453d8c80dc", "fqn": ["nhl_data", "analytics", "intermediate", "not_null_d_teams_team_id"], "alias": "not_null_d_teams_team_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.7815695, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "d_teams", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.d_teams"]}, "compiled_path": "target/compiled/nhl_data/models/analytics/intermediate/d_teams.yml/not_null_d_teams_team_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect team_id\nfrom `nhl-breakouts`.`github`.`d_teams`\nwhere team_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "team_id", "file_key_name": "models.d_teams", "attached_node": "model.nhl_data.d_teams"}, "test.nhl_data.not_null_d_teams_venue_timezone_id.86ef9a6f43": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "venue_timezone_id", "model": "{{ get_where_subquery(ref('d_teams')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "not_null_d_teams_venue_timezone_id", "resource_type": "test", "package_name": "nhl_data", "path": "not_null_d_teams_venue_timezone_id.sql", "original_file_path": "models/analytics/intermediate/d_teams.yml", "unique_id": "test.nhl_data.not_null_d_teams_venue_timezone_id.86ef9a6f43", "fqn": ["nhl_data", "analytics", "intermediate", "not_null_d_teams_venue_timezone_id"], "alias": "not_null_d_teams_venue_timezone_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.783766, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "d_teams", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.d_teams"]}, "compiled_path": "target/compiled/nhl_data/models/analytics/intermediate/d_teams.yml/not_null_d_teams_venue_timezone_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect venue_timezone_id\nfrom `nhl-breakouts`.`github`.`d_teams`\nwhere venue_timezone_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "venue_timezone_id", "file_key_name": "models.d_teams", "attached_node": "model.nhl_data.d_teams"}, "test.nhl_data.not_null_d_teams_division_id.0cedee4730": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "division_id", "model": "{{ get_where_subquery(ref('d_teams')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "not_null_d_teams_division_id", "resource_type": "test", "package_name": "nhl_data", "path": "not_null_d_teams_division_id.sql", "original_file_path": "models/analytics/intermediate/d_teams.yml", "unique_id": "test.nhl_data.not_null_d_teams_division_id.0cedee4730", "fqn": ["nhl_data", "analytics", "intermediate", "not_null_d_teams_division_id"], "alias": "not_null_d_teams_division_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.7858708, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "d_teams", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.d_teams"]}, "compiled_path": "target/compiled/nhl_data/models/analytics/intermediate/d_teams.yml/not_null_d_teams_division_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect division_id\nfrom `nhl-breakouts`.`github`.`d_teams`\nwhere division_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "division_id", "file_key_name": "models.d_teams", "attached_node": "model.nhl_data.d_teams"}, "test.nhl_data.not_null_d_teams_conference_id.491172dfc9": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "conference_id", "model": "{{ get_where_subquery(ref('d_teams')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "not_null_d_teams_conference_id", "resource_type": "test", "package_name": "nhl_data", "path": "not_null_d_teams_conference_id.sql", "original_file_path": "models/analytics/intermediate/d_teams.yml", "unique_id": "test.nhl_data.not_null_d_teams_conference_id.491172dfc9", "fqn": ["nhl_data", "analytics", "intermediate", "not_null_d_teams_conference_id"], "alias": "not_null_d_teams_conference_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.78798, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "d_teams", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.d_teams"]}, "compiled_path": "target/compiled/nhl_data/models/analytics/intermediate/d_teams.yml/not_null_d_teams_conference_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect conference_id\nfrom `nhl-breakouts`.`github`.`d_teams`\nwhere conference_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "conference_id", "file_key_name": "models.d_teams", "attached_node": "model.nhl_data.d_teams"}, "test.nhl_data.not_null_d_teams_franchise_id.9ffcb46923": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "franchise_id", "model": "{{ get_where_subquery(ref('d_teams')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "not_null_d_teams_franchise_id", "resource_type": "test", "package_name": "nhl_data", "path": "not_null_d_teams_franchise_id.sql", "original_file_path": "models/analytics/intermediate/d_teams.yml", "unique_id": "test.nhl_data.not_null_d_teams_franchise_id.9ffcb46923", "fqn": ["nhl_data", "analytics", "intermediate", "not_null_d_teams_franchise_id"], "alias": "not_null_d_teams_franchise_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.790544, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "d_teams", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.d_teams"]}, "compiled_path": "target/compiled/nhl_data/models/analytics/intermediate/d_teams.yml/not_null_d_teams_franchise_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect franchise_id\nfrom `nhl-breakouts`.`github`.`d_teams`\nwhere franchise_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "franchise_id", "file_key_name": "models.d_teams", "attached_node": "model.nhl_data.d_teams"}, "test.nhl_data.unique_f_plays_play_id.f1d5dd28d5": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "play_id", "model": "{{ get_where_subquery(ref('f_plays')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "unique_f_plays_play_id", "resource_type": "test", "package_name": "nhl_data", "path": "unique_f_plays_play_id.sql", "original_file_path": "models/analytics/intermediate/f_plays.yml", "unique_id": "test.nhl_data.unique_f_plays_play_id.f1d5dd28d5", "fqn": ["nhl_data", "analytics", "intermediate", "unique_f_plays_play_id"], "alias": "unique_f_plays_play_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.8175724, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "f_plays", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.f_plays"]}, "compiled_path": "target/compiled/nhl_data/models/analytics/intermediate/f_plays.yml/unique_f_plays_play_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select play_id as unique_field\n  from `nhl-breakouts`.`github`.`f_plays`\n  where play_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "play_id", "file_key_name": "models.f_plays", "attached_node": "model.nhl_data.f_plays"}, "test.nhl_data.not_null_f_plays_play_id.50869b6b5e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "play_id", "model": "{{ get_where_subquery(ref('f_plays')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "not_null_f_plays_play_id", "resource_type": "test", "package_name": "nhl_data", "path": "not_null_f_plays_play_id.sql", "original_file_path": "models/analytics/intermediate/f_plays.yml", "unique_id": "test.nhl_data.not_null_f_plays_play_id.50869b6b5e", "fqn": ["nhl_data", "analytics", "intermediate", "not_null_f_plays_play_id"], "alias": "not_null_f_plays_play_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.819841, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "f_plays", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.f_plays"]}, "compiled_path": "target/compiled/nhl_data/models/analytics/intermediate/f_plays.yml/not_null_f_plays_play_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect play_id\nfrom `nhl-breakouts`.`github`.`f_plays`\nwhere play_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "play_id", "file_key_name": "models.f_plays", "attached_node": "model.nhl_data.f_plays"}, "test.nhl_data.not_null_f_plays_game_id.be283c768c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "game_id", "model": "{{ get_where_subquery(ref('f_plays')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "not_null_f_plays_game_id", "resource_type": "test", "package_name": "nhl_data", "path": "not_null_f_plays_game_id.sql", "original_file_path": "models/analytics/intermediate/f_plays.yml", "unique_id": "test.nhl_data.not_null_f_plays_game_id.be283c768c", "fqn": ["nhl_data", "analytics", "intermediate", "not_null_f_plays_game_id"], "alias": "not_null_f_plays_game_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.8221607, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "f_plays", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.f_plays"]}, "compiled_path": "target/compiled/nhl_data/models/analytics/intermediate/f_plays.yml/not_null_f_plays_game_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect game_id\nfrom `nhl-breakouts`.`github`.`f_plays`\nwhere game_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "game_id", "file_key_name": "models.f_plays", "attached_node": "model.nhl_data.f_plays"}, "test.nhl_data.not_null_f_plays_event_idx.88cd93f8ae": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_idx", "model": "{{ get_where_subquery(ref('f_plays')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "not_null_f_plays_event_idx", "resource_type": "test", "package_name": "nhl_data", "path": "not_null_f_plays_event_idx.sql", "original_file_path": "models/analytics/intermediate/f_plays.yml", "unique_id": "test.nhl_data.not_null_f_plays_event_idx.88cd93f8ae", "fqn": ["nhl_data", "analytics", "intermediate", "not_null_f_plays_event_idx"], "alias": "not_null_f_plays_event_idx", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.8242924, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "f_plays", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.f_plays"]}, "compiled_path": "target/compiled/nhl_data/models/analytics/intermediate/f_plays.yml/not_null_f_plays_event_idx.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect event_idx\nfrom `nhl-breakouts`.`github`.`f_plays`\nwhere event_idx is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "event_idx", "file_key_name": "models.f_plays", "attached_node": "model.nhl_data.f_plays"}, "test.nhl_data.not_null_f_plays_event_id.42f7019a28": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('f_plays')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "not_null_f_plays_event_id", "resource_type": "test", "package_name": "nhl_data", "path": "not_null_f_plays_event_id.sql", "original_file_path": "models/analytics/intermediate/f_plays.yml", "unique_id": "test.nhl_data.not_null_f_plays_event_id.42f7019a28", "fqn": ["nhl_data", "analytics", "intermediate", "not_null_f_plays_event_id"], "alias": "not_null_f_plays_event_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.8263872, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "f_plays", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.f_plays"]}, "compiled_path": "target/compiled/nhl_data/models/analytics/intermediate/f_plays.yml/not_null_f_plays_event_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect event_id\nfrom `nhl-breakouts`.`github`.`f_plays`\nwhere event_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "event_id", "file_key_name": "models.f_plays", "attached_node": "model.nhl_data.f_plays"}, "test.nhl_data.not_null_f_plays_player_id.3976f4d4f0": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "player_id", "model": "{{ get_where_subquery(ref('f_plays')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "not_null_f_plays_player_id", "resource_type": "test", "package_name": "nhl_data", "path": "not_null_f_plays_player_id.sql", "original_file_path": "models/analytics/intermediate/f_plays.yml", "unique_id": "test.nhl_data.not_null_f_plays_player_id.3976f4d4f0", "fqn": ["nhl_data", "analytics", "intermediate", "not_null_f_plays_player_id"], "alias": "not_null_f_plays_player_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.8285103, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "f_plays", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.f_plays"]}, "compiled_path": "target/compiled/nhl_data/models/analytics/intermediate/f_plays.yml/not_null_f_plays_player_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect player_id\nfrom `nhl-breakouts`.`github`.`f_plays`\nwhere player_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "player_id", "file_key_name": "models.f_plays", "attached_node": "model.nhl_data.f_plays"}, "test.nhl_data.unique_d_shifts_shift_id.7763057f68": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "shift_id", "model": "{{ get_where_subquery(ref('d_shifts')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "unique_d_shifts_shift_id", "resource_type": "test", "package_name": "nhl_data", "path": "unique_d_shifts_shift_id.sql", "original_file_path": "models/analytics/intermediate/d_shifts.yml", "unique_id": "test.nhl_data.unique_d_shifts_shift_id.7763057f68", "fqn": ["nhl_data", "analytics", "intermediate", "unique_d_shifts_shift_id"], "alias": "unique_d_shifts_shift_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.833543, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "d_shifts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.d_shifts"]}, "compiled_path": "target/compiled/nhl_data/models/analytics/intermediate/d_shifts.yml/unique_d_shifts_shift_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select shift_id as unique_field\n  from `nhl-breakouts`.`github`.`d_shifts`\n  where shift_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "shift_id", "file_key_name": "models.d_shifts", "attached_node": "model.nhl_data.d_shifts"}, "test.nhl_data.not_null_d_shifts_shift_id.a9f32209dc": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "shift_id", "model": "{{ get_where_subquery(ref('d_shifts')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "not_null_d_shifts_shift_id", "resource_type": "test", "package_name": "nhl_data", "path": "not_null_d_shifts_shift_id.sql", "original_file_path": "models/analytics/intermediate/d_shifts.yml", "unique_id": "test.nhl_data.not_null_d_shifts_shift_id.a9f32209dc", "fqn": ["nhl_data", "analytics", "intermediate", "not_null_d_shifts_shift_id"], "alias": "not_null_d_shifts_shift_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.8356621, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "d_shifts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.d_shifts"]}, "compiled_path": "target/compiled/nhl_data/models/analytics/intermediate/d_shifts.yml/not_null_d_shifts_shift_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect shift_id\nfrom `nhl-breakouts`.`github`.`d_shifts`\nwhere shift_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "shift_id", "file_key_name": "models.d_shifts", "attached_node": "model.nhl_data.d_shifts"}, "test.nhl_data.not_null_d_shifts_game_id.2749fcaccd": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "game_id", "model": "{{ get_where_subquery(ref('d_shifts')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "not_null_d_shifts_game_id", "resource_type": "test", "package_name": "nhl_data", "path": "not_null_d_shifts_game_id.sql", "original_file_path": "models/analytics/intermediate/d_shifts.yml", "unique_id": "test.nhl_data.not_null_d_shifts_game_id.2749fcaccd", "fqn": ["nhl_data", "analytics", "intermediate", "not_null_d_shifts_game_id"], "alias": "not_null_d_shifts_game_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.8379934, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "d_shifts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.d_shifts"]}, "compiled_path": "target/compiled/nhl_data/models/analytics/intermediate/d_shifts.yml/not_null_d_shifts_game_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect game_id\nfrom `nhl-breakouts`.`github`.`d_shifts`\nwhere game_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "game_id", "file_key_name": "models.d_shifts", "attached_node": "model.nhl_data.d_shifts"}, "test.nhl_data.not_null_d_shifts_player_id.73a991e1fc": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "player_id", "model": "{{ get_where_subquery(ref('d_shifts')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "not_null_d_shifts_player_id", "resource_type": "test", "package_name": "nhl_data", "path": "not_null_d_shifts_player_id.sql", "original_file_path": "models/analytics/intermediate/d_shifts.yml", "unique_id": "test.nhl_data.not_null_d_shifts_player_id.73a991e1fc", "fqn": ["nhl_data", "analytics", "intermediate", "not_null_d_shifts_player_id"], "alias": "not_null_d_shifts_player_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.840094, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "d_shifts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.d_shifts"]}, "compiled_path": "target/compiled/nhl_data/models/analytics/intermediate/d_shifts.yml/not_null_d_shifts_player_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect player_id\nfrom `nhl-breakouts`.`github`.`d_shifts`\nwhere player_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "player_id", "file_key_name": "models.d_shifts", "attached_node": "model.nhl_data.d_shifts"}, "test.nhl_data.not_null_d_players_player_id.1ac147c310": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "player_id", "model": "{{ get_where_subquery(ref('d_players')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "not_null_d_players_player_id", "resource_type": "test", "package_name": "nhl_data", "path": "not_null_d_players_player_id.sql", "original_file_path": "models/analytics/intermediate/d_players.yml", "unique_id": "test.nhl_data.not_null_d_players_player_id.1ac147c310", "fqn": ["nhl_data", "analytics", "intermediate", "not_null_d_players_player_id"], "alias": "not_null_d_players_player_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.8444114, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "d_players", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.d_players"]}, "compiled_path": "target/compiled/nhl_data/models/analytics/intermediate/d_players.yml/not_null_d_players_player_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect player_id\nfrom `nhl-breakouts`.`github`.`d_players`\nwhere player_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "player_id", "file_key_name": "models.d_players", "attached_node": "model.nhl_data.d_players"}, "test.nhl_data.not_null_f_games_scratches_game_id.cb6976b79e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "game_id", "model": "{{ get_where_subquery(ref('f_games_scratches')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "not_null_f_games_scratches_game_id", "resource_type": "test", "package_name": "nhl_data", "path": "not_null_f_games_scratches_game_id.sql", "original_file_path": "models/analytics/intermediate/f_games_scratches.yml", "unique_id": "test.nhl_data.not_null_f_games_scratches_game_id.cb6976b79e", "fqn": ["nhl_data", "analytics", "intermediate", "not_null_f_games_scratches_game_id"], "alias": "not_null_f_games_scratches_game_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.84814, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "f_games_scratches", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.f_games_scratches"]}, "compiled_path": "target/compiled/nhl_data/models/analytics/intermediate/f_games_scratches.yml/not_null_f_games_scratches_game_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect game_id\nfrom `nhl-breakouts`.`github`.`f_games_scratches`\nwhere game_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "game_id", "file_key_name": "models.f_games_scratches", "attached_node": "model.nhl_data.f_games_scratches"}, "test.nhl_data.not_null_f_games_scratches_player_id.25c3aadc1a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "player_id", "model": "{{ get_where_subquery(ref('f_games_scratches')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "not_null_f_games_scratches_player_id", "resource_type": "test", "package_name": "nhl_data", "path": "not_null_f_games_scratches_player_id.sql", "original_file_path": "models/analytics/intermediate/f_games_scratches.yml", "unique_id": "test.nhl_data.not_null_f_games_scratches_player_id.25c3aadc1a", "fqn": ["nhl_data", "analytics", "intermediate", "not_null_f_games_scratches_player_id"], "alias": "not_null_f_games_scratches_player_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.850232, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "f_games_scratches", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.f_games_scratches"]}, "compiled_path": "target/compiled/nhl_data/models/analytics/intermediate/f_games_scratches.yml/not_null_f_games_scratches_player_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect player_id\nfrom `nhl-breakouts`.`github`.`f_games_scratches`\nwhere player_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "player_id", "file_key_name": "models.f_games_scratches", "attached_node": "model.nhl_data.f_games_scratches"}, "test.nhl_data.dbt_utils_unique_combination_of_columns_f_games_scratches_game_id__player_id.35d4642951": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["game_id", "player_id"], "model": "{{ get_where_subquery(ref('f_games_scratches')) }}"}, "namespace": "dbt_utils"}, "database": "nhl-breakouts", "schema": "github", "name": "dbt_utils_unique_combination_of_columns_f_games_scratches_game_id__player_id", "resource_type": "test", "package_name": "nhl_data", "path": "dbt_utils_unique_combination_o_85f8d979cba4a4cb022a6e80f91bee73.sql", "original_file_path": "models/analytics/intermediate/f_games_scratches.yml", "unique_id": "test.nhl_data.dbt_utils_unique_combination_of_columns_f_games_scratches_game_id__player_id.35d4642951", "fqn": ["nhl_data", "analytics", "intermediate", "dbt_utils_unique_combination_of_columns_f_games_scratches_game_id__player_id"], "alias": "dbt_utils_unique_combination_o_85f8d979cba4a4cb022a6e80f91bee73", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_85f8d979cba4a4cb022a6e80f91bee73", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_85f8d979cba4a4cb022a6e80f91bee73"}, "created_at": 1695581342.852378, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_85f8d979cba4a4cb022a6e80f91bee73\") }}", "language": "sql", "refs": [{"name": "f_games_scratches", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.f_games_scratches"]}, "compiled_path": "target/compiled/nhl_data/models/analytics/intermediate/f_games_scratches.yml/dbt_utils_unique_combination_o_85f8d979cba4a4cb022a6e80f91bee73.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        game_id, player_id\n    from `nhl-breakouts`.`github`.`f_games_scratches`\n    group by game_id, player_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": null, "file_key_name": "models.f_games_scratches", "attached_node": "model.nhl_data.f_games_scratches"}, "test.nhl_data.unique_d_divisions_division_id.83aca42a7c": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "division_id", "model": "{{ get_where_subquery(ref('d_divisions')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "unique_d_divisions_division_id", "resource_type": "test", "package_name": "nhl_data", "path": "unique_d_divisions_division_id.sql", "original_file_path": "models/analytics/intermediate/d_divisions.yml", "unique_id": "test.nhl_data.unique_d_divisions_division_id.83aca42a7c", "fqn": ["nhl_data", "analytics", "intermediate", "unique_d_divisions_division_id"], "alias": "unique_d_divisions_division_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.8661506, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "d_divisions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.d_divisions"]}, "compiled_path": "target/compiled/nhl_data/models/analytics/intermediate/d_divisions.yml/unique_d_divisions_division_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select division_id as unique_field\n  from `nhl-breakouts`.`github`.`d_divisions`\n  where division_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "division_id", "file_key_name": "models.d_divisions", "attached_node": "model.nhl_data.d_divisions"}, "test.nhl_data.not_null_d_divisions_division_id.9a7aadfdb2": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "division_id", "model": "{{ get_where_subquery(ref('d_divisions')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "not_null_d_divisions_division_id", "resource_type": "test", "package_name": "nhl_data", "path": "not_null_d_divisions_division_id.sql", "original_file_path": "models/analytics/intermediate/d_divisions.yml", "unique_id": "test.nhl_data.not_null_d_divisions_division_id.9a7aadfdb2", "fqn": ["nhl_data", "analytics", "intermediate", "not_null_d_divisions_division_id"], "alias": "not_null_d_divisions_division_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.8686233, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "d_divisions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.d_divisions"]}, "compiled_path": "target/compiled/nhl_data/models/analytics/intermediate/d_divisions.yml/not_null_d_divisions_division_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect division_id\nfrom `nhl-breakouts`.`github`.`d_divisions`\nwhere division_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "division_id", "file_key_name": "models.d_divisions", "attached_node": "model.nhl_data.d_divisions"}, "test.nhl_data.not_null_d_divisions_conference_id.08feeb1868": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "conference_id", "model": "{{ get_where_subquery(ref('d_divisions')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "not_null_d_divisions_conference_id", "resource_type": "test", "package_name": "nhl_data", "path": "not_null_d_divisions_conference_id.sql", "original_file_path": "models/analytics/intermediate/d_divisions.yml", "unique_id": "test.nhl_data.not_null_d_divisions_conference_id.08feeb1868", "fqn": ["nhl_data", "analytics", "intermediate", "not_null_d_divisions_conference_id"], "alias": "not_null_d_divisions_conference_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.8707354, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "d_divisions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.d_divisions"]}, "compiled_path": "target/compiled/nhl_data/models/analytics/intermediate/d_divisions.yml/not_null_d_divisions_conference_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect conference_id\nfrom `nhl-breakouts`.`github`.`d_divisions`\nwhere conference_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "conference_id", "file_key_name": "models.d_divisions", "attached_node": "model.nhl_data.d_divisions"}, "test.nhl_data.unique_d_seasons_season_id.e1642ef274": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "season_id", "model": "{{ get_where_subquery(ref('d_seasons')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "unique_d_seasons_season_id", "resource_type": "test", "package_name": "nhl_data", "path": "unique_d_seasons_season_id.sql", "original_file_path": "models/analytics/intermediate/d_seasons.yml", "unique_id": "test.nhl_data.unique_d_seasons_season_id.e1642ef274", "fqn": ["nhl_data", "analytics", "intermediate", "unique_d_seasons_season_id"], "alias": "unique_d_seasons_season_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.8743994, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "d_seasons", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.d_seasons"]}, "compiled_path": "target/compiled/nhl_data/models/analytics/intermediate/d_seasons.yml/unique_d_seasons_season_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select season_id as unique_field\n  from `nhl-breakouts`.`github`.`d_seasons`\n  where season_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "season_id", "file_key_name": "models.d_seasons", "attached_node": "model.nhl_data.d_seasons"}, "test.nhl_data.not_null_d_seasons_season_id.e9ba12da0e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "season_id", "model": "{{ get_where_subquery(ref('d_seasons')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "not_null_d_seasons_season_id", "resource_type": "test", "package_name": "nhl_data", "path": "not_null_d_seasons_season_id.sql", "original_file_path": "models/analytics/intermediate/d_seasons.yml", "unique_id": "test.nhl_data.not_null_d_seasons_season_id.e9ba12da0e", "fqn": ["nhl_data", "analytics", "intermediate", "not_null_d_seasons_season_id"], "alias": "not_null_d_seasons_season_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.876833, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "d_seasons", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.d_seasons"]}, "compiled_path": "target/compiled/nhl_data/models/analytics/intermediate/d_seasons.yml/not_null_d_seasons_season_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect season_id\nfrom `nhl-breakouts`.`github`.`d_seasons`\nwhere season_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "season_id", "file_key_name": "models.d_seasons", "attached_node": "model.nhl_data.d_seasons"}, "test.nhl_data.unique_d_conferences_conference_id.b7e5789a87": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "conference_id", "model": "{{ get_where_subquery(ref('d_conferences')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "unique_d_conferences_conference_id", "resource_type": "test", "package_name": "nhl_data", "path": "unique_d_conferences_conference_id.sql", "original_file_path": "models/analytics/intermediate/d_conferences.yml", "unique_id": "test.nhl_data.unique_d_conferences_conference_id.b7e5789a87", "fqn": ["nhl_data", "analytics", "intermediate", "unique_d_conferences_conference_id"], "alias": "unique_d_conferences_conference_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.8802989, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "d_conferences", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.d_conferences"]}, "compiled_path": "target/compiled/nhl_data/models/analytics/intermediate/d_conferences.yml/unique_d_conferences_conference_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select conference_id as unique_field\n  from `nhl-breakouts`.`github`.`d_conferences`\n  where conference_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "conference_id", "file_key_name": "models.d_conferences", "attached_node": "model.nhl_data.d_conferences"}, "test.nhl_data.not_null_d_conferences_conference_id.8ff2ef5d4e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "conference_id", "model": "{{ get_where_subquery(ref('d_conferences')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "not_null_d_conferences_conference_id", "resource_type": "test", "package_name": "nhl_data", "path": "not_null_d_conferences_conference_id.sql", "original_file_path": "models/analytics/intermediate/d_conferences.yml", "unique_id": "test.nhl_data.not_null_d_conferences_conference_id.8ff2ef5d4e", "fqn": ["nhl_data", "analytics", "intermediate", "not_null_d_conferences_conference_id"], "alias": "not_null_d_conferences_conference_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.8823705, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "d_conferences", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.d_conferences"]}, "compiled_path": "target/compiled/nhl_data/models/analytics/intermediate/d_conferences.yml/not_null_d_conferences_conference_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect conference_id\nfrom `nhl-breakouts`.`github`.`d_conferences`\nwhere conference_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "conference_id", "file_key_name": "models.d_conferences", "attached_node": "model.nhl_data.d_conferences"}, "test.nhl_data.unique_d_shifts_time_shift_id.899d4e01b5": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "shift_id", "model": "{{ get_where_subquery(ref('d_shifts_time')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "unique_d_shifts_time_shift_id", "resource_type": "test", "package_name": "nhl_data", "path": "unique_d_shifts_time_shift_id.sql", "original_file_path": "models/analytics/intermediate/d_shifts_time.yml", "unique_id": "test.nhl_data.unique_d_shifts_time_shift_id.899d4e01b5", "fqn": ["nhl_data", "analytics", "intermediate", "unique_d_shifts_time_shift_id"], "alias": "unique_d_shifts_time_shift_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.8888338, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "d_shifts_time", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.d_shifts_time"]}, "compiled_path": "target/compiled/nhl_data/models/analytics/intermediate/d_shifts_time.yml/unique_d_shifts_time_shift_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select shift_id as unique_field\n  from `nhl-breakouts`.`github`.`d_shifts_time`\n  where shift_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "shift_id", "file_key_name": "models.d_shifts_time", "attached_node": "model.nhl_data.d_shifts_time"}, "test.nhl_data.not_null_d_shifts_time_shift_id.185e299ecd": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "shift_id", "model": "{{ get_where_subquery(ref('d_shifts_time')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "not_null_d_shifts_time_shift_id", "resource_type": "test", "package_name": "nhl_data", "path": "not_null_d_shifts_time_shift_id.sql", "original_file_path": "models/analytics/intermediate/d_shifts_time.yml", "unique_id": "test.nhl_data.not_null_d_shifts_time_shift_id.185e299ecd", "fqn": ["nhl_data", "analytics", "intermediate", "not_null_d_shifts_time_shift_id"], "alias": "not_null_d_shifts_time_shift_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.8910282, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "d_shifts_time", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.d_shifts_time"]}, "compiled_path": "target/compiled/nhl_data/models/analytics/intermediate/d_shifts_time.yml/not_null_d_shifts_time_shift_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect shift_id\nfrom `nhl-breakouts`.`github`.`d_shifts_time`\nwhere shift_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "shift_id", "file_key_name": "models.d_shifts_time", "attached_node": "model.nhl_data.d_shifts_time"}, "test.nhl_data.not_null_d_shifts_time_game_id.69fcfb54b6": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "game_id", "model": "{{ get_where_subquery(ref('d_shifts_time')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "not_null_d_shifts_time_game_id", "resource_type": "test", "package_name": "nhl_data", "path": "not_null_d_shifts_time_game_id.sql", "original_file_path": "models/analytics/intermediate/d_shifts_time.yml", "unique_id": "test.nhl_data.not_null_d_shifts_time_game_id.69fcfb54b6", "fqn": ["nhl_data", "analytics", "intermediate", "not_null_d_shifts_time_game_id"], "alias": "not_null_d_shifts_time_game_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.8931139, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "d_shifts_time", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.d_shifts_time"]}, "compiled_path": "target/compiled/nhl_data/models/analytics/intermediate/d_shifts_time.yml/not_null_d_shifts_time_game_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect game_id\nfrom `nhl-breakouts`.`github`.`d_shifts_time`\nwhere game_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "game_id", "file_key_name": "models.d_shifts_time", "attached_node": "model.nhl_data.d_shifts_time"}, "test.nhl_data.not_null_d_shifts_time_player_id.1b994f06e9": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "player_id", "model": "{{ get_where_subquery(ref('d_shifts_time')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "not_null_d_shifts_time_player_id", "resource_type": "test", "package_name": "nhl_data", "path": "not_null_d_shifts_time_player_id.sql", "original_file_path": "models/analytics/intermediate/d_shifts_time.yml", "unique_id": "test.nhl_data.not_null_d_shifts_time_player_id.1b994f06e9", "fqn": ["nhl_data", "analytics", "intermediate", "not_null_d_shifts_time_player_id"], "alias": "not_null_d_shifts_time_player_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.8951907, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "d_shifts_time", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.d_shifts_time"]}, "compiled_path": "target/compiled/nhl_data/models/analytics/intermediate/d_shifts_time.yml/not_null_d_shifts_time_player_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect player_id\nfrom `nhl-breakouts`.`github`.`d_shifts_time`\nwhere player_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "player_id", "file_key_name": "models.d_shifts_time", "attached_node": "model.nhl_data.d_shifts_time"}, "test.nhl_data.unique_f_player_season_player_season_gametype_id.bd0d830fa1": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "player_season_gametype_id", "model": "{{ get_where_subquery(ref('f_player_season')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "unique_f_player_season_player_season_gametype_id", "resource_type": "test", "package_name": "nhl_data", "path": "unique_f_player_season_player_season_gametype_id.sql", "original_file_path": "models/analytics/core/f_player_season.yml", "unique_id": "test.nhl_data.unique_f_player_season_player_season_gametype_id.bd0d830fa1", "fqn": ["nhl_data", "analytics", "core", "unique_f_player_season_player_season_gametype_id"], "alias": "unique_f_player_season_player_season_gametype_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.9639502, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "f_player_season", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.f_player_season"]}, "compiled_path": "target/compiled/nhl_data/models/analytics/core/f_player_season.yml/unique_f_player_season_player_season_gametype_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select player_season_gametype_id as unique_field\n  from `nhl-breakouts`.`github`.`f_player_season`\n  where player_season_gametype_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "player_season_gametype_id", "file_key_name": "models.f_player_season", "attached_node": "model.nhl_data.f_player_season"}, "test.nhl_data.not_null_f_player_season_player_season_gametype_id.35c7e76fc3": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "player_season_gametype_id", "model": "{{ get_where_subquery(ref('f_player_season')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "not_null_f_player_season_player_season_gametype_id", "resource_type": "test", "package_name": "nhl_data", "path": "not_null_f_player_season_player_season_gametype_id.sql", "original_file_path": "models/analytics/core/f_player_season.yml", "unique_id": "test.nhl_data.not_null_f_player_season_player_season_gametype_id.35c7e76fc3", "fqn": ["nhl_data", "analytics", "core", "not_null_f_player_season_player_season_gametype_id"], "alias": "not_null_f_player_season_player_season_gametype_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.9663014, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "f_player_season", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.f_player_season"]}, "compiled_path": "target/compiled/nhl_data/models/analytics/core/f_player_season.yml/not_null_f_player_season_player_season_gametype_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect player_season_gametype_id\nfrom `nhl-breakouts`.`github`.`f_player_season`\nwhere player_season_gametype_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "player_season_gametype_id", "file_key_name": "models.f_player_season", "attached_node": "model.nhl_data.f_player_season"}, "test.nhl_data.not_null_f_player_season_player_id.06fcfa1a8c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "player_id", "model": "{{ get_where_subquery(ref('f_player_season')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "not_null_f_player_season_player_id", "resource_type": "test", "package_name": "nhl_data", "path": "not_null_f_player_season_player_id.sql", "original_file_path": "models/analytics/core/f_player_season.yml", "unique_id": "test.nhl_data.not_null_f_player_season_player_id.06fcfa1a8c", "fqn": ["nhl_data", "analytics", "core", "not_null_f_player_season_player_id"], "alias": "not_null_f_player_season_player_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.9684618, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "f_player_season", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.f_player_season"]}, "compiled_path": "target/compiled/nhl_data/models/analytics/core/f_player_season.yml/not_null_f_player_season_player_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect player_id\nfrom `nhl-breakouts`.`github`.`f_player_season`\nwhere player_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "player_id", "file_key_name": "models.f_player_season", "attached_node": "model.nhl_data.f_player_season"}, "test.nhl_data.not_null_f_player_season_season_id.8bbc5bfd6a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "season_id", "model": "{{ get_where_subquery(ref('f_player_season')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "not_null_f_player_season_season_id", "resource_type": "test", "package_name": "nhl_data", "path": "not_null_f_player_season_season_id.sql", "original_file_path": "models/analytics/core/f_player_season.yml", "unique_id": "test.nhl_data.not_null_f_player_season_season_id.8bbc5bfd6a", "fqn": ["nhl_data", "analytics", "core", "not_null_f_player_season_season_id"], "alias": "not_null_f_player_season_season_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.9708314, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "f_player_season", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.f_player_season"]}, "compiled_path": "target/compiled/nhl_data/models/analytics/core/f_player_season.yml/not_null_f_player_season_season_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect season_id\nfrom `nhl-breakouts`.`github`.`f_player_season`\nwhere season_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "season_id", "file_key_name": "models.f_player_season", "attached_node": "model.nhl_data.f_player_season"}, "test.nhl_data.not_null_f_player_season_game_type.388b86217d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "game_type", "model": "{{ get_where_subquery(ref('f_player_season')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "not_null_f_player_season_game_type", "resource_type": "test", "package_name": "nhl_data", "path": "not_null_f_player_season_game_type.sql", "original_file_path": "models/analytics/core/f_player_season.yml", "unique_id": "test.nhl_data.not_null_f_player_season_game_type.388b86217d", "fqn": ["nhl_data", "analytics", "core", "not_null_f_player_season_game_type"], "alias": "not_null_f_player_season_game_type", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.9729462, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "f_player_season", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.f_player_season"]}, "compiled_path": "target/compiled/nhl_data/models/analytics/core/f_player_season.yml/not_null_f_player_season_game_type.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect game_type\nfrom `nhl-breakouts`.`github`.`f_player_season`\nwhere game_type is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "game_type", "file_key_name": "models.f_player_season", "attached_node": "model.nhl_data.f_player_season"}, "test.nhl_data.unique_f_team_season_team_season_stage_id.c5a3bceddd": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "team_season_stage_id", "model": "{{ get_where_subquery(ref('f_team_season')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "unique_f_team_season_team_season_stage_id", "resource_type": "test", "package_name": "nhl_data", "path": "unique_f_team_season_team_season_stage_id.sql", "original_file_path": "models/analytics/core/f_team_season.yml", "unique_id": "test.nhl_data.unique_f_team_season_team_season_stage_id.c5a3bceddd", "fqn": ["nhl_data", "analytics", "core", "unique_f_team_season_team_season_stage_id"], "alias": "unique_f_team_season_team_season_stage_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.978376, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "f_team_season", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.f_team_season"]}, "compiled_path": "target/compiled/nhl_data/models/analytics/core/f_team_season.yml/unique_f_team_season_team_season_stage_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select team_season_stage_id as unique_field\n  from `nhl-breakouts`.`github`.`f_team_season`\n  where team_season_stage_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "team_season_stage_id", "file_key_name": "models.f_team_season", "attached_node": "model.nhl_data.f_team_season"}, "test.nhl_data.not_null_f_team_season_team_season_stage_id.15f3b00755": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "team_season_stage_id", "model": "{{ get_where_subquery(ref('f_team_season')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "not_null_f_team_season_team_season_stage_id", "resource_type": "test", "package_name": "nhl_data", "path": "not_null_f_team_season_team_season_stage_id.sql", "original_file_path": "models/analytics/core/f_team_season.yml", "unique_id": "test.nhl_data.not_null_f_team_season_team_season_stage_id.15f3b00755", "fqn": ["nhl_data", "analytics", "core", "not_null_f_team_season_team_season_stage_id"], "alias": "not_null_f_team_season_team_season_stage_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.9804924, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "f_team_season", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.f_team_season"]}, "compiled_path": "target/compiled/nhl_data/models/analytics/core/f_team_season.yml/not_null_f_team_season_team_season_stage_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect team_season_stage_id\nfrom `nhl-breakouts`.`github`.`f_team_season`\nwhere team_season_stage_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "team_season_stage_id", "file_key_name": "models.f_team_season", "attached_node": "model.nhl_data.f_team_season"}, "test.nhl_data.not_null_dates_date_id.ecacfb484c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "date_id", "model": "{{ get_where_subquery(ref('dates')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "not_null_dates_date_id", "resource_type": "test", "package_name": "nhl_data", "path": "not_null_dates_date_id.sql", "original_file_path": "models/utils/dates.yml", "unique_id": "test.nhl_data.not_null_dates_date_id.ecacfb484c", "fqn": ["nhl_data", "utils", "not_null_dates_date_id"], "alias": "not_null_dates_date_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.9845138, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dates", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.dates"]}, "compiled_path": "target/compiled/nhl_data/models/utils/dates.yml/not_null_dates_date_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date_id\nfrom `nhl-breakouts`.`github`.`dates`\nwhere date_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "date_id", "file_key_name": "models.dates", "attached_node": "model.nhl_data.dates"}, "test.nhl_data.unique_dates_date_id.a3a9dc1a29": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "date_id", "model": "{{ get_where_subquery(ref('dates')) }}"}, "namespace": null}, "database": "nhl-breakouts", "schema": "github", "name": "unique_dates_date_id", "resource_type": "test", "package_name": "nhl_data", "path": "unique_dates_date_id.sql", "original_file_path": "models/utils/dates.yml", "unique_id": "test.nhl_data.unique_dates_date_id.a3a9dc1a29", "fqn": ["nhl_data", "utils", "unique_dates_date_id"], "alias": "unique_dates_date_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695581342.9865892, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dates", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.nhl_data.dates"]}, "compiled_path": "target/compiled/nhl_data/models/utils/dates.yml/unique_dates_date_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select date_id as unique_field\n  from `nhl-breakouts`.`github`.`dates`\n  where date_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "date_id", "file_key_name": "models.dates", "attached_node": "model.nhl_data.dates"}}, "sources": {"source.nhl_data.meltano.conferences": {"database": "nhl-breakouts", "schema": "raw", "name": "conferences", "resource_type": "source", "package_name": "nhl_data", "path": "models/staging/_sources.yml", "original_file_path": "models/staging/_sources.yml", "unique_id": "source.nhl_data.meltano.conferences", "fqn": ["nhl_data", "staging", "meltano", "conferences"], "source_name": "meltano", "source_description": "", "loader": "", "identifier": "conferences", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`nhl-breakouts`.`raw`.`conferences`", "created_at": 1695581342.9888878}, "source.nhl_data.meltano.divisions": {"database": "nhl-breakouts", "schema": "raw", "name": "divisions", "resource_type": "source", "package_name": "nhl_data", "path": "models/staging/_sources.yml", "original_file_path": "models/staging/_sources.yml", "unique_id": "source.nhl_data.meltano.divisions", "fqn": ["nhl_data", "staging", "meltano", "divisions"], "source_name": "meltano", "source_description": "", "loader": "", "identifier": "divisions", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`nhl-breakouts`.`raw`.`divisions`", "created_at": 1695581342.9892132}, "source.nhl_data.meltano.draft": {"database": "nhl-breakouts", "schema": "raw", "name": "draft", "resource_type": "source", "package_name": "nhl_data", "path": "models/staging/_sources.yml", "original_file_path": "models/staging/_sources.yml", "unique_id": "source.nhl_data.meltano.draft", "fqn": ["nhl_data", "staging", "meltano", "draft"], "source_name": "meltano", "source_description": "", "loader": "", "identifier": "draft", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`nhl-breakouts`.`raw`.`draft`", "created_at": 1695581342.9894626}, "source.nhl_data.meltano.draft_prospects": {"database": "nhl-breakouts", "schema": "raw", "name": "draft_prospects", "resource_type": "source", "package_name": "nhl_data", "path": "models/staging/_sources.yml", "original_file_path": "models/staging/_sources.yml", "unique_id": "source.nhl_data.meltano.draft_prospects", "fqn": ["nhl_data", "staging", "meltano", "draft_prospects"], "source_name": "meltano", "source_description": "", "loader": "", "identifier": "draft_prospects", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`nhl-breakouts`.`raw`.`draft_prospects`", "created_at": 1695581342.9897017}, "source.nhl_data.meltano.live_boxscore": {"database": "nhl-breakouts", "schema": "raw", "name": "live_boxscore", "resource_type": "source", "package_name": "nhl_data", "path": "models/staging/_sources.yml", "original_file_path": "models/staging/_sources.yml", "unique_id": "source.nhl_data.meltano.live_boxscore", "fqn": ["nhl_data", "staging", "meltano", "live_boxscore"], "source_name": "meltano", "source_description": "", "loader": "", "identifier": "live_boxscore", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`nhl-breakouts`.`raw`.`live_boxscore`", "created_at": 1695581342.9902885}, "source.nhl_data.meltano.live_linescore": {"database": "nhl-breakouts", "schema": "raw", "name": "live_linescore", "resource_type": "source", "package_name": "nhl_data", "path": "models/staging/_sources.yml", "original_file_path": "models/staging/_sources.yml", "unique_id": "source.nhl_data.meltano.live_linescore", "fqn": ["nhl_data", "staging", "meltano", "live_linescore"], "source_name": "meltano", "source_description": "", "loader": "", "identifier": "live_linescore", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`nhl-breakouts`.`raw`.`live_linescore`", "created_at": 1695581342.990589}, "source.nhl_data.meltano.live_plays": {"database": "nhl-breakouts", "schema": "raw", "name": "live_plays", "resource_type": "source", "package_name": "nhl_data", "path": "models/staging/_sources.yml", "original_file_path": "models/staging/_sources.yml", "unique_id": "source.nhl_data.meltano.live_plays", "fqn": ["nhl_data", "staging", "meltano", "live_plays"], "source_name": "meltano", "source_description": "", "loader": "", "identifier": "live_plays", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`nhl-breakouts`.`raw`.`live_plays`", "created_at": 1695581342.9908316}, "source.nhl_data.meltano.people": {"database": "nhl-breakouts", "schema": "raw", "name": "people", "resource_type": "source", "package_name": "nhl_data", "path": "models/staging/_sources.yml", "original_file_path": "models/staging/_sources.yml", "unique_id": "source.nhl_data.meltano.people", "fqn": ["nhl_data", "staging", "meltano", "people"], "source_name": "meltano", "source_description": "", "loader": "", "identifier": "people", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`nhl-breakouts`.`raw`.`people`", "created_at": 1695581342.9910703}, "source.nhl_data.meltano.schedule": {"database": "nhl-breakouts", "schema": "raw", "name": "schedule", "resource_type": "source", "package_name": "nhl_data", "path": "models/staging/_sources.yml", "original_file_path": "models/staging/_sources.yml", "unique_id": "source.nhl_data.meltano.schedule", "fqn": ["nhl_data", "staging", "meltano", "schedule"], "source_name": "meltano", "source_description": "", "loader": "", "identifier": "schedule", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`nhl-breakouts`.`raw`.`schedule`", "created_at": 1695581342.9913032}, "source.nhl_data.meltano.seasons": {"database": "nhl-breakouts", "schema": "raw", "name": "seasons", "resource_type": "source", "package_name": "nhl_data", "path": "models/staging/_sources.yml", "original_file_path": "models/staging/_sources.yml", "unique_id": "source.nhl_data.meltano.seasons", "fqn": ["nhl_data", "staging", "meltano", "seasons"], "source_name": "meltano", "source_description": "", "loader": "", "identifier": "seasons", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`nhl-breakouts`.`raw`.`seasons`", "created_at": 1695581342.9915323}, "source.nhl_data.meltano.shifts": {"database": "nhl-breakouts", "schema": "raw", "name": "shifts", "resource_type": "source", "package_name": "nhl_data", "path": "models/staging/_sources.yml", "original_file_path": "models/staging/_sources.yml", "unique_id": "source.nhl_data.meltano.shifts", "fqn": ["nhl_data", "staging", "meltano", "shifts"], "source_name": "meltano", "source_description": "", "loader": "", "identifier": "shifts", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`nhl-breakouts`.`raw`.`shifts`", "created_at": 1695581342.991785}, "source.nhl_data.meltano.teams": {"database": "nhl-breakouts", "schema": "raw", "name": "teams", "resource_type": "source", "package_name": "nhl_data", "path": "models/staging/_sources.yml", "original_file_path": "models/staging/_sources.yml", "unique_id": "source.nhl_data.meltano.teams", "fqn": ["nhl_data", "staging", "meltano", "teams"], "source_name": "meltano", "source_description": "", "loader": "", "identifier": "teams", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`nhl-breakouts`.`raw`.`teams`", "created_at": 1695581342.9920225}, "source.nhl_data.xg.xg_*": {"database": "nhl-breakouts", "schema": "model_xg", "name": "xg_*", "resource_type": "source", "package_name": "nhl_data", "path": "models/staging/_sources.yml", "original_file_path": "models/staging/_sources.yml", "unique_id": "source.nhl_data.xg.xg_*", "fqn": ["nhl_data", "staging", "xg", "xg_*"], "source_name": "xg", "source_description": "", "loader": "", "identifier": "xg_*", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`nhl-breakouts`.`model_xg`.`xg_*`", "created_at": 1695581342.9922564}}, "macros": {"macro.nhl_data.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "nhl_data", "path": "macros/generate_schema_name.sql", "original_file_path": "macros/generate_schema_name.sql", "unique_id": "macro.nhl_data.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n\n    {%- if target.name == 'prod' -%}\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- else -%}\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.3948286, "supported_languages": null}, "macro.nhl_data.use_full_dataset": {"name": "use_full_dataset", "resource_type": "macro", "package_name": "nhl_data", "path": "macros/use_full_dataset.sql", "original_file_path": "macros/use_full_dataset.sql", "unique_id": "macro.nhl_data.use_full_dataset", "macro_sql": "{% macro use_full_dataset() %}\n    {{ return(var('use_full_dataset', target.name in var('full_dataset_target_names'))) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.3955736, "supported_languages": null}, "macro.nhl_data.dedupe": {"name": "dedupe", "resource_type": "macro", "package_name": "nhl_data", "path": "macros/dedupe.sql", "original_file_path": "macros/dedupe.sql", "unique_id": "macro.nhl_data.dedupe", "macro_sql": "{%- macro dedupe(model, key_fields, sort_fields=[], field_list=['*'], filter_list=[]) -%}\n{#-\nExample usage:\nwith deduped as (\n    {{ dedupe(\n        source('raw_packet_db', 'addresses'),\n        key_fields=['id'],\n        sort_fields=['updated_at desc']\n    ) }}\n)\n....\n-#}\n    select {{field_list|join(', ')}}\n    from (\n        select {{field_list|join(', ')}},\n            row_number() over (partition by {{ key_fields|join(', ') }}{% if sort_fields %} order by {{ sort_fields|join(', ') }}{% endif %}) as rn\n        from {{ model }}\n        {%- if filter_list -%}\n            where {{ filter_list|join('\\n and ') }}\n        {% endif %}\n    ) where rn = 1 -- dedupe\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.3974853, "supported_languages": null}, "macro.dbt_bigquery.partition_by": {"name": "partition_by", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.partition_by", "macro_sql": "{% macro partition_by(partition_config) -%}\n    {%- if partition_config is none -%}\n      {% do return('') %}\n    {%- elif partition_config.time_ingestion_partitioning -%}\n        partition by {{ partition_config.render_wrapped() }}\n    {%- elif partition_config.data_type | lower in ('date','timestamp','datetime') -%}\n        partition by {{ partition_config.render() }}\n    {%- elif partition_config.data_type | lower in ('int64') -%}\n        {%- set range = partition_config.range -%}\n        partition by range_bucket(\n            {{ partition_config.field }},\n            generate_array({{ range.start}}, {{ range.end }}, {{ range.interval }})\n        )\n    {%- endif -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.4085805, "supported_languages": null}, "macro.dbt_bigquery.cluster_by": {"name": "cluster_by", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.cluster_by", "macro_sql": "{% macro cluster_by(raw_cluster_by) %}\n  {%- if raw_cluster_by is not none -%}\n  cluster by {% if raw_cluster_by is string -%}\n    {% set raw_cluster_by = [raw_cluster_by] %}\n  {%- endif -%}\n  {%- for cluster in raw_cluster_by -%}\n    {{ cluster }}\n    {%- if not loop.last -%}, {% endif -%}\n  {%- endfor -%}\n\n  {% endif %}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.4096048, "supported_languages": null}, "macro.dbt_bigquery.bigquery_options": {"name": "bigquery_options", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery_options", "macro_sql": "{% macro bigquery_options(opts) %}\n  {% set options -%}\n    OPTIONS({% for opt_key, opt_val in opts.items() %}\n      {{ opt_key }}={{ opt_val }}{{ \",\" if not loop.last }}\n    {% endfor %})\n  {%- endset %}\n  {%- do return(options) -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.4105515, "supported_languages": null}, "macro.dbt_bigquery.bigquery_table_options": {"name": "bigquery_table_options", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery_table_options", "macro_sql": "{% macro bigquery_table_options(config, node, temporary) %}\n  {% set opts = adapter.get_table_options(config, node, temporary) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.4112458, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_table_as": {"name": "bigquery__create_table_as", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_table_as", "macro_sql": "{% macro bigquery__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {%- if language == 'sql' -%}\n    {%- set raw_partition_by = config.get('partition_by', none) -%}\n    {%- set raw_cluster_by = config.get('cluster_by', none) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set partition_config = adapter.parse_partition_by(raw_partition_by) -%}\n    {%- if partition_config.time_ingestion_partitioning -%}\n    {%- set columns = get_columns_with_types_in_query_sql(sql) -%}\n    {%- set table_dest_columns_csv = columns_without_partition_fields_csv(partition_config, columns) -%}\n    {%- set columns = '(' ~ table_dest_columns_csv ~ ')' -%}\n    {%- endif -%}\n\n    {{ sql_header if sql_header is not none }}\n\n    create or replace table {{ relation }}\n      {%- set contract_config = config.get('contract') -%}\n      {%- if contract_config.enforced -%}\n        {{ get_assert_columns_equivalent(compiled_code) }}\n        {{ get_table_columns_and_constraints() }}\n        {%- set compiled_code = get_select_subquery(compiled_code) %}\n      {% else %}\n        {#-- cannot do contracts at the same time as time ingestion partitioning -#}\n        {{ columns }}\n      {% endif %}\n    {{ partition_by(partition_config) }}\n    {{ cluster_by(raw_cluster_by) }}\n\n    {{ bigquery_table_options(config, model, temporary) }}\n\n    {#-- PARTITION BY cannot be used with the AS query_statement clause.\n         https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#partition_expression\n    -#}\n    {%- if not partition_config.time_ingestion_partitioning %}\n    as (\n      {{ compiled_code }}\n    );\n    {%- endif %}\n  {%- elif language == 'python' -%}\n    {#--\n    N.B. Python models _can_ write to temp views HOWEVER they use a different session\n    and have already expired by the time they need to be used (I.E. in merges for incremental models)\n\n    TODO: Deep dive into spark sessions to see if we can reuse a single session for an entire\n    dbt invocation.\n     --#}\n\n    {#-- when a user wants to change the schema of an existing relation, they must intentionally drop the table in the dataset --#}\n    {%- set old_relation = adapter.get_relation(database=relation.database, schema=relation.schema, identifier=relation.identifier) -%}\n    {%- if (old_relation.is_table and (should_full_refresh())) -%}\n      {% do adapter.drop_relation(relation) %}\n    {%- endif -%}\n    {{ py_write_table(compiled_code=compiled_code, target_relation=relation.quote(database=False, schema=False, identifier=False)) }}\n  {%- else -%}\n    {% do exceptions.raise_compiler_error(\"bigquery__create_table_as macro didn't get supported language, it got %s\" % language) %}\n  {%- endif -%}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.get_columns_with_types_in_query_sql", "macro.dbt_bigquery.columns_without_partition_fields_csv", "macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery", "macro.dbt_bigquery.partition_by", "macro.dbt_bigquery.cluster_by", "macro.dbt_bigquery.bigquery_table_options", "macro.dbt.should_full_refresh", "macro.dbt_bigquery.py_write_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.4160128, "supported_languages": null}, "macro.dbt_bigquery.bigquery_view_options": {"name": "bigquery_view_options", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery_view_options", "macro_sql": "{% macro bigquery_view_options(config, node) %}\n  {% set opts = adapter.get_view_options(config, node) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.4167235, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_view_as": {"name": "bigquery__create_view_as", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_view_as", "macro_sql": "{% macro bigquery__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create or replace view {{ relation }}\n  {{ bigquery_view_options(config, model) }}\n  {%- set contract_config = config.get('contract') -%}\n  {%- if contract_config.enforced -%}\n    {{ get_assert_columns_equivalent(sql) }}\n  {%- endif %}\n  as {{ sql }};\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_view_options", "macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.4179225, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_schema": {"name": "bigquery__drop_schema", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_schema", "macro_sql": "{% macro bigquery__drop_schema(relation) -%}\n  {{ adapter.drop_schema(relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.4183047, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_relation": {"name": "bigquery__drop_relation", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_relation", "macro_sql": "{% macro bigquery__drop_relation(relation) -%}\n  {% call statement('drop_relation') -%}\n    drop {{ relation.type }} if exists {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.418829, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_columns_in_relation": {"name": "bigquery__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_columns_in_relation", "macro_sql": "{% macro bigquery__get_columns_in_relation(relation) -%}\n  {{ return(adapter.get_columns_in_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.4192402, "supported_languages": null}, "macro.dbt_bigquery.bigquery__list_relations_without_caching": {"name": "bigquery__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__list_relations_without_caching", "macro_sql": "{% macro bigquery__list_relations_without_caching(schema_relation) -%}\n  {{ return(adapter.list_relations_without_caching(schema_relation)) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.4196262, "supported_languages": null}, "macro.dbt_bigquery.bigquery__list_schemas": {"name": "bigquery__list_schemas", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__list_schemas", "macro_sql": "{% macro bigquery__list_schemas(database) -%}\n  {{ return(adapter.list_schemas(database)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.4200435, "supported_languages": null}, "macro.dbt_bigquery.bigquery__check_schema_exists": {"name": "bigquery__check_schema_exists", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__check_schema_exists", "macro_sql": "{% macro bigquery__check_schema_exists(information_schema, schema) %}\n  {{ return(adapter.check_schema_exists(information_schema.database, schema)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.4204838, "supported_languages": null}, "macro.dbt_bigquery.bigquery__persist_docs": {"name": "bigquery__persist_docs", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__persist_docs", "macro_sql": "{% macro bigquery__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do alter_column_comment(relation, model.columns) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.4211967, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_column_comment": {"name": "bigquery__alter_column_comment", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_column_comment", "macro_sql": "{% macro bigquery__alter_column_comment(relation, column_dict) -%}\n  {% do adapter.update_columns(relation, column_dict) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.4216292, "supported_languages": null}, "macro.dbt_bigquery.bigquery__rename_relation": {"name": "bigquery__rename_relation", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__rename_relation", "macro_sql": "{% macro bigquery__rename_relation(from_relation, to_relation) -%}\n  {% do adapter.rename_relation(from_relation, to_relation) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.4220452, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_relation_add_columns": {"name": "bigquery__alter_relation_add_columns", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_relation_add_columns", "macro_sql": "{% macro bigquery__alter_relation_add_columns(relation, add_columns) %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n        {% for column in add_columns %}\n          add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n        {% endfor %}\n\n  {%- endset -%}\n\n  {{ return(run_query(sql)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.423073, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_relation_drop_columns": {"name": "bigquery__alter_relation_drop_columns", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_relation_drop_columns", "macro_sql": "{% macro bigquery__alter_relation_drop_columns(relation, drop_columns) %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n        {% for column in drop_columns %}\n          drop column {{ column.name }}{{ ',' if not loop.last }}\n        {% endfor %}\n\n  {%- endset -%}\n\n  {{ return(run_query(sql)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.4242356, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_column_type": {"name": "bigquery__alter_column_type", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_column_type", "macro_sql": "{% macro bigquery__alter_column_type(relation, column_name, new_column_type) -%}\n  {#-- Changing a column's data type using a query requires you to scan the entire table.\n    The query charges can be significant if the table is very large.\n\n    https://cloud.google.com/bigquery/docs/manually-changing-schemas#changing_a_columns_data_type\n  #}\n  {% set relation_columns = get_columns_in_relation(relation) %}\n\n  {% set sql %}\n    select\n      {%- for col in relation_columns -%}\n        {% if col.column == column_name %}\n          CAST({{ col.quoted }} AS {{ new_column_type }}) AS {{ col.quoted }}\n        {%- else %}\n          {{ col.quoted }}\n        {%- endif %}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor %}\n    from {{ relation }}\n  {% endset %}\n\n  {% call statement('alter_column_type') %}\n    {{ create_table_as(False, relation, sql)}}\n  {%- endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_relation", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.4259307, "supported_languages": null}, "macro.dbt_bigquery.bigquery__test_unique": {"name": "bigquery__test_unique", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__test_unique", "macro_sql": "{% macro bigquery__test_unique(model, column_name) %}\n\nwith dbt_test__target as (\n\n  select {{ column_name }} as unique_field\n  from {{ model }}\n  where {{ column_name }} is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.4263947, "supported_languages": null}, "macro.dbt_bigquery.bigquery__upload_file": {"name": "bigquery__upload_file", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__upload_file", "macro_sql": "{% macro bigquery__upload_file(local_file_path, database, table_schema, table_name) %}\n\n  {{ log(\"kwargs: \" ~ kwargs) }}\n\n  {% do adapter.upload_file(local_file_path, database, table_schema, table_name, kwargs=kwargs) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.4271333, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_catalog": {"name": "bigquery__get_catalog", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_catalog", "macro_sql": "{% macro bigquery__get_catalog(information_schema, schemas) -%}\n\n  {%- if (schemas | length) == 0 -%}\n    {# Hopefully nothing cares about the columns we return when there are no rows #}\n    {%- set query  = \"select 1 as id limit 0\" -%}\n  {%- else -%}\n\n  {%- set query -%}\n    with tables as (\n        select\n            project_id as table_database,\n            dataset_id as table_schema,\n            table_id as original_table_name,\n\n            concat(project_id, '.', dataset_id, '.', table_id) as relation_id,\n\n            row_count,\n            size_bytes as size_bytes,\n            case\n                when type = 1 then 'table'\n                when type = 2 then 'view'\n                else 'external'\n            end as table_type,\n\n            REGEXP_CONTAINS(table_id, '^.+[0-9]{8}$') and coalesce(type, 0) = 1 as is_date_shard,\n            REGEXP_EXTRACT(table_id, '^(.+)[0-9]{8}$') as shard_base_name,\n            REGEXP_EXTRACT(table_id, '^.+([0-9]{8})$') as shard_name\n\n        from {{ information_schema.replace(information_schema_view='__TABLES__') }}\n        where (\n          {%- for schema in schemas -%}\n            upper(dataset_id) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n          {%- endfor -%}\n        )\n    ),\n\n    table_options as (\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            JSON_VALUE(option_value) as table_comment\n\n        from {{ information_schema.replace(information_schema_view='TABLE_OPTIONS') }}\n        where option_name = 'description'\n    ),\n    extracted as (\n\n        select *,\n            case\n                when is_date_shard then shard_base_name\n                else original_table_name\n            end as table_name\n\n        from tables\n\n    ),\n\n    unsharded_tables as (\n\n        select\n            table_database,\n            table_schema,\n            table_name,\n            coalesce(table_type, 'external') as table_type,\n            is_date_shard,\n\n            struct(\n                min(shard_name) as shard_min,\n                max(shard_name) as shard_max,\n                count(*) as shard_count\n            ) as table_shards,\n\n            sum(size_bytes) as size_bytes,\n            sum(row_count) as row_count,\n\n            max(relation_id) as relation_id\n\n        from extracted\n        group by 1,2,3,4,5\n\n    ),\n\n    info_schema_columns as (\n\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            table_catalog as table_database,\n            table_schema,\n            table_name,\n\n            -- use the \"real\" column name from the paths query below\n            column_name as base_column_name,\n            ordinal_position as column_index,\n\n            is_partitioning_column,\n            clustering_ordinal_position\n\n        from {{ information_schema.replace(information_schema_view='COLUMNS') }}\n        where ordinal_position is not null\n\n    ),\n\n    info_schema_column_paths as (\n\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            field_path as column_name,\n            data_type as column_type,\n            column_name as base_column_name,\n            description as column_comment\n\n        from {{ information_schema.replace(information_schema_view='COLUMN_FIELD_PATHS') }}\n\n    ),\n\n    columns as (\n\n        select * except (base_column_name)\n        from info_schema_columns\n        join info_schema_column_paths using (relation_id, base_column_name)\n\n    ),\n\n    column_stats as (\n\n        select\n            table_database,\n            table_schema,\n            table_name,\n            max(relation_id) as relation_id,\n            max(case when is_partitioning_column = 'YES' then 1 else 0 end) = 1 as is_partitioned,\n            max(case when is_partitioning_column = 'YES' then column_name else null end) as partition_column,\n            max(case when clustering_ordinal_position is not null then 1 else 0 end) = 1 as is_clustered,\n            array_to_string(\n                array_agg(\n                    case\n                        when clustering_ordinal_position is not null then column_name\n                        else null\n                    end ignore nulls\n                    order by clustering_ordinal_position\n                ), ', '\n            ) as clustering_columns\n\n        from columns\n        group by 1,2,3\n\n    )\n\n    select\n        unsharded_tables.table_database,\n        unsharded_tables.table_schema,\n        case\n            when is_date_shard then concat(unsharded_tables.table_name, '*')\n            else unsharded_tables.table_name\n        end as table_name,\n        unsharded_tables.table_type,\n        table_options.table_comment,\n\n        -- coalesce name and type for External tables - these columns are not\n        -- present in the COLUMN_FIELD_PATHS resultset\n        coalesce(columns.column_name, '<unknown>') as column_name,\n        -- invent a row number to account for nested fields -- BQ does\n        -- not treat these nested properties as independent fields\n        row_number() over (\n            partition by relation_id\n            order by columns.column_index, columns.column_name\n        ) as column_index,\n        coalesce(columns.column_type, '<unknown>') as column_type,\n        columns.column_comment,\n\n        'Shard count' as `stats__date_shards__label`,\n        table_shards.shard_count as `stats__date_shards__value`,\n        'The number of date shards in this table' as `stats__date_shards__description`,\n        is_date_shard as `stats__date_shards__include`,\n\n        'Shard (min)' as `stats__date_shard_min__label`,\n        table_shards.shard_min as `stats__date_shard_min__value`,\n        'The first date shard in this table' as `stats__date_shard_min__description`,\n        is_date_shard as `stats__date_shard_min__include`,\n\n        'Shard (max)' as `stats__date_shard_max__label`,\n        table_shards.shard_max as `stats__date_shard_max__value`,\n        'The last date shard in this table' as `stats__date_shard_max__description`,\n        is_date_shard as `stats__date_shard_max__include`,\n\n        '# Rows' as `stats__num_rows__label`,\n        row_count as `stats__num_rows__value`,\n        'Approximate count of rows in this table' as `stats__num_rows__description`,\n        (unsharded_tables.table_type = 'table') as `stats__num_rows__include`,\n\n        'Approximate Size' as `stats__num_bytes__label`,\n        size_bytes as `stats__num_bytes__value`,\n        'Approximate size of table as reported by BigQuery' as `stats__num_bytes__description`,\n        (unsharded_tables.table_type = 'table') as `stats__num_bytes__include`,\n\n        'Partitioned By' as `stats__partitioning_type__label`,\n        partition_column as `stats__partitioning_type__value`,\n        'The partitioning column for this table' as `stats__partitioning_type__description`,\n        is_partitioned as `stats__partitioning_type__include`,\n\n        'Clustered By' as `stats__clustering_fields__label`,\n        clustering_columns as `stats__clustering_fields__value`,\n        'The clustering columns for this table' as `stats__clustering_fields__description`,\n        is_clustered as `stats__clustering_fields__include`\n\n    -- join using relation_id (an actual relation, not a shard prefix) to make\n    -- sure that column metadata is picked up through the join. This will only\n    -- return the column information for the \"max\" table in a date-sharded table set\n    from unsharded_tables\n    left join table_options using (relation_id)\n    left join columns using (relation_id)\n    left join column_stats using (relation_id)\n  {%- endset -%}\n\n  {%- endif -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.435009, "supported_languages": null}, "macro.dbt_bigquery.date_sharded_table": {"name": "date_sharded_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "unique_id": "macro.dbt_bigquery.date_sharded_table", "macro_sql": "{% macro date_sharded_table(base_name) %}\n    {{ return(base_name ~ \"[DBT__PARTITION_DATE]\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.435784, "supported_languages": null}, "macro.dbt_bigquery.grant_access_to": {"name": "grant_access_to", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "unique_id": "macro.dbt_bigquery.grant_access_to", "macro_sql": "{% macro grant_access_to(entity, entity_type, role, grant_target_dict) -%}\n  {% do adapter.grant_access_to(entity, entity_type, role, grant_target_dict) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.436325, "supported_languages": null}, "macro.dbt_bigquery.get_partitions_metadata": {"name": "get_partitions_metadata", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "unique_id": "macro.dbt_bigquery.get_partitions_metadata", "macro_sql": "\n\n{%- macro get_partitions_metadata(table) -%}\n  {%- if execute -%}\n    {%- set res = adapter.get_partitions_metadata(table) -%}\n    {{- return(res) -}}\n  {%- endif -%}\n  {{- return(None) -}}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.4370081, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_show_grant_sql": {"name": "bigquery__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_show_grant_sql", "macro_sql": "{% macro bigquery__get_show_grant_sql(relation) %}\n    {% set location = adapter.get_dataset_location(relation) %}\n    {% set relation = relation.incorporate(location=location) %}\n\n    select privilege_type, grantee\n    from {{ relation.information_schema(\"OBJECT_PRIVILEGES\") }}\n    where object_schema = \"{{ relation.dataset }}\"\n      and object_name = \"{{ relation.identifier }}\"\n      -- filter out current user\n      and split(grantee, ':')[offset(1)] != session_user()\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.4385643, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_grant_sql": {"name": "bigquery__get_grant_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_grant_sql", "macro_sql": "\n\n\n{%- macro bigquery__get_grant_sql(relation, privilege, grantee) -%}\n    grant `{{ privilege }}` on {{ relation.type }} {{ relation }} to {{ '\\\"' + grantee|join('\\\", \\\"') + '\\\"' }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.4392133, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_revoke_sql": {"name": "bigquery__get_revoke_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_revoke_sql", "macro_sql": "{%- macro bigquery__get_revoke_sql(relation, privilege, grantee) -%}\n    revoke `{{ privilege }}` on {{ relation.type }} {{ relation }} from {{ '\\\"' + grantee|join('\\\", \\\"') + '\\\"' }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.4398606, "supported_languages": null}, "macro.dbt_bigquery.bigquery__resolve_model_name": {"name": "bigquery__resolve_model_name", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt_bigquery.bigquery__resolve_model_name", "macro_sql": "{% macro bigquery__resolve_model_name(input_model_name) -%}\n    {{ input_model_name | string | replace('`', '') | replace('\"', '\\\"') }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.440496, "supported_languages": null}, "macro.dbt_bigquery.bigquery__intersect": {"name": "bigquery__intersect", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt_bigquery.bigquery__intersect", "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.4407902, "supported_languages": null}, "macro.dbt_bigquery.bigquery__position": {"name": "bigquery__position", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt_bigquery.bigquery__position", "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.441266, "supported_languages": null}, "macro.dbt_bigquery.bigquery__dateadd": {"name": "bigquery__dateadd", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt_bigquery.bigquery__dateadd", "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.441842, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_construct": {"name": "bigquery__array_construct", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt_bigquery.bigquery__array_construct", "macro_sql": "{% macro bigquery__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    [ {{ inputs|join(' , ') }} ]\n    {% else %}\n    ARRAY<{{data_type}}>[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.4426475, "supported_languages": null}, "macro.dbt_bigquery.bigquery__format_column": {"name": "bigquery__format_column", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/get_columns_spec_ddl.sql", "original_file_path": "macros/utils/get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__format_column", "macro_sql": "{% macro bigquery__format_column(column) -%}\n  {% set data_type = column.data_type %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.444614, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_empty_schema_sql": {"name": "bigquery__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/get_columns_spec_ddl.sql", "original_file_path": "macros/utils/get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_empty_schema_sql", "macro_sql": "{% macro bigquery__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {% for col in columns.values() %}\n      {%- if col['data_type'] is not defined -%}\n        {{ col_err.append(col['name']) }}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- endif -%}\n\n    {%- set columns = adapter.nest_column_data_types(columns) -%}\n    {{ return(dbt.default__get_empty_schema_sql(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.4461489, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_select_subquery": {"name": "bigquery__get_select_subquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/get_columns_spec_ddl.sql", "original_file_path": "macros/utils/get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_select_subquery", "macro_sql": "{% macro bigquery__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.4466214, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_column_names": {"name": "bigquery__get_column_names", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/get_columns_spec_ddl.sql", "original_file_path": "macros/utils/get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_column_names", "macro_sql": "{% macro bigquery__get_column_names() %}\n  {#- loop through nested user_provided_columns to get column names -#}\n    {%- set user_provided_columns = adapter.nest_column_data_types(model['columns']) -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.4478648, "supported_languages": null}, "macro.dbt_bigquery.bigquery__hash": {"name": "bigquery__hash", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt_bigquery.bigquery__hash", "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt.default__hash(field)}})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.448351, "supported_languages": null}, "macro.dbt_bigquery.bigquery__datediff": {"name": "bigquery__datediff", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt_bigquery.bigquery__datediff", "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) -%}\n\n  {% if dbt_version[0] == 1 and dbt_version[2] >= 2 %}\n    {{ return(dbt.datediff(first_date, second_date, datepart)) }}\n  {% else %}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.4497695, "supported_languages": null}, "macro.dbt_bigquery.bigquery__right": {"name": "bigquery__right", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt_bigquery.bigquery__right", "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.4503927, "supported_languages": null}, "macro.dbt_bigquery.bigquery__listagg": {"name": "bigquery__listagg", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt_bigquery.bigquery__listagg", "macro_sql": "{% macro bigquery__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        {% if limit_num -%}\n        limit {{ limit_num }}\n        {%- endif %}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.4513776, "supported_languages": null}, "macro.dbt_bigquery.bigquery__escape_single_quotes": {"name": "bigquery__escape_single_quotes", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt_bigquery.bigquery__escape_single_quotes", "macro_sql": "{% macro bigquery__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.4519079, "supported_languages": null}, "macro.dbt_bigquery.bigquery__date_trunc": {"name": "bigquery__date_trunc", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt_bigquery.bigquery__date_trunc", "macro_sql": "{% macro bigquery__date_trunc(datepart, date) -%}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.4523907, "supported_languages": null}, "macro.dbt_bigquery.bigquery__split_part": {"name": "bigquery__split_part", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt_bigquery.bigquery__split_part", "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n  {% else %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset(\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 1 + {{ part_number }}\n        )]\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.4538255, "supported_languages": null}, "macro.dbt_bigquery.bigquery__safe_cast": {"name": "bigquery__safe_cast", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt_bigquery.bigquery__safe_cast", "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.4542854, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_append": {"name": "bigquery__array_append", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt_bigquery.bigquery__array_append", "macro_sql": "{% macro bigquery__array_append(array, new_element) -%}\n    {{ array_concat(array, array_construct([new_element])) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.array_concat", "macro.dbt.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.4548285, "supported_languages": null}, "macro.dbt_bigquery.bigquery__current_timestamp": {"name": "bigquery__current_timestamp", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_bigquery.bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() -%}\n  current_timestamp()\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.4552612, "supported_languages": null}, "macro.dbt_bigquery.bigquery__snapshot_string_as_time": {"name": "bigquery__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_bigquery.bigquery__snapshot_string_as_time", "macro_sql": "{% macro bigquery__snapshot_string_as_time(timestamp) -%}\n    {%- set result = 'TIMESTAMP(\"' ~ timestamp ~ '\")' -%}\n    {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.455757, "supported_languages": null}, "macro.dbt_bigquery.bigquery__current_timestamp_backcompat": {"name": "bigquery__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_bigquery.bigquery__current_timestamp_backcompat", "macro_sql": "{% macro bigquery__current_timestamp_backcompat() -%}\n  current_timestamp\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.4559827, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_concat": {"name": "bigquery__array_concat", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt_bigquery.bigquery__array_concat", "macro_sql": "{% macro bigquery__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.456449, "supported_languages": null}, "macro.dbt_bigquery.bigquery__except": {"name": "bigquery__except", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt_bigquery.bigquery__except", "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.456747, "supported_languages": null}, "macro.dbt_bigquery.bigquery__bool_or": {"name": "bigquery__bool_or", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt_bigquery.bigquery__bool_or", "macro_sql": "{% macro bigquery__bool_or(expression) -%}\n\n    logical_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.4571183, "supported_languages": null}, "macro.dbt_bigquery.materialization_table_bigquery": {"name": "materialization_table_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_bigquery.materialization_table_bigquery", "macro_sql": "{% materialization table, adapter='bigquery', supported_languages=['sql', 'python']-%}\n\n  {%- set language = model['language'] -%}\n  {%- set identifier = model['alias'] -%}\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n  {%- set target_relation = api.Relation.create(database=database, schema=schema, identifier=identifier, type='table') -%}\n\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#\n      We only need to drop this thing if it is not a table.\n      If it _is_ already a table, then we can overwrite it without downtime\n      Unlike table -> view, no need for `--full-refresh`: dropping a view is no big deal\n  #}\n  {%- if exists_not_as_table -%}\n      {{ adapter.drop_relation(old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n  {% if not adapter.is_replaceable(old_relation, partition_by, cluster_by) %}\n    {% do log(\"Hard refreshing \" ~ old_relation ~ \" because it is not replaceable\") %}\n    {% do adapter.drop_relation(old_relation) %}\n  {% endif %}\n\n  -- build model\n  {%- call statement('main', language=language) -%}\n    {{ create_table_as(False, target_relation, compiled_code, language) }}\n  {%- endcall -%}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.4648433, "supported_languages": ["sql", "python"]}, "macro.dbt_bigquery.py_write_table": {"name": "py_write_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_bigquery.py_write_table", "macro_sql": "{% macro py_write_table(compiled_code, target_relation) %}\nfrom pyspark.sql import SparkSession\n\nspark = SparkSession.builder.appName('smallTest').getOrCreate()\n\nspark.conf.set(\"viewsEnabled\",\"true\")\nspark.conf.set(\"temporaryGcsBucket\",\"{{target.gcs_bucket}}\")\n\n{{ compiled_code }}\ndbt = dbtObj(spark.read.format(\"bigquery\").load)\ndf = model(dbt, spark)\n\n# COMMAND ----------\n# this is materialization code dbt generated, please do not modify\n\nimport pyspark\n# make sure pandas exists before using it\ntry:\n  import pandas\n  pandas_available = True\nexcept ImportError:\n  pandas_available = False\n\n# make sure pyspark.pandas exists before using it\ntry:\n  import pyspark.pandas\n  pyspark_pandas_api_available = True\nexcept ImportError:\n  pyspark_pandas_api_available = False\n\n# make sure databricks.koalas exists before using it\ntry:\n  import databricks.koalas\n  koalas_available = True\nexcept ImportError:\n  koalas_available = False\n\n# preferentially convert pandas DataFrames to pandas-on-Spark or Koalas DataFrames first\n# since they know how to convert pandas DataFrames better than `spark.createDataFrame(df)`\n# and converting from pandas-on-Spark to Spark DataFrame has no overhead\nif pyspark_pandas_api_available and pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = pyspark.pandas.frame.DataFrame(df)\nelif koalas_available and pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = databricks.koalas.frame.DataFrame(df)\n\n# convert to pyspark.sql.dataframe.DataFrame\nif isinstance(df, pyspark.sql.dataframe.DataFrame):\n  pass  # since it is already a Spark DataFrame\nelif pyspark_pandas_api_available and isinstance(df, pyspark.pandas.frame.DataFrame):\n  df = df.to_spark()\nelif koalas_available and isinstance(df, databricks.koalas.frame.DataFrame):\n  df = df.to_spark()\nelif pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = spark.createDataFrame(df)\nelse:\n  msg = f\"{type(df)} is not a supported type for dbt Python materialization\"\n  raise Exception(msg)\n\ndf.write \\\n  .mode(\"overwrite\") \\\n  .format(\"bigquery\") \\\n  .option(\"writeMethod\", \"direct\").option(\"writeDisposition\", 'WRITE_TRUNCATE') \\\n  .save(\"{{target_relation}}\")\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.4656143, "supported_languages": null}, "macro.dbt_bigquery.materialization_copy_bigquery": {"name": "materialization_copy_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/copy.sql", "original_file_path": "macros/materializations/copy.sql", "unique_id": "macro.dbt_bigquery.materialization_copy_bigquery", "macro_sql": "{% materialization copy, adapter='bigquery' -%}\n\n  {# Setup #}\n  {{ run_hooks(pre_hooks) }}\n\n  {% set destination = this.incorporate(type='table') %}\n\n  {# there can be several ref() or source() according to BQ copy API docs #}\n  {# cycle over ref() and source() to create source tables array #}\n  {% set source_array = [] %}\n  {% for ref_table in model.refs %}\n    {{ source_array.append(ref(*ref_table)) }}\n  {% endfor %}\n\n  {% for src_table in model.sources %}\n    {{ source_array.append(source(*src_table)) }}\n  {% endfor %}\n\n  {# Call adapter copy_table function #}\n  {%- set result_str = adapter.copy_table(\n      source_array,\n      destination,\n      config.get('copy_materialization', default = 'table')) -%}\n\n  {{ store_result('main', response=result_str) }}\n\n  {# Clean up #}\n  {{ run_hooks(post_hooks) }}\n  {%- do apply_grants(target_relation, grant_config) -%}\n  {{ adapter.commit() }}\n\n  {{ return({'relations': [destination]}) }}\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.4685671, "supported_languages": ["sql"]}, "macro.dbt_bigquery.bigquery__snapshot_hash_arguments": {"name": "bigquery__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_bigquery.bigquery__snapshot_hash_arguments", "macro_sql": "{% macro bigquery__snapshot_hash_arguments(args) -%}\n  to_hex(md5(concat({%- for arg in args -%}\n    coalesce(cast({{ arg }} as string), ''){% if not loop.last %}, '|',{% endif -%}\n  {%- endfor -%}\n  )))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.4695585, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_columns": {"name": "bigquery__create_columns", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_columns", "macro_sql": "{% macro bigquery__create_columns(relation, columns) %}\n  {{ adapter.alter_table_add_columns(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.4699788, "supported_languages": null}, "macro.dbt_bigquery.bigquery__post_snapshot": {"name": "bigquery__post_snapshot", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_bigquery.bigquery__post_snapshot", "macro_sql": "{% macro bigquery__post_snapshot(staging_relation) %}\n  -- Clean up the snapshot temp table\n  {% do drop_relation(staging_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.4703395, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_csv_table": {"name": "bigquery__create_csv_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_csv_table", "macro_sql": "{% macro bigquery__create_csv_table(model, agate_table) %}\n    -- no-op\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.4712136, "supported_languages": null}, "macro.dbt_bigquery.bigquery__reset_csv_table": {"name": "bigquery__reset_csv_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_bigquery.bigquery__reset_csv_table", "macro_sql": "{% macro bigquery__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.4716427, "supported_languages": null}, "macro.dbt_bigquery.bigquery__load_csv_rows": {"name": "bigquery__load_csv_rows", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_bigquery.bigquery__load_csv_rows", "macro_sql": "{% macro bigquery__load_csv_rows(model, agate_table) %}\n\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {{ adapter.load_dataframe(model['database'], model['schema'], model['alias'],\n  \t\t\t\t\t\t\tagate_table, column_override) }}\n\n  {% call statement() %}\n    alter table {{ this.render() }} set {{ bigquery_table_options(config, model) }}\n  {% endcall %}\n\n  {% if config.persist_relation_docs() and 'description' in model %}\n\n  \t{{ adapter.update_table_description(model['database'], model['schema'], model['alias'], model['description']) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_bigquery.bigquery_table_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.4735315, "supported_languages": null}, "macro.dbt_bigquery.bigquery__handle_existing_table": {"name": "bigquery__handle_existing_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "unique_id": "macro.dbt_bigquery.bigquery__handle_existing_table", "macro_sql": "{% macro bigquery__handle_existing_table(full_refresh, old_relation) %}\n    {%- if full_refresh -%}\n      {{ adapter.drop_relation(old_relation) }}\n    {%- else -%}\n      {{ exceptions.relation_wrong_type(old_relation, 'view') }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.4748805, "supported_languages": null}, "macro.dbt_bigquery.materialization_view_bigquery": {"name": "materialization_view_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "unique_id": "macro.dbt_bigquery.materialization_view_bigquery", "macro_sql": "{% materialization view, adapter='bigquery' -%}\n    -- grab current tables grants config for comparision later on\n    {% set grant_config = config.get('grants') %}\n\n    {% set to_return = create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {% if config.get('grant_access_to') %}\n      {% for grant_target_dict in config.get('grant_access_to') %}\n        {% do adapter.grant_access_to(this, 'view', None, grant_target_dict) %}\n      {% endfor %}\n    {% endif %}\n\n    {% do return(to_return) %}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.4766092, "supported_languages": ["sql"]}, "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy": {"name": "dbt_bigquery_validate_get_incremental_strategy", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "macro_sql": "{% macro dbt_bigquery_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\") or 'merge' -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'insert_overwrite'\n  {%- endset %}\n  {% if strategy not in ['merge', 'insert_overwrite'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.4812, "supported_languages": null}, "macro.dbt_bigquery.source_sql_with_partition": {"name": "source_sql_with_partition", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.source_sql_with_partition", "macro_sql": "{% macro source_sql_with_partition(partition_by, source_sql) %}\n\n  {%- if partition_by.time_ingestion_partitioning %}\n    {{ return(wrap_with_time_ingestion_partitioning_sql(partition_by, source_sql, False))  }}\n  {% else %}\n    {{ return(source_sql)  }}\n  {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.4819646, "supported_languages": null}, "macro.dbt_bigquery.bq_create_table_as": {"name": "bq_create_table_as", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.bq_create_table_as", "macro_sql": "{% macro bq_create_table_as(partition_by, temporary, relation, compiled_code, language='sql') %}\n  {%- set _dbt_max_partition = declare_dbt_max_partition(this, partition_by, compiled_code, language) -%}\n  {% if partition_by.time_ingestion_partitioning and language == 'python' %}\n    {% do exceptions.raise_compiler_error(\n      \"Python models do not support ingestion time partitioning\"\n    ) %}\n  {% elif partition_by.time_ingestion_partitioning and language == 'sql' %}\n    {#-- Create the table before inserting data as ingestion time partitioned tables can't be created with the transformed data --#}\n    {% do run_query(create_table_as(temporary, relation, compiled_code)) %}\n    {{ return(_dbt_max_partition + bq_insert_into_ingestion_time_partitioned_table_sql(relation, compiled_code)) }}\n  {% else %}\n    {{ return(_dbt_max_partition + create_table_as(temporary, relation, compiled_code, language)) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.declare_dbt_max_partition", "macro.dbt.run_query", "macro.dbt.create_table_as", "macro.dbt_bigquery.bq_insert_into_ingestion_time_partitioned_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.4838316, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_incremental_build_sql": {"name": "bq_generate_incremental_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.bq_generate_incremental_build_sql", "macro_sql": "{% macro bq_generate_incremental_build_sql(\n    strategy, tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions, incremental_predicates\n) %}\n  {#-- if partitioned, use BQ scripting to get the range of partition values to be updated --#}\n  {% if strategy == 'insert_overwrite' %}\n\n    {% set build_sql = bq_generate_incremental_insert_overwrite_build_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n    ) %}\n\n  {% else %} {# strategy == 'merge' #}\n\n    {% set build_sql = bq_generate_incremental_merge_build_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, incremental_predicates\n    ) %}\n\n  {% endif %}\n\n  {{ return(build_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_generate_incremental_insert_overwrite_build_sql", "macro.dbt_bigquery.bq_generate_incremental_merge_build_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.4856083, "supported_languages": null}, "macro.dbt_bigquery.materialization_incremental_bigquery": {"name": "materialization_incremental_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.materialization_incremental_bigquery", "macro_sql": "{% materialization incremental, adapter='bigquery', supported_languages=['sql', 'python'] -%}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n  {%- set language = model['language'] %}\n\n  {%- set target_relation = this %}\n  {%- set existing_relation = load_relation(this) %}\n  {%- set tmp_relation = make_temp_relation(this) %}\n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_bigquery_validate_get_incremental_strategy(config) -%}\n\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set partitions = config.get('partitions', none) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n  {% set incremental_predicates = config.get('predicates', default=none) or config.get('incremental_predicates', default=none) %}\n\n   -- grab current tables grants config for comparison later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if partition_by.copy_partitions is true and strategy != 'insert_overwrite' %} {#-- We can't copy partitions with merge strategy --#}\n        {% set wrong_strategy_msg -%}\n        The 'copy_partitions' option requires the 'incremental_strategy' option to be set to 'insert_overwrite'.\n        {%- endset %}\n        {% do exceptions.raise_compiler_error(wrong_strategy_msg) %}\n\n  {% elif existing_relation is none %}\n      {%- call statement('main', language=language) -%}\n        {{ bq_create_table_as(partition_by, False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% elif existing_relation.is_view %}\n      {#-- There's no way to atomically replace a view with a table on BQ --#}\n      {{ adapter.drop_relation(existing_relation) }}\n      {%- call statement('main', language=language) -%}\n        {{ bq_create_table_as(partition_by, False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% elif full_refresh_mode %}\n      {#-- If the partition/cluster config has changed, then we must drop and recreate --#}\n      {% if not adapter.is_replaceable(existing_relation, partition_by, cluster_by) %}\n          {% do log(\"Hard refreshing \" ~ existing_relation ~ \" because it is not replaceable\") %}\n          {{ adapter.drop_relation(existing_relation) }}\n      {% endif %}\n      {%- call statement('main', language=language) -%}\n        {{ bq_create_table_as(partition_by, False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% else %}\n    {%- if language == 'python' and strategy == 'insert_overwrite' -%}\n      {#-- This lets us move forward assuming no python will be directly templated into a query --#}\n      {%- set python_unsupported_msg -%}\n        The 'insert_overwrite' strategy is not yet supported for python models.\n      {%- endset %}\n      {% do exceptions.raise_compiler_error(python_unsupported_msg) %}\n    {%- endif -%}\n\n    {% set tmp_relation_exists = false %}\n    {% if on_schema_change != 'ignore' or language == 'python' %}\n      {#-- Check first, since otherwise we may not build a temp table --#}\n      {#-- Python always needs to create a temp table --#}\n      {%- call statement('create_tmp_relation', language=language) -%}\n        {{ bq_create_table_as(partition_by, True, tmp_relation, compiled_code, language) }}\n      {%- endcall -%}\n      {% set tmp_relation_exists = true %}\n      {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n      {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% endif %}\n\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {#--  Add time ingestion pseudo column to destination column as not part of the 'schema' but still need it for actual data insertion --#}\n    {% if partition_by.time_ingestion_partitioning %}\n      {% set dest_columns = adapter.add_time_ingestion_partition_column(partition_by, dest_columns) %}\n    {% endif %}\n\n    {% set build_sql = bq_generate_incremental_build_sql(\n        strategy, tmp_relation, target_relation, compiled_code, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, partition_by.copy_partitions, incremental_predicates\n    ) %}\n\n    {%- call statement('main') -%}\n      {{ build_sql }}\n    {% endcall %}\n\n    {%- if language == 'python' and tmp_relation -%}\n      {{ adapter.drop_relation(tmp_relation) }}\n    {%- endif -%}\n\n  {% endif %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt_bigquery.bq_create_table_as", "macro.dbt.process_schema_changes", "macro.dbt_bigquery.bq_generate_incremental_build_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.4956117, "supported_languages": ["sql", "python"]}, "macro.dbt_bigquery.bigquery__can_clone_table": {"name": "bigquery__can_clone_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/clone.sql", "original_file_path": "macros/materializations/clone.sql", "unique_id": "macro.dbt_bigquery.bigquery__can_clone_table", "macro_sql": "{% macro bigquery__can_clone_table() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.4962866, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_or_replace_clone": {"name": "bigquery__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/clone.sql", "original_file_path": "macros/materializations/clone.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_or_replace_clone", "macro_sql": "{% macro bigquery__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace\n      table {{ this_relation }}\n      clone {{ defer_relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.4966648, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_incremental_merge_build_sql": {"name": "bq_generate_incremental_merge_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/merge.sql", "original_file_path": "macros/materializations/incremental_strategy/merge.sql", "unique_id": "macro.dbt_bigquery.bq_generate_incremental_merge_build_sql", "macro_sql": "{% macro bq_generate_incremental_merge_build_sql(\n    tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, incremental_predicates\n) %}\n    {%- set source_sql -%}\n        {%- if tmp_relation_exists -%}\n        (\n        select\n        {% if partition_by.time_ingestion_partitioning -%}\n        {{ partition_by.insertable_time_partitioning_field() }},\n        {%- endif -%}\n        * from {{ tmp_relation }}\n        )\n        {%- else -%} {#-- wrap sql in parens to make it a subquery --#}\n        (\n            {%- if partition_by.time_ingestion_partitioning -%}\n            {{ wrap_with_time_ingestion_partitioning_sql(partition_by, sql, True) }}\n            {%- else -%}\n            {{sql}}\n            {%- endif %}\n        )\n        {%- endif -%}\n    {%- endset -%}\n\n    {% set build_sql = get_merge_sql(target_relation, source_sql, unique_key, dest_columns, incremental_predicates) %}\n\n    {{ return(build_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.4988463, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_incremental_insert_overwrite_build_sql": {"name": "bq_generate_incremental_insert_overwrite_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_generate_incremental_insert_overwrite_build_sql", "macro_sql": "{% macro bq_generate_incremental_insert_overwrite_build_sql(\n    tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n) %}\n    {% if partition_by is none %}\n      {% set missing_partition_msg -%}\n      The 'insert_overwrite' strategy requires the `partition_by` config.\n      {%- endset %}\n      {% do exceptions.raise_compiler_error(missing_partition_msg) %}\n    {% endif %}\n\n    {% set build_sql = bq_insert_overwrite_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n    ) %}\n\n    {{ return(build_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.5045328, "supported_languages": null}, "macro.dbt_bigquery.bq_copy_partitions": {"name": "bq_copy_partitions", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_copy_partitions", "macro_sql": "{% macro bq_copy_partitions(tmp_relation, target_relation, partitions, partition_by) %}\n\n  {% for partition in partitions %}\n    {% if partition_by.granularity == 'hour' %}\n      {% set partition = partition.strftime(\"%Y%m%d%H\") %}\n    {% elif partition_by.granularity == 'day' %}\n      {% set partition = partition.strftime(\"%Y%m%d\") %}\n    {% elif partition_by.granularity == 'month' %}\n      {% set partition = partition.strftime(\"%Y%m\") %}\n    {% elif partition_by.granularity == 'year' %}\n      {% set partition = partition.strftime(\"%Y\") %}\n    {% endif %}\n    {% set tmp_relation_partitioned = api.Relation.create(database=tmp_relation.database, schema=tmp_relation.schema, identifier=tmp_relation.table ~ '$' ~ partition, type=tmp_relation.type) %}\n    {% set target_relation_partitioned = api.Relation.create(database=target_relation.database, schema=target_relation.schema, identifier=target_relation.table ~ '$' ~ partition, type=target_relation.type) %}\n    {% do adapter.copy_table(tmp_relation_partitioned, target_relation_partitioned, \"table\") %}\n  {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.507419, "supported_languages": null}, "macro.dbt_bigquery.bq_insert_overwrite_sql": {"name": "bq_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_insert_overwrite_sql", "macro_sql": "{% macro bq_insert_overwrite_sql(\n    tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n) %}\n  {% if partitions is not none and partitions != [] %} {# static #}\n      {{ bq_static_insert_overwrite_sql(tmp_relation, target_relation, sql, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions) }}\n  {% else %} {# dynamic #}\n      {{ bq_dynamic_insert_overwrite_sql(tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_static_insert_overwrite_sql", "macro.dbt_bigquery.bq_dynamic_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.5088515, "supported_languages": null}, "macro.dbt_bigquery.bq_static_insert_overwrite_sql": {"name": "bq_static_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_static_insert_overwrite_sql", "macro_sql": "{% macro bq_static_insert_overwrite_sql(\n    tmp_relation, target_relation, sql, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n) %}\n\n      {% set predicate -%}\n          {{ partition_by.render_wrapped(alias='DBT_INTERNAL_DEST') }} in (\n              {{ partitions | join (', ') }}\n          )\n      {%- endset %}\n\n      {%- set source_sql -%}\n        (\n          {% if partition_by.time_ingestion_partitioning and tmp_relation_exists -%}\n          select\n            {{ partition_by.insertable_time_partitioning_field() }},\n            * from {{ tmp_relation }}\n          {% elif tmp_relation_exists -%}\n            select\n            * from {{ tmp_relation }}\n          {%- elif partition_by.time_ingestion_partitioning -%}\n            {{ wrap_with_time_ingestion_partitioning_sql(partition_by, sql, True) }}\n          {%- else -%}\n            {{sql}}\n          {%- endif -%}\n\n        )\n      {%- endset -%}\n\n      {% if copy_partitions %}\n          {% do bq_copy_partitions(tmp_relation, target_relation, partitions, partition_by) %}\n      {% else %}\n\n      {#-- In case we're putting the model SQL _directly_ into the MERGE statement,\n         we need to prepend the MERGE statement with the user-configured sql_header,\n         which may be needed to resolve that model SQL (e.g. referencing a variable or UDF in the header)\n         in the \"temporary table exists\" case, we save the model SQL result as a temp table first, wherein the\n         sql_header is included by the create_table_as macro.\n      #}\n      -- 1. run the merge statement\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate], include_sql_header = not tmp_relation_exists) }};\n\n      {%- if tmp_relation_exists -%}\n      -- 2. clean up the temp table\n      drop table if exists {{ tmp_relation }};\n      {%- endif -%}\n\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro.dbt_bigquery.bq_copy_partitions", "macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.5113568, "supported_languages": null}, "macro.dbt_bigquery.bq_dynamic_copy_partitions_insert_overwrite_sql": {"name": "bq_dynamic_copy_partitions_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_dynamic_copy_partitions_insert_overwrite_sql", "macro_sql": "{% macro bq_dynamic_copy_partitions_insert_overwrite_sql(\n  tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions\n  ) %}\n  {# We run temp table creation in a separated script to move to partitions copy #}\n  {%- call statement('create_tmp_relation_for_copy', language='sql') -%}\n    {{ bq_create_table_as(partition_by, True, tmp_relation, sql, 'sql')\n  }}\n  {%- endcall %}\n  {%- set partitions_sql -%}\n    select distinct {{ partition_by.render_wrapped() }}\n    from {{ tmp_relation }}\n  {%- endset -%}\n  {%- set partitions = run_query(partitions_sql).columns[0].values() -%}\n  {# We copy the partitions #}\n  {%- do bq_copy_partitions(tmp_relation, target_relation, partitions, partition_by) -%}\n  -- Clean up the temp table\n  drop table if exists {{ tmp_relation }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_bigquery.bq_create_table_as", "macro.dbt.run_query", "macro.dbt_bigquery.bq_copy_partitions"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.5130184, "supported_languages": null}, "macro.dbt_bigquery.bq_dynamic_insert_overwrite_sql": {"name": "bq_dynamic_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_dynamic_insert_overwrite_sql", "macro_sql": "{% macro bq_dynamic_insert_overwrite_sql(tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions) %}\n  {%- if copy_partitions is true %}\n     {{ bq_dynamic_copy_partitions_insert_overwrite_sql(tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions) }}\n  {% else -%}\n      {% set predicate -%}\n          {{ partition_by.render_wrapped(alias='DBT_INTERNAL_DEST') }} in unnest(dbt_partitions_for_replacement)\n      {%- endset %}\n\n      {%- set source_sql -%}\n      (\n        select\n        {% if partition_by.time_ingestion_partitioning -%}\n        {{ partition_by.insertable_time_partitioning_field() }},\n        {%- endif -%}\n        * from {{ tmp_relation }}\n      )\n      {%- endset -%}\n\n      -- generated script to merge partitions into {{ target_relation }}\n      declare dbt_partitions_for_replacement array<{{ partition_by.data_type_for_partition() }}>;\n\n      {# have we already created the temp table to check for schema changes? #}\n      {% if not tmp_relation_exists %}\n       -- 1. create a temp table with model data\n        {{ bq_create_table_as(partition_by, True, tmp_relation, sql, 'sql') }}\n      {% else %}\n        -- 1. temp table already exists, we used it to check for schema changes\n      {% endif %}\n      {%- set partition_field = partition_by.time_partitioning_field() if partition_by.time_ingestion_partitioning else partition_by.render_wrapped() -%}\n\n      -- 2. define partitions to update\n      set (dbt_partitions_for_replacement) = (\n          select as struct\n              -- IGNORE NULLS: this needs to be aligned to _dbt_max_partition, which ignores null\n              array_agg(distinct {{ partition_field }} IGNORE NULLS)\n          from {{ tmp_relation }}\n      );\n\n      -- 3. run the merge statement\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate]) }};\n\n      -- 4. clean up the temp table\n      drop table if exists {{ tmp_relation }}\n\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_dynamic_copy_partitions_insert_overwrite_sql", "macro.dbt_bigquery.bq_create_table_as", "macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.5158339, "supported_languages": null}, "macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql": {"name": "wrap_with_time_ingestion_partitioning_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro_sql": "{% macro wrap_with_time_ingestion_partitioning_sql(partition_by, sql, is_nested) %}\n\n  select TIMESTAMP({{ partition_by.field }}) as {{ partition_by.insertable_time_partitioning_field() }}, * EXCEPT({{ partition_by.field }}) from (\n    {{ sql }}\n  ){%- if not is_nested -%};{%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.5188174, "supported_languages": null}, "macro.dbt_bigquery.get_quoted_with_types_csv": {"name": "get_quoted_with_types_csv", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.get_quoted_with_types_csv", "macro_sql": "{% macro get_quoted_with_types_csv(columns) %}\n    {% set quoted = [] %}\n    {% for col in columns -%}\n        {%- do quoted.append(adapter.quote(col.name) ~ \" \" ~ col.data_type) -%}\n    {%- endfor %}\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.5198853, "supported_languages": null}, "macro.dbt_bigquery.columns_without_partition_fields_csv": {"name": "columns_without_partition_fields_csv", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.columns_without_partition_fields_csv", "macro_sql": "{% macro columns_without_partition_fields_csv(partition_config, columns) -%}\n  {%- set columns_no_partition = partition_config.reject_partition_field_column(columns) -%}\n  {% set columns_names = get_quoted_with_types_csv(columns_no_partition) %}\n  {{ return(columns_names) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.get_quoted_with_types_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.5205634, "supported_languages": null}, "macro.dbt_bigquery.bq_insert_into_ingestion_time_partitioned_table_sql": {"name": "bq_insert_into_ingestion_time_partitioned_table_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.bq_insert_into_ingestion_time_partitioned_table_sql", "macro_sql": "{% macro bq_insert_into_ingestion_time_partitioned_table_sql(target_relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n  {{ sql_header if sql_header is not none }}\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {% set dest_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set dest_columns_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n  insert into {{ target_relation }} ({{ partition_by.insertable_time_partitioning_field() }}, {{ dest_columns_csv }})\n    {{ wrap_with_time_ingestion_partitioning_sql(partition_by, sql, False) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.522205, "supported_languages": null}, "macro.dbt_bigquery.get_columns_with_types_in_query_sql": {"name": "get_columns_with_types_in_query_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.get_columns_with_types_in_query_sql", "macro_sql": "{% macro get_columns_with_types_in_query_sql(select_sql) %}\n  {% set sql %}\n    {%- set sql_header = config.get('sql_header', none) -%}\n    {{ sql_header if sql_header is not none }}\n    select * from (\n      {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n  {% endset %}\n  {{ return(adapter.get_columns_in_select_sql(sql)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.5231333, "supported_languages": null}, "macro.dbt_bigquery.declare_dbt_max_partition": {"name": "declare_dbt_max_partition", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/common.sql", "original_file_path": "macros/materializations/incremental_strategy/common.sql", "unique_id": "macro.dbt_bigquery.declare_dbt_max_partition", "macro_sql": "{% macro declare_dbt_max_partition(relation, partition_by, compiled_code, language='sql') %}\n\n  {#-- TODO: revisit partitioning with python models --#}\n  {%- if '_dbt_max_partition' in compiled_code and language == 'sql' -%}\n\n    declare _dbt_max_partition {{ partition_by.data_type_for_partition() }} default (\n      select max({{ partition_by.field }}) from {{ this }}\n      where {{ partition_by.field }} is not null\n    );\n\n  {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.5243104, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.5257275, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.5263805, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.5271595, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.5280256, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.5317047, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.5332155, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.5339942, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.5378497, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.540899, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.5428734, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.5435002, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.5471067, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.5474362, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.5479043, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.5482228, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.5491297, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.5496404, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.5499337, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.5505342, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.5510364, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.551639, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.5521786, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.5532076, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.5549655, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.5554805, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.5561728, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.5567853, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.559667, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.5642729, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.564708, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.5655203, "supported_languages": null}, "macro.dbt.get_empty_subquery_sql": {"name": "get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_subquery_sql", "macro_sql": "{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.5661013, "supported_languages": null}, "macro.dbt.default__get_empty_subquery_sql": {"name": "default__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_subquery_sql", "macro_sql": "{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.5666492, "supported_languages": null}, "macro.dbt.get_empty_schema_sql": {"name": "get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_schema_sql", "macro_sql": "{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.5671375, "supported_languages": null}, "macro.dbt.default__get_empty_schema_sql": {"name": "default__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_schema_sql", "macro_sql": "{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {{ col_err.append(col['name']) }}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      cast(null as {{ col['data_type'] }}) as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.5691187, "supported_languages": null}, "macro.dbt.get_column_schema_from_query": {"name": "get_column_schema_from_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_column_schema_from_query", "macro_sql": "{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.570037, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.570535, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.5714438, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.5720742, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.6379254, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.6387193, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.6408334, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.6418326, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.6423419, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.6427848, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.6432872, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.645217, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.6456006, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.646036, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.6470933, "supported_languages": null}, "macro.dbt.get_drop_index_sql": {"name": "get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_drop_index_sql", "macro_sql": "{% macro get_drop_index_sql(relation, index_name) -%}\n    {{ adapter.dispatch('get_drop_index_sql', 'dbt')(relation, index_name) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_drop_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.6475987, "supported_languages": null}, "macro.dbt.default__get_drop_index_sql": {"name": "default__get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_drop_index_sql", "macro_sql": "{% macro default__get_drop_index_sql(relation, index_name) -%}\n    {{ exceptions.raise_compiler_error(\"`get_drop_index_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.6479995, "supported_languages": null}, "macro.dbt.get_show_indexes_sql": {"name": "get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_show_indexes_sql", "macro_sql": "{% macro get_show_indexes_sql(relation) -%}\n    {{ adapter.dispatch('get_show_indexes_sql', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_indexes_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.6484313, "supported_languages": null}, "macro.dbt.default__get_show_indexes_sql": {"name": "default__get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_show_indexes_sql", "macro_sql": "{% macro default__get_show_indexes_sql(relation) -%}\n    {{ exceptions.raise_compiler_error(\"`get_show_indexes_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.6487787, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.6519494, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.6526523, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.653161, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.6535923, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.6540823, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.6549273, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.6554878, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.656325, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.6568482, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.6573012, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.6629117, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.6633732, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.663984, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.6647592, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.665406, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.666243, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.6667469, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.6671977, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.6677525, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.6685274, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.6691916, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.6706371, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.6714344, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.6718621, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.6724005, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.6735675, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.6739852, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.67438, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.6746817, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.6751306, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.6753538, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.675837, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_bigquery.bigquery__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.676304, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.678309, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n    {% call statement('drop_relation', auto_begin=False) -%}\n        {%- if relation.is_table -%}\n            {{- drop_table(relation) -}}\n        {%- elif relation.is_view -%}\n            {{- drop_view(relation) -}}\n        {%- elif relation.is_materialized_view -%}\n            {{- drop_materialized_view(relation) -}}\n        {%- else -%}\n            drop {{ relation.type }} if exists {{ relation }} cascade\n        {%- endif -%}\n    {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.drop_table", "macro.dbt.drop_view", "macro.dbt.drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.679513, "supported_languages": null}, "macro.dbt.drop_table": {"name": "drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.drop_table", "macro_sql": "{% macro drop_table(relation) -%}\n  {{ return(adapter.dispatch('drop_table', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.6800244, "supported_languages": null}, "macro.dbt.default__drop_table": {"name": "default__drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.default__drop_table", "macro_sql": "{% macro default__drop_table(relation) -%}\n    drop table if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.6803272, "supported_languages": null}, "macro.dbt.drop_view": {"name": "drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.drop_view", "macro_sql": "{% macro drop_view(relation) -%}\n  {{ return(adapter.dispatch('drop_view', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.6808, "supported_languages": null}, "macro.dbt.default__drop_view": {"name": "default__drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.default__drop_view", "macro_sql": "{% macro default__drop_view(relation) -%}\n    drop view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.6810935, "supported_languages": null}, "macro.dbt.drop_materialized_view": {"name": "drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.drop_materialized_view", "macro_sql": "{% macro drop_materialized_view(relation) -%}\n  {{ return(adapter.dispatch('drop_materialized_view', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.6815715, "supported_languages": null}, "macro.dbt.default__drop_materialized_view": {"name": "default__drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.default__drop_materialized_view", "macro_sql": "{% macro default__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.6818428, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.682841, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.6841218, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.6856809, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.686132, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.6866934, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.6871514, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.6878738, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.689141, "supported_languages": null}, "macro.dbt.validate_sql": {"name": "validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.validate_sql", "macro_sql": "{% macro validate_sql(sql) -%}\n  {{ return(adapter.dispatch('validate_sql', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__validate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.6899045, "supported_languages": null}, "macro.dbt.default__validate_sql": {"name": "default__validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.default__validate_sql", "macro_sql": "{% macro default__validate_sql(sql) -%}\n  {% call statement('validate_sql') -%}\n    explain {{ sql }}\n  {% endcall %}\n  {{ return(load_result('validate_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.6905162, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.6939082, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.6943417, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.6964664, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.697571, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.699085, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.7003243, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.7005606, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.7015822, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.7026763, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.7039587, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.704676, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.705444, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.706441, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.707125, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.7078433, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.7081575, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.7087662, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.7089937, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.709752, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.7101283, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.7109895, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.7116876, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.71212, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.7129939, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.713447, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.714403, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.7152488, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.7159808, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.7164319, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.7173018, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.7177615, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.7185574, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.7189388, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.7204263, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.721499, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.7221673, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.7224584, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.7230933, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.7234364, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.724157, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.7245467, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.7252777, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.725651, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.7268538, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.727329, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 + {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.7281177, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.7287974, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.729241, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.72999, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.7303991, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.7311444, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.7315161, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.7324016, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.732864, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.7335966, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.7339706, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.7345746, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.7347994, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.7354689, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.7357879, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.736462, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.7367668, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.738997, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.739425, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.7400615, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.7404997, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.740949, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.7413664, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.741804, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.7422855, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.742733, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.743147, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.743583, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.7440085, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.744446, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.744841, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.74577, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.7465918, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.7474155, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.7500465, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.750598, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.7510014, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.7513962, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.7518117, "supported_languages": null}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.7616496, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.7642534, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.7649024, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.766161, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.7666926, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.7670681, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.7674558, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.7677999, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.7682464, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.7685819, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.7698534, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.7703605, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.773543, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparison later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.7813416, "supported_languages": ["sql"]}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.7821786, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.7827735, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.7864356, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.787507, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.7879558, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.7884467, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.7895546, "supported_languages": null}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.7961924, "supported_languages": ["sql"]}, "macro.dbt.create_or_replace_clone": {"name": "create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.create_or_replace_clone", "macro_sql": "{% macro create_or_replace_clone(this_relation, defer_relation) %}\n    {{ return(adapter.dispatch('create_or_replace_clone', 'dbt')(this_relation, defer_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_or_replace_clone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.7970338, "supported_languages": null}, "macro.dbt.default__create_or_replace_clone": {"name": "default__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.default__create_or_replace_clone", "macro_sql": "{% macro default__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace table {{ this_relation }} clone {{ defer_relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.7974098, "supported_languages": null}, "macro.dbt.can_clone_table": {"name": "can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.can_clone_table", "macro_sql": "{% macro can_clone_table() %}\n    {{ return(adapter.dispatch('can_clone_table', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__can_clone_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.798032, "supported_languages": null}, "macro.dbt.default__can_clone_table": {"name": "default__can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.default__can_clone_table", "macro_sql": "{% macro default__can_clone_table() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.7983608, "supported_languages": null}, "macro.dbt.materialization_clone_default": {"name": "materialization_clone_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/clone.sql", "original_file_path": "macros/materializations/models/clone/clone.sql", "unique_id": "macro.dbt.materialization_clone_default", "macro_sql": "{%- materialization clone, default -%}\n\n  {%- set relations = {'relations': []} -%}\n\n  {%- if not defer_relation -%}\n      -- nothing to do\n      {{ log(\"No relation found in state manifest for \" ~ model.unique_id, info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n\n  {%- if existing_relation and not flags.FULL_REFRESH -%}\n      -- noop!\n      {{ log(\"Relation \" ~ existing_relation ~ \" already exists\", info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set other_existing_relation = load_cached_relation(defer_relation) -%}\n\n  -- If this is a database that can do zero-copy cloning of tables, and the other relation is a table, then this will be a table\n  -- Otherwise, this will be a view\n\n  {% set can_clone_table = can_clone_table() %}\n\n  {%- if other_existing_relation and other_existing_relation.type == 'table' and can_clone_table -%}\n\n      {%- set target_relation = this.incorporate(type='table') -%}\n      {% if existing_relation is not none and not existing_relation.is_table %}\n        {{ log(\"Dropping relation \" ~ existing_relation ~ \" because it is of type \" ~ existing_relation.type) }}\n        {{ drop_relation_if_exists(existing_relation) }}\n      {% endif %}\n\n      -- as a general rule, data platforms that can clone tables can also do atomic 'create or replace'\n      {% call statement('main') %}\n          {{ create_or_replace_clone(target_relation, defer_relation) }}\n      {% endcall %}\n\n      {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n      {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n      {% do persist_docs(target_relation, model) %}\n\n      {{ return({'relations': [target_relation]}) }}\n\n  {%- else -%}\n\n      {%- set target_relation = this.incorporate(type='view') -%}\n\n      -- reuse the view materialization\n      -- TODO: support actual dispatch for materialization macros\n      -- Tracking ticket: https://github.com/dbt-labs/dbt-core/issues/7799\n      {% set search_name = \"materialization_view_\" ~ adapter.type() %}\n      {% if not search_name in context %}\n          {% set search_name = \"materialization_view_default\" %}\n      {% endif %}\n      {% set materialization_macro = context[search_name] %}\n      {% set relations = materialization_macro() %}\n      {{ return(relations) }}\n\n  {%- endif -%}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.can_clone_table", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_or_replace_clone", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.805836, "supported_languages": ["sql"]}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.8125844, "supported_languages": ["sql"]}, "macro.dbt.get_table_columns_and_constraints": {"name": "get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_table_columns_and_constraints", "macro_sql": "{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.8148654, "supported_languages": null}, "macro.dbt.default__get_table_columns_and_constraints": {"name": "default__get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_table_columns_and_constraints", "macro_sql": "{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.8152053, "supported_languages": null}, "macro.dbt.table_columns_and_constraints": {"name": "table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.table_columns_and_constraints", "macro_sql": "{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.8166518, "supported_languages": null}, "macro.dbt.get_assert_columns_equivalent": {"name": "get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_assert_columns_equivalent", "macro_sql": "\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.8171303, "supported_languages": null}, "macro.dbt.default__get_assert_columns_equivalent": {"name": "default__get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_assert_columns_equivalent", "macro_sql": "{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.8175087, "supported_languages": null}, "macro.dbt.assert_columns_equivalent": {"name": "assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.assert_columns_equivalent", "macro_sql": "{% macro assert_columns_equivalent(sql) %}\n\n  {#-- First ensure the user has defined 'columns' in yaml specification --#}\n  {%- set user_defined_columns = model['columns'] -%}\n  {%- if not user_defined_columns -%}\n      {{ exceptions.raise_contract_error([], []) }}\n  {%- endif -%}\n\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(user_defined_columns)) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query", "macro.dbt.get_empty_schema_sql", "macro.dbt.format_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.8207955, "supported_languages": null}, "macro.dbt.format_columns": {"name": "format_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.format_columns", "macro_sql": "{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.8218353, "supported_languages": null}, "macro.dbt.default__format_column": {"name": "default__format_column", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__format_column", "macro_sql": "{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.8227289, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.8247094, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.8252072, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.8263273, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.8280828, "supported_languages": null}, "macro.dbt.default__get_column_names": {"name": "default__get_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__get_column_names", "macro_sql": "{% macro default__get_column_names() %}\n  {#- loop through user_provided_columns to get column names -#}\n    {%- set user_provided_columns = model['columns'] -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.8294501, "supported_languages": null}, "macro.dbt.get_select_subquery": {"name": "get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.get_select_subquery", "macro_sql": "{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.8299763, "supported_languages": null}, "macro.dbt.default__get_select_subquery": {"name": "default__get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__get_select_subquery", "macro_sql": "{% macro default__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.830466, "supported_languages": null}, "macro.dbt.refresh_materialized_view": {"name": "refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/refresh_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/refresh_materialized_view.sql", "unique_id": "macro.dbt.refresh_materialized_view", "macro_sql": "{% macro refresh_materialized_view(relation) %}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n    {{- adapter.dispatch('refresh_materialized_view', 'dbt')(relation) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__refresh_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.831284, "supported_languages": null}, "macro.dbt.default__refresh_materialized_view": {"name": "default__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/refresh_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/refresh_materialized_view.sql", "unique_id": "macro.dbt.default__refresh_materialized_view", "macro_sql": "{% macro default__refresh_materialized_view(relation) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.831659, "supported_languages": null}, "macro.dbt.get_create_materialized_view_as_sql": {"name": "get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/create_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/create_materialized_view.sql", "unique_id": "macro.dbt.get_create_materialized_view_as_sql", "macro_sql": "{% macro get_create_materialized_view_as_sql(relation, sql) -%}\n    {{- log('Applying CREATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_materialized_view_as_sql', 'dbt')(relation, sql) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.8325467, "supported_languages": null}, "macro.dbt.default__get_create_materialized_view_as_sql": {"name": "default__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/create_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/create_materialized_view.sql", "unique_id": "macro.dbt.default__get_create_materialized_view_as_sql", "macro_sql": "{% macro default__get_create_materialized_view_as_sql(relation, sql) -%}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.832939, "supported_languages": null}, "macro.dbt.get_materialized_view_configuration_changes": {"name": "get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/get_materialized_view_configuration_changes.sql", "original_file_path": "macros/materializations/models/materialized_view/get_materialized_view_configuration_changes.sql", "unique_id": "macro.dbt.get_materialized_view_configuration_changes", "macro_sql": "{% macro get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    /* {#\n    It's recommended that configuration changes be formatted as follows:\n    {\"<change_category>\": [{\"action\": \"<name>\", \"context\": ...}]}\n\n    For example:\n    {\n        \"indexes\": [\n            {\"action\": \"drop\", \"context\": \"index_abc\"},\n            {\"action\": \"create\", \"context\": {\"columns\": [\"column_1\", \"column_2\"], \"type\": \"hash\", \"unique\": True}},\n        ],\n    }\n\n    Either way, `get_materialized_view_configuration_changes` needs to align with `get_alter_materialized_view_as_sql`.\n    #} */\n    {{- log('Determining configuration changes on: ' ~ existing_relation) -}}\n    {%- do return(adapter.dispatch('get_materialized_view_configuration_changes', 'dbt')(existing_relation, new_config)) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_materialized_view_configuration_changes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.8340013, "supported_languages": null}, "macro.dbt.default__get_materialized_view_configuration_changes": {"name": "default__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/get_materialized_view_configuration_changes.sql", "original_file_path": "macros/materializations/models/materialized_view/get_materialized_view_configuration_changes.sql", "unique_id": "macro.dbt.default__get_materialized_view_configuration_changes", "macro_sql": "{% macro default__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.8344107, "supported_languages": null}, "macro.dbt.get_replace_materialized_view_as_sql": {"name": "get_replace_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/replace_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/replace_materialized_view.sql", "unique_id": "macro.dbt.get_replace_materialized_view_as_sql", "macro_sql": "{% macro get_replace_materialized_view_as_sql(relation, sql, existing_relation, backup_relation, intermediate_relation) %}\n    {{- log('Applying REPLACE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_replace_materialized_view_as_sql', 'dbt')(relation, sql, existing_relation, backup_relation, intermediate_relation) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.835465, "supported_languages": null}, "macro.dbt.default__get_replace_materialized_view_as_sql": {"name": "default__get_replace_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/replace_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/replace_materialized_view.sql", "unique_id": "macro.dbt.default__get_replace_materialized_view_as_sql", "macro_sql": "{% macro default__get_replace_materialized_view_as_sql(relation, sql, existing_relation, backup_relation, intermediate_relation) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.8359673, "supported_languages": null}, "macro.dbt.materialization_materialized_view_default": {"name": "materialization_materialized_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/materialized_view.sql", "unique_id": "macro.dbt.materialization_materialized_view_default", "macro_sql": "{% materialization materialized_view, default %}\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.MaterializedView) %}\n    {% set intermediate_relation = make_intermediate_relation(target_relation) %}\n    {% set backup_relation_type = target_relation.MaterializedView if existing_relation is none else existing_relation.type %}\n    {% set backup_relation = make_backup_relation(target_relation, backup_relation_type) %}\n\n    {{ materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) }}\n\n        {% set build_sql = materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n        {% if build_sql == '' %}\n            {{ materialized_view_execute_no_op(target_relation) }}\n        {% else %}\n            {{ materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) }}\n        {% endif %}\n\n    {{ materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.materialized_view_setup", "macro.dbt.materialized_view_get_build_sql", "macro.dbt.materialized_view_execute_no_op", "macro.dbt.materialized_view_execute_build_sql", "macro.dbt.materialized_view_teardown"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.8460581, "supported_languages": ["sql"]}, "macro.dbt.materialized_view_setup": {"name": "materialized_view_setup", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_setup", "macro_sql": "{% macro materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) %}\n\n    -- backup_relation and intermediate_relation should not already exist in the database\n    -- it's possible these exist because of a previous run that exited unexpectedly\n    {% set preexisting_backup_relation = load_cached_relation(backup_relation) %}\n    {% set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) %}\n\n    -- drop the temp relations if they exist already in the database\n    {{ drop_relation_if_exists(preexisting_backup_relation) }}\n    {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.8471076, "supported_languages": null}, "macro.dbt.materialized_view_teardown": {"name": "materialized_view_teardown", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_teardown", "macro_sql": "{% macro materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) %}\n\n    -- drop the temp relations if they exist to leave the database clean for the next run\n    {{ drop_relation_if_exists(backup_relation) }}\n    {{ drop_relation_if_exists(intermediate_relation) }}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.8477993, "supported_languages": null}, "macro.dbt.materialized_view_get_build_sql": {"name": "materialized_view_get_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_get_build_sql", "macro_sql": "{% macro materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_materialized_view_as_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_materialized_view %}\n        {% set build_sql = get_replace_materialized_view_as_sql(target_relation, sql, existing_relation, backup_relation, intermediate_relation) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = get_materialized_view_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = refresh_materialized_view(target_relation) %}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = get_alter_materialized_view_as_sql(target_relation, configuration_changes, sql, existing_relation, backup_relation, intermediate_relation) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'skip', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.get_create_materialized_view_as_sql", "macro.dbt.get_replace_materialized_view_as_sql", "macro.dbt.get_materialized_view_configuration_changes", "macro.dbt.refresh_materialized_view", "macro.dbt.get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.8517723, "supported_languages": null}, "macro.dbt.materialized_view_execute_no_op": {"name": "materialized_view_execute_no_op", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_no_op", "macro_sql": "{% macro materialized_view_execute_no_op(target_relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ target_relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.8524122, "supported_languages": null}, "macro.dbt.materialized_view_execute_build_sql": {"name": "materialized_view_execute_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_build_sql", "macro_sql": "{% macro materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) %}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n    {{ adapter.commit() }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.8540938, "supported_languages": null}, "macro.dbt.get_alter_materialized_view_as_sql": {"name": "get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/alter_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/alter_materialized_view.sql", "unique_id": "macro.dbt.get_alter_materialized_view_as_sql", "macro_sql": "{% macro get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{- log('Applying ALTER to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_alter_materialized_view_as_sql', 'dbt')(\n        relation,\n        configuration_changes,\n        sql,\n        existing_relation,\n        backup_relation,\n        intermediate_relation\n    ) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.8553064, "supported_languages": null}, "macro.dbt.default__get_alter_materialized_view_as_sql": {"name": "default__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/alter_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/alter_materialized_view.sql", "unique_id": "macro.dbt.default__get_alter_materialized_view_as_sql", "macro_sql": "{% macro default__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.8558245, "supported_languages": null}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.8574915, "supported_languages": null}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.8609898, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.8624175, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.8641768, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.8648174, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.8667014, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.8782806, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.8826125, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.883367, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.885988, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.886716, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.8884249, "supported_languages": null}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.8991683, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.9022825, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.9054062, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.907625, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.909685, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.9103131, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.9108188, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.9115827, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.9121082, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.9128778, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.9133816, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.9140682, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.9145746, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.9150097, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.9157703, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.9276972, "supported_languages": ["sql"]}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.928888, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.9296098, "supported_languages": null}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.9372268, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.9379783, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.938441, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.938707, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.93911, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.9394355, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.9400022, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.9422362, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.9427545, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.943426, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.944602, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.9580736, "supported_languages": ["sql"]}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.9657602, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.966268, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.9668922, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.9687524, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.9692166, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.9696882, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.9732728, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.9767864, "supported_languages": null}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.9777706, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.9787643, "supported_languages": null}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.9798534, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.980655, "supported_languages": null}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.9855194, "supported_languages": ["sql"]}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.9867747, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.9873936, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.9881713, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.988895, "supported_languages": null}, "macro.codegen.generate_base_model": {"name": "generate_base_model", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_base_model.sql", "original_file_path": "macros/generate_base_model.sql", "unique_id": "macro.codegen.generate_base_model", "macro_sql": "{% macro generate_base_model(source_name, table_name, leading_commas=False) %}\n\n{%- set source_relation = source(source_name, table_name) -%}\n\n{%- set columns = adapter.get_columns_in_relation(source_relation) -%}\n{% set column_names=columns | map(attribute='name') %}\n{% set base_model_sql %}\nwith source as (\n\n    select * from {% raw %}{{ source({% endraw %}'{{ source_name }}', '{{ table_name }}'{% raw %}) }}{% endraw %}\n\n),\n\nrenamed as (\n\n    select\n        {%- if leading_commas -%}\n        {%- for column in column_names %}\n        {{\", \" if not loop.first}}{{ column | lower }}\n        {%- endfor %}\n        {%- else -%}\n        {%- for column in column_names %}\n        {{ column | lower }}{{\",\" if not loop.last}}\n        {%- endfor -%}\n        {%- endif %}\n\n    from source\n\n)\n\nselect * from renamed\n{% endset %}\n\n{% if execute %}\n\n{{ log(base_model_sql, info=True) }}\n{% do return(base_model_sql) %}\n\n{% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.992066, "supported_languages": null}, "macro.codegen.generate_model_yaml": {"name": "generate_model_yaml", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_model_yaml.sql", "original_file_path": "macros/generate_model_yaml.sql", "unique_id": "macro.codegen.generate_model_yaml", "macro_sql": "{% macro generate_model_yaml(model_name) %}\n\n{% set model_yaml=[] %}\n\n{% do model_yaml.append('version: 2') %}\n{% do model_yaml.append('') %}\n{% do model_yaml.append('models:') %}\n{% do model_yaml.append('  - name: ' ~ model_name | lower) %}\n{% do model_yaml.append('    description: \"\"') %}\n{% do model_yaml.append('    columns:') %}\n\n{% set relation=ref(model_name) %}\n{%- set columns = adapter.get_columns_in_relation(relation) -%}\n\n{% for column in columns %}\n    {% do model_yaml.append('      - name: ' ~ column.name | lower ) %}\n    {% do model_yaml.append('        description: \"\"') %}\n    {% do model_yaml.append('') %}\n{% endfor %}\n\n{% if execute %}\n\n    {% set joined = model_yaml | join ('\\n') %}\n    {{ log(joined, info=True) }}\n    {% do return(joined) %}\n\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.9954984, "supported_languages": null}, "macro.codegen.get_tables_in_schema": {"name": "get_tables_in_schema", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_source.sql", "original_file_path": "macros/generate_source.sql", "unique_id": "macro.codegen.get_tables_in_schema", "macro_sql": "{% macro get_tables_in_schema(schema_name, database_name=target.database, table_pattern='%', exclude='') %}\n    \n    {% set tables=dbt_utils.get_relations_by_pattern(\n        schema_pattern=schema_name,\n        database=database_name,\n        table_pattern=table_pattern,\n        exclude=exclude\n    ) %}\n\n    {% set table_list= tables | map(attribute='identifier') %}\n\n    {{ return(table_list | sort) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581340.9986467, "supported_languages": null}, "macro.codegen.generate_source": {"name": "generate_source", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_source.sql", "original_file_path": "macros/generate_source.sql", "unique_id": "macro.codegen.generate_source", "macro_sql": "{% macro generate_source(schema_name, database_name=target.database, generate_columns=False, include_descriptions=False, table_pattern='%', exclude='') %}\n\n{% set sources_yaml=[] %}\n\n{% do sources_yaml.append('version: 2') %}\n{% do sources_yaml.append('') %}\n{% do sources_yaml.append('sources:') %}\n{% do sources_yaml.append('  - name: ' ~ schema_name | lower) %}\n\n{% if database_name != target.database %}\n{% do sources_yaml.append('    database: ' ~ database_name | lower) %}\n{% endif %}\n\n{% do sources_yaml.append('    tables:') %}\n\n{% set tables=codegen.get_tables_in_schema(schema_name, database_name, table_pattern, exclude) %}\n\n{% for table in tables %}\n    {% do sources_yaml.append('      - name: ' ~ table | lower ) %}\n\n    {% if generate_columns %}\n    {% do sources_yaml.append('        columns:') %}\n\n        {% set table_relation=api.Relation.create(\n            database=database_name,\n            schema=schema_name,\n            identifier=table\n        ) %}\n\n        {% set columns=adapter.get_columns_in_relation(table_relation) %}\n\n        {% for column in columns %}\n            {% do sources_yaml.append('          - name: ' ~ column.name | lower ) %}\n            {% if include_descriptions %}\n                {% do sources_yaml.append('            description: \"\"' ) %}\n            {% endif %}\n        {% endfor %}\n            {% do sources_yaml.append('') %}\n\n    {% endif %}\n\n{% endfor %}\n\n{% if execute %}\n\n    {% set joined = sources_yaml | join ('\\n') %}\n    {{ log(joined, info=True) }}\n    {% do return(joined) %}\n\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.get_tables_in_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.0032873, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"name": "nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.0041769, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"name": "default__nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.0051012, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.0069447, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.0080745, "supported_languages": null}, "macro.dbt_utils.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.0085967, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.0099382, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"name": "get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.0121465, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"name": "default__get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none) -%}\n{% if default is none %}\n    {% set default = [] %}\n{% endif %}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return(default) }}\n    {% endif %}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.0156186, "supported_languages": null}, "macro.dbt_utils.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.0177894, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{dbt_utils.datediff(start_date, end_date, datepart)}}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.0193212, "supported_languages": null}, "macro.dbt_utils.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.0199504, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt_utils.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.020879, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"name": "surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.022267, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"name": "default__surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- if varargs|length >= 1 or field_list is string %}\n\n{%- set error_message = '\nWarning: the `surrogate_key` macro now takes a single list argument instead of \\\nmultiple string arguments. Support for multiple string arguments will be \\\ndeprecated in a future release of dbt-utils. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{# first argument is not included in varargs, so add first element to field_list_xf #}\n{%- set field_list_xf = [field_list] -%}\n\n{%- for field in varargs %}\n{%- set _ = field_list_xf.append(field) -%}\n{%- endfor -%}\n\n{%- else -%}\n\n{# if using list, just set field_list_xf as field_list #}\n{%- set field_list_xf = field_list -%}\n\n{%- endif -%}\n\n\n{%- set fields = [] -%}\n\n{%- for field in field_list_xf -%}\n\n    {%- set _ = fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt_utils.type_string() ~ \"), '')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- set _ = fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{dbt_utils.hash(dbt_utils.concat(fields))}}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.hash", "macro.dbt_utils.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.0246854, "supported_languages": null}, "macro.dbt_utils.safe_add": {"name": "safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.safe_add", "macro_sql": "{%- macro safe_add() -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(*varargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.025678, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"name": "default__safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add() -%}\n\n{% set fields = [] %}\n\n{%- for field in varargs -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.026439, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"name": "get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.0280075, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"name": "default__get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.0303664, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"name": "nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.0312433, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"name": "default__nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.0321422, "supported_languages": null}, "macro.dbt_utils.pivot": {"name": "pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.0344553, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"name": "default__pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for v in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ v }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ v ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ v ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.036562, "supported_languages": null}, "macro.dbt_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation') -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.039874, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"name": "default__union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation') -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                cast({{ dbt_utils.string_literal(relation) }} as {{ dbt_utils.type_string() }}) as {{ source_column_name }},\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.string_literal", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.0458636, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"name": "degrees_to_radians", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.0482411, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"name": "haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.bigquery__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.0489843, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"name": "default__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.0504203, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"name": "bigquery__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.0524862, "supported_languages": null}, "macro.dbt_utils.unpivot": {"name": "unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name, table)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.0562341, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"name": "default__unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n\n    {% if table %}\n        {%- set error_message = '\n            Warning: the `unpivot` macro no longer accepts a `table` parameter. \\\n            This parameter will be deprecated in a future release of dbt-utils. Use the `relation` parameter instead. \\\n            The {}.{} model triggered this warning. \\\n            '.format(model.package_name, model.name) -%}\n        {%- do exceptions.warn(error_message) -%}\n    {% endif %}\n\n    {% if relation and table %}\n        {{ exceptions.raise_compiler_error(\"Error: both the `relation` and `table` parameters were provided to `unpivot` macro. Choose one only (we recommend `relation`).\") }}\n    {% elif not relation and table %}\n        {% set relation=table %}\n    {% elif not relation and not table %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt_utils.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt_utils.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.type_string", "macro.dbt_utils.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.061439, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"name": "get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.0630238, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"name": "default__get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.065217, "supported_languages": null}, "macro.dbt_utils.star": {"name": "star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.066927, "supported_languages": null}, "macro.dbt_utils.default__star": {"name": "default__star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {%- do dbt_utils._is_relation(from, 'star') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n\n        {%- endif %}\n    {%- endfor %}\n\n    {%- for col in include_cols %}\n\n        {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}{{ adapter.quote(col)|trim }} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }}\n        {%- if not loop.last %},{{ '\\n  ' }}{% endif %}\n\n    {%- endfor -%}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.0696604, "supported_languages": null}, "macro.dbt_utils.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.0704215, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.071085, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"name": "get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.0721226, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"name": "default__get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.0728624, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"name": "get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.bigquery__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.0761058, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"name": "default__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as \"table_schema\",\n            table_name as \"table_name\",\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as \"table_type\"\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.0767589, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"name": "bigquery__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                case table_type\n                    when 'BASE TABLE' then 'table'\n                    else lower(table_type)\n                end as table_type\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.0785208, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"name": "_bigquery__get_matching_schemata", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.079866, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"name": "get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.0808382, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"name": "default__get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.0823565, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"name": "get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.0832412, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"name": "default__get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt_utils.split_part(\n        dbt_utils.split_part(\n            dbt_utils.replace(\n                dbt_utils.replace(\n                    dbt_utils.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt_utils.safe_cast(\n        parsed,\n        dbt_utils.type_string()\n        )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.split_part", "macro.dbt_utils.replace", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.0845883, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"name": "get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.0854313, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"name": "default__get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt_utils.split_part(dbt_utils.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.0862663, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"name": "get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.087397, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"name": "default__get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url = \n        dbt_utils.replace(\n            dbt_utils.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{dbt_utils.position(\"'/'\", stripped_url)}}, 0),\n            {{dbt_utils.position(\"'?'\", stripped_url)}} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt_utils.split_part(\n            dbt_utils.right(\n                stripped_url, \n                dbt_utils.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ), \n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt_utils.safe_cast(\n        parsed_path,\n        dbt_utils.type_string()\n    )}}\n    \n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt_utils.position", "macro.dbt_utils.split_part", "macro.dbt_utils.right", "macro.dbt_utils.length", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.0890598, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"name": "width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "unique_id": "macro.dbt_utils.width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.0919936, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"name": "default__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "unique_id": "macro.dbt_utils.default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }},\n                    {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.093172, "supported_languages": null}, "macro.dbt_utils.redshift__width_bucket": {"name": "redshift__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "unique_id": "macro.dbt_utils.redshift__width_bucket", "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is exactly at the bucket edge\n        case\n            when\n                {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }} %\n                {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                 = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.0943682, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"name": "snowflake__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "unique_id": "macro.dbt_utils.snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.094878, "supported_languages": null}, "macro.dbt_utils.length": {"name": "length", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "unique_id": "macro.dbt_utils.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt_utils') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.0956388, "supported_languages": null}, "macro.dbt_utils.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "unique_id": "macro.dbt_utils.default__length", "macro_sql": "{% macro default__length(expression) %}\n    \n    length(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.0959628, "supported_languages": null}, "macro.dbt_utils.redshift__length": {"name": "redshift__length", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "unique_id": "macro.dbt_utils.redshift__length", "macro_sql": "{% macro redshift__length(expression) %}\n\n    len(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.0962567, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"name": "_is_ephemeral", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/_is_ephemeral.sql", "original_file_path": "macros/cross_db_utils/_is_ephemeral.sql", "unique_id": "macro.dbt_utils._is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.098288, "supported_languages": null}, "macro.dbt_utils.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "unique_id": "macro.dbt_utils.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt_utils')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.bigquery__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.0989537, "supported_languages": null}, "macro.dbt_utils.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "unique_id": "macro.dbt_utils.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.0991855, "supported_languages": null}, "macro.dbt_utils.bigquery__intersect": {"name": "bigquery__intersect", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "unique_id": "macro.dbt_utils.bigquery__intersect", "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.0994005, "supported_languages": null}, "macro.dbt_utils.position": {"name": "position", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "unique_id": "macro.dbt_utils.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt_utils') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.bigquery__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.1003335, "supported_languages": null}, "macro.dbt_utils.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "unique_id": "macro.dbt_utils.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n    \n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.1007206, "supported_languages": null}, "macro.dbt_utils.bigquery__position": {"name": "bigquery__position", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "unique_id": "macro.dbt_utils.bigquery__position", "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n        \n    )\n    \n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.1010926, "supported_languages": null}, "macro.dbt_utils.identifier": {"name": "identifier", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "unique_id": "macro.dbt_utils.identifier", "macro_sql": "{% macro identifier(value) %}\t\n  {%- set error_message = '\n    Warning: the `identifier` macro is no longer supported and will be deprecated in a future release of dbt-utils. \\\n    Use `adapter.quote` instead. The {}.{} model triggered this warning. \\\n    '.format(model.package_name, model.name) -%}\n  {%- do exceptions.warn(error_message) -%}\n  {{ return(adapter.dispatch('identifier', 'dbt_utils') (value)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.bigquery__identifier"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.1024709, "supported_languages": null}, "macro.dbt_utils.default__identifier": {"name": "default__identifier", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "unique_id": "macro.dbt_utils.default__identifier", "macro_sql": "{% macro default__identifier(value) -%}\t\n    \"{{ value }}\"\t\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.1027958, "supported_languages": null}, "macro.dbt_utils.bigquery__identifier": {"name": "bigquery__identifier", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "unique_id": "macro.dbt_utils.bigquery__identifier", "macro_sql": "{% macro bigquery__identifier(value) -%}\t\n    `{{ value }}`\t\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.103085, "supported_languages": null}, "macro.dbt_utils.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "unique_id": "macro.dbt_utils.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt_utils') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.1044261, "supported_languages": null}, "macro.dbt_utils.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "unique_id": "macro.dbt_utils.default_last_day", "macro_sql": "\n\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd(datepart, '1', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.1051135, "supported_languages": null}, "macro.dbt_utils.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "unique_id": "macro.dbt_utils.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.1055107, "supported_languages": null}, "macro.dbt_utils.postgres__last_day": {"name": "postgres__last_day", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "unique_id": "macro.dbt_utils.postgres__last_day", "macro_sql": "{% macro postgres__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- postgres dateadd does not support quarter interval.\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd('month', '3', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc", "macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.106511, "supported_languages": null}, "macro.dbt_utils.redshift__last_day": {"name": "redshift__last_day", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "unique_id": "macro.dbt_utils.redshift__last_day", "macro_sql": "{% macro redshift__last_day(date, datepart) %}\n\n    {{ return(dbt_utils.default__last_day(date, datepart)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.106994, "supported_languages": null}, "macro.dbt_utils.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "unique_id": "macro.dbt_utils.current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ return(adapter.dispatch('current_timestamp', 'dbt_utils')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.bigquery__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.108321, "supported_languages": null}, "macro.dbt_utils.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "unique_id": "macro.dbt_utils.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() %}\n    current_timestamp::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.108645, "supported_languages": null}, "macro.dbt_utils.redshift__current_timestamp": {"name": "redshift__current_timestamp", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "unique_id": "macro.dbt_utils.redshift__current_timestamp", "macro_sql": "{% macro redshift__current_timestamp() %}\n    getdate()\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.1088579, "supported_languages": null}, "macro.dbt_utils.bigquery__current_timestamp": {"name": "bigquery__current_timestamp", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "unique_id": "macro.dbt_utils.bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() %}\n    current_timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.1090655, "supported_languages": null}, "macro.dbt_utils.current_timestamp_in_utc": {"name": "current_timestamp_in_utc", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "unique_id": "macro.dbt_utils.current_timestamp_in_utc", "macro_sql": "{% macro current_timestamp_in_utc() -%}\n  {{ return(adapter.dispatch('current_timestamp_in_utc', 'dbt_utils')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.1094947, "supported_languages": null}, "macro.dbt_utils.default__current_timestamp_in_utc": {"name": "default__current_timestamp_in_utc", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "unique_id": "macro.dbt_utils.default__current_timestamp_in_utc", "macro_sql": "{% macro default__current_timestamp_in_utc() %}\n    {{dbt_utils.current_timestamp()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.109819, "supported_languages": null}, "macro.dbt_utils.snowflake__current_timestamp_in_utc": {"name": "snowflake__current_timestamp_in_utc", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "unique_id": "macro.dbt_utils.snowflake__current_timestamp_in_utc", "macro_sql": "{% macro snowflake__current_timestamp_in_utc() %}\n    convert_timezone('UTC', {{dbt_utils.current_timestamp()}})::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.current_timestamp", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.1102173, "supported_languages": null}, "macro.dbt_utils.postgres__current_timestamp_in_utc": {"name": "postgres__current_timestamp_in_utc", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "unique_id": "macro.dbt_utils.postgres__current_timestamp_in_utc", "macro_sql": "{% macro postgres__current_timestamp_in_utc() %}\n    (current_timestamp at time zone 'utc')::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.1105406, "supported_languages": null}, "macro.dbt_utils.redshift__current_timestamp_in_utc": {"name": "redshift__current_timestamp_in_utc", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "unique_id": "macro.dbt_utils.redshift__current_timestamp_in_utc", "macro_sql": "{% macro redshift__current_timestamp_in_utc() %}\n    {{ return(dbt_utils.default__current_timestamp_in_utc()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.110898, "supported_languages": null}, "macro.dbt_utils.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "unique_id": "macro.dbt_utils.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt_utils')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.bigquery__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.1122527, "supported_languages": null}, "macro.dbt_utils.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "unique_id": "macro.dbt_utils.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.1127088, "supported_languages": null}, "macro.dbt_utils.bigquery__dateadd": {"name": "bigquery__dateadd", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "unique_id": "macro.dbt_utils.bigquery__dateadd", "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.1131573, "supported_languages": null}, "macro.dbt_utils.postgres__dateadd": {"name": "postgres__dateadd", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "unique_id": "macro.dbt_utils.postgres__dateadd", "macro_sql": "{% macro postgres__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.113756, "supported_languages": null}, "macro.dbt_utils.redshift__dateadd": {"name": "redshift__dateadd", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "unique_id": "macro.dbt_utils.redshift__dateadd", "macro_sql": "{% macro redshift__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ return(dbt_utils.default__dateadd(datepart, interval, from_date_or_timestamp)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.1142907, "supported_languages": null}, "macro.dbt_utils.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "unique_id": "macro.dbt_utils.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.115846, "supported_languages": null}, "macro.dbt_utils.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "unique_id": "macro.dbt_utils.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    string\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.1160696, "supported_languages": null}, "macro.dbt_utils.redshift__type_string": {"name": "redshift__type_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "unique_id": "macro.dbt_utils.redshift__type_string", "macro_sql": "\n\n{%- macro redshift__type_string() -%}\n    varchar\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.1162798, "supported_languages": null}, "macro.dbt_utils.postgres__type_string": {"name": "postgres__type_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "unique_id": "macro.dbt_utils.postgres__type_string", "macro_sql": "{% macro postgres__type_string() %}\n    varchar\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.1164827, "supported_languages": null}, "macro.dbt_utils.snowflake__type_string": {"name": "snowflake__type_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "unique_id": "macro.dbt_utils.snowflake__type_string", "macro_sql": "{% macro snowflake__type_string() %}\n    varchar\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.1166832, "supported_languages": null}, "macro.dbt_utils.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "unique_id": "macro.dbt_utils.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.117122, "supported_languages": null}, "macro.dbt_utils.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "unique_id": "macro.dbt_utils.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.1173391, "supported_languages": null}, "macro.dbt_utils.snowflake__type_timestamp": {"name": "snowflake__type_timestamp", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "unique_id": "macro.dbt_utils.snowflake__type_timestamp", "macro_sql": "{% macro snowflake__type_timestamp() %}\n    timestamp_ntz\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.1175442, "supported_languages": null}, "macro.dbt_utils.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "unique_id": "macro.dbt_utils.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.bigquery__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.1179688, "supported_languages": null}, "macro.dbt_utils.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "unique_id": "macro.dbt_utils.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    float\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.1181822, "supported_languages": null}, "macro.dbt_utils.bigquery__type_float": {"name": "bigquery__type_float", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "unique_id": "macro.dbt_utils.bigquery__type_float", "macro_sql": "{% macro bigquery__type_float() %}\n    float64\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.1183836, "supported_languages": null}, "macro.dbt_utils.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "unique_id": "macro.dbt_utils.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.bigquery__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.1188219, "supported_languages": null}, "macro.dbt_utils.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "unique_id": "macro.dbt_utils.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    numeric(28, 6)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.119045, "supported_languages": null}, "macro.dbt_utils.bigquery__type_numeric": {"name": "bigquery__type_numeric", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "unique_id": "macro.dbt_utils.bigquery__type_numeric", "macro_sql": "{% macro bigquery__type_numeric() %}\n    numeric\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.1192608, "supported_languages": null}, "macro.dbt_utils.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "unique_id": "macro.dbt_utils.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.bigquery__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.1196864, "supported_languages": null}, "macro.dbt_utils.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "unique_id": "macro.dbt_utils.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    bigint\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.119927, "supported_languages": null}, "macro.dbt_utils.bigquery__type_bigint": {"name": "bigquery__type_bigint", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "unique_id": "macro.dbt_utils.bigquery__type_bigint", "macro_sql": "{% macro bigquery__type_bigint() %}\n    int64\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.1201372, "supported_languages": null}, "macro.dbt_utils.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "unique_id": "macro.dbt_utils.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.bigquery__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.121042, "supported_languages": null}, "macro.dbt_utils.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "unique_id": "macro.dbt_utils.default__type_int", "macro_sql": "{% macro default__type_int() %}\n    int\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.1212795, "supported_languages": null}, "macro.dbt_utils.bigquery__type_int": {"name": "bigquery__type_int", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "unique_id": "macro.dbt_utils.bigquery__type_int", "macro_sql": "{% macro bigquery__type_int() %}\n    int64\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.1214862, "supported_languages": null}, "macro.dbt_utils.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "unique_id": "macro.dbt_utils.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt_utils') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.bigquery__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.1222222, "supported_languages": null}, "macro.dbt_utils.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "unique_id": "macro.dbt_utils.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{field}} as {{dbt_utils.type_string()}}))\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.1226053, "supported_languages": null}, "macro.dbt_utils.bigquery__hash": {"name": "bigquery__hash", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "unique_id": "macro.dbt_utils.bigquery__hash", "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt_utils.default__hash(field)}})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.1229596, "supported_languages": null}, "macro.dbt_utils.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "unique_id": "macro.dbt_utils.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt_utils')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.bigquery__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.128418, "supported_languages": null}, "macro.dbt_utils.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "unique_id": "macro.dbt_utils.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) %}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.128864, "supported_languages": null}, "macro.dbt_utils.bigquery__datediff": {"name": "bigquery__datediff", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "unique_id": "macro.dbt_utils.bigquery__datediff", "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) %}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.1292903, "supported_languages": null}, "macro.dbt_utils.postgres__datediff": {"name": "postgres__datediff", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "unique_id": "macro.dbt_utils.postgres__datediff", "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) %}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.1336043, "supported_languages": null}, "macro.dbt_utils.redshift__datediff": {"name": "redshift__datediff", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "unique_id": "macro.dbt_utils.redshift__datediff", "macro_sql": "{% macro redshift__datediff(first_date, second_date, datepart) %}\n\n    {{ return(dbt_utils.default__datediff(first_date, second_date, datepart)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.1343195, "supported_languages": null}, "macro.dbt_utils.right": {"name": "right", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "unique_id": "macro.dbt_utils.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt_utils') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.bigquery__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.1355712, "supported_languages": null}, "macro.dbt_utils.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "unique_id": "macro.dbt_utils.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n    \n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.1359835, "supported_languages": null}, "macro.dbt_utils.bigquery__right": {"name": "bigquery__right", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "unique_id": "macro.dbt_utils.bigquery__right", "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.136415, "supported_languages": null}, "macro.dbt_utils.snowflake__right": {"name": "snowflake__right", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "unique_id": "macro.dbt_utils.snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.1368434, "supported_languages": null}, "macro.dbt_utils.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/literal.sql", "original_file_path": "macros/cross_db_utils/literal.sql", "unique_id": "macro.dbt_utils.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt_utils') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.137507, "supported_languages": null}, "macro.dbt_utils.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/literal.sql", "original_file_path": "macros/cross_db_utils/literal.sql", "unique_id": "macro.dbt_utils.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.1378016, "supported_languages": null}, "macro.dbt_utils.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "unique_id": "macro.dbt_utils.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt_utils')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.1384456, "supported_languages": null}, "macro.dbt_utils.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "unique_id": "macro.dbt_utils.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.1387885, "supported_languages": null}, "macro.dbt_utils.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "unique_id": "macro.dbt_utils.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt_utils') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.bigquery__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.1396224, "supported_languages": null}, "macro.dbt_utils.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "unique_id": "macro.dbt_utils.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) %}\n    date_trunc('{{datepart}}', {{date}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.140005, "supported_languages": null}, "macro.dbt_utils.bigquery__date_trunc": {"name": "bigquery__date_trunc", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "unique_id": "macro.dbt_utils.bigquery__date_trunc", "macro_sql": "{% macro bigquery__date_trunc(datepart, date) %}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.1403694, "supported_languages": null}, "macro.dbt_utils.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "unique_id": "macro.dbt_utils.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt_utils') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.bigquery__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.1414027, "supported_languages": null}, "macro.dbt_utils.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "unique_id": "macro.dbt_utils.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.1418533, "supported_languages": null}, "macro.dbt_utils.bigquery__split_part": {"name": "bigquery__split_part", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "unique_id": "macro.dbt_utils.bigquery__split_part", "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.1423316, "supported_languages": null}, "macro.dbt_utils.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "unique_id": "macro.dbt_utils.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt_utils') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.1431074, "supported_languages": null}, "macro.dbt_utils.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "unique_id": "macro.dbt_utils.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ dbt_utils.type_string() }})\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.143493, "supported_languages": null}, "macro.dbt_utils.redshift__cast_bool_to_text": {"name": "redshift__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "unique_id": "macro.dbt_utils.redshift__cast_bool_to_text", "macro_sql": "{% macro redshift__cast_bool_to_text(field) %}\n    case\n        when {{ field }} is true then 'true'\n        when {{ field }} is false then 'false'\n    end::text\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.1438556, "supported_languages": null}, "macro.dbt_utils.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "unique_id": "macro.dbt_utils.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt_utils') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.bigquery__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.1447587, "supported_languages": null}, "macro.dbt_utils.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "unique_id": "macro.dbt_utils.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.1453335, "supported_languages": null}, "macro.dbt_utils.snowflake__safe_cast": {"name": "snowflake__safe_cast", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "unique_id": "macro.dbt_utils.snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.1456974, "supported_languages": null}, "macro.dbt_utils.bigquery__safe_cast": {"name": "bigquery__safe_cast", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "unique_id": "macro.dbt_utils.bigquery__safe_cast", "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.1460524, "supported_languages": null}, "macro.dbt_utils.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/replace.sql", "original_file_path": "macros/cross_db_utils/replace.sql", "unique_id": "macro.dbt_utils.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt_utils') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.1468918, "supported_languages": null}, "macro.dbt_utils.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/replace.sql", "original_file_path": "macros/cross_db_utils/replace.sql", "unique_id": "macro.dbt_utils.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n    \n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.1473436, "supported_languages": null}, "macro.dbt_utils.except": {"name": "except", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "unique_id": "macro.dbt_utils.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt_utils')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.bigquery__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.1480124, "supported_languages": null}, "macro.dbt_utils.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "unique_id": "macro.dbt_utils.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.1482427, "supported_languages": null}, "macro.dbt_utils.bigquery__except": {"name": "bigquery__except", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "unique_id": "macro.dbt_utils.bigquery__except", "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.1484597, "supported_languages": null}, "macro.dbt_utils._is_relation": {"name": "_is_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/_is_relation.sql", "original_file_path": "macros/cross_db_utils/_is_relation.sql", "unique_id": "macro.dbt_utils._is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.149596, "supported_languages": null}, "macro.dbt_utils.get_period_boundaries": {"name": "get_period_boundaries", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "unique_id": "macro.dbt_utils.get_period_boundaries", "macro_sql": "{% macro get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n    {{ return(adapter.dispatch('get_period_boundaries', 'dbt_utils')(target_schema, target_table, timestamp_field, start_date, stop_date, period)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_period_boundaries"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.161381, "supported_languages": null}, "macro.dbt_utils.default__get_period_boundaries": {"name": "default__get_period_boundaries", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "unique_id": "macro.dbt_utils.default__get_period_boundaries", "macro_sql": "{% macro default__get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n\n  {% call statement('period_boundaries', fetch_result=True) -%}\n    with data as (\n      select\n          coalesce(max(\"{{timestamp_field}}\"), '{{start_date}}')::timestamp as start_timestamp,\n          coalesce(\n            {{dbt_utils.dateadd('millisecond',\n                                -1,\n                                \"nullif('\" ~ stop_date ~ \"','')::timestamp\")}},\n            {{dbt_utils.current_timestamp()}}\n          ) as stop_timestamp\n      from \"{{target_schema}}\".\"{{target_table}}\"\n    )\n\n    select\n      start_timestamp,\n      stop_timestamp,\n      {{dbt_utils.datediff('start_timestamp',\n                           'stop_timestamp',\n                           period)}}  + 1 as num_periods\n    from data\n  {%- endcall %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.1627026, "supported_languages": null}, "macro.dbt_utils.get_period_sql": {"name": "get_period_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "unique_id": "macro.dbt_utils.get_period_sql", "macro_sql": "{% macro get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n    {{ return(adapter.dispatch('get_period_sql', 'dbt_utils')(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_period_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.1635165, "supported_languages": null}, "macro.dbt_utils.default__get_period_sql": {"name": "default__get_period_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "unique_id": "macro.dbt_utils.default__get_period_sql", "macro_sql": "{% macro default__get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n\n  {%- set period_filter -%}\n    (\"{{timestamp_field}}\" >  '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' and\n     \"{{timestamp_field}}\" <= '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' + interval '1 {{period}}' and\n     \"{{timestamp_field}}\" <  '{{stop_timestamp}}'::timestamp)\n  {%- endset -%}\n\n  {%- set filtered_sql = sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\n\n  select\n    {{target_cols_csv}}\n  from (\n    {{filtered_sql}}\n  )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.164811, "supported_languages": null}, "macro.dbt_utils.materialization_insert_by_period_default": {"name": "materialization_insert_by_period_default", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "unique_id": "macro.dbt_utils.materialization_insert_by_period_default", "macro_sql": "{% materialization insert_by_period, default -%}\n  {%- set timestamp_field = config.require('timestamp_field') -%}\n  {%- set start_date = config.require('start_date') -%}\n  {%- set stop_date = config.get('stop_date') or '' -%}}\n  {%- set period = config.get('period') or 'week' -%}\n\n  {%- if sql.find('__PERIOD_FILTER__') == -1 -%}\n    {%- set error_message -%}\n      Model '{{ model.unique_id }}' does not include the required string '__PERIOD_FILTER__' in its sql\n    {%- endset -%}\n    {{ exceptions.raise_compiler_error(error_message) }}\n  {%- endif -%}\n\n  {%- set identifier = model['name'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, type='table') -%}\n\n  {%- set non_destructive_mode = (flags.NON_DESTRUCTIVE == True) -%}\n  {%- set full_refresh_mode = (flags.FULL_REFRESH == True) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n\n  {%- set should_truncate = (non_destructive_mode and full_refresh_mode and exists_as_table) -%}\n  {%- set should_drop = (not should_truncate and (full_refresh_mode or exists_not_as_table)) -%}\n  {%- set force_create = (flags.FULL_REFRESH and not flags.NON_DESTRUCTIVE) -%}\n\n  -- setup\n  {% if old_relation is none -%}\n    -- noop\n  {%- elif should_truncate -%}\n    {{adapter.truncate_relation(old_relation)}}\n  {%- elif should_drop -%}\n    {{adapter.drop_relation(old_relation)}}\n    {%- set old_relation = none -%}\n  {%- endif %}\n\n  {{run_hooks(pre_hooks, inside_transaction=False)}}\n\n  -- `begin` happens here, so `commit` after it to finish the transaction\n  {{run_hooks(pre_hooks, inside_transaction=True)}}\n  {% call statement() -%}\n    begin; -- make extra sure we've closed out the transaction\n    commit;\n  {%- endcall %}\n\n  -- build model\n  {% if force_create or old_relation is none -%}\n    {# Create an empty target table -#}\n    {% call statement('main') -%}\n      {%- set empty_sql = sql | replace(\"__PERIOD_FILTER__\", 'false') -%}\n      {{create_table_as(False, target_relation, empty_sql)}}\n    {%- endcall %}\n  {%- endif %}\n\n  {% set _ = dbt_utils.get_period_boundaries(schema,\n                                              identifier,\n                                              timestamp_field,\n                                              start_date,\n                                              stop_date,\n                                              period) %}\n  {%- set start_timestamp = load_result('period_boundaries')['data'][0][0] | string -%}\n  {%- set stop_timestamp = load_result('period_boundaries')['data'][0][1] | string -%}\n  {%- set num_periods = load_result('period_boundaries')['data'][0][2] | int -%}\n\n  {% set target_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set target_cols_csv = target_columns | map(attribute='quoted') | join(', ') -%}\n  {%- set loop_vars = {'sum_rows_inserted': 0} -%}\n\n  -- commit each period as a separate transaction\n  {% for i in range(num_periods) -%}\n    {%- set msg = \"Running for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) -%}\n    {{ dbt_utils.log_info(msg) }}\n\n    {%- set tmp_identifier = model['name'] ~ '__dbt_incremental_period' ~ i ~ '_tmp' -%}\n    {%- set tmp_relation = api.Relation.create(identifier=tmp_identifier,\n                                               schema=schema, type='table') -%}\n    {% call statement() -%}\n      {% set tmp_table_sql = dbt_utils.get_period_sql(target_cols_csv,\n                                                       sql,\n                                                       timestamp_field,\n                                                       period,\n                                                       start_timestamp,\n                                                       stop_timestamp,\n                                                       i) %}\n      {{dbt.create_table_as(True, tmp_relation, tmp_table_sql)}}\n    {%- endcall %}\n\n    {{adapter.expand_target_column_types(from_relation=tmp_relation,\n                                         to_relation=target_relation)}}\n    {%- set name = 'main-' ~ i -%}\n    {% call statement(name, fetch_result=True) -%}\n      insert into {{target_relation}} ({{target_cols_csv}})\n      (\n          select\n              {{target_cols_csv}}\n          from {{tmp_relation.include(schema=False)}}\n      );\n    {%- endcall %}\n    {% set result = load_result('main-' ~ i) %}\n    {% if 'response' in result.keys() %} {# added in v0.19.0 #}\n        {% set rows_inserted = result['response']['rows_affected'] %}\n    {% else %} {# older versions #}\n        {% set rows_inserted = result['status'].split(\" \")[2] | int %}\n    {% endif %}\n    \n    {%- set sum_rows_inserted = loop_vars['sum_rows_inserted'] + rows_inserted -%}\n    {%- if loop_vars.update({'sum_rows_inserted': sum_rows_inserted}) %} {% endif -%}\n\n    {%- set msg = \"Ran for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) ~ \"; \" ~ rows_inserted ~ \" records inserted\" -%}\n    {{ dbt_utils.log_info(msg) }}\n\n  {%- endfor %}\n\n  {% call statement() -%}\n    begin;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=True)}}\n\n  {% call statement() -%}\n    commit;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=False)}}\n\n  {%- set status_string = \"INSERT \" ~ loop_vars['sum_rows_inserted'] -%}\n\n  {% call noop_statement('main', status_string) -%}\n    -- no-op\n  {%- endcall %}\n\n  -- Return the relations created in this materialization\n  {{ return({'relations': [target_relation]}) }}  \n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt_utils.get_period_boundaries", "macro.dbt_utils.log_info", "macro.dbt_utils.get_period_sql", "macro.dbt.noop_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.1776807, "supported_languages": ["sql"]}, "macro.dbt_utils.pretty_time": {"name": "pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.178566, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"name": "default__pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.1790874, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"name": "pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.1798043, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"name": "default__pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.180267, "supported_languages": null}, "macro.dbt_utils.log_info": {"name": "log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.1809483, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"name": "default__log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.1814106, "supported_languages": null}, "macro.dbt_utils.slugify": {"name": "slugify", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "unique_id": "macro.dbt_utils.slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.1826088, "supported_languages": null}, "macro.dbt_utils.test_recency": {"name": "test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/schema_tests/recency.sql", "original_file_path": "macros/schema_tests/recency.sql", "unique_id": "macro.dbt_utils.test_recency", "macro_sql": "{% test recency(model, field, datepart, interval) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.1835933, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"name": "default__test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/schema_tests/recency.sql", "original_file_path": "macros/schema_tests/recency.sql", "unique_id": "macro.dbt_utils.default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval) %}\n\n{% set threshold = dbt_utils.dateadd(datepart, interval * -1, dbt_utils.current_timestamp()) %}\n\nwith recency as (\n\n    select max({{field}}) as most_recent\n    from {{ model }}\n\n)\n\nselect\n\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.1844792, "supported_languages": null}, "macro.dbt_utils.test_equality": {"name": "test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/schema_tests/equality.sql", "original_file_path": "macros/schema_tests/equality.sql", "unique_id": "macro.dbt_utils.test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.1862504, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"name": "default__test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/schema_tests/equality.sql", "original_file_path": "macros/schema_tests/equality.sql", "unique_id": "macro.dbt_utils.default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.1885943, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"name": "test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/schema_tests/fewer_rows_than.sql", "original_file_path": "macros/schema_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.1898165, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"name": "default__test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/schema_tests/fewer_rows_than.sql", "original_file_path": "macros/schema_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model) %}\n\n{{ config(fail_calc = 'coalesce(row_count_delta, 0)') }}\n\nwith a as (\n\n    select count(*) as count_our_model from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_comparison_model from {{ compare_model }}\n\n),\ncounts as (\n\n    select\n        count_our_model,\n        count_comparison_model\n    from a\n    cross join b\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.1904125, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"name": "test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/schema_tests/not_constant.sql", "original_file_path": "macros/schema_tests/not_constant.sql", "unique_id": "macro.dbt_utils.test_not_constant", "macro_sql": "{% test not_constant(model, column_name) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.1912036, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"name": "default__test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/schema_tests/not_constant.sql", "original_file_path": "macros/schema_tests/not_constant.sql", "unique_id": "macro.dbt_utils.default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name) %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.19168, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"name": "test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/schema_tests/at_least_one.sql", "original_file_path": "macros/schema_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.1925268, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"name": "default__test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/schema_tests/at_least_one.sql", "original_file_path": "macros/schema_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name) %}\n\nselect *\nfrom (\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      count({{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.193007, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"name": "test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/schema_tests/relationships_where.sql", "original_file_path": "macros/schema_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.1944795, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"name": "default__test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/schema_tests/relationships_where.sql", "original_file_path": "macros/schema_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.1955247, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"name": "test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/schema_tests/cardinality_equality.sql", "original_file_path": "macros/schema_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.1968079, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"name": "default__test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/schema_tests/cardinality_equality.sql", "original_file_path": "macros/schema_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt_utils.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt_utils.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.1977086, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"name": "test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/schema_tests/not_accepted_values.sql", "original_file_path": "macros/schema_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.1989672, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"name": "default__test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/schema_tests/not_accepted_values.sql", "original_file_path": "macros/schema_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.2000208, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"name": "test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/schema_tests/equal_rowcount.sql", "original_file_path": "macros/schema_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.2009857, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"name": "default__test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/schema_tests/equal_rowcount.sql", "original_file_path": "macros/schema_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'coalesce(diff_count, 0)') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\nwith a as (\n\n    select count(*) as count_a from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_b from {{ compare_model }}\n\n),\nfinal as (\n\n    select\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n    from a\n    cross join b\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.201782, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"name": "test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/schema_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/schema_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.2080722, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"name": "default__test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/schema_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/schema_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions nore cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.211869, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/schema_tests/expression_is_true.sql", "original_file_path": "macros/schema_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None, condition='1=1') %}\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name, condition)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.2130558, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"name": "default__test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/schema_tests/expression_is_true.sql", "original_file_path": "macros/schema_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name, condition) %}\n\nwith meet_condition as (\n    select * from {{ model }} where {{ condition }}\n)\n\nselect\n    *\nfrom meet_condition\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.213819, "supported_languages": null}, "macro.dbt_utils.test_unique_where": {"name": "test_unique_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/schema_tests/test_unique_where.sql", "original_file_path": "macros/schema_tests/test_unique_where.sql", "unique_id": "macro.dbt_utils.test_unique_where", "macro_sql": "{% test unique_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.unique_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `unique` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_unique_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.214874, "supported_languages": null}, "macro.dbt_utils.default__test_unique_where": {"name": "default__test_unique_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/schema_tests/test_unique_where.sql", "original_file_path": "macros/schema_tests/test_unique_where.sql", "unique_id": "macro.dbt_utils.default__test_unique_where", "macro_sql": "{% macro default__test_unique_where(model, column_name) %}\r\n  {{ return(test_unique(model, column_name)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.2153268, "supported_languages": null}, "macro.dbt_utils.test_not_null_where": {"name": "test_not_null_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/schema_tests/test_not_null_where.sql", "original_file_path": "macros/schema_tests/test_not_null_where.sql", "unique_id": "macro.dbt_utils.test_not_null_where", "macro_sql": "{% test not_null_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.not_null_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `not_null` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_not_null_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.2163823, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_where": {"name": "default__test_not_null_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/schema_tests/test_not_null_where.sql", "original_file_path": "macros/schema_tests/test_not_null_where.sql", "unique_id": "macro.dbt_utils.default__test_not_null_where", "macro_sql": "{% macro default__test_not_null_where(model, column_name) %}\r\n  {{ return(test_not_null(model, column_name)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.216839, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"name": "test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/schema_tests/not_null_proportion.sql", "original_file_path": "macros/schema_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, **kwargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.2178617, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"name": "default__test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/schema_tests/not_null_proportion.sql", "original_file_path": "macros/schema_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\nwith validation as (\n  select\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n),\nvalidation_errors as (\n  select\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.2191787, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"name": "test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/schema_tests/unique_combination_of_columns.sql", "original_file_path": "macros/schema_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.2206273, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"name": "default__test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/schema_tests/unique_combination_of_columns.sql", "original_file_path": "macros/schema_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.222459, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"name": "test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/schema_tests/accepted_range.sql", "original_file_path": "macros/schema_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.223927, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"name": "default__test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/schema_tests/accepted_range.sql", "original_file_path": "macros/schema_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.2251437, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"name": "test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/schema_tests/sequential_values.sql", "original_file_path": "macros/schema_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.2265856, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"name": "default__test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/schema_tests/sequential_values.sql", "original_file_path": "macros/schema_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None) %}\n\nwith windowed as (\n\n    select\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            order by {{ column_name }}\n        ) as previous_{{ column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt_utils.type_timestamp() }})= cast({{ dbt_utils.dateadd(datepart, interval, 'previous_' + column_name) }} as {{ dbt_utils.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = previous_{{ column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695581341.2280116, "supported_languages": null}}, "docs": {"doc.nhl_data.game_id_description": {"name": "game_id_description", "resource_type": "doc", "package_name": "nhl_data", "path": "staging/_staging.md", "original_file_path": "models/staging/_staging.md", "unique_id": "doc.nhl_data.game_id_description", "block_contents": "##### More about game_id\nThe first 4 digits identify the season of the game (ie. 2017 for the 2017-2018 season). The next 2 digits give the type of game, where 01 = preseason, 02 = regular season, 03 = playoffs, 04 = all-star. The final 4 digits identify the specific game number.\n\nFor regular season and preseason games, this ranges from 0001 to the number of games played. (1271 for seasons with 31 teams (2017 and onwards) and 1230 for seasons with 30 teams).\n\nFor playoff games, the 2nd digit of the specific number gives the round of the playoffs, the 3rd digit specifies the matchup, and the 4th digit specifies the game (out of 7).\n\n[Credit to Drew Hynes' NHL API docs](https://gitlab.com/dword4/nhlapi/-/blob/master/stats-api.md#game-ids)"}, "doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs/overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "groups": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.nhl_data.stg_nhl__conferences": ["source.nhl_data.meltano.conferences"], "model.nhl_data.stg_nhl__players": ["source.nhl_data.meltano.people"], "model.nhl_data.stg_nhl__live_plays_location": ["model.nhl_data.d_schedule", "model.nhl_data.stg_nhl__live_plays"], "model.nhl_data.stg_nhl__xg": ["source.nhl_data.xg.xg_*"], "model.nhl_data.stg_nhl__teams": ["source.nhl_data.meltano.teams"], "model.nhl_data.stg_nhl__schedule": ["source.nhl_data.meltano.schedule"], "model.nhl_data.stg_nhl__divisions": ["source.nhl_data.meltano.divisions"], "model.nhl_data.stg_nhl__boxscore": ["source.nhl_data.meltano.live_boxscore"], "model.nhl_data.stg_nhl__live_plays": ["model.nhl_data.stg_nhl__boxscore", "model.nhl_data.stg_nhl__schedule", "source.nhl_data.meltano.live_plays"], "model.nhl_data.stg_nhl__linescore": ["source.nhl_data.meltano.live_linescore"], "model.nhl_data.stg_nhl__draft": ["source.nhl_data.meltano.draft"], "model.nhl_data.stg_nhl__rink_shooting": ["model.nhl_data.stg_nhl__live_plays", "model.nhl_data.stg_nhl__schedule", "model.nhl_data.stg_nhl__teams"], "model.nhl_data.stg_nhl__seasons": ["source.nhl_data.meltano.seasons"], "model.nhl_data.stg_nhl__shifts": ["source.nhl_data.meltano.shifts"], "model.nhl_data.stg_nhl__draft_prospects": ["source.nhl_data.meltano.draft_prospects"], "model.nhl_data.d_draft_prospects": ["model.nhl_data.stg_nhl__draft_prospects"], "model.nhl_data.f_boxscore_team": ["model.nhl_data.stg_nhl__boxscore"], "model.nhl_data.d_date": ["model.nhl_data.dates"], "model.nhl_data.d_players": ["model.nhl_data.stg_nhl__players"], "model.nhl_data.d_shifts": ["model.nhl_data.d_schedule", "model.nhl_data.stg_nhl__shifts"], "model.nhl_data.f_linescore": ["model.nhl_data.stg_nhl__linescore"], "model.nhl_data.d_draft": ["model.nhl_data.stg_nhl__draft"], "model.nhl_data.d_divisions": ["model.nhl_data.stg_nhl__divisions"], "model.nhl_data.f_boxscore_player": ["model.nhl_data.stg_nhl__boxscore"], "model.nhl_data.f_games_scratches": ["model.nhl_data.f_boxscore_team"], "model.nhl_data.f_games": ["model.nhl_data.f_boxscore_team", "model.nhl_data.stg_nhl__linescore"], "model.nhl_data.d_conferences": ["model.nhl_data.stg_nhl__conferences"], "model.nhl_data.d_shifts_time": ["model.nhl_data.d_players", "model.nhl_data.d_shifts"], "model.nhl_data.d_teams": ["model.nhl_data.stg_nhl__teams"], "model.nhl_data.d_seasons": ["model.nhl_data.stg_nhl__seasons"], "model.nhl_data.f_plays": ["model.nhl_data.d_shifts_time", "model.nhl_data.stg_nhl__live_plays", "model.nhl_data.stg_nhl__live_plays_location", "model.nhl_data.stg_nhl__xg"], "model.nhl_data.d_schedule": ["model.nhl_data.stg_nhl__rink_shooting", "model.nhl_data.stg_nhl__schedule"], "model.nhl_data.f_player_season": ["model.nhl_data.d_players", "model.nhl_data.d_schedule", "model.nhl_data.d_seasons", "model.nhl_data.d_teams", "model.nhl_data.f_boxscore_player", "model.nhl_data.f_games_scratches", "model.nhl_data.f_plays"], "model.nhl_data.f_team_season": ["model.nhl_data.d_schedule", "model.nhl_data.f_boxscore_team"], "model.nhl_data.dates": [], "analysis.nhl_data.seconds_between_shifts": [], "analysis.nhl_data.assist_type_test": [], "analysis.nhl_data.test_game_state": [], "analysis.nhl_data.goalshifts": ["source.nhl_data.meltano.shifts"], "analysis.nhl_data.plays_shifts": [], "analysis.nhl_data.rink_dimensions": [], "analysis.nhl_data.rink_location": [], "test.nhl_data.unique_stg_nhl__draft_prospects_stg_nhl__draft_prospects_id.81b61a4ac5": ["model.nhl_data.stg_nhl__draft_prospects"], "test.nhl_data.not_null_stg_nhl__draft_prospects_stg_nhl__draft_prospects_id.1866c4a0e2": ["model.nhl_data.stg_nhl__draft_prospects"], "test.nhl_data.not_null_stg_nhl__draft_prospects_draft_prospect_id.c2f4218bb5": ["model.nhl_data.stg_nhl__draft_prospects"], "test.nhl_data.unique_stg_nhl__draft_prospects_draft_prospect_id.439cea6ec2": ["model.nhl_data.stg_nhl__draft_prospects"], "test.nhl_data.unique_stg_nhl__seasons_stg_nhl__seasons_id.3ef0f38a83": ["model.nhl_data.stg_nhl__seasons"], "test.nhl_data.not_null_stg_nhl__seasons_stg_nhl__seasons_id.e0d5931aa0": ["model.nhl_data.stg_nhl__seasons"], "test.nhl_data.unique_stg_nhl__seasons_season_id.9b4d7cf6f0": ["model.nhl_data.stg_nhl__seasons"], "test.nhl_data.not_null_stg_nhl__seasons_season_id.a335e0b9f9": ["model.nhl_data.stg_nhl__seasons"], "test.nhl_data.unique_stg_nhl__live_plays_stg_nhl__live_plays_id.e5043c61a1": ["model.nhl_data.stg_nhl__live_plays"], "test.nhl_data.not_null_stg_nhl__live_plays_stg_nhl__live_plays_id.180653fbd3": ["model.nhl_data.stg_nhl__live_plays"], "test.nhl_data.unique_stg_nhl__shifts_shift_id.05ca6dee93": ["model.nhl_data.stg_nhl__shifts"], "test.nhl_data.not_null_stg_nhl__shifts_shift_id.6fa7d45c7f": ["model.nhl_data.stg_nhl__shifts"], "test.nhl_data.not_null_stg_nhl__shifts_game_id.5071b1af9b": ["model.nhl_data.stg_nhl__shifts"], "test.nhl_data.not_null_stg_nhl__shifts_player_id.15cc05b8a9": ["model.nhl_data.stg_nhl__shifts"], "test.nhl_data.not_null_stg_nhl__boxscore_stg_nhl__boxscore_id.f531645344": ["model.nhl_data.stg_nhl__boxscore"], "test.nhl_data.unique_stg_nhl__boxscore_stg_nhl__boxscore_id.5cb4ed999d": ["model.nhl_data.stg_nhl__boxscore"], "test.nhl_data.unique_stg_nhl__players_stg_nhl__players_id.a676defad4": ["model.nhl_data.stg_nhl__players"], "test.nhl_data.not_null_stg_nhl__players_stg_nhl__players_id.cf9bfc0f93": ["model.nhl_data.stg_nhl__players"], "test.nhl_data.not_null_stg_nhl__players_player_id.f9c1dc568f": ["model.nhl_data.stg_nhl__players"], "test.nhl_data.unique_stg_nhl__draft_stg_nhl__draft_id.e0b1a661b5": ["model.nhl_data.stg_nhl__draft"], "test.nhl_data.not_null_stg_nhl__draft_stg_nhl__draft_id.b677065bc5": ["model.nhl_data.stg_nhl__draft"], "test.nhl_data.unique_stg_nhl__linescore_stg_nhl__linescore_id.ada282fc78": ["model.nhl_data.stg_nhl__linescore"], "test.nhl_data.not_null_stg_nhl__linescore_stg_nhl__linescore_id.e449d10122": ["model.nhl_data.stg_nhl__linescore"], "test.nhl_data.accepted_values_stg_nhl__linescore_game_winning_team_type__True__Home__Away__Undetermined.84a73915f6": ["model.nhl_data.stg_nhl__linescore"], "test.nhl_data.unique_stg_nhl__conferences_stg_nhl__conferences_id.894c9c38c2": ["model.nhl_data.stg_nhl__conferences"], "test.nhl_data.not_null_stg_nhl__conferences_stg_nhl__conferences_id.a13a757e3c": ["model.nhl_data.stg_nhl__conferences"], "test.nhl_data.unique_stg_nhl__conferences_conference_id.31d27aa7cd": ["model.nhl_data.stg_nhl__conferences"], "test.nhl_data.not_null_stg_nhl__conferences_conference_id.5900814b75": ["model.nhl_data.stg_nhl__conferences"], "test.nhl_data.unique_stg_nhl__live_plays_location_play_id.410d0be44d": ["model.nhl_data.stg_nhl__live_plays_location"], "test.nhl_data.not_null_stg_nhl__live_plays_location_play_id.6cdb35d9ee": ["model.nhl_data.stg_nhl__live_plays_location"], "test.nhl_data.unique_stg_nhl__divisions_stg_nhl__divisions_id.c441593bdd": ["model.nhl_data.stg_nhl__divisions"], "test.nhl_data.not_null_stg_nhl__divisions_stg_nhl__divisions_id.09bf3b6736": ["model.nhl_data.stg_nhl__divisions"], "test.nhl_data.unique_stg_nhl__divisions_division_id.765d509a33": ["model.nhl_data.stg_nhl__divisions"], "test.nhl_data.not_null_stg_nhl__divisions_division_id.e799976dcb": ["model.nhl_data.stg_nhl__divisions"], "test.nhl_data.unique_stg_nhl__xg_stg_nhl__xg_id.807576794f": ["model.nhl_data.stg_nhl__xg"], "test.nhl_data.not_null_stg_nhl__xg_stg_nhl__xg_id.0d229c8dce": ["model.nhl_data.stg_nhl__xg"], "test.nhl_data.unique_stg_nhl__xg_id_play_id.3694ca2347": ["model.nhl_data.stg_nhl__xg"], "test.nhl_data.not_null_stg_nhl__xg_id_play_id.90d58e4acc": ["model.nhl_data.stg_nhl__xg"], "test.nhl_data.unique_stg_nhl__schedule_stg_nhl__schedule_id.02ca3a9680": ["model.nhl_data.stg_nhl__schedule"], "test.nhl_data.not_null_stg_nhl__schedule_stg_nhl__schedule_id.22069ed10b": ["model.nhl_data.stg_nhl__schedule"], "test.nhl_data.not_null_stg_nhl__schedule_game_id.5980307620": ["model.nhl_data.stg_nhl__schedule"], "test.nhl_data.unique_stg_nhl__schedule_game_id.a33bfba589": ["model.nhl_data.stg_nhl__schedule"], "test.nhl_data.not_null_stg_nhl__schedule_season_id.89ee97b591": ["model.nhl_data.stg_nhl__schedule"], "test.nhl_data.not_null_stg_nhl__schedule_away_team_id.8366912c5b": ["model.nhl_data.stg_nhl__schedule"], "test.nhl_data.not_null_stg_nhl__schedule_home_team_id.f4f7114670": ["model.nhl_data.stg_nhl__schedule"], "test.nhl_data.unique_stg_nhl__rink_shooting_game_id.2c72f41593": ["model.nhl_data.stg_nhl__rink_shooting"], "test.nhl_data.not_null_stg_nhl__rink_shooting_game_id.be3dbc1e85": ["model.nhl_data.stg_nhl__rink_shooting"], "test.nhl_data.unique_stg_nhl__teams_stg_nhl__teams_id.b6f2cc8f8f": ["model.nhl_data.stg_nhl__teams"], "test.nhl_data.not_null_stg_nhl__teams_stg_nhl__teams_id.e03adc9f63": ["model.nhl_data.stg_nhl__teams"], "test.nhl_data.not_null_stg_nhl__teams_team_id.7c3a30af17": ["model.nhl_data.stg_nhl__teams"], "test.nhl_data.unique_f_boxscore_team_boxscore_team_id.4861e1676d": ["model.nhl_data.f_boxscore_team"], "test.nhl_data.not_null_f_boxscore_team_boxscore_team_id.e62d4c1299": ["model.nhl_data.f_boxscore_team"], "test.nhl_data.unique_d_draft_prospects_draft_prospects_id.3bb3d156ed": ["model.nhl_data.d_draft_prospects"], "test.nhl_data.not_null_d_draft_prospects_draft_prospects_id.97f60c1ad0": ["model.nhl_data.d_draft_prospects"], "test.nhl_data.not_null_d_draft_prospects_prospect_category_id.a27ca2b454": ["model.nhl_data.d_draft_prospects"], "test.nhl_data.unique_d_schedule_schedule_id.5268ef07af": ["model.nhl_data.d_schedule"], "test.nhl_data.not_null_d_schedule_schedule_id.05b7735a58": ["model.nhl_data.d_schedule"], "test.nhl_data.not_null_d_schedule_game_id.16aa7a404b": ["model.nhl_data.d_schedule"], "test.nhl_data.unique_d_schedule_game_id.195e8d1feb": ["model.nhl_data.d_schedule"], "test.nhl_data.not_null_d_schedule_season_id.231c1ee113": ["model.nhl_data.d_schedule"], "test.nhl_data.not_null_d_schedule_away_team_id.a0c1750c24": ["model.nhl_data.d_schedule"], "test.nhl_data.not_null_d_schedule_home_team_id.5bd88d400b": ["model.nhl_data.d_schedule"], "test.nhl_data.not_null_f_games_game_id.12c36fc40e": ["model.nhl_data.f_games"], "test.nhl_data.unique_f_games_game_id.61c2bee3b0": ["model.nhl_data.f_games"], "test.nhl_data.unique_f_linescore_linescore_id.c88b3cc327": ["model.nhl_data.f_linescore"], "test.nhl_data.not_null_f_linescore_linescore_id.0d3f94c5dc": ["model.nhl_data.f_linescore"], "test.nhl_data.not_null_f_linescore_home_team_id.a4238ef224": ["model.nhl_data.f_linescore"], "test.nhl_data.not_null_f_linescore_away_team_id.f71f2cffd0": ["model.nhl_data.f_linescore"], "test.nhl_data.not_null_f_linescore_game_winning_team_id.08e106d171": ["model.nhl_data.f_linescore"], "test.nhl_data.accepted_values_f_linescore_game_winning_team_type__True__Home__Away__Tie__Undetermined.d86d0c6474": ["model.nhl_data.f_linescore"], "test.nhl_data.unique_d_draft_draft_id.74ebc0e053": ["model.nhl_data.d_draft"], "test.nhl_data.not_null_d_draft_draft_id.2d93ef0913": ["model.nhl_data.d_draft"], "test.nhl_data.not_null_f_boxscore_player_boxscore_player_id.e3fb20d4c1": ["model.nhl_data.f_boxscore_player"], "test.nhl_data.unique_f_boxscore_player_boxscore_player_id.b8346d82bf": ["model.nhl_data.f_boxscore_player"], "test.nhl_data.not_null_d_date_date_id.17765c9312": ["model.nhl_data.d_date"], "test.nhl_data.unique_d_date_date_id.bd95340cc8": ["model.nhl_data.d_date"], "test.nhl_data.unique_d_teams_team_id.c26fd9864c": ["model.nhl_data.d_teams"], "test.nhl_data.not_null_d_teams_team_id.453d8c80dc": ["model.nhl_data.d_teams"], "test.nhl_data.not_null_d_teams_venue_timezone_id.86ef9a6f43": ["model.nhl_data.d_teams"], "test.nhl_data.not_null_d_teams_division_id.0cedee4730": ["model.nhl_data.d_teams"], "test.nhl_data.not_null_d_teams_conference_id.491172dfc9": ["model.nhl_data.d_teams"], "test.nhl_data.not_null_d_teams_franchise_id.9ffcb46923": ["model.nhl_data.d_teams"], "test.nhl_data.unique_f_plays_play_id.f1d5dd28d5": ["model.nhl_data.f_plays"], "test.nhl_data.not_null_f_plays_play_id.50869b6b5e": ["model.nhl_data.f_plays"], "test.nhl_data.not_null_f_plays_game_id.be283c768c": ["model.nhl_data.f_plays"], "test.nhl_data.not_null_f_plays_event_idx.88cd93f8ae": ["model.nhl_data.f_plays"], "test.nhl_data.not_null_f_plays_event_id.42f7019a28": ["model.nhl_data.f_plays"], "test.nhl_data.not_null_f_plays_player_id.3976f4d4f0": ["model.nhl_data.f_plays"], "test.nhl_data.unique_d_shifts_shift_id.7763057f68": ["model.nhl_data.d_shifts"], "test.nhl_data.not_null_d_shifts_shift_id.a9f32209dc": ["model.nhl_data.d_shifts"], "test.nhl_data.not_null_d_shifts_game_id.2749fcaccd": ["model.nhl_data.d_shifts"], "test.nhl_data.not_null_d_shifts_player_id.73a991e1fc": ["model.nhl_data.d_shifts"], "test.nhl_data.not_null_d_players_player_id.1ac147c310": ["model.nhl_data.d_players"], "test.nhl_data.not_null_f_games_scratches_game_id.cb6976b79e": ["model.nhl_data.f_games_scratches"], "test.nhl_data.not_null_f_games_scratches_player_id.25c3aadc1a": ["model.nhl_data.f_games_scratches"], "test.nhl_data.dbt_utils_unique_combination_of_columns_f_games_scratches_game_id__player_id.35d4642951": ["model.nhl_data.f_games_scratches"], "test.nhl_data.unique_d_divisions_division_id.83aca42a7c": ["model.nhl_data.d_divisions"], "test.nhl_data.not_null_d_divisions_division_id.9a7aadfdb2": ["model.nhl_data.d_divisions"], "test.nhl_data.not_null_d_divisions_conference_id.08feeb1868": ["model.nhl_data.d_divisions"], "test.nhl_data.unique_d_seasons_season_id.e1642ef274": ["model.nhl_data.d_seasons"], "test.nhl_data.not_null_d_seasons_season_id.e9ba12da0e": ["model.nhl_data.d_seasons"], "test.nhl_data.unique_d_conferences_conference_id.b7e5789a87": ["model.nhl_data.d_conferences"], "test.nhl_data.not_null_d_conferences_conference_id.8ff2ef5d4e": ["model.nhl_data.d_conferences"], "test.nhl_data.unique_d_shifts_time_shift_id.899d4e01b5": ["model.nhl_data.d_shifts_time"], "test.nhl_data.not_null_d_shifts_time_shift_id.185e299ecd": ["model.nhl_data.d_shifts_time"], "test.nhl_data.not_null_d_shifts_time_game_id.69fcfb54b6": ["model.nhl_data.d_shifts_time"], "test.nhl_data.not_null_d_shifts_time_player_id.1b994f06e9": ["model.nhl_data.d_shifts_time"], "test.nhl_data.unique_f_player_season_player_season_gametype_id.bd0d830fa1": ["model.nhl_data.f_player_season"], "test.nhl_data.not_null_f_player_season_player_season_gametype_id.35c7e76fc3": ["model.nhl_data.f_player_season"], "test.nhl_data.not_null_f_player_season_player_id.06fcfa1a8c": ["model.nhl_data.f_player_season"], "test.nhl_data.not_null_f_player_season_season_id.8bbc5bfd6a": ["model.nhl_data.f_player_season"], "test.nhl_data.not_null_f_player_season_game_type.388b86217d": ["model.nhl_data.f_player_season"], "test.nhl_data.unique_f_team_season_team_season_stage_id.c5a3bceddd": ["model.nhl_data.f_team_season"], "test.nhl_data.not_null_f_team_season_team_season_stage_id.15f3b00755": ["model.nhl_data.f_team_season"], "test.nhl_data.not_null_dates_date_id.ecacfb484c": ["model.nhl_data.dates"], "test.nhl_data.unique_dates_date_id.a3a9dc1a29": ["model.nhl_data.dates"], "source.nhl_data.meltano.conferences": [], "source.nhl_data.meltano.divisions": [], "source.nhl_data.meltano.draft": [], "source.nhl_data.meltano.draft_prospects": [], "source.nhl_data.meltano.live_boxscore": [], "source.nhl_data.meltano.live_linescore": [], "source.nhl_data.meltano.live_plays": [], "source.nhl_data.meltano.people": [], "source.nhl_data.meltano.schedule": [], "source.nhl_data.meltano.seasons": [], "source.nhl_data.meltano.shifts": [], "source.nhl_data.meltano.teams": [], "source.nhl_data.xg.xg_*": []}, "child_map": {"model.nhl_data.stg_nhl__conferences": ["model.nhl_data.d_conferences", "test.nhl_data.not_null_stg_nhl__conferences_conference_id.5900814b75", "test.nhl_data.not_null_stg_nhl__conferences_stg_nhl__conferences_id.a13a757e3c", "test.nhl_data.unique_stg_nhl__conferences_conference_id.31d27aa7cd", "test.nhl_data.unique_stg_nhl__conferences_stg_nhl__conferences_id.894c9c38c2"], "model.nhl_data.stg_nhl__players": ["model.nhl_data.d_players", "test.nhl_data.not_null_stg_nhl__players_player_id.f9c1dc568f", "test.nhl_data.not_null_stg_nhl__players_stg_nhl__players_id.cf9bfc0f93", "test.nhl_data.unique_stg_nhl__players_stg_nhl__players_id.a676defad4"], "model.nhl_data.stg_nhl__live_plays_location": ["model.nhl_data.f_plays", "test.nhl_data.not_null_stg_nhl__live_plays_location_play_id.6cdb35d9ee", "test.nhl_data.unique_stg_nhl__live_plays_location_play_id.410d0be44d"], "model.nhl_data.stg_nhl__xg": ["model.nhl_data.f_plays", "test.nhl_data.not_null_stg_nhl__xg_id_play_id.90d58e4acc", "test.nhl_data.not_null_stg_nhl__xg_stg_nhl__xg_id.0d229c8dce", "test.nhl_data.unique_stg_nhl__xg_id_play_id.3694ca2347", "test.nhl_data.unique_stg_nhl__xg_stg_nhl__xg_id.807576794f"], "model.nhl_data.stg_nhl__teams": ["model.nhl_data.d_teams", "model.nhl_data.stg_nhl__rink_shooting", "test.nhl_data.not_null_stg_nhl__teams_stg_nhl__teams_id.e03adc9f63", "test.nhl_data.not_null_stg_nhl__teams_team_id.7c3a30af17", "test.nhl_data.unique_stg_nhl__teams_stg_nhl__teams_id.b6f2cc8f8f"], "model.nhl_data.stg_nhl__schedule": ["model.nhl_data.d_schedule", "model.nhl_data.stg_nhl__live_plays", "model.nhl_data.stg_nhl__rink_shooting", "test.nhl_data.not_null_stg_nhl__schedule_away_team_id.8366912c5b", "test.nhl_data.not_null_stg_nhl__schedule_game_id.5980307620", "test.nhl_data.not_null_stg_nhl__schedule_home_team_id.f4f7114670", "test.nhl_data.not_null_stg_nhl__schedule_season_id.89ee97b591", "test.nhl_data.not_null_stg_nhl__schedule_stg_nhl__schedule_id.22069ed10b", "test.nhl_data.unique_stg_nhl__schedule_game_id.a33bfba589", "test.nhl_data.unique_stg_nhl__schedule_stg_nhl__schedule_id.02ca3a9680"], "model.nhl_data.stg_nhl__divisions": ["model.nhl_data.d_divisions", "test.nhl_data.not_null_stg_nhl__divisions_division_id.e799976dcb", "test.nhl_data.not_null_stg_nhl__divisions_stg_nhl__divisions_id.09bf3b6736", "test.nhl_data.unique_stg_nhl__divisions_division_id.765d509a33", "test.nhl_data.unique_stg_nhl__divisions_stg_nhl__divisions_id.c441593bdd"], "model.nhl_data.stg_nhl__boxscore": ["model.nhl_data.f_boxscore_player", "model.nhl_data.f_boxscore_team", "model.nhl_data.stg_nhl__live_plays", "test.nhl_data.not_null_stg_nhl__boxscore_stg_nhl__boxscore_id.f531645344", "test.nhl_data.unique_stg_nhl__boxscore_stg_nhl__boxscore_id.5cb4ed999d"], "model.nhl_data.stg_nhl__live_plays": ["model.nhl_data.f_plays", "model.nhl_data.stg_nhl__live_plays_location", "model.nhl_data.stg_nhl__rink_shooting", "test.nhl_data.not_null_stg_nhl__live_plays_stg_nhl__live_plays_id.180653fbd3", "test.nhl_data.unique_stg_nhl__live_plays_stg_nhl__live_plays_id.e5043c61a1"], "model.nhl_data.stg_nhl__linescore": ["model.nhl_data.f_games", "model.nhl_data.f_linescore", "test.nhl_data.accepted_values_stg_nhl__linescore_game_winning_team_type__True__Home__Away__Undetermined.84a73915f6", "test.nhl_data.not_null_stg_nhl__linescore_stg_nhl__linescore_id.e449d10122", "test.nhl_data.unique_stg_nhl__linescore_stg_nhl__linescore_id.ada282fc78"], "model.nhl_data.stg_nhl__draft": ["model.nhl_data.d_draft", "test.nhl_data.not_null_stg_nhl__draft_stg_nhl__draft_id.b677065bc5", "test.nhl_data.unique_stg_nhl__draft_stg_nhl__draft_id.e0b1a661b5"], "model.nhl_data.stg_nhl__rink_shooting": ["model.nhl_data.d_schedule", "test.nhl_data.not_null_stg_nhl__rink_shooting_game_id.be3dbc1e85", "test.nhl_data.unique_stg_nhl__rink_shooting_game_id.2c72f41593"], "model.nhl_data.stg_nhl__seasons": ["model.nhl_data.d_seasons", "test.nhl_data.not_null_stg_nhl__seasons_season_id.a335e0b9f9", "test.nhl_data.not_null_stg_nhl__seasons_stg_nhl__seasons_id.e0d5931aa0", "test.nhl_data.unique_stg_nhl__seasons_season_id.9b4d7cf6f0", "test.nhl_data.unique_stg_nhl__seasons_stg_nhl__seasons_id.3ef0f38a83"], "model.nhl_data.stg_nhl__shifts": ["model.nhl_data.d_shifts", "test.nhl_data.not_null_stg_nhl__shifts_game_id.5071b1af9b", "test.nhl_data.not_null_stg_nhl__shifts_player_id.15cc05b8a9", "test.nhl_data.not_null_stg_nhl__shifts_shift_id.6fa7d45c7f", "test.nhl_data.unique_stg_nhl__shifts_shift_id.05ca6dee93"], "model.nhl_data.stg_nhl__draft_prospects": ["model.nhl_data.d_draft_prospects", "test.nhl_data.not_null_stg_nhl__draft_prospects_draft_prospect_id.c2f4218bb5", "test.nhl_data.not_null_stg_nhl__draft_prospects_stg_nhl__draft_prospects_id.1866c4a0e2", "test.nhl_data.unique_stg_nhl__draft_prospects_draft_prospect_id.439cea6ec2", "test.nhl_data.unique_stg_nhl__draft_prospects_stg_nhl__draft_prospects_id.81b61a4ac5"], "model.nhl_data.d_draft_prospects": ["test.nhl_data.not_null_d_draft_prospects_draft_prospects_id.97f60c1ad0", "test.nhl_data.not_null_d_draft_prospects_prospect_category_id.a27ca2b454", "test.nhl_data.unique_d_draft_prospects_draft_prospects_id.3bb3d156ed"], "model.nhl_data.f_boxscore_team": ["model.nhl_data.f_games", "model.nhl_data.f_games_scratches", "model.nhl_data.f_team_season", "test.nhl_data.not_null_f_boxscore_team_boxscore_team_id.e62d4c1299", "test.nhl_data.unique_f_boxscore_team_boxscore_team_id.4861e1676d"], "model.nhl_data.d_date": ["test.nhl_data.not_null_d_date_date_id.17765c9312", "test.nhl_data.unique_d_date_date_id.bd95340cc8"], "model.nhl_data.d_players": ["model.nhl_data.d_shifts_time", "model.nhl_data.f_player_season", "test.nhl_data.not_null_d_players_player_id.1ac147c310"], "model.nhl_data.d_shifts": ["model.nhl_data.d_shifts_time", "test.nhl_data.not_null_d_shifts_game_id.2749fcaccd", "test.nhl_data.not_null_d_shifts_player_id.73a991e1fc", "test.nhl_data.not_null_d_shifts_shift_id.a9f32209dc", "test.nhl_data.unique_d_shifts_shift_id.7763057f68"], "model.nhl_data.f_linescore": ["test.nhl_data.accepted_values_f_linescore_game_winning_team_type__True__Home__Away__Tie__Undetermined.d86d0c6474", "test.nhl_data.not_null_f_linescore_away_team_id.f71f2cffd0", "test.nhl_data.not_null_f_linescore_game_winning_team_id.08e106d171", "test.nhl_data.not_null_f_linescore_home_team_id.a4238ef224", "test.nhl_data.not_null_f_linescore_linescore_id.0d3f94c5dc", "test.nhl_data.unique_f_linescore_linescore_id.c88b3cc327"], "model.nhl_data.d_draft": ["test.nhl_data.not_null_d_draft_draft_id.2d93ef0913", "test.nhl_data.unique_d_draft_draft_id.74ebc0e053"], "model.nhl_data.d_divisions": ["test.nhl_data.not_null_d_divisions_conference_id.08feeb1868", "test.nhl_data.not_null_d_divisions_division_id.9a7aadfdb2", "test.nhl_data.unique_d_divisions_division_id.83aca42a7c"], "model.nhl_data.f_boxscore_player": ["model.nhl_data.f_player_season", "test.nhl_data.not_null_f_boxscore_player_boxscore_player_id.e3fb20d4c1", "test.nhl_data.unique_f_boxscore_player_boxscore_player_id.b8346d82bf"], "model.nhl_data.f_games_scratches": ["model.nhl_data.f_player_season", "test.nhl_data.dbt_utils_unique_combination_of_columns_f_games_scratches_game_id__player_id.35d4642951", "test.nhl_data.not_null_f_games_scratches_game_id.cb6976b79e", "test.nhl_data.not_null_f_games_scratches_player_id.25c3aadc1a"], "model.nhl_data.f_games": ["test.nhl_data.not_null_f_games_game_id.12c36fc40e", "test.nhl_data.unique_f_games_game_id.61c2bee3b0"], "model.nhl_data.d_conferences": ["test.nhl_data.not_null_d_conferences_conference_id.8ff2ef5d4e", "test.nhl_data.unique_d_conferences_conference_id.b7e5789a87"], "model.nhl_data.d_shifts_time": ["model.nhl_data.f_plays", "test.nhl_data.not_null_d_shifts_time_game_id.69fcfb54b6", "test.nhl_data.not_null_d_shifts_time_player_id.1b994f06e9", "test.nhl_data.not_null_d_shifts_time_shift_id.185e299ecd", "test.nhl_data.unique_d_shifts_time_shift_id.899d4e01b5"], "model.nhl_data.d_teams": ["model.nhl_data.f_player_season", "test.nhl_data.not_null_d_teams_conference_id.491172dfc9", "test.nhl_data.not_null_d_teams_division_id.0cedee4730", "test.nhl_data.not_null_d_teams_franchise_id.9ffcb46923", "test.nhl_data.not_null_d_teams_team_id.453d8c80dc", "test.nhl_data.not_null_d_teams_venue_timezone_id.86ef9a6f43", "test.nhl_data.unique_d_teams_team_id.c26fd9864c"], "model.nhl_data.d_seasons": ["model.nhl_data.f_player_season", "test.nhl_data.not_null_d_seasons_season_id.e9ba12da0e", "test.nhl_data.unique_d_seasons_season_id.e1642ef274"], "model.nhl_data.f_plays": ["model.nhl_data.f_player_season", "test.nhl_data.not_null_f_plays_event_id.42f7019a28", "test.nhl_data.not_null_f_plays_event_idx.88cd93f8ae", "test.nhl_data.not_null_f_plays_game_id.be283c768c", "test.nhl_data.not_null_f_plays_play_id.50869b6b5e", "test.nhl_data.not_null_f_plays_player_id.3976f4d4f0", "test.nhl_data.unique_f_plays_play_id.f1d5dd28d5"], "model.nhl_data.d_schedule": ["model.nhl_data.d_shifts", "model.nhl_data.f_player_season", "model.nhl_data.f_team_season", "model.nhl_data.stg_nhl__live_plays_location", "test.nhl_data.not_null_d_schedule_away_team_id.a0c1750c24", "test.nhl_data.not_null_d_schedule_game_id.16aa7a404b", "test.nhl_data.not_null_d_schedule_home_team_id.5bd88d400b", "test.nhl_data.not_null_d_schedule_schedule_id.05b7735a58", "test.nhl_data.not_null_d_schedule_season_id.231c1ee113", "test.nhl_data.unique_d_schedule_game_id.195e8d1feb", "test.nhl_data.unique_d_schedule_schedule_id.5268ef07af"], "model.nhl_data.f_player_season": ["test.nhl_data.not_null_f_player_season_game_type.388b86217d", "test.nhl_data.not_null_f_player_season_player_id.06fcfa1a8c", "test.nhl_data.not_null_f_player_season_player_season_gametype_id.35c7e76fc3", "test.nhl_data.not_null_f_player_season_season_id.8bbc5bfd6a", "test.nhl_data.unique_f_player_season_player_season_gametype_id.bd0d830fa1"], "model.nhl_data.f_team_season": ["test.nhl_data.not_null_f_team_season_team_season_stage_id.15f3b00755", "test.nhl_data.unique_f_team_season_team_season_stage_id.c5a3bceddd"], "model.nhl_data.dates": ["model.nhl_data.d_date", "test.nhl_data.not_null_dates_date_id.ecacfb484c", "test.nhl_data.unique_dates_date_id.a3a9dc1a29"], "analysis.nhl_data.seconds_between_shifts": [], "analysis.nhl_data.assist_type_test": [], "analysis.nhl_data.test_game_state": [], "analysis.nhl_data.goalshifts": [], "analysis.nhl_data.plays_shifts": [], "analysis.nhl_data.rink_dimensions": [], "analysis.nhl_data.rink_location": [], "test.nhl_data.unique_stg_nhl__draft_prospects_stg_nhl__draft_prospects_id.81b61a4ac5": [], "test.nhl_data.not_null_stg_nhl__draft_prospects_stg_nhl__draft_prospects_id.1866c4a0e2": [], "test.nhl_data.not_null_stg_nhl__draft_prospects_draft_prospect_id.c2f4218bb5": [], "test.nhl_data.unique_stg_nhl__draft_prospects_draft_prospect_id.439cea6ec2": [], "test.nhl_data.unique_stg_nhl__seasons_stg_nhl__seasons_id.3ef0f38a83": [], "test.nhl_data.not_null_stg_nhl__seasons_stg_nhl__seasons_id.e0d5931aa0": [], "test.nhl_data.unique_stg_nhl__seasons_season_id.9b4d7cf6f0": [], "test.nhl_data.not_null_stg_nhl__seasons_season_id.a335e0b9f9": [], "test.nhl_data.unique_stg_nhl__live_plays_stg_nhl__live_plays_id.e5043c61a1": [], "test.nhl_data.not_null_stg_nhl__live_plays_stg_nhl__live_plays_id.180653fbd3": [], "test.nhl_data.unique_stg_nhl__shifts_shift_id.05ca6dee93": [], "test.nhl_data.not_null_stg_nhl__shifts_shift_id.6fa7d45c7f": [], "test.nhl_data.not_null_stg_nhl__shifts_game_id.5071b1af9b": [], "test.nhl_data.not_null_stg_nhl__shifts_player_id.15cc05b8a9": [], "test.nhl_data.not_null_stg_nhl__boxscore_stg_nhl__boxscore_id.f531645344": [], "test.nhl_data.unique_stg_nhl__boxscore_stg_nhl__boxscore_id.5cb4ed999d": [], "test.nhl_data.unique_stg_nhl__players_stg_nhl__players_id.a676defad4": [], "test.nhl_data.not_null_stg_nhl__players_stg_nhl__players_id.cf9bfc0f93": [], "test.nhl_data.not_null_stg_nhl__players_player_id.f9c1dc568f": [], "test.nhl_data.unique_stg_nhl__draft_stg_nhl__draft_id.e0b1a661b5": [], "test.nhl_data.not_null_stg_nhl__draft_stg_nhl__draft_id.b677065bc5": [], "test.nhl_data.unique_stg_nhl__linescore_stg_nhl__linescore_id.ada282fc78": [], "test.nhl_data.not_null_stg_nhl__linescore_stg_nhl__linescore_id.e449d10122": [], "test.nhl_data.accepted_values_stg_nhl__linescore_game_winning_team_type__True__Home__Away__Undetermined.84a73915f6": [], "test.nhl_data.unique_stg_nhl__conferences_stg_nhl__conferences_id.894c9c38c2": [], "test.nhl_data.not_null_stg_nhl__conferences_stg_nhl__conferences_id.a13a757e3c": [], "test.nhl_data.unique_stg_nhl__conferences_conference_id.31d27aa7cd": [], "test.nhl_data.not_null_stg_nhl__conferences_conference_id.5900814b75": [], "test.nhl_data.unique_stg_nhl__live_plays_location_play_id.410d0be44d": [], "test.nhl_data.not_null_stg_nhl__live_plays_location_play_id.6cdb35d9ee": [], "test.nhl_data.unique_stg_nhl__divisions_stg_nhl__divisions_id.c441593bdd": [], "test.nhl_data.not_null_stg_nhl__divisions_stg_nhl__divisions_id.09bf3b6736": [], "test.nhl_data.unique_stg_nhl__divisions_division_id.765d509a33": [], "test.nhl_data.not_null_stg_nhl__divisions_division_id.e799976dcb": [], "test.nhl_data.unique_stg_nhl__xg_stg_nhl__xg_id.807576794f": [], "test.nhl_data.not_null_stg_nhl__xg_stg_nhl__xg_id.0d229c8dce": [], "test.nhl_data.unique_stg_nhl__xg_id_play_id.3694ca2347": [], "test.nhl_data.not_null_stg_nhl__xg_id_play_id.90d58e4acc": [], "test.nhl_data.unique_stg_nhl__schedule_stg_nhl__schedule_id.02ca3a9680": [], "test.nhl_data.not_null_stg_nhl__schedule_stg_nhl__schedule_id.22069ed10b": [], "test.nhl_data.not_null_stg_nhl__schedule_game_id.5980307620": [], "test.nhl_data.unique_stg_nhl__schedule_game_id.a33bfba589": [], "test.nhl_data.not_null_stg_nhl__schedule_season_id.89ee97b591": [], "test.nhl_data.not_null_stg_nhl__schedule_away_team_id.8366912c5b": [], "test.nhl_data.not_null_stg_nhl__schedule_home_team_id.f4f7114670": [], "test.nhl_data.unique_stg_nhl__rink_shooting_game_id.2c72f41593": [], "test.nhl_data.not_null_stg_nhl__rink_shooting_game_id.be3dbc1e85": [], "test.nhl_data.unique_stg_nhl__teams_stg_nhl__teams_id.b6f2cc8f8f": [], "test.nhl_data.not_null_stg_nhl__teams_stg_nhl__teams_id.e03adc9f63": [], "test.nhl_data.not_null_stg_nhl__teams_team_id.7c3a30af17": [], "test.nhl_data.unique_f_boxscore_team_boxscore_team_id.4861e1676d": [], "test.nhl_data.not_null_f_boxscore_team_boxscore_team_id.e62d4c1299": [], "test.nhl_data.unique_d_draft_prospects_draft_prospects_id.3bb3d156ed": [], "test.nhl_data.not_null_d_draft_prospects_draft_prospects_id.97f60c1ad0": [], "test.nhl_data.not_null_d_draft_prospects_prospect_category_id.a27ca2b454": [], "test.nhl_data.unique_d_schedule_schedule_id.5268ef07af": [], "test.nhl_data.not_null_d_schedule_schedule_id.05b7735a58": [], "test.nhl_data.not_null_d_schedule_game_id.16aa7a404b": [], "test.nhl_data.unique_d_schedule_game_id.195e8d1feb": [], "test.nhl_data.not_null_d_schedule_season_id.231c1ee113": [], "test.nhl_data.not_null_d_schedule_away_team_id.a0c1750c24": [], "test.nhl_data.not_null_d_schedule_home_team_id.5bd88d400b": [], "test.nhl_data.not_null_f_games_game_id.12c36fc40e": [], "test.nhl_data.unique_f_games_game_id.61c2bee3b0": [], "test.nhl_data.unique_f_linescore_linescore_id.c88b3cc327": [], "test.nhl_data.not_null_f_linescore_linescore_id.0d3f94c5dc": [], "test.nhl_data.not_null_f_linescore_home_team_id.a4238ef224": [], "test.nhl_data.not_null_f_linescore_away_team_id.f71f2cffd0": [], "test.nhl_data.not_null_f_linescore_game_winning_team_id.08e106d171": [], "test.nhl_data.accepted_values_f_linescore_game_winning_team_type__True__Home__Away__Tie__Undetermined.d86d0c6474": [], "test.nhl_data.unique_d_draft_draft_id.74ebc0e053": [], "test.nhl_data.not_null_d_draft_draft_id.2d93ef0913": [], "test.nhl_data.not_null_f_boxscore_player_boxscore_player_id.e3fb20d4c1": [], "test.nhl_data.unique_f_boxscore_player_boxscore_player_id.b8346d82bf": [], "test.nhl_data.not_null_d_date_date_id.17765c9312": [], "test.nhl_data.unique_d_date_date_id.bd95340cc8": [], "test.nhl_data.unique_d_teams_team_id.c26fd9864c": [], "test.nhl_data.not_null_d_teams_team_id.453d8c80dc": [], "test.nhl_data.not_null_d_teams_venue_timezone_id.86ef9a6f43": [], "test.nhl_data.not_null_d_teams_division_id.0cedee4730": [], "test.nhl_data.not_null_d_teams_conference_id.491172dfc9": [], "test.nhl_data.not_null_d_teams_franchise_id.9ffcb46923": [], "test.nhl_data.unique_f_plays_play_id.f1d5dd28d5": [], "test.nhl_data.not_null_f_plays_play_id.50869b6b5e": [], "test.nhl_data.not_null_f_plays_game_id.be283c768c": [], "test.nhl_data.not_null_f_plays_event_idx.88cd93f8ae": [], "test.nhl_data.not_null_f_plays_event_id.42f7019a28": [], "test.nhl_data.not_null_f_plays_player_id.3976f4d4f0": [], "test.nhl_data.unique_d_shifts_shift_id.7763057f68": [], "test.nhl_data.not_null_d_shifts_shift_id.a9f32209dc": [], "test.nhl_data.not_null_d_shifts_game_id.2749fcaccd": [], "test.nhl_data.not_null_d_shifts_player_id.73a991e1fc": [], "test.nhl_data.not_null_d_players_player_id.1ac147c310": [], "test.nhl_data.not_null_f_games_scratches_game_id.cb6976b79e": [], "test.nhl_data.not_null_f_games_scratches_player_id.25c3aadc1a": [], "test.nhl_data.dbt_utils_unique_combination_of_columns_f_games_scratches_game_id__player_id.35d4642951": [], "test.nhl_data.unique_d_divisions_division_id.83aca42a7c": [], "test.nhl_data.not_null_d_divisions_division_id.9a7aadfdb2": [], "test.nhl_data.not_null_d_divisions_conference_id.08feeb1868": [], "test.nhl_data.unique_d_seasons_season_id.e1642ef274": [], "test.nhl_data.not_null_d_seasons_season_id.e9ba12da0e": [], "test.nhl_data.unique_d_conferences_conference_id.b7e5789a87": [], "test.nhl_data.not_null_d_conferences_conference_id.8ff2ef5d4e": [], "test.nhl_data.unique_d_shifts_time_shift_id.899d4e01b5": [], "test.nhl_data.not_null_d_shifts_time_shift_id.185e299ecd": [], "test.nhl_data.not_null_d_shifts_time_game_id.69fcfb54b6": [], "test.nhl_data.not_null_d_shifts_time_player_id.1b994f06e9": [], "test.nhl_data.unique_f_player_season_player_season_gametype_id.bd0d830fa1": [], "test.nhl_data.not_null_f_player_season_player_season_gametype_id.35c7e76fc3": [], "test.nhl_data.not_null_f_player_season_player_id.06fcfa1a8c": [], "test.nhl_data.not_null_f_player_season_season_id.8bbc5bfd6a": [], "test.nhl_data.not_null_f_player_season_game_type.388b86217d": [], "test.nhl_data.unique_f_team_season_team_season_stage_id.c5a3bceddd": [], "test.nhl_data.not_null_f_team_season_team_season_stage_id.15f3b00755": [], "test.nhl_data.not_null_dates_date_id.ecacfb484c": [], "test.nhl_data.unique_dates_date_id.a3a9dc1a29": [], "source.nhl_data.meltano.conferences": ["model.nhl_data.stg_nhl__conferences"], "source.nhl_data.meltano.divisions": ["model.nhl_data.stg_nhl__divisions"], "source.nhl_data.meltano.draft": ["model.nhl_data.stg_nhl__draft"], "source.nhl_data.meltano.draft_prospects": ["model.nhl_data.stg_nhl__draft_prospects"], "source.nhl_data.meltano.live_boxscore": ["model.nhl_data.stg_nhl__boxscore"], "source.nhl_data.meltano.live_linescore": ["model.nhl_data.stg_nhl__linescore"], "source.nhl_data.meltano.live_plays": ["model.nhl_data.stg_nhl__live_plays"], "source.nhl_data.meltano.people": ["model.nhl_data.stg_nhl__players"], "source.nhl_data.meltano.schedule": ["model.nhl_data.stg_nhl__schedule"], "source.nhl_data.meltano.seasons": ["model.nhl_data.stg_nhl__seasons"], "source.nhl_data.meltano.shifts": ["analysis.nhl_data.goalshifts", "model.nhl_data.stg_nhl__shifts"], "source.nhl_data.meltano.teams": ["model.nhl_data.stg_nhl__teams"], "source.nhl_data.xg.xg_*": ["model.nhl_data.stg_nhl__xg"]}, "group_map": {}, "semantic_models": {}}
{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v4.json", "dbt_version": "1.0.3", "generated_at": "2022-05-10T03:04:34.654921Z", "invocation_id": "bec6ea98-98d3-474f-ac3a-a09a373812e1", "env": {}, "project_id": "fa80622c432d7b3b9e70ef99b46f8d48", "user_id": "f882666d-c3ab-4959-8f17-dc7f41be15ea", "send_anonymous_usage_stats": true, "adapter_type": "bigquery"}, "nodes": {"model.dbt_nhl_breakouts.stg_nhl__draft_prospects": {"raw_sql": "select distinct\n    /* Primary Key */\n    {{ dbt_utils.surrogate_key(['prospects.id', 'prospects.nhlplayerid']) }} as stg_nhl__draft_prospects_id\n\n    /* Identifiers */\n    , prospects.id as draft_prospect_id\n    , prospects.nhlplayerid as prospect_player_id\n    , prospects.prospectcategory.id as prospect_category_id\n\n    /* Properties */\n    , prospects.firstname as prospect_first_name\n    , prospects.lastname as prospect_last_name\n    , prospects.fullname as prospect_full_name\n    , parse_date('%Y-%m-%d', prospects.birthdate) as prospect_birth_date\n    , date_diff(current_date(), parse_date('%Y-%m-%d', prospects.birthdate), year) as prospect_age_years\n    , date_diff(current_date(), parse_date('%Y-%m-%d', prospects.birthdate), day) as prospect_age_days\n    , prospects.birthcity as prospect_birth_city\n    , prospects.birthstateprovince as prospect_birth_state_province\n    , prospects.birthcountry as prospect_birth_country\n    , prospects.height as prospect_height\n    , prospects.weight as prospect_weight\n    , prospects.shootscatches as prospect_shoots_catches\n    , prospects.primaryposition.name as prospect_position_name\n    , prospects.primaryposition.abbreviation as prospect_position_abbreviation\n    , prospects.draftstatus as prospect_draft_status -- wtf is this?\n    , prospects.prospectcategory.name as prospect_category_name\n    , prospects.prospectcategory.shortname as prospect_category_short_name\n    , prospects.amateurteam.name as prospect_amateur_team_name\n    , prospects.amateurteam.link as prospect_amateur_team_url\n    , prospects.amateurleague.name as prospect_amateur_league_name\n    , prospects.amateurleague.link as prospect_amateur_league_url\n    , prospects.ranks.midterm as prospect_rank_midterm\n    , prospects.ranks.draftyear as prospect_rank_draft_year\n    , prospects.link as prospect_url\nfrom {{ source('meltano', 'draft_prospects') }} as prospects", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["source.dbt_nhl_breakouts.meltano.draft_prospects"]}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "nhl-breakouts", "schema": "analytics_staging", "fqn": ["dbt_nhl_breakouts", "staging", "stg_nhl__draft_prospects"], "unique_id": "model.dbt_nhl_breakouts.stg_nhl__draft_prospects", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "staging/stg_nhl__draft_prospects.sql", "original_file_path": "models/staging/stg_nhl__draft_prospects.sql", "name": "stg_nhl__draft_prospects", "alias": "stg_nhl__draft_prospects", "checksum": {"name": "sha256", "checksum": "66337f8da7d18950d5d86524749ad519efaa02a2f0b639984f78b6a0bb480d5f"}, "tags": [], "refs": [], "sources": [["meltano", "draft_prospects"]], "description": "Staged NHL draft_prospects data from the NHL-API", "columns": {"stg_nhl__draft_prospects_id": {"name": "stg_nhl__draft_prospects_id", "description": "Unique surrogate key for a drafted NHL prospect", "meta": {}, "data_type": null, "quote": null, "tags": []}, "draft_prospect_id": {"name": "draft_prospect_id", "description": "Unique identifier for the NHL draft prospect", "meta": {}, "data_type": null, "quote": null, "tags": []}, "prospect_player_id": {"name": "prospect_player_id", "description": "Foreign key that maps to an NHL player ID", "meta": {}, "data_type": null, "quote": null, "tags": []}, "prospect_category_id": {"name": "prospect_category_id", "description": "Foreign key that maps to one of the four prospect categories - North American Skater (1), European Skater (2), North American Goalie (3) or European Goalie (4)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "prospect_first_name": {"name": "prospect_first_name", "description": "First name of the NHL prospect", "meta": {}, "data_type": null, "quote": null, "tags": []}, "prospect_last_name": {"name": "prospect_last_name", "description": "Last name of the NHL prospect", "meta": {}, "data_type": null, "quote": null, "tags": []}, "prospect_full_name": {"name": "prospect_full_name", "description": "Full name of the NHL prospect", "meta": {}, "data_type": null, "quote": null, "tags": []}, "prospect_birth_date": {"name": "prospect_birth_date", "description": "Birth date of the NHL prospect", "meta": {}, "data_type": null, "quote": null, "tags": []}, "prospect_age_years": {"name": "prospect_age_years", "description": "Age in years of the NHL prospect", "meta": {}, "data_type": null, "quote": null, "tags": []}, "prospect_age_days": {"name": "prospect_age_days", "description": "Age in days of the NHL prospect", "meta": {}, "data_type": null, "quote": null, "tags": []}, "prospect_birth_city": {"name": "prospect_birth_city", "description": "Birth city of the NHL prospect", "meta": {}, "data_type": null, "quote": null, "tags": []}, "prospect_birth_state_province": {"name": "prospect_birth_state_province", "description": "Birth state or province of the NHL prospect", "meta": {}, "data_type": null, "quote": null, "tags": []}, "prospect_birth_country": {"name": "prospect_birth_country", "description": "Birth country of the NHL prospect", "meta": {}, "data_type": null, "quote": null, "tags": []}, "prospect_height": {"name": "prospect_height", "description": "Imperial height, in feet and inches (e.g. 5'10\")", "meta": {}, "data_type": null, "quote": null, "tags": []}, "prospect_weight": {"name": "prospect_weight", "description": "Imperial weight, in pounds (e.g. 140)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "prospect_shoots_catches": {"name": "prospect_shoots_catches", "description": "The handedness of the NHL prospect (e.g. R = right, L = left)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "prospect_position_name": {"name": "prospect_position_name", "description": "Name of the position (e.g. Center, Left Wing, Defenseman)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "prospect_position_abbreviation": {"name": "prospect_position_abbreviation", "description": "Abbreviation of the position (e.g. C, LW, D)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "prospect_draft_status": {"name": "prospect_draft_status", "description": "Unknown (e.g. NHL-10, NHL-54)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "prospect_category_name": {"name": "prospect_category_name", "description": "Describes four prospect categories - North American Skater, European Skater, North American Goalie or European Goalie", "meta": {}, "data_type": null, "quote": null, "tags": []}, "prospect_category_short_name": {"name": "prospect_category_short_name", "description": "Describes four prospect categories - NA Skater, Euro Skater, NA Goalie or Euro Goalie", "meta": {}, "data_type": null, "quote": null, "tags": []}, "prospect_amateur_team_name": {"name": "prospect_amateur_team_name", "description": "Name of the amateur team that the NHL prospect plays for - unknown when, lots of nulls", "meta": {}, "data_type": null, "quote": null, "tags": []}, "prospect_amateur_team_url": {"name": "prospect_amateur_team_url", "description": "URL endpoint for amateur team", "meta": {}, "data_type": null, "quote": null, "tags": []}, "prospect_rank_midterm": {"name": "prospect_rank_midterm", "description": "Unknown, lots of nulls", "meta": {}, "data_type": null, "quote": null, "tags": []}, "prospect_rank_draft_year": {"name": "prospect_rank_draft_year", "description": "Unknown, lots of null", "meta": {}, "data_type": null, "quote": null, "tags": []}, "prospect_url": {"name": "prospect_url", "description": "URL endpoint for the prospect", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dbt_nhl_breakouts://models/staging/stg_nhl__draft_prospects.yml", "compiled_path": "target/compiled/dbt_nhl_breakouts/models/staging/stg_nhl__draft_prospects.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "staging"}, "created_at": 1652151875.4843478, "compiled_sql": "select distinct\n    /* Primary Key */\n    to_hex(md5(cast(coalesce(cast(prospects.id as \n    string\n), '') || '-' || coalesce(cast(prospects.nhlplayerid as \n    string\n), '') as \n    string\n))) as stg_nhl__draft_prospects_id\n\n    /* Identifiers */\n    , prospects.id as draft_prospect_id\n    , prospects.nhlplayerid as prospect_player_id\n    , prospects.prospectcategory.id as prospect_category_id\n\n    /* Properties */\n    , prospects.firstname as prospect_first_name\n    , prospects.lastname as prospect_last_name\n    , prospects.fullname as prospect_full_name\n    , parse_date('%Y-%m-%d', prospects.birthdate) as prospect_birth_date\n    , date_diff(current_date(), parse_date('%Y-%m-%d', prospects.birthdate), year) as prospect_age_years\n    , date_diff(current_date(), parse_date('%Y-%m-%d', prospects.birthdate), day) as prospect_age_days\n    , prospects.birthcity as prospect_birth_city\n    , prospects.birthstateprovince as prospect_birth_state_province\n    , prospects.birthcountry as prospect_birth_country\n    , prospects.height as prospect_height\n    , prospects.weight as prospect_weight\n    , prospects.shootscatches as prospect_shoots_catches\n    , prospects.primaryposition.name as prospect_position_name\n    , prospects.primaryposition.abbreviation as prospect_position_abbreviation\n    , prospects.draftstatus as prospect_draft_status -- wtf is this?\n    , prospects.prospectcategory.name as prospect_category_name\n    , prospects.prospectcategory.shortname as prospect_category_short_name\n    , prospects.amateurteam.name as prospect_amateur_team_name\n    , prospects.amateurteam.link as prospect_amateur_team_url\n    , prospects.amateurleague.name as prospect_amateur_league_name\n    , prospects.amateurleague.link as prospect_amateur_league_url\n    , prospects.ranks.midterm as prospect_rank_midterm\n    , prospects.ranks.draftyear as prospect_rank_draft_year\n    , prospects.link as prospect_url\nfrom `nhl-breakouts`.`raw`.`draft_prospects` as prospects", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`nhl-breakouts`.`analytics_staging`.`stg_nhl__draft_prospects`"}, "model.dbt_nhl_breakouts.stg_nhl__conferences": {"raw_sql": "select\n    /* Primary Key */\n    {{ dbt_utils.surrogate_key(['conferences.id']) }} as stg_nhl__conferences_id\n\n    /* Identifiers */\n    , conferences.id as conference_id\n\n    /* Properties */\n    , conferences.name as conference_name\n    , conferences.shortname as conference_short_name\n    , conferences.abbreviation as conference_abbreviation\n    , conferences.active as is_active\n    , conferences.link as conference_url\nfrom {{ source('meltano', 'conferences') }} as conferences", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["source.dbt_nhl_breakouts.meltano.conferences"]}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "nhl-breakouts", "schema": "analytics_staging", "fqn": ["dbt_nhl_breakouts", "staging", "stg_nhl__conferences"], "unique_id": "model.dbt_nhl_breakouts.stg_nhl__conferences", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "staging/stg_nhl__conferences.sql", "original_file_path": "models/staging/stg_nhl__conferences.sql", "name": "stg_nhl__conferences", "alias": "stg_nhl__conferences", "checksum": {"name": "sha256", "checksum": "59b2a0452781f1ed6adc2d1ff16d75544b9c3947e276f19066ae311b111841c2"}, "tags": [], "refs": [], "sources": [["meltano", "conferences"]], "description": "Staged NHL conferences data from the NHL-API", "columns": {"stg_nhl__conferences_id": {"name": "stg_nhl__conferences_id", "description": "Unique surrogate key for NHL conferences", "meta": {}, "data_type": null, "quote": null, "tags": []}, "conference_id": {"name": "conference_id", "description": "Unique identifier for NHL conferences", "meta": {}, "data_type": null, "quote": null, "tags": []}, "conference_name": {"name": "conference_name", "description": "Name of the NHL conference", "meta": {}, "data_type": null, "quote": null, "tags": []}, "conference_url": {"name": "conference_url", "description": "URL endpoint", "meta": {}, "data_type": null, "quote": null, "tags": []}, "conference_abbreviation": {"name": "conference_abbreviation", "description": "Abbreviated NHL conference name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "conference_short_name": {"name": "conference_short_name", "description": "Short name for the NHL conference", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_active": {"name": "is_active", "description": "Whether or not the conference is still active", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dbt_nhl_breakouts://models/staging/stg_nhl__conferences.yml", "compiled_path": "target/compiled/dbt_nhl_breakouts/models/staging/stg_nhl__conferences.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "staging"}, "created_at": 1652151875.476374, "compiled_sql": "select\n    /* Primary Key */\n    to_hex(md5(cast(coalesce(cast(conferences.id as \n    string\n), '') as \n    string\n))) as stg_nhl__conferences_id\n\n    /* Identifiers */\n    , conferences.id as conference_id\n\n    /* Properties */\n    , conferences.name as conference_name\n    , conferences.shortname as conference_short_name\n    , conferences.abbreviation as conference_abbreviation\n    , conferences.active as is_active\n    , conferences.link as conference_url\nfrom `nhl-breakouts`.`raw`.`conferences` as conferences", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`nhl-breakouts`.`analytics_staging`.`stg_nhl__conferences`"}, "model.dbt_nhl_breakouts.stg_nhl__divisions": {"raw_sql": "select\n    /* Primary Key */\n    {{ dbt_utils.surrogate_key(['divisions.id']) }} as stg_nhl__divisions_id\n\n    /* Identifiers */\n    , divisions.id as division_id\n    , divisions.conference.id as conference_id\n\n    /* Properties */\n    , divisions.name as division_name\n    , divisions.nameshort as division_short_name\n    , divisions.link as division_url\n    , divisions.abbreviation as division_abbreviation\n    , divisions.active as is_active\n\nfrom {{ source('meltano', 'divisions') }} as divisions", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["source.dbt_nhl_breakouts.meltano.divisions"]}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "nhl-breakouts", "schema": "analytics_staging", "fqn": ["dbt_nhl_breakouts", "staging", "stg_nhl__divisions"], "unique_id": "model.dbt_nhl_breakouts.stg_nhl__divisions", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "staging/stg_nhl__divisions.sql", "original_file_path": "models/staging/stg_nhl__divisions.sql", "name": "stg_nhl__divisions", "alias": "stg_nhl__divisions", "checksum": {"name": "sha256", "checksum": "7f658fb51841a2f9cc601d049ea9c91fdf784f7052b033686be05fcdae001467"}, "tags": [], "refs": [], "sources": [["meltano", "divisions"]], "description": "Staged NHL division data from the NHL-API", "columns": {"stg_nhl__divisions_id": {"name": "stg_nhl__divisions_id", "description": "Unique surrogate key for NHL divisions", "meta": {}, "data_type": null, "quote": null, "tags": []}, "division_id": {"name": "division_id", "description": "Unique identifier for NHL divisions", "meta": {}, "data_type": null, "quote": null, "tags": []}, "conference_id": {"name": "conference_id", "description": "Foreign key that maps to the NHL conference", "meta": {}, "data_type": null, "quote": null, "tags": []}, "division_name": {"name": "division_name", "description": "Name of the NHL division", "meta": {}, "data_type": null, "quote": null, "tags": []}, "division_short_name": {"name": "division_short_name", "description": "Short name for the NHL division", "meta": {}, "data_type": null, "quote": null, "tags": []}, "division_url": {"name": "division_url", "description": "URL endpoint", "meta": {}, "data_type": null, "quote": null, "tags": []}, "division_abbreviation": {"name": "division_abbreviation", "description": "Abbreviated NHL conference name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_active": {"name": "is_active", "description": "Whether or not the conference is still active", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dbt_nhl_breakouts://models/staging/stg_nhl__divisions.yml", "compiled_path": "target/compiled/dbt_nhl_breakouts/models/staging/stg_nhl__divisions.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "staging"}, "created_at": 1652151875.467558, "compiled_sql": "select\n    /* Primary Key */\n    to_hex(md5(cast(coalesce(cast(divisions.id as \n    string\n), '') as \n    string\n))) as stg_nhl__divisions_id\n\n    /* Identifiers */\n    , divisions.id as division_id\n    , divisions.conference.id as conference_id\n\n    /* Properties */\n    , divisions.name as division_name\n    , divisions.nameshort as division_short_name\n    , divisions.link as division_url\n    , divisions.abbreviation as division_abbreviation\n    , divisions.active as is_active\n\nfrom `nhl-breakouts`.`raw`.`divisions` as divisions", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`nhl-breakouts`.`analytics_staging`.`stg_nhl__divisions`"}, "model.dbt_nhl_breakouts.stg_nhl__boxscore_player": {"raw_sql": "with\n-- CTE1\nlive_boxscore as (\n    select\n        *\n    from\n        {{ source('meltano', 'live_boxscore') }}\n)\n\n-- CTE2\n, home_team_player as (\n    select\n        /* Identifiers */\n        live_boxscore.gameid as game_id\n        , teams.home.team.id as team_id\n        , home_players.person.id as player_id\n\n        /* Properties */\n        , teams.home.team.name as team_name\n        , 'Home' as team_type\n\n        /* Player stats */\n        , home_players.person.fullname as player_full_name\n        , home_players.person.rosterstatus as player_roster_status\n        , home_players.position.code as player_position_code\n        , home_players.stats.playerstats.timeonice as time_on_ice\n        , home_players.stats.playerstats.assists as assists\n        , home_players.stats.playerstats.goals as goals\n        , home_players.stats.playerstats.shots as shots\n        , home_players.stats.playerstats.hits as hits\n        , home_players.stats.playerstats.powerplaygoals as powerplay_goals\n        , home_players.stats.playerstats.powerplayassists as powerplay_assists\n        , home_players.stats.playerstats.penaltyminutes as penalty_minutes\n        , home_players.stats.playerstats.faceoffwins as faceoff_wins\n        , home_players.stats.playerstats.faceofftaken as faceoff_taken\n        , home_players.stats.playerstats.takeaways as takeaways\n        , home_players.stats.playerstats.giveaways as giveaways\n        , home_players.stats.playerstats.shorthandedgoals as short_handed_goals\n        , home_players.stats.playerstats.shorthandedassists as short_handed_assists\n        , home_players.stats.playerstats.blocked as blocked\n        , home_players.stats.playerstats.plusminus as plus_minus\n        , home_players.stats.playerstats.eventimeonice as even_time_on_ice\n        , home_players.stats.playerstats.powerplaytimeonice as powerplay_time_on_ice\n        , home_players.stats.playerstats.shorthandedtimeonice as short_handed_time_on_ice\n        , home_players.stats.playerstats.pim as pim\n        , home_players.stats.playerstats.saves as saves\n        , home_players.stats.playerstats.powerplaysaves as powerplay_saves\n        , home_players.stats.playerstats.shorthandedsaves as short_handed_saves\n        , home_players.stats.playerstats.evensaves as even_saves\n        , home_players.stats.playerstats.shorthandedshotsagainst as short_handed_shots_against\n        , home_players.stats.playerstats.evenshotsagainst as even_shots_against\n        , home_players.stats.playerstats.powerplayshotsagainst as powerplay_shots_against\n        , home_players.stats.playerstats.decision as decision\n        , home_players.stats.playerstats.savepercentage as save_percentage\n        , home_players.stats.playerstats.powerplaysavepercentage as powerplay_save_percentage\n        , home_players.stats.playerstats.evenstrengthsavepercentage as even_strength_save_percentage\n\n    from live_boxscore\n    , unnest(teams.home.players) as home_players\n\n)\n\n-- CTE3\n, away_team_player as (\n    select\n        /* Identifiers */\n        live_boxscore.gameid as game_id\n        , teams.away.team.id as team_id\n        , away_players.person.id as player_id\n\n        /* Properties */\n        , teams.away.team.name as team_name\n        , 'Away' as team_type\n\n        /* Player stats */\n        , away_players.person.fullname as player_full_name\n        , away_players.person.rosterstatus as player_roster_status\n        , away_players.position.code as player_position_code\n        , away_players.stats.playerstats.timeonice as time_on_ice\n        , away_players.stats.playerstats.assists as assists\n        , away_players.stats.playerstats.goals as goals\n        , away_players.stats.playerstats.shots as shots\n        , away_players.stats.playerstats.hits as hits\n        , away_players.stats.playerstats.powerplaygoals as powerplay_goals\n        , away_players.stats.playerstats.powerplayassists as powerplay_assists\n        , away_players.stats.playerstats.penaltyminutes as penalty_minutes\n        , away_players.stats.playerstats.faceoffwins as faceoff_wins\n        , away_players.stats.playerstats.faceofftaken as faceoff_taken\n        , away_players.stats.playerstats.takeaways as takeaways\n        , away_players.stats.playerstats.giveaways as giveaways\n        , away_players.stats.playerstats.shorthandedgoals as short_handed_goals\n        , away_players.stats.playerstats.shorthandedassists as short_handed_assists\n        , away_players.stats.playerstats.blocked as blocked\n        , away_players.stats.playerstats.plusminus as plus_minus\n        , away_players.stats.playerstats.eventimeonice as even_time_on_ice\n        , away_players.stats.playerstats.powerplaytimeonice as powerplay_time_on_ice\n        , away_players.stats.playerstats.shorthandedtimeonice as short_handed_time_on_ice\n        , away_players.stats.playerstats.pim as pim\n        , away_players.stats.playerstats.saves as saves\n        , away_players.stats.playerstats.powerplaysaves as powerplay_saves\n        , away_players.stats.playerstats.shorthandedsaves as short_handed_saves\n        , away_players.stats.playerstats.evensaves as even_saves\n        , away_players.stats.playerstats.shorthandedshotsagainst as short_handed_shots_against\n        , away_players.stats.playerstats.evenshotsagainst as even_shots_against\n        , away_players.stats.playerstats.powerplayshotsagainst as powerplay_shots_against\n        , away_players.stats.playerstats.decision as decision\n        , away_players.stats.playerstats.savepercentage as save_percentage\n        , away_players.stats.playerstats.powerplaysavepercentage as powerplay_save_percentage\n        , away_players.stats.playerstats.evenstrengthsavepercentage as even_strength_save_percentage\n\n    from live_boxscore\n    , unnest(teams.away.players) as away_players\n\n)\n\n-- CTE4\n, boxscore_player as (\n    select * from home_team_player\n    union all\n    select * from away_team_player\n\n)\n\n-- Final query, return everything\nselect\n    /* Primary Key */\n    {{ dbt_utils.surrogate_key(['boxscore_player.game_id', 'boxscore_player.team_id', 'boxscore_player.player_id']) }} as stg_nhl__boxscore_player_id\n\n    /* Identifiers */\n    , boxscore_player.game_id\n    , boxscore_player.team_id\n    , boxscore_player.player_id\n\n    /* Properties */\n    , boxscore_player.team_name\n    , boxscore_player.team_type\n\n    /* Player stats */\n    , boxscore_player.player_full_name\n    , boxscore_player.player_roster_status\n    , boxscore_player.player_position_code\n    , boxscore_player.time_on_ice\n    , boxscore_player.assists\n    , boxscore_player.goals\n    , boxscore_player.shots\n    , boxscore_player.hits\n    , boxscore_player.powerplay_goals\n    , boxscore_player.powerplay_assists\n    , boxscore_player.penalty_minutes\n    , boxscore_player.faceoff_wins\n    , boxscore_player.faceoff_taken\n    , boxscore_player.takeaways\n    , boxscore_player.giveaways\n    , boxscore_player.short_handed_goals\n    , boxscore_player.short_handed_assists\n    , boxscore_player.blocked\n    , boxscore_player.plus_minus\n    , boxscore_player.even_time_on_ice\n    , boxscore_player.powerplay_time_on_ice\n    , boxscore_player.short_handed_time_on_ice\n    , boxscore_player.pim\n    , boxscore_player.saves\n    , boxscore_player.powerplay_saves\n    , boxscore_player.short_handed_saves\n    , boxscore_player.even_saves\n    , boxscore_player.short_handed_shots_against\n    , boxscore_player.even_shots_against\n    , boxscore_player.powerplay_shots_against\n    , boxscore_player.decision\n    , boxscore_player.save_percentage\n    , boxscore_player.powerplay_save_percentage\n    , boxscore_player.even_strength_save_percentage\n\nfrom boxscore_player\n\norder by\n    boxscore_player.game_id desc\n    , boxscore_player.team_id desc\n    , boxscore_player.player_id desc", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["source.dbt_nhl_breakouts.meltano.live_boxscore"]}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "nhl-breakouts", "schema": "analytics_staging", "fqn": ["dbt_nhl_breakouts", "staging", "stg_nhl__boxscore_player"], "unique_id": "model.dbt_nhl_breakouts.stg_nhl__boxscore_player", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "staging/stg_nhl__boxscore_player.sql", "original_file_path": "models/staging/stg_nhl__boxscore_player.sql", "name": "stg_nhl__boxscore_player", "alias": "stg_nhl__boxscore_player", "checksum": {"name": "sha256", "checksum": "b3a6eb9187740046abc9607a973967326b38e786815c291f73425724aa6956f8"}, "tags": [], "refs": [], "sources": [["meltano", "live_boxscore"]], "description": "Staged NHL boxscore player data from the NHL-API (game-player level). Each row represents an individual player's summarized activity in an NHL game", "columns": {"stg_nhl__boxscore_player_id": {"name": "stg_nhl__boxscore_player_id", "description": "Unique surrogate key for a player's summarized activity in an NHL game (game_id + team_id + player_id)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "game_id": {"name": "game_id", "description": "Foreign key that maps to an NHL game ID\n##### More about game_id\nThe first 4 digits identify the season of the game (ie. 2017 for the 2017-2018 season). The next 2 digits give the type of game, where 01 = preseason, 02 = regular season, 03 = playoffs, 04 = all-star. The final 4 digits identify the specific game number.\n\nFor regular season and preseason games, this ranges from 0001 to the number of games played. (1271 for seasons with 31 teams (2017 and onwards) and 1230 for seasons with 30 teams).\n\nFor playoff games, the 2nd digit of the specific number gives the round of the playoffs, the 3rd digit specifies the matchup, and the 4th digit specifies the game (out of 7).\n\n[Credit to Drew Hynes' NHL API docs](https://gitlab.com/dword4/nhlapi/-/blob/master/stats-api.md#game-ids)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "team_id": {"name": "team_id", "description": "Foreign key that maps to an NHL team ID", "meta": {}, "data_type": null, "quote": null, "tags": []}, "player_id": {"name": "player_id", "description": "Foreign key that maps to an NHL player ID", "meta": {}, "data_type": null, "quote": null, "tags": []}, "team_name": {"name": "team_name", "description": "Name of the NHL team", "meta": {}, "data_type": null, "quote": null, "tags": []}, "team_type": {"name": "team_type", "description": "Describes the Away / Home status for the team that the player belonged to in that game", "meta": {}, "data_type": null, "quote": null, "tags": []}, "player_full_name": {"name": "player_full_name", "description": "Full name of the NHL player", "meta": {}, "data_type": null, "quote": null, "tags": []}, "player_roster_status": {"name": "player_roster_status", "description": "Roster status of the NHL player (e.g. Y, N, I)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "player_position_code": {"name": "player_position_code", "description": "Position code (e.g. C, LW, D)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "time_on_ice": {"name": "time_on_ice", "description": "Time on ice in minutes:seconds (e.g. 21:30)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "assists": {"name": "assists", "description": "Number of assists (primary & secondary)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "goals": {"name": "goals", "description": "Number of goals scored", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shots": {"name": "shots", "description": "Number of shots taken", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hits": {"name": "hits", "description": "Number of hits made", "meta": {}, "data_type": null, "quote": null, "tags": []}, "powerplay_goals": {"name": "powerplay_goals", "description": "Number of powerplay goals scored", "meta": {}, "data_type": null, "quote": null, "tags": []}, "powerplay_assists": {"name": "powerplay_assists", "description": "Number of powerplay assists (primary & secondary)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "penalty_minutes": {"name": "penalty_minutes", "description": "Number of penalties taken in minutes", "meta": {}, "data_type": null, "quote": null, "tags": []}, "faceoff_wins": {"name": "faceoff_wins", "description": "Number of faceoffs won", "meta": {}, "data_type": null, "quote": null, "tags": []}, "faceoff_taken": {"name": "faceoff_taken", "description": "Number of faceoffs taken", "meta": {}, "data_type": null, "quote": null, "tags": []}, "takeaways": {"name": "takeaways", "description": "Number of takeaways made", "meta": {}, "data_type": null, "quote": null, "tags": []}, "giveaways": {"name": "giveaways", "description": "Number of giveaways faulted for", "meta": {}, "data_type": null, "quote": null, "tags": []}, "short_handed_goals": {"name": "short_handed_goals", "description": "Number of short-handed goals scored", "meta": {}, "data_type": null, "quote": null, "tags": []}, "short_handed_assists": {"name": "short_handed_assists", "description": "Number of short-handed assists made", "meta": {}, "data_type": null, "quote": null, "tags": []}, "blocked": {"name": "blocked", "description": "Number of blocked shots", "meta": {}, "data_type": null, "quote": null, "tags": []}, "plus_minus": {"name": "plus_minus", "description": "Total plus minus in the game - plus for every goal scored while on the ice for, minus for every goal allowed while on the ice", "meta": {}, "data_type": null, "quote": null, "tags": []}, "even_time_on_ice": {"name": "even_time_on_ice", "description": "Time on ice in minutes:seconds at event-strength (5v5)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "powerplay_time_on_ice": {"name": "powerplay_time_on_ice", "description": "Time on ice in minutes:seconds on the man advantage / powerplay (5v4, 5v3, or 4v3)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "short_handed_time_on_ice": {"name": "short_handed_time_on_ice", "description": "Time on ice in minutes:seconds while short-handed / on the penalty kill (4v5, 3v5, or 3v4)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pim": {"name": "pim", "description": "Penalties in minutes:seconds", "meta": {}, "data_type": null, "quote": null, "tags": []}, "saves": {"name": "saves", "description": "Number of saves made", "meta": {}, "data_type": null, "quote": null, "tags": []}, "powerplay_saves": {"name": "powerplay_saves", "description": "Number of saves made on the powerplay", "meta": {}, "data_type": null, "quote": null, "tags": []}, "short_handed_saves": {"name": "short_handed_saves", "description": "Number of saves made on the penalty kill / short-handed", "meta": {}, "data_type": null, "quote": null, "tags": []}, "even_saves": {"name": "even_saves", "description": "Number of saves made at event strength", "meta": {}, "data_type": null, "quote": null, "tags": []}, "short_handed_shots_against": {"name": "short_handed_shots_against", "description": "Number of shots against on the penalth kill / short-handed", "meta": {}, "data_type": null, "quote": null, "tags": []}, "even_shots_against": {"name": "even_shots_against", "description": "Number of shots against at event strength", "meta": {}, "data_type": null, "quote": null, "tags": []}, "powerplay_shots_against": {"name": "powerplay_shots_against", "description": "Number of shots against on the powerplay / mad advantage", "meta": {}, "data_type": null, "quote": null, "tags": []}, "decision": {"name": "decision", "description": "Win (W) or Loss (L) for goalies only (NULL if player)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "save_percentage": {"name": "save_percentage", "description": "Percentage of shots faced that were saved (100% * (Number of shots saved / Number of shots))", "meta": {}, "data_type": null, "quote": null, "tags": []}, "powerplay_save_percentage": {"name": "powerplay_save_percentage", "description": "Percentage of shots faced on the powerplay that were saved (100% * (Number of shots saved / Number of shots))", "meta": {}, "data_type": null, "quote": null, "tags": []}, "even_strength_save_percentage": {"name": "even_strength_save_percentage", "description": "Percentage of shots faced at even strength that were saved (100% * (Number of shots saved / Number of shots))", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dbt_nhl_breakouts://models/staging/stg_nhl__boxscore_player.yml", "compiled_path": "target/compiled/dbt_nhl_breakouts/models/staging/stg_nhl__boxscore_player.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "staging"}, "created_at": 1652151875.494294, "compiled_sql": "with\n-- CTE1\nlive_boxscore as (\n    select\n        *\n    from\n        `nhl-breakouts`.`raw`.`live_boxscore`\n)\n\n-- CTE2\n, home_team_player as (\n    select\n        /* Identifiers */\n        live_boxscore.gameid as game_id\n        , teams.home.team.id as team_id\n        , home_players.person.id as player_id\n\n        /* Properties */\n        , teams.home.team.name as team_name\n        , 'Home' as team_type\n\n        /* Player stats */\n        , home_players.person.fullname as player_full_name\n        , home_players.person.rosterstatus as player_roster_status\n        , home_players.position.code as player_position_code\n        , home_players.stats.playerstats.timeonice as time_on_ice\n        , home_players.stats.playerstats.assists as assists\n        , home_players.stats.playerstats.goals as goals\n        , home_players.stats.playerstats.shots as shots\n        , home_players.stats.playerstats.hits as hits\n        , home_players.stats.playerstats.powerplaygoals as powerplay_goals\n        , home_players.stats.playerstats.powerplayassists as powerplay_assists\n        , home_players.stats.playerstats.penaltyminutes as penalty_minutes\n        , home_players.stats.playerstats.faceoffwins as faceoff_wins\n        , home_players.stats.playerstats.faceofftaken as faceoff_taken\n        , home_players.stats.playerstats.takeaways as takeaways\n        , home_players.stats.playerstats.giveaways as giveaways\n        , home_players.stats.playerstats.shorthandedgoals as short_handed_goals\n        , home_players.stats.playerstats.shorthandedassists as short_handed_assists\n        , home_players.stats.playerstats.blocked as blocked\n        , home_players.stats.playerstats.plusminus as plus_minus\n        , home_players.stats.playerstats.eventimeonice as even_time_on_ice\n        , home_players.stats.playerstats.powerplaytimeonice as powerplay_time_on_ice\n        , home_players.stats.playerstats.shorthandedtimeonice as short_handed_time_on_ice\n        , home_players.stats.playerstats.pim as pim\n        , home_players.stats.playerstats.saves as saves\n        , home_players.stats.playerstats.powerplaysaves as powerplay_saves\n        , home_players.stats.playerstats.shorthandedsaves as short_handed_saves\n        , home_players.stats.playerstats.evensaves as even_saves\n        , home_players.stats.playerstats.shorthandedshotsagainst as short_handed_shots_against\n        , home_players.stats.playerstats.evenshotsagainst as even_shots_against\n        , home_players.stats.playerstats.powerplayshotsagainst as powerplay_shots_against\n        , home_players.stats.playerstats.decision as decision\n        , home_players.stats.playerstats.savepercentage as save_percentage\n        , home_players.stats.playerstats.powerplaysavepercentage as powerplay_save_percentage\n        , home_players.stats.playerstats.evenstrengthsavepercentage as even_strength_save_percentage\n\n    from live_boxscore\n    , unnest(teams.home.players) as home_players\n\n)\n\n-- CTE3\n, away_team_player as (\n    select\n        /* Identifiers */\n        live_boxscore.gameid as game_id\n        , teams.away.team.id as team_id\n        , away_players.person.id as player_id\n\n        /* Properties */\n        , teams.away.team.name as team_name\n        , 'Away' as team_type\n\n        /* Player stats */\n        , away_players.person.fullname as player_full_name\n        , away_players.person.rosterstatus as player_roster_status\n        , away_players.position.code as player_position_code\n        , away_players.stats.playerstats.timeonice as time_on_ice\n        , away_players.stats.playerstats.assists as assists\n        , away_players.stats.playerstats.goals as goals\n        , away_players.stats.playerstats.shots as shots\n        , away_players.stats.playerstats.hits as hits\n        , away_players.stats.playerstats.powerplaygoals as powerplay_goals\n        , away_players.stats.playerstats.powerplayassists as powerplay_assists\n        , away_players.stats.playerstats.penaltyminutes as penalty_minutes\n        , away_players.stats.playerstats.faceoffwins as faceoff_wins\n        , away_players.stats.playerstats.faceofftaken as faceoff_taken\n        , away_players.stats.playerstats.takeaways as takeaways\n        , away_players.stats.playerstats.giveaways as giveaways\n        , away_players.stats.playerstats.shorthandedgoals as short_handed_goals\n        , away_players.stats.playerstats.shorthandedassists as short_handed_assists\n        , away_players.stats.playerstats.blocked as blocked\n        , away_players.stats.playerstats.plusminus as plus_minus\n        , away_players.stats.playerstats.eventimeonice as even_time_on_ice\n        , away_players.stats.playerstats.powerplaytimeonice as powerplay_time_on_ice\n        , away_players.stats.playerstats.shorthandedtimeonice as short_handed_time_on_ice\n        , away_players.stats.playerstats.pim as pim\n        , away_players.stats.playerstats.saves as saves\n        , away_players.stats.playerstats.powerplaysaves as powerplay_saves\n        , away_players.stats.playerstats.shorthandedsaves as short_handed_saves\n        , away_players.stats.playerstats.evensaves as even_saves\n        , away_players.stats.playerstats.shorthandedshotsagainst as short_handed_shots_against\n        , away_players.stats.playerstats.evenshotsagainst as even_shots_against\n        , away_players.stats.playerstats.powerplayshotsagainst as powerplay_shots_against\n        , away_players.stats.playerstats.decision as decision\n        , away_players.stats.playerstats.savepercentage as save_percentage\n        , away_players.stats.playerstats.powerplaysavepercentage as powerplay_save_percentage\n        , away_players.stats.playerstats.evenstrengthsavepercentage as even_strength_save_percentage\n\n    from live_boxscore\n    , unnest(teams.away.players) as away_players\n\n)\n\n-- CTE4\n, boxscore_player as (\n    select * from home_team_player\n    union all\n    select * from away_team_player\n\n)\n\n-- Final query, return everything\nselect\n    /* Primary Key */\n    to_hex(md5(cast(coalesce(cast(boxscore_player.game_id as \n    string\n), '') || '-' || coalesce(cast(boxscore_player.team_id as \n    string\n), '') || '-' || coalesce(cast(boxscore_player.player_id as \n    string\n), '') as \n    string\n))) as stg_nhl__boxscore_player_id\n\n    /* Identifiers */\n    , boxscore_player.game_id\n    , boxscore_player.team_id\n    , boxscore_player.player_id\n\n    /* Properties */\n    , boxscore_player.team_name\n    , boxscore_player.team_type\n\n    /* Player stats */\n    , boxscore_player.player_full_name\n    , boxscore_player.player_roster_status\n    , boxscore_player.player_position_code\n    , boxscore_player.time_on_ice\n    , boxscore_player.assists\n    , boxscore_player.goals\n    , boxscore_player.shots\n    , boxscore_player.hits\n    , boxscore_player.powerplay_goals\n    , boxscore_player.powerplay_assists\n    , boxscore_player.penalty_minutes\n    , boxscore_player.faceoff_wins\n    , boxscore_player.faceoff_taken\n    , boxscore_player.takeaways\n    , boxscore_player.giveaways\n    , boxscore_player.short_handed_goals\n    , boxscore_player.short_handed_assists\n    , boxscore_player.blocked\n    , boxscore_player.plus_minus\n    , boxscore_player.even_time_on_ice\n    , boxscore_player.powerplay_time_on_ice\n    , boxscore_player.short_handed_time_on_ice\n    , boxscore_player.pim\n    , boxscore_player.saves\n    , boxscore_player.powerplay_saves\n    , boxscore_player.short_handed_saves\n    , boxscore_player.even_saves\n    , boxscore_player.short_handed_shots_against\n    , boxscore_player.even_shots_against\n    , boxscore_player.powerplay_shots_against\n    , boxscore_player.decision\n    , boxscore_player.save_percentage\n    , boxscore_player.powerplay_save_percentage\n    , boxscore_player.even_strength_save_percentage\n\nfrom boxscore_player\n\norder by\n    boxscore_player.game_id desc\n    , boxscore_player.team_id desc\n    , boxscore_player.player_id desc", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`nhl-breakouts`.`analytics_staging`.`stg_nhl__boxscore_player`"}, "model.dbt_nhl_breakouts.stg_nhl__linescore": {"raw_sql": "with\nlive_linescore as (\n    select * from {{ source('meltano', 'live_linescore') }}\n)\n\n, final as (\n    select\n        /* Primary Key */\n        {{ dbt_utils.surrogate_key(['gameid']) }} as stg_nhl__linescore_id\n\n        /* Identifiers */\n        , gameid as game_id\n        , teams.home.team.id as home_team_id\n        , teams.away.team.id as away_team_id\n        , case\n            when teams.home.goals > teams.away.goals then teams.home.team.id\n            when teams.home.goals < teams.away.goals then teams.away.team.id\n            else -1\n        end as game_winning_team_id\n\n        /* Properties */\n        -- Game-level stats\n        , concat(teams.home.goals, '-', teams.away.goals, ' (Home-Away)') as game_score_description\n        , concat(teams.home.team.name, ' (Home) vs ', teams.away.team.name, ' (Away)') as game_matchup_description\n        , case\n            when teams.home.goals > teams.away.goals then teams.home.team.name\n            when teams.home.goals < teams.away.goals then teams.away.team.name\n            else 'Undetermined'\n        end as game_winning_team_name\n        , case\n            when teams.home.goals > teams.away.goals then 'Home'\n            when teams.home.goals < teams.away.goals then 'Away'\n            else 'Undetermined'\n        end as game_winning_team_type\n        , abs(teams.home.goals - teams.away.goals) as game_absolute_goal_differential\n        -- Team level stats\n        , teams.home.goals as home_team_goals\n        , teams.away.goals as away_team_goals\n    from live_linescore\n)\n\nselect * from final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["source.dbt_nhl_breakouts.meltano.live_linescore"]}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "nhl-breakouts", "schema": "analytics_staging", "fqn": ["dbt_nhl_breakouts", "staging", "stg_nhl__linescore"], "unique_id": "model.dbt_nhl_breakouts.stg_nhl__linescore", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "staging/stg_nhl__linescore.sql", "original_file_path": "models/staging/stg_nhl__linescore.sql", "name": "stg_nhl__linescore", "alias": "stg_nhl__linescore", "checksum": {"name": "sha256", "checksum": "13899ff11b4bc0bd7c11b329677eae3741418f5f4e6946e596ccbd1ed18ddeba"}, "tags": [], "refs": [], "sources": [["meltano", "live_linescore"]], "description": "Staged NHL linescore data from the NHL-API. Contains the summary of goals and teams involved at the game level.\n", "columns": {"stg_nhl__linescore_id": {"name": "stg_nhl__linescore_id", "description": "Unique identifier for the game linescore", "meta": {}, "data_type": null, "quote": null, "tags": []}, "game_id": {"name": "game_id", "description": "Unique identifier for an NHL game (game_id)\n##### More about game_id\nThe first 4 digits identify the season of the game (ie. 2017 for the 2017-2018 season). The next 2 digits give the type of game, where 01 = preseason, 02 = regular season, 03 = playoffs, 04 = all-star. The final 4 digits identify the specific game number.\n\nFor regular season and preseason games, this ranges from 0001 to the number of games played. (1271 for seasons with 31 teams (2017 and onwards) and 1230 for seasons with 30 teams).\n\nFor playoff games, the 2nd digit of the specific number gives the round of the playoffs, the 3rd digit specifies the matchup, and the 4th digit specifies the game (out of 7).\n\n[Credit to Drew Hynes' NHL API docs](https://gitlab.com/dword4/nhlapi/-/blob/master/stats-api.md#game-ids)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "home_team_id": {"name": "home_team_id", "description": "Identifier for the home team, foreign key to stg_nhl__teams", "meta": {}, "data_type": null, "quote": null, "tags": []}, "away_team_id": {"name": "away_team_id", "description": "Identifier for the away team, foreign key to stg_nhl__teams", "meta": {}, "data_type": null, "quote": null, "tags": []}, "game_winning_team_id": {"name": "game_winning_team_id", "description": "Identifier for the winning team, foreign key to stg_nhl__teams", "meta": {}, "data_type": null, "quote": null, "tags": []}, "game_score_description": {"name": "game_score_description", "description": "Description of the game score in the format `<home_team_score>`-`<away_team_score>`", "meta": {}, "data_type": null, "quote": null, "tags": []}, "game_matchup_description": {"name": "game_matchup_description", "description": "Description of the team matchup in the format `<home_team_name>` vs `<away_team_name>`", "meta": {}, "data_type": null, "quote": null, "tags": []}, "game_winning_team_name": {"name": "game_winning_team_name", "description": "Name of the winning team", "meta": {}, "data_type": null, "quote": null, "tags": []}, "game_winning_team_type": {"name": "game_winning_team_type", "description": "Winning team type (home or away)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "game_absolute_goal_differential": {"name": "game_absolute_goal_differential", "description": "The absolute difference of the home and away team scores", "meta": {}, "data_type": null, "quote": null, "tags": []}, "home_team_goals": {"name": "home_team_goals", "description": "Total goals scored by the home team", "meta": {}, "data_type": null, "quote": null, "tags": []}, "away_team_goals": {"name": "away_team_goals", "description": "Total goals scored by the away team", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dbt_nhl_breakouts://models/staging/stg_nhl__linescore.yml", "compiled_path": "target/compiled/dbt_nhl_breakouts/models/staging/stg_nhl__linescore.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "staging"}, "created_at": 1652151875.498385, "compiled_sql": "with\nlive_linescore as (\n    select * from `nhl-breakouts`.`raw`.`live_linescore`\n)\n\n, final as (\n    select\n        /* Primary Key */\n        to_hex(md5(cast(coalesce(cast(gameid as \n    string\n), '') as \n    string\n))) as stg_nhl__linescore_id\n\n        /* Identifiers */\n        , gameid as game_id\n        , teams.home.team.id as home_team_id\n        , teams.away.team.id as away_team_id\n        , case\n            when teams.home.goals > teams.away.goals then teams.home.team.id\n            when teams.home.goals < teams.away.goals then teams.away.team.id\n            else -1\n        end as game_winning_team_id\n\n        /* Properties */\n        -- Game-level stats\n        , concat(teams.home.goals, '-', teams.away.goals, ' (Home-Away)') as game_score_description\n        , concat(teams.home.team.name, ' (Home) vs ', teams.away.team.name, ' (Away)') as game_matchup_description\n        , case\n            when teams.home.goals > teams.away.goals then teams.home.team.name\n            when teams.home.goals < teams.away.goals then teams.away.team.name\n            else 'Undetermined'\n        end as game_winning_team_name\n        , case\n            when teams.home.goals > teams.away.goals then 'Home'\n            when teams.home.goals < teams.away.goals then 'Away'\n            else 'Undetermined'\n        end as game_winning_team_type\n        , abs(teams.home.goals - teams.away.goals) as game_absolute_goal_differential\n        -- Team level stats\n        , teams.home.goals as home_team_goals\n        , teams.away.goals as away_team_goals\n    from live_linescore\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`nhl-breakouts`.`analytics_staging`.`stg_nhl__linescore`"}, "model.dbt_nhl_breakouts.stg_nhl__games": {"raw_sql": "with\nlinescore as (\n    select * from {{ ref('stg_nhl__linescore') }}\n)\n\n, boxscore as (\n    select * from {{ ref('stg_nhl__boxscore') }}\n)\n\n, final as (\n    select\n        /* Primary Key */\n        {{ dbt_utils.surrogate_key(['linescore.game_id']) }} as stg_nhl__games_id\n\n        /* Identifiers */\n        , linescore.game_id\n        , linescore.home_team_id\n        , linescore.away_team_id\n\n        /* Properties */\n        -- Game-level stats\n        , linescore.game_score_description\n        , linescore.game_matchup_description\n        , linescore.game_winning_team_id\n        , linescore.game_winning_team_name\n        , linescore.game_absolute_goal_differential\n        , linescore.home_team_goals\n        , linescore.away_team_goals\n        -- Home team stats\n        , boxscore.home_team_name\n        , boxscore.home_team_pim\n        , boxscore.home_team_shots\n        , boxscore.home_team_powerplay_goals\n        , boxscore.home_team_powerplay_opportunities\n        , boxscore.home_team_faceoff_percentage\n        , boxscore.home_team_blocked\n        , boxscore.home_team_takeaways\n        , boxscore.home_team_giveaways\n        , boxscore.home_team_hits\n        -- Away team stats\n        , boxscore.away_team_name\n        , boxscore.away_team_pim\n        , boxscore.away_team_shots\n        , boxscore.away_team_powerplay_goals\n        , boxscore.away_team_powerplay_opportunities\n        , boxscore.away_team_faceoff_percentage\n        , boxscore.away_team_blocked\n        , boxscore.away_team_takeaways\n        , boxscore.away_team_giveaways\n        , boxscore.away_team_hits\n    from linescore\n    left join boxscore\n        on linescore.game_id = boxscore.game_id\n            and linescore.home_team_id = boxscore.home_team_id\n            and linescore.away_team_id = boxscore.away_team_id\n)\n\nselect * from final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["model.dbt_nhl_breakouts.stg_nhl__linescore", "model.dbt_nhl_breakouts.stg_nhl__boxscore"]}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "nhl-breakouts", "schema": "analytics_staging", "fqn": ["dbt_nhl_breakouts", "staging", "stg_nhl__games"], "unique_id": "model.dbt_nhl_breakouts.stg_nhl__games", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "staging/stg_nhl__games.sql", "original_file_path": "models/staging/stg_nhl__games.sql", "name": "stg_nhl__games", "alias": "stg_nhl__games", "checksum": {"name": "sha256", "checksum": "13d7ca1a605f69814006cea32b06660acef8d5b4d66cdeac40e023e4ab8b40b8"}, "tags": [], "refs": [["stg_nhl__linescore"], ["stg_nhl__boxscore"]], "sources": [], "description": "Staged NHL boxscore & linescore data from the NHL-API", "columns": {"stg_nhl__games_id": {"name": "stg_nhl__games_id", "description": "Unique surrogate key for an NHL game", "meta": {}, "data_type": null, "quote": null, "tags": []}, "game_id": {"name": "game_id", "description": "Unique identifier for an NHL game (game_id)\n##### More about game_id\nThe first 4 digits identify the season of the game (ie. 2017 for the 2017-2018 season). The next 2 digits give the type of game, where 01 = preseason, 02 = regular season, 03 = playoffs, 04 = all-star. The final 4 digits identify the specific game number.\n\nFor regular season and preseason games, this ranges from 0001 to the number of games played. (1271 for seasons with 31 teams (2017 and onwards) and 1230 for seasons with 30 teams).\n\nFor playoff games, the 2nd digit of the specific number gives the round of the playoffs, the 3rd digit specifies the matchup, and the 4th digit specifies the game (out of 7).\n\n[Credit to Drew Hynes' NHL API docs](https://gitlab.com/dword4/nhlapi/-/blob/master/stats-api.md#game-ids)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "home_team_id": {"name": "home_team_id", "description": "Foreign key that maps to an NHL team (home team)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "away_team_id": {"name": "away_team_id", "description": "Foreign key that maps to an NHL team (away team)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "game_score_description": {"name": "game_score_description", "description": "Description of the NHL game scoreline", "meta": {}, "data_type": null, "quote": null, "tags": []}, "game_matchup_description": {"name": "game_matchup_description", "description": "Description of the participants in the NHL game", "meta": {}, "data_type": null, "quote": null, "tags": []}, "game_winning_team_id": {"name": "game_winning_team_id", "description": "Winning team's team ID", "meta": {}, "data_type": null, "quote": null, "tags": []}, "game_winning_team_name": {"name": "game_winning_team_name", "description": "Winning team's team name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "game_absolute_goal_differential": {"name": "game_absolute_goal_differential", "description": "Absolute goal differential between the winner and loser", "meta": {}, "data_type": null, "quote": null, "tags": []}, "home_team_goals": {"name": "home_team_goals", "description": "Number of goals scored by the home team", "meta": {}, "data_type": null, "quote": null, "tags": []}, "away_team_goals": {"name": "away_team_goals", "description": "Number of goals scored by the away team", "meta": {}, "data_type": null, "quote": null, "tags": []}, "home_team_name": {"name": "home_team_name", "description": "Home team's team name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "home_team_pim": {"name": "home_team_pim", "description": "Number of penalty minutes taken by the home team", "meta": {}, "data_type": null, "quote": null, "tags": []}, "home_team_shots": {"name": "home_team_shots", "description": "Number of shots taken by the home team", "meta": {}, "data_type": null, "quote": null, "tags": []}, "home_team_powerplay_goals": {"name": "home_team_powerplay_goals", "description": "Number of powerplay goals scored by the home team", "meta": {}, "data_type": null, "quote": null, "tags": []}, "home_team_powerplay_opportunities": {"name": "home_team_powerplay_opportunities", "description": "Number of powerplay opportunities had by the home team", "meta": {}, "data_type": null, "quote": null, "tags": []}, "home_team_faceoff_percentage": {"name": "home_team_faceoff_percentage", "description": "Faceoff percentage (wins / attempts) of the home team", "meta": {}, "data_type": null, "quote": null, "tags": []}, "home_team_blocked": {"name": "home_team_blocked", "description": "Number of blocked shots by the home team", "meta": {}, "data_type": null, "quote": null, "tags": []}, "home_team_takeaways": {"name": "home_team_takeaways", "description": "Number of takeaways made by the home team", "meta": {}, "data_type": null, "quote": null, "tags": []}, "home_team_giveaways": {"name": "home_team_giveaways", "description": "Number of giveaways faulted for by the home team", "meta": {}, "data_type": null, "quote": null, "tags": []}, "home_team_hits": {"name": "home_team_hits", "description": "Number of hits made by the home team", "meta": {}, "data_type": null, "quote": null, "tags": []}, "away_team_name": {"name": "away_team_name", "description": "Away team's team name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "away_team_pim": {"name": "away_team_pim", "description": "Number of penalty minutes taken by the away team", "meta": {}, "data_type": null, "quote": null, "tags": []}, "away_team_shots": {"name": "away_team_shots", "description": "Number of shots taken by the away team", "meta": {}, "data_type": null, "quote": null, "tags": []}, "away_team_powerplay_goals": {"name": "away_team_powerplay_goals", "description": "Number of powerplay goals scored by the away team", "meta": {}, "data_type": null, "quote": null, "tags": []}, "away_team_powerplay_opportunities": {"name": "away_team_powerplay_opportunities", "description": "Number of powerplay opportunities had by the away team", "meta": {}, "data_type": null, "quote": null, "tags": []}, "away_team_faceoff_percentage": {"name": "away_team_faceoff_percentage", "description": "Faceoff percentage (wins / attempts) of the away team", "meta": {}, "data_type": null, "quote": null, "tags": []}, "away_team_blocked": {"name": "away_team_blocked", "description": "Number of blocked shots by the away team", "meta": {}, "data_type": null, "quote": null, "tags": []}, "away_team_takeaways": {"name": "away_team_takeaways", "description": "Number of takeaways made by the away team", "meta": {}, "data_type": null, "quote": null, "tags": []}, "away_team_giveaways": {"name": "away_team_giveaways", "description": "Number of giveaways faulted for by the away team", "meta": {}, "data_type": null, "quote": null, "tags": []}, "away_team_hits": {"name": "away_team_hits", "description": "Number of hits made by the away team", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dbt_nhl_breakouts://models/staging/stg_nhl__games.yml", "compiled_path": "target/compiled/dbt_nhl_breakouts/models/staging/stg_nhl__games.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "staging"}, "created_at": 1652151875.5122602, "compiled_sql": "with\nlinescore as (\n    select * from `nhl-breakouts`.`analytics_staging`.`stg_nhl__linescore`\n)\n\n, boxscore as (\n    select * from `nhl-breakouts`.`analytics_staging`.`stg_nhl__boxscore`\n)\n\n, final as (\n    select\n        /* Primary Key */\n        to_hex(md5(cast(coalesce(cast(linescore.game_id as \n    string\n), '') as \n    string\n))) as stg_nhl__games_id\n\n        /* Identifiers */\n        , linescore.game_id\n        , linescore.home_team_id\n        , linescore.away_team_id\n\n        /* Properties */\n        -- Game-level stats\n        , linescore.game_score_description\n        , linescore.game_matchup_description\n        , linescore.game_winning_team_id\n        , linescore.game_winning_team_name\n        , linescore.game_absolute_goal_differential\n        , linescore.home_team_goals\n        , linescore.away_team_goals\n        -- Home team stats\n        , boxscore.home_team_name\n        , boxscore.home_team_pim\n        , boxscore.home_team_shots\n        , boxscore.home_team_powerplay_goals\n        , boxscore.home_team_powerplay_opportunities\n        , boxscore.home_team_faceoff_percentage\n        , boxscore.home_team_blocked\n        , boxscore.home_team_takeaways\n        , boxscore.home_team_giveaways\n        , boxscore.home_team_hits\n        -- Away team stats\n        , boxscore.away_team_name\n        , boxscore.away_team_pim\n        , boxscore.away_team_shots\n        , boxscore.away_team_powerplay_goals\n        , boxscore.away_team_powerplay_opportunities\n        , boxscore.away_team_faceoff_percentage\n        , boxscore.away_team_blocked\n        , boxscore.away_team_takeaways\n        , boxscore.away_team_giveaways\n        , boxscore.away_team_hits\n    from linescore\n    left join boxscore\n        on linescore.game_id = boxscore.game_id\n            and linescore.home_team_id = boxscore.home_team_id\n            and linescore.away_team_id = boxscore.away_team_id\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`nhl-breakouts`.`analytics_staging`.`stg_nhl__games`"}, "model.dbt_nhl_breakouts.stg_nhl__schedule": {"raw_sql": "select\n    /* Primary Key */\n    {{ dbt_utils.surrogate_key(['schedule.gamepk', 'schedule.season']) }} as stg_nhl__schedule_id\n\n    /* Identifiers */\n    , schedule.gamepk as game_id\n    , schedule.season as season_id\n    , schedule.teams.away.team.id as away_team_id\n    , schedule.teams.home.team.id as home_team_id\n    , schedule.venue.id as venue_id\n\n    /* Properties */\n    , substr(cast(schedule.gamepk as string), 7, 4) as game_number\n    , schedule.link as url\n    , schedule.gametype as game_type\n    , date(schedule.gamedate) as game_date\n    , schedule.status.abstractgamestate as abstract_game_state\n    , schedule.status.codedgamestate as coded_game_state\n    , schedule.status.detailedstate as detailed_state\n    , schedule.status.statuscode as status_code\n    , schedule.status.starttimetbd as is_start_time_tbd\n    , schedule.teams.away.leaguerecord.wins as away_team_wins\n    , schedule.teams.away.leaguerecord.losses as away_team_losses\n    , schedule.teams.away.leaguerecord.ot as away_team_ot\n    , schedule.teams.away.leaguerecord.type as away_team_type\n    , schedule.teams.away.score as away_team_score\n    , schedule.teams.away.team.name as away_team_name\n    , schedule.teams.away.team.link as away_team_url\n    , schedule.teams.home.leaguerecord.wins as home_team_wins\n    , schedule.teams.home.leaguerecord.losses as home_team_losses\n    , schedule.teams.home.leaguerecord.ot as home_team_ot\n    , schedule.teams.home.leaguerecord.type as home_team_type\n    , schedule.teams.home.score as home_team_score\n    , schedule.teams.home.team.name as home_team_name\n    , schedule.teams.home.team.link as home_team_url\n    , schedule.venue.name as venue_name\n    , schedule.venue.link as venue_url\n    , schedule.content.link as content_url\n    , schedule._time_extracted as extracted_at\n    , schedule._time_loaded as loaded_at\nfrom {{ source('meltano', 'schedule') }} as schedule", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["source.dbt_nhl_breakouts.meltano.schedule"]}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "nhl-breakouts", "schema": "analytics_staging", "fqn": ["dbt_nhl_breakouts", "staging", "stg_nhl__schedule"], "unique_id": "model.dbt_nhl_breakouts.stg_nhl__schedule", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "staging/stg_nhl__schedule.sql", "original_file_path": "models/staging/stg_nhl__schedule.sql", "name": "stg_nhl__schedule", "alias": "stg_nhl__schedule", "checksum": {"name": "sha256", "checksum": "4aca1f9b009a87274820ecc9ddd988ef550a67d563618d463c7c25e6822c4434"}, "tags": [], "refs": [], "sources": [["meltano", "schedule"]], "description": "Staged NHL schedule data from the NHL-API", "columns": {"stg_nhl__schedule_id": {"name": "stg_nhl__schedule_id", "description": "Unique identifier for NHL scheduled games", "meta": {}, "data_type": null, "quote": null, "tags": []}, "game_id": {"name": "game_id", "description": "Foreign key that maps to an NHL game\n##### More about game_id\nThe first 4 digits identify the season of the game (ie. 2017 for the 2017-2018 season). The next 2 digits give the type of game, where 01 = preseason, 02 = regular season, 03 = playoffs, 04 = all-star. The final 4 digits identify the specific game number.\n\nFor regular season and preseason games, this ranges from 0001 to the number of games played. (1271 for seasons with 31 teams (2017 and onwards) and 1230 for seasons with 30 teams).\n\nFor playoff games, the 2nd digit of the specific number gives the round of the playoffs, the 3rd digit specifies the matchup, and the 4th digit specifies the game (out of 7).\n\n[Credit to Drew Hynes' NHL API docs](https://gitlab.com/dword4/nhlapi/-/blob/master/stats-api.md#game-ids)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "season_id": {"name": "season_id", "description": "Foreign key that maps to an NHL season", "meta": {}, "data_type": null, "quote": null, "tags": []}, "away_team_id": {"name": "away_team_id", "description": "Foreign key that maps to an NHL team (away team)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "home_team_id": {"name": "home_team_id", "description": "Foreign key that maps to an NHL team (home team)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "venue_id": {"name": "venue_id", "description": "Foreign key tha tmaps to a team's venue (home team)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "game_number": {"name": "game_number", "description": "Four digit number that is unique to a game in the context of a season (e.g. 0002)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url": {"name": "url", "description": "URL endpoint for schedule", "meta": {}, "data_type": null, "quote": null, "tags": []}, "game_type": {"name": "game_type", "description": "Code for the type of game (e.g. R = regular season)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "game_date": {"name": "game_date", "description": "Date that the game takes place (e.g. 2021-01-14)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "abstract_game_state": {"name": "abstract_game_state", "description": "Game state (e.g. Final)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "coded_game_state": {"name": "coded_game_state", "description": "Coded game state (e.g. 7)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "detailed_state": {"name": "detailed_state", "description": "Detailed game state (e.g. Final) - should be different that game state, but look similar", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status_code": {"name": "status_code", "description": "Unknown - looks similar to code_game_state", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_start_time_tbd": {"name": "is_start_time_tbd", "description": "Whether or not the start time is still to be decided (True / False)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "away_team_wins": {"name": "away_team_wins", "description": "Cumulative number of wins for the away team for the given season (wins for the team at that point in time)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "away_team_losses": {"name": "away_team_losses", "description": "Cumulative number of losses for the away team for the given season (losses for the team at that point in time)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "away_team_ot": {"name": "away_team_ot", "description": "Cumulative number of overtime wins for the away team for the given season (overtime wins for the team at that point in time)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "away_team_type": {"name": "away_team_type", "description": "Type of away team (e.g. League)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "away_team_score": {"name": "away_team_score", "description": "Goals scored by the away team", "meta": {}, "data_type": null, "quote": null, "tags": []}, "away_team_name": {"name": "away_team_name", "description": "Away team name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "away_team_url": {"name": "away_team_url", "description": "Away team URL endpoint", "meta": {}, "data_type": null, "quote": null, "tags": []}, "home_team_wins": {"name": "home_team_wins", "description": "Cumulative number of wins for the home team for the given season (wins for the team at that point in time)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "home_team_losses": {"name": "home_team_losses", "description": "Cumulative number of losses for the home team for the given season (losses for the team at that point in time)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "home_team_ot": {"name": "home_team_ot", "description": "Cumulative number of overtime wins for the home team for the given season (overtime wins for the team at that point in time)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "home_team_type": {"name": "home_team_type", "description": "Type of home team (e.g. League)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "home_team_score": {"name": "home_team_score", "description": "Goals scored by the home team", "meta": {}, "data_type": null, "quote": null, "tags": []}, "home_team_name": {"name": "home_team_name", "description": "Home team name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "home_team_url": {"name": "home_team_url", "description": "Home team URL endpoint", "meta": {}, "data_type": null, "quote": null, "tags": []}, "venue_name": {"name": "venue_name", "description": "Home team's venue / arena that the teams played in", "meta": {}, "data_type": null, "quote": null, "tags": []}, "venue_url": {"name": "venue_url", "description": "URL endpoint for the venue", "meta": {}, "data_type": null, "quote": null, "tags": []}, "content_url": {"name": "content_url", "description": "URL endpoint for the content", "meta": {}, "data_type": null, "quote": null, "tags": []}, "extracted_at": {"name": "extracted_at", "description": "Timestamp that the data was retrieved", "meta": {}, "data_type": null, "quote": null, "tags": []}, "loaded_at": {"name": "loaded_at", "description": "Timestamp that the data was loaded", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dbt_nhl_breakouts://models/staging/stg_nhl__schedule.yml", "compiled_path": "target/compiled/dbt_nhl_breakouts/models/staging/stg_nhl__schedule.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "staging"}, "created_at": 1652151875.5522282, "compiled_sql": "select\n    /* Primary Key */\n    to_hex(md5(cast(coalesce(cast(schedule.gamepk as \n    string\n), '') || '-' || coalesce(cast(schedule.season as \n    string\n), '') as \n    string\n))) as stg_nhl__schedule_id\n\n    /* Identifiers */\n    , schedule.gamepk as game_id\n    , schedule.season as season_id\n    , schedule.teams.away.team.id as away_team_id\n    , schedule.teams.home.team.id as home_team_id\n    , schedule.venue.id as venue_id\n\n    /* Properties */\n    , substr(cast(schedule.gamepk as string), 7, 4) as game_number\n    , schedule.link as url\n    , schedule.gametype as game_type\n    , date(schedule.gamedate) as game_date\n    , schedule.status.abstractgamestate as abstract_game_state\n    , schedule.status.codedgamestate as coded_game_state\n    , schedule.status.detailedstate as detailed_state\n    , schedule.status.statuscode as status_code\n    , schedule.status.starttimetbd as is_start_time_tbd\n    , schedule.teams.away.leaguerecord.wins as away_team_wins\n    , schedule.teams.away.leaguerecord.losses as away_team_losses\n    , schedule.teams.away.leaguerecord.ot as away_team_ot\n    , schedule.teams.away.leaguerecord.type as away_team_type\n    , schedule.teams.away.score as away_team_score\n    , schedule.teams.away.team.name as away_team_name\n    , schedule.teams.away.team.link as away_team_url\n    , schedule.teams.home.leaguerecord.wins as home_team_wins\n    , schedule.teams.home.leaguerecord.losses as home_team_losses\n    , schedule.teams.home.leaguerecord.ot as home_team_ot\n    , schedule.teams.home.leaguerecord.type as home_team_type\n    , schedule.teams.home.score as home_team_score\n    , schedule.teams.home.team.name as home_team_name\n    , schedule.teams.home.team.link as home_team_url\n    , schedule.venue.name as venue_name\n    , schedule.venue.link as venue_url\n    , schedule.content.link as content_url\n    , schedule._time_extracted as extracted_at\n    , schedule._time_loaded as loaded_at\nfrom `nhl-breakouts`.`raw`.`schedule` as schedule", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`nhl-breakouts`.`analytics_staging`.`stg_nhl__schedule`"}, "model.dbt_nhl_breakouts.stg_nhl__teams": {"raw_sql": "select\n    /* Primary Key */\n    {{ dbt_utils.surrogate_key(['teams.id', 'teams.seasonid']) }} as stg_nhl__teams_id\n\n    /* Identifiers */\n    , teams.id as team_id\n    , teams.venue.timezone.id as venue_timezone_id\n    , teams.division.id as division_id\n    , teams.conference.id as conference_id\n    , teams.franchise.franchiseid as franchise_id\n    , teams.seasonid as season_id\n\n    /* Properties */\n    , teams.name as full_name\n    , teams.link as team_url\n    , teams.venue.name as venue_name\n    , teams.venue.link as venue_url\n    , teams.venue.city as venue_city\n    , teams.venue.timezone.offset as venue_timezone_offset\n    , teams.venue.timezone.tz as venue_timezone_name\n    , teams.abbreviation as abbreviation\n    , teams.teamname as team_name\n    , teams.locationname as location_name\n    , teams.firstyearofplay as first_year_of_play\n    , teams.division.name as division_name\n    , teams.division.nameshort as division_short_name\n    , teams.division.link as division_url\n    , teams.division.abbreviation as division_abbreviation\n    , teams.conference.name as conference_name\n    , teams.conference.link as conference_url\n    , teams.franchise.teamname as franchise_team_name\n    , teams.franchise.link as franchise_url\n    , teams.shortname as short_name\n    , teams.officialsiteurl as official_site_url\n    , teams.active as is_active\n    , teams._time_extracted as extracted_at\n    , teams._time_loaded as loaded_at\nfrom {{ source('meltano', 'teams') }} as teams", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["source.dbt_nhl_breakouts.meltano.teams"]}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "nhl-breakouts", "schema": "analytics_staging", "fqn": ["dbt_nhl_breakouts", "staging", "stg_nhl__teams"], "unique_id": "model.dbt_nhl_breakouts.stg_nhl__teams", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "staging/stg_nhl__teams.sql", "original_file_path": "models/staging/stg_nhl__teams.sql", "name": "stg_nhl__teams", "alias": "stg_nhl__teams", "checksum": {"name": "sha256", "checksum": "96f1fc41dc83b358f87195681054a4f907b1d531e4fce882a770f8c2b62db52a"}, "tags": [], "refs": [], "sources": [["meltano", "teams"]], "description": "Staged NHL teams data from the NHL-API", "columns": {"stg_nhl__teams_id": {"name": "stg_nhl__teams_id", "description": "Primary key, combination of the NHL team ID and the season ID", "meta": {}, "data_type": null, "quote": null, "tags": []}, "team_id": {"name": "team_id", "description": "Unique identifier for NHL teams", "meta": {}, "data_type": null, "quote": null, "tags": []}, "venue_timezone_id": {"name": "venue_timezone_id", "description": "Foreign key that maps to the timezone ID of the venue (e.g. America/Vancouver)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "division_id": {"name": "division_id", "description": "Foreign key that maps to the division ID that the NHL team belongs to", "meta": {}, "data_type": null, "quote": null, "tags": []}, "conference_id": {"name": "conference_id", "description": "Foreign key that maps to the conference ID that the NHL team belongs to", "meta": {}, "data_type": null, "quote": null, "tags": []}, "franchise_id": {"name": "franchise_id", "description": "Foreign key that maps to the franchise ID that the NHL originates from", "meta": {}, "data_type": null, "quote": null, "tags": []}, "season_id": {"name": "season_id", "description": "Foreign key that maps to the season ID that the NHL team roster relates to", "meta": {}, "data_type": null, "quote": null, "tags": []}, "full_name": {"name": "full_name", "description": "Full name of the NHL team (e.g. Vancouver Canucks)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "team_url": {"name": "team_url", "description": "URL endpoint for the NHl team", "meta": {}, "data_type": null, "quote": null, "tags": []}, "venue_name": {"name": "venue_name", "description": "Name of the venue / arena that the NHL team plays in", "meta": {}, "data_type": null, "quote": null, "tags": []}, "venue_url": {"name": "venue_url", "description": "URL endpoint for the NHL team venue", "meta": {}, "data_type": null, "quote": null, "tags": []}, "venue_city": {"name": "venue_city", "description": "City that the venue / arena is in", "meta": {}, "data_type": null, "quote": null, "tags": []}, "venue_timezone_offset": {"name": "venue_timezone_offset", "description": "Offset necessary to correct for timezone differences (e.g. Vancouver = -7)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "venue_timezone_name": {"name": "venue_timezone_name", "description": "Abbreviated timezone for the venue (e.g. PDT)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "abbreviation": {"name": "abbreviation", "description": "Abbreviation for the NHL team (e.g. VAN)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "team_name": {"name": "team_name", "description": "Second part of the team name (e.g. Canucks)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "location_name": {"name": "location_name", "description": "First part of the team name (e.g. Vancouer)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "first_year_of_play": {"name": "first_year_of_play", "description": "The inaugural year for the NHL team (e.g. 1970)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "division_name": {"name": "division_name", "description": "Name of the division that the team currently plays in", "meta": {}, "data_type": null, "quote": null, "tags": []}, "division_short_name": {"name": "division_short_name", "description": "Short name for the division that the team currently plays in", "meta": {}, "data_type": null, "quote": null, "tags": []}, "division_url": {"name": "division_url", "description": "URL endpoint for division", "meta": {}, "data_type": null, "quote": null, "tags": []}, "division_abbreviation": {"name": "division_abbreviation", "description": "Abbreviated NHL division name (e.g. P)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "conference_name": {"name": "conference_name", "description": "Conference name that the team currently plays in", "meta": {}, "data_type": null, "quote": null, "tags": []}, "conference_url": {"name": "conference_url", "description": "URL endpoint for the conference", "meta": {}, "data_type": null, "quote": null, "tags": []}, "franchise_team_name": {"name": "franchise_team_name", "description": "Name of the franchise (second part of full team name)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "franchise_url": {"name": "franchise_url", "description": "URL endpoint for the franchise", "meta": {}, "data_type": null, "quote": null, "tags": []}, "short_name": {"name": "short_name", "description": "Slightly different short version of the team name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "official_site_url": {"name": "official_site_url", "description": "Official site URL", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_active": {"name": "is_active", "description": "Whether or not the team is currently active in the NHL", "meta": {}, "data_type": null, "quote": null, "tags": []}, "extracted_at": {"name": "extracted_at", "description": "Timestamp that the data was retrieved", "meta": {}, "data_type": null, "quote": null, "tags": []}, "loaded_at": {"name": "loaded_at", "description": "Timestamp that the data was loaded", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dbt_nhl_breakouts://models/staging/stg_nhl__teams.yml", "compiled_path": "target/compiled/dbt_nhl_breakouts/models/staging/stg_nhl__teams.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "staging"}, "created_at": 1652151875.544252, "compiled_sql": "select\n    /* Primary Key */\n    to_hex(md5(cast(coalesce(cast(teams.id as \n    string\n), '') || '-' || coalesce(cast(teams.seasonid as \n    string\n), '') as \n    string\n))) as stg_nhl__teams_id\n\n    /* Identifiers */\n    , teams.id as team_id\n    , teams.venue.timezone.id as venue_timezone_id\n    , teams.division.id as division_id\n    , teams.conference.id as conference_id\n    , teams.franchise.franchiseid as franchise_id\n    , teams.seasonid as season_id\n\n    /* Properties */\n    , teams.name as full_name\n    , teams.link as team_url\n    , teams.venue.name as venue_name\n    , teams.venue.link as venue_url\n    , teams.venue.city as venue_city\n    , teams.venue.timezone.offset as venue_timezone_offset\n    , teams.venue.timezone.tz as venue_timezone_name\n    , teams.abbreviation as abbreviation\n    , teams.teamname as team_name\n    , teams.locationname as location_name\n    , teams.firstyearofplay as first_year_of_play\n    , teams.division.name as division_name\n    , teams.division.nameshort as division_short_name\n    , teams.division.link as division_url\n    , teams.division.abbreviation as division_abbreviation\n    , teams.conference.name as conference_name\n    , teams.conference.link as conference_url\n    , teams.franchise.teamname as franchise_team_name\n    , teams.franchise.link as franchise_url\n    , teams.shortname as short_name\n    , teams.officialsiteurl as official_site_url\n    , teams.active as is_active\n    , teams._time_extracted as extracted_at\n    , teams._time_loaded as loaded_at\nfrom `nhl-breakouts`.`raw`.`teams` as teams", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`nhl-breakouts`.`analytics_staging`.`stg_nhl__teams`"}, "model.dbt_nhl_breakouts.stg_nhl__draft": {"raw_sql": "select\n    /* Primary Key */\n    {{ dbt_utils.surrogate_key(['year', 'pickoverall']) }} as stg_nhl__draft_id\n\n    /* Identifiers */\n    , concat(cast(draft.year as string), lpad(cast(draft.pickoverall as string), 3, '0')) as overall_pick_id\n    , draft.prospect.id as draft_prospect_id\n    , draft.team.id as draft_team_id\n\n    /* Properties */\n    , draft.year as draft_year\n    , draft.pickoverall as draft_overall_pick\n    , draft.round as draft_round\n    , draft.pickinround as draft_round_pick\n    , draft.prospect.fullname as draft_prospect_name\n    , draft.prospect.link as draft_url\n    , draft.team.name as draft_team_name\n\nfrom {{ source('meltano', 'draft') }} as draft\nwhere draft.prospect.fullname != 'Void' -- remove records that contain draft prospect named 'Void' as this appears to be bad data from the API", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["source.dbt_nhl_breakouts.meltano.draft"]}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "nhl-breakouts", "schema": "analytics_staging", "fqn": ["dbt_nhl_breakouts", "staging", "stg_nhl__draft"], "unique_id": "model.dbt_nhl_breakouts.stg_nhl__draft", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "staging/stg_nhl__draft.sql", "original_file_path": "models/staging/stg_nhl__draft.sql", "name": "stg_nhl__draft", "alias": "stg_nhl__draft", "checksum": {"name": "sha256", "checksum": "629e3ea7cd079f7c3ca6bd8a951b8e82dee09a424db6523c3810aa2958facd81"}, "tags": [], "refs": [], "sources": [["meltano", "draft"]], "description": "Staged NHL entry draft data from the NHL-API", "columns": {"stg_nhl__draft_id": {"name": "stg_nhl__draft_id", "description": "Unique identifier for an NHL rookie draft (generated via dbt_utils.surrogate_key)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "overall_pick_id": {"name": "overall_pick_id", "description": "Unique identifier for an NHL rookie draft (draft year + overall pick)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "draft_prospect_id": {"name": "draft_prospect_id", "description": "Foreign key that maps to an NHL draft prospect", "meta": {}, "data_type": null, "quote": null, "tags": []}, "draft_team_id": {"name": "draft_team_id", "description": "Foreign key that maps to the NHL team that drafted the NHL prospect", "meta": {}, "data_type": null, "quote": null, "tags": []}, "draft_year": {"name": "draft_year", "description": "Year of the NHL entry draft", "meta": {}, "data_type": null, "quote": null, "tags": []}, "draft_overall_pick": {"name": "draft_overall_pick", "description": "The overall pick in the NHL entry draft. For example, `1` is the first overall pick", "meta": {}, "data_type": null, "quote": null, "tags": []}, "draft_round": {"name": "draft_round", "description": "The drafting round that the selection was made in", "meta": {}, "data_type": null, "quote": null, "tags": []}, "draft_round_pick": {"name": "draft_round_pick", "description": "The pick in the NHL entry draft made relative to the round", "meta": {}, "data_type": null, "quote": null, "tags": []}, "draft_prospect_name": {"name": "draft_prospect_name", "description": "Name of the drafted NHL prospect", "meta": {}, "data_type": null, "quote": null, "tags": []}, "draft_url": {"name": "draft_url", "description": "URL endpoint", "meta": {}, "data_type": null, "quote": null, "tags": []}, "draft_team_name": {"name": "draft_team_name", "description": "Name of the NHL team that drafted the NHL prospect", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dbt_nhl_breakouts://models/staging/stg_nhl__draft.yml", "compiled_path": "target/compiled/dbt_nhl_breakouts/models/staging/stg_nhl__draft.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "staging"}, "created_at": 1652151875.559825, "compiled_sql": "select\n    /* Primary Key */\n    to_hex(md5(cast(coalesce(cast(year as \n    string\n), '') || '-' || coalesce(cast(pickoverall as \n    string\n), '') as \n    string\n))) as stg_nhl__draft_id\n\n    /* Identifiers */\n    , concat(cast(draft.year as string), lpad(cast(draft.pickoverall as string), 3, '0')) as overall_pick_id\n    , draft.prospect.id as draft_prospect_id\n    , draft.team.id as draft_team_id\n\n    /* Properties */\n    , draft.year as draft_year\n    , draft.pickoverall as draft_overall_pick\n    , draft.round as draft_round\n    , draft.pickinround as draft_round_pick\n    , draft.prospect.fullname as draft_prospect_name\n    , draft.prospect.link as draft_url\n    , draft.team.name as draft_team_name\n\nfrom `nhl-breakouts`.`raw`.`draft` as draft\nwhere draft.prospect.fullname != 'Void' -- remove records that contain draft prospect named 'Void' as this appears to be bad data from the API", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`nhl-breakouts`.`analytics_staging`.`stg_nhl__draft`"}, "model.dbt_nhl_breakouts.stg_nhl__seasons": {"raw_sql": "select\n    /* Primary Key */\n    {{ dbt_utils.surrogate_key(['seasons.seasonid']) }} as stg_nhl__seasons_id\n\n    /* Identifiers */\n    , seasons.seasonid as season_id\n\n    /* Properties */\n    , seasons.regularseasonstartdate as regular_season_start_date\n    , seasons.regularseasonenddate as regular_season_end_date\n    , seasons.seasonenddate as season_end_date\n    , seasons.numberofgames as number_of_games\n    , seasons.tiesinuse as has_ties_in_use\n    , seasons.olympicsparticipation as has_olympics_participation\n    , seasons.conferencesinuse as has_conferences_in_use\n    , seasons.divisionsinuse as has_divisions_in_use\n    , seasons.wildcardinuse as has_wildcard_in_use\n    , seasons._time_extracted as extracted_at\n    , seasons._time_loaded as loaded_at\nfrom {{ source('meltano', 'seasons') }} as seasons", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["source.dbt_nhl_breakouts.meltano.seasons"]}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "nhl-breakouts", "schema": "analytics_staging", "fqn": ["dbt_nhl_breakouts", "staging", "stg_nhl__seasons"], "unique_id": "model.dbt_nhl_breakouts.stg_nhl__seasons", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "staging/stg_nhl__seasons.sql", "original_file_path": "models/staging/stg_nhl__seasons.sql", "name": "stg_nhl__seasons", "alias": "stg_nhl__seasons", "checksum": {"name": "sha256", "checksum": "7fb89a1f3d6497601d11c7160112348527de87e5f5c4a123b67408f4eb620700"}, "tags": [], "refs": [], "sources": [["meltano", "seasons"]], "description": "Staged NHL seasons data from the NHL-API", "columns": {"stg_nhl__seasons_id": {"name": "stg_nhl__seasons_id", "description": "Unique surrogate key for an NHL season (e.g. \"20172018\")", "meta": {}, "data_type": null, "quote": null, "tags": []}, "season_id": {"name": "season_id", "description": "Unique identifier for an NHL season (e.g. \"20172018\")", "meta": {}, "data_type": null, "quote": null, "tags": []}, "regular_season_start_date": {"name": "regular_season_start_date", "description": "The first date of the NHL regular season (e.g. \"2017-10-04\")", "meta": {}, "data_type": null, "quote": null, "tags": []}, "regular_season_end_date": {"name": "regular_season_end_date", "description": "The last date of the NHL regular season (e.g. \"2018-04-08\")", "meta": {}, "data_type": null, "quote": null, "tags": []}, "season_end_date": {"name": "season_end_date", "description": "The last date of the NHL post season (e.g. \"2018-06-07\")", "meta": {}, "data_type": null, "quote": null, "tags": []}, "number_of_games": {"name": "number_of_games", "description": "The number of total games played by each NHL team", "meta": {}, "data_type": null, "quote": null, "tags": []}, "has_ties_in_use": {"name": "has_ties_in_use", "description": "Whether or not ties were possible for that season (True / False)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "has_olympics_participation": {"name": "has_olympics_participation", "description": "Whether or not olympic participation at the NHL level was allowed for that season (True / False)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "has_conferences_in_use": {"name": "has_conferences_in_use", "description": "Whether or not conferences were used for that season's playoff consideration (True / False)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "has_divisions_in_use": {"name": "has_divisions_in_use", "description": "Whether or not divisions were used for that season's playoff consideration (True / False)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "has_wildcard_in_use": {"name": "has_wildcard_in_use", "description": "Whether or not wildcards were used for that season's playoff consideration (True / False)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "extracted_at": {"name": "extracted_at", "description": "Timestamp that the data was retrieved", "meta": {}, "data_type": null, "quote": null, "tags": []}, "loaded_at": {"name": "loaded_at", "description": "Timestamp that the data was loaded", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dbt_nhl_breakouts://models/staging/stg_nhl__seasons.yml", "compiled_path": "target/compiled/dbt_nhl_breakouts/models/staging/stg_nhl__seasons.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "staging"}, "created_at": 1652151875.563806, "compiled_sql": "select\n    /* Primary Key */\n    to_hex(md5(cast(coalesce(cast(seasons.seasonid as \n    string\n), '') as \n    string\n))) as stg_nhl__seasons_id\n\n    /* Identifiers */\n    , seasons.seasonid as season_id\n\n    /* Properties */\n    , seasons.regularseasonstartdate as regular_season_start_date\n    , seasons.regularseasonenddate as regular_season_end_date\n    , seasons.seasonenddate as season_end_date\n    , seasons.numberofgames as number_of_games\n    , seasons.tiesinuse as has_ties_in_use\n    , seasons.olympicsparticipation as has_olympics_participation\n    , seasons.conferencesinuse as has_conferences_in_use\n    , seasons.divisionsinuse as has_divisions_in_use\n    , seasons.wildcardinuse as has_wildcard_in_use\n    , seasons._time_extracted as extracted_at\n    , seasons._time_loaded as loaded_at\nfrom `nhl-breakouts`.`raw`.`seasons` as seasons", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`nhl-breakouts`.`analytics_staging`.`stg_nhl__seasons`"}, "model.dbt_nhl_breakouts.stg_nhl__boxscore_team": {"raw_sql": "with\n\n-- CTE1\nlive_boxscore as (\n    select * from {{ source('meltano', 'live_boxscore') }}\n)\n\n-- CTE2\n, home_team as (\n    select\n        /* Identifiers */\n        live_boxscore.gameid as game_id\n        , teams.home.team.id as team_id\n\n        /* Properties */\n        , 'Home' as team_type\n\n        /* Team stats*/\n        , teams.home.team.name as team_name\n        , teams.home.teamstats.teamskaterstats.goals as team_goals\n        , teams.home.teamstats.teamskaterstats.pim as team_pim\n        , teams.home.teamstats.teamskaterstats.shots as team_shots\n        , teams.home.teamstats.teamskaterstats.powerplaygoals as team_powerplay_goals\n        , teams.home.teamstats.teamskaterstats.powerplayopportunities as team_powerplay_opportunities\n        , teams.home.teamstats.teamskaterstats.faceoffwinpercentage as team_faceoff_percentage\n        , teams.home.teamstats.teamskaterstats.blocked as team_blocked\n        , teams.home.teamstats.teamskaterstats.takeaways as team_takeaways\n        , teams.home.teamstats.teamskaterstats.giveaways as team_giveaways\n        , teams.home.teamstats.teamskaterstats.hits as team_hits\n\n    from live_boxscore\n)\n\n-- CTE2\n, away_team as (\n    select\n        /* Identifiers */\n        live_boxscore.gameid as game_id\n        , teams.away.team.id as team_id\n\n        /* Properties */\n        , 'Away' as team_type\n\n        /* Team stats*/\n        , teams.away.team.name as team_name\n        , teams.away.teamstats.teamskaterstats.goals as team_goals\n        , teams.away.teamstats.teamskaterstats.pim as team_pim\n        , teams.away.teamstats.teamskaterstats.shots as team_shots\n        , teams.away.teamstats.teamskaterstats.powerplaygoals as team_powerplay_goals\n        , teams.away.teamstats.teamskaterstats.powerplayopportunities as team_powerplay_opportunities\n        , teams.away.teamstats.teamskaterstats.faceoffwinpercentage as team_faceoff_percentage\n        , teams.away.teamstats.teamskaterstats.blocked as team_blocked\n        , teams.away.teamstats.teamskaterstats.takeaways as team_takeaways\n        , teams.away.teamstats.teamskaterstats.giveaways as team_giveaways\n        , teams.away.teamstats.teamskaterstats.hits as team_hits\n\n    from live_boxscore\n)\n\n-- CTE4\n, winning_team as (\n    select\n        home_team.game_id\n        , home_team.team_id as home_team_id\n        , away_team.team_id as away_team_id\n        , home_team.team_goals as home_team_score\n        , away_team.team_goals as away_team_score\n        , case\n            when home_team.team_goals > away_team.team_goals then 'Home'\n            when home_team.team_goals < away_team.team_goals then 'Away'\n        end as winning_team\n        , abs(home_team.team_goals - away_team.team_goals) as absolute_goal_differential\n    from home_team\n    inner join away_team on home_team.game_id = away_team.game_id\n\n)\n\n-- CTE5\n, boxscore_team as (\n    select * from home_team\n    union all\n    select * from away_team\n\n)\n\n-- Final query, return everything\nselect\n    /* Primary Key */\n    {{ dbt_utils.surrogate_key(['boxscore_team.game_id', 'boxscore_team.team_id']) }} as stg_nhl__boxscore_team_id\n\n    /* Identifiers */\n    , boxscore_team.game_id\n    , boxscore_team.team_id\n\n    /* Properties */\n    , boxscore_team.team_type\n\n    /* Team stats*/\n    , boxscore_team.team_name\n    , case\n        when boxscore_team.team_type = winning_team.winning_team then \"true\"\n        when boxscore_team.team_type <> winning_team.winning_team then \"false\"\n    end as team_winner\n    , boxscore_team.team_goals\n    , case\n        when boxscore_team.team_type = winning_team.winning_team then winning_team.absolute_goal_differential\n        when boxscore_team.team_type <> winning_team.winning_team then winning_team.absolute_goal_differential * -1\n    end as team_goal_differential\n    , boxscore_team.team_pim\n    , boxscore_team.team_shots\n    , boxscore_team.team_powerplay_goals\n    , boxscore_team.team_powerplay_opportunities\n    , boxscore_team.team_faceoff_percentage\n    , boxscore_team.team_blocked\n    , boxscore_team.team_takeaways\n    , boxscore_team.team_giveaways\n    , boxscore_team.team_hits\n\nfrom boxscore_team\nleft join winning_team on boxscore_team.game_id = winning_team.game_id\n\norder by\n    boxscore_team.game_id desc", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["source.dbt_nhl_breakouts.meltano.live_boxscore"]}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "nhl-breakouts", "schema": "analytics_staging", "fqn": ["dbt_nhl_breakouts", "staging", "stg_nhl__boxscore_team"], "unique_id": "model.dbt_nhl_breakouts.stg_nhl__boxscore_team", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "staging/stg_nhl__boxscore_team.sql", "original_file_path": "models/staging/stg_nhl__boxscore_team.sql", "name": "stg_nhl__boxscore_team", "alias": "stg_nhl__boxscore_team", "checksum": {"name": "sha256", "checksum": "694e083baedd436e871d1b169485cfab28bd5b1b75e915a8e222a88a81163366"}, "tags": [], "refs": [], "sources": [["meltano", "live_boxscore"]], "description": "Staged NHL boxscore game data from the NHL-API (game-team level)", "columns": {"stg_nhl__boxscore_team_id": {"name": "stg_nhl__boxscore_team_id", "description": "Unique surrogate key for a team's involvement in an NHL game (game_id + team_id)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "game_id": {"name": "game_id", "description": "Foreign key that maps to the NHL game ID - each game should have 2 rows in this table for each team involved in the game\n##### More about game_id\nThe first 4 digits identify the season of the game (ie. 2017 for the 2017-2018 season). The next 2 digits give the type of game, where 01 = preseason, 02 = regular season, 03 = playoffs, 04 = all-star. The final 4 digits identify the specific game number.\n\nFor regular season and preseason games, this ranges from 0001 to the number of games played. (1271 for seasons with 31 teams (2017 and onwards) and 1230 for seasons with 30 teams).\n\nFor playoff games, the 2nd digit of the specific number gives the round of the playoffs, the 3rd digit specifies the matchup, and the 4th digit specifies the game (out of 7).\n\n[Credit to Drew Hynes' NHL API docs](https://gitlab.com/dword4/nhlapi/-/blob/master/stats-api.md#game-ids)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "team_id": {"name": "team_id", "description": "Foreign key that maps to the NHL team ID - each row represents a team playing in a game", "meta": {}, "data_type": null, "quote": null, "tags": []}, "team_type": {"name": "team_type", "description": "Describes the Away / Home status for each team playing in a game", "meta": {}, "data_type": null, "quote": null, "tags": []}, "team_name": {"name": "team_name", "description": "Name of the NHL team", "meta": {}, "data_type": null, "quote": null, "tags": []}, "team_winner": {"name": "team_winner", "description": "True of the team scored more than the opposing team, False if the team scored less than the opposing team, NULL for Shootout results (will be fixed by linescore data, boxscore does not tell us the result of a shootout)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "team_goals": {"name": "team_goals", "description": "Number of goals scored by the team", "meta": {}, "data_type": null, "quote": null, "tags": []}, "team_goal_differential": {"name": "team_goal_differential", "description": "The difference between the number of goals scored, and the number of goals allowed by the team", "meta": {}, "data_type": null, "quote": null, "tags": []}, "team_pim": {"name": "team_pim", "description": "The number of penalties in minutes:seconds against the team", "meta": {}, "data_type": null, "quote": null, "tags": []}, "team_shots": {"name": "team_shots", "description": "The number of shots (unsure if this is on goal or attempts) for the team", "meta": {}, "data_type": null, "quote": null, "tags": []}, "team_powerplay_goals": {"name": "team_powerplay_goals", "description": "The number of powerplay goals for the team", "meta": {}, "data_type": null, "quote": null, "tags": []}, "team_powerplay_opportunities": {"name": "team_powerplay_opportunities", "description": "The number of powerplay opportunities for the team", "meta": {}, "data_type": null, "quote": null, "tags": []}, "team_faceoff_percentage": {"name": "team_faceoff_percentage", "description": "The percentage of faceoffs won by the team (e.g. 100 * (faceoff wins / faceoff attempts))", "meta": {}, "data_type": null, "quote": null, "tags": []}, "team_blocked": {"name": "team_blocked", "description": "The number of blocked shots for the team", "meta": {}, "data_type": null, "quote": null, "tags": []}, "team_takeaways": {"name": "team_takeaways", "description": "The number of takeaways for the team", "meta": {}, "data_type": null, "quote": null, "tags": []}, "team_giveaways": {"name": "team_giveaways", "description": "The number of giveaways for the team", "meta": {}, "data_type": null, "quote": null, "tags": []}, "team_hits": {"name": "team_hits", "description": "The number of hits for the team", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dbt_nhl_breakouts://models/staging/stg_nhl__boxscore_team.yml", "compiled_path": "target/compiled/dbt_nhl_breakouts/models/staging/stg_nhl__boxscore_team.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "staging"}, "created_at": 1652151875.576164, "compiled_sql": "with\n\n-- CTE1\nlive_boxscore as (\n    select * from `nhl-breakouts`.`raw`.`live_boxscore`\n)\n\n-- CTE2\n, home_team as (\n    select\n        /* Identifiers */\n        live_boxscore.gameid as game_id\n        , teams.home.team.id as team_id\n\n        /* Properties */\n        , 'Home' as team_type\n\n        /* Team stats*/\n        , teams.home.team.name as team_name\n        , teams.home.teamstats.teamskaterstats.goals as team_goals\n        , teams.home.teamstats.teamskaterstats.pim as team_pim\n        , teams.home.teamstats.teamskaterstats.shots as team_shots\n        , teams.home.teamstats.teamskaterstats.powerplaygoals as team_powerplay_goals\n        , teams.home.teamstats.teamskaterstats.powerplayopportunities as team_powerplay_opportunities\n        , teams.home.teamstats.teamskaterstats.faceoffwinpercentage as team_faceoff_percentage\n        , teams.home.teamstats.teamskaterstats.blocked as team_blocked\n        , teams.home.teamstats.teamskaterstats.takeaways as team_takeaways\n        , teams.home.teamstats.teamskaterstats.giveaways as team_giveaways\n        , teams.home.teamstats.teamskaterstats.hits as team_hits\n\n    from live_boxscore\n)\n\n-- CTE2\n, away_team as (\n    select\n        /* Identifiers */\n        live_boxscore.gameid as game_id\n        , teams.away.team.id as team_id\n\n        /* Properties */\n        , 'Away' as team_type\n\n        /* Team stats*/\n        , teams.away.team.name as team_name\n        , teams.away.teamstats.teamskaterstats.goals as team_goals\n        , teams.away.teamstats.teamskaterstats.pim as team_pim\n        , teams.away.teamstats.teamskaterstats.shots as team_shots\n        , teams.away.teamstats.teamskaterstats.powerplaygoals as team_powerplay_goals\n        , teams.away.teamstats.teamskaterstats.powerplayopportunities as team_powerplay_opportunities\n        , teams.away.teamstats.teamskaterstats.faceoffwinpercentage as team_faceoff_percentage\n        , teams.away.teamstats.teamskaterstats.blocked as team_blocked\n        , teams.away.teamstats.teamskaterstats.takeaways as team_takeaways\n        , teams.away.teamstats.teamskaterstats.giveaways as team_giveaways\n        , teams.away.teamstats.teamskaterstats.hits as team_hits\n\n    from live_boxscore\n)\n\n-- CTE4\n, winning_team as (\n    select\n        home_team.game_id\n        , home_team.team_id as home_team_id\n        , away_team.team_id as away_team_id\n        , home_team.team_goals as home_team_score\n        , away_team.team_goals as away_team_score\n        , case\n            when home_team.team_goals > away_team.team_goals then 'Home'\n            when home_team.team_goals < away_team.team_goals then 'Away'\n        end as winning_team\n        , abs(home_team.team_goals - away_team.team_goals) as absolute_goal_differential\n    from home_team\n    inner join away_team on home_team.game_id = away_team.game_id\n\n)\n\n-- CTE5\n, boxscore_team as (\n    select * from home_team\n    union all\n    select * from away_team\n\n)\n\n-- Final query, return everything\nselect\n    /* Primary Key */\n    to_hex(md5(cast(coalesce(cast(boxscore_team.game_id as \n    string\n), '') || '-' || coalesce(cast(boxscore_team.team_id as \n    string\n), '') as \n    string\n))) as stg_nhl__boxscore_team_id\n\n    /* Identifiers */\n    , boxscore_team.game_id\n    , boxscore_team.team_id\n\n    /* Properties */\n    , boxscore_team.team_type\n\n    /* Team stats*/\n    , boxscore_team.team_name\n    , case\n        when boxscore_team.team_type = winning_team.winning_team then \"true\"\n        when boxscore_team.team_type <> winning_team.winning_team then \"false\"\n    end as team_winner\n    , boxscore_team.team_goals\n    , case\n        when boxscore_team.team_type = winning_team.winning_team then winning_team.absolute_goal_differential\n        when boxscore_team.team_type <> winning_team.winning_team then winning_team.absolute_goal_differential * -1\n    end as team_goal_differential\n    , boxscore_team.team_pim\n    , boxscore_team.team_shots\n    , boxscore_team.team_powerplay_goals\n    , boxscore_team.team_powerplay_opportunities\n    , boxscore_team.team_faceoff_percentage\n    , boxscore_team.team_blocked\n    , boxscore_team.team_takeaways\n    , boxscore_team.team_giveaways\n    , boxscore_team.team_hits\n\nfrom boxscore_team\nleft join winning_team on boxscore_team.game_id = winning_team.game_id\n\norder by\n    boxscore_team.game_id desc", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`nhl-breakouts`.`analytics_staging`.`stg_nhl__boxscore_team`"}, "model.dbt_nhl_breakouts.stg_nhl__players": {"raw_sql": "select\n    /* Primary Key */\n    {{ dbt_utils.surrogate_key(['players.id', 'players.teamid', 'players.seasonid']) }} as stg_nhl__players_id\n\n    /* Identifiers */\n    , players.id as player_id\n    , players.seasonid as season_id\n    , players.teamid as team_id\n\n    /* Properties */\n    , players.fullname as full_name\n    , players.link as player_url\n    , players.firstname as first_name\n    , players.lastname as last_name\n    , players.primarynumber as primary_number\n    , players.birthdate as birth_date\n    , players.birthcity as birth_city\n    , players.birthstateprovince as birth_state_province\n    , players.birthcountry as birth_country\n    , players.nationality as nationality\n    , players.height\n    , players.weight\n    , players.active as is_active\n    , players.alternatecaptain as is_alternate_captain\n    , players.captain as is_captain\n    , players.rookie as is_rookie\n    , players.shootscatches as shoots_catches\n    , players.rosterstatus as roster_status\n    , players.primaryposition.code as primary_position_code\n    , players.primaryposition.name as primary_position_name\n    , players.primaryposition.type as primary_position_type\n    , players.primaryposition.abbreviation as primary_position_abbreviation\n    , players._time_extracted as extracted_at\n    , players._time_loaded as loaded_at\nfrom {{ source('meltano', 'people') }} as players", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["source.dbt_nhl_breakouts.meltano.people"]}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "nhl-breakouts", "schema": "analytics_staging", "fqn": ["dbt_nhl_breakouts", "staging", "stg_nhl__players"], "unique_id": "model.dbt_nhl_breakouts.stg_nhl__players", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "staging/stg_nhl__players.sql", "original_file_path": "models/staging/stg_nhl__players.sql", "name": "stg_nhl__players", "alias": "stg_nhl__players", "checksum": {"name": "sha256", "checksum": "67811a8112fca159a1f0c3445c0aa55fddd4a4327e229e1f6229d14da6cb89f0"}, "tags": [], "refs": [], "sources": [["meltano", "people"]], "description": "Staged NHL player data from the NHL-API", "columns": {"stg_nhl__players_id": {"name": "stg_nhl__players_id", "description": "Unique surrogate key from a combination of the NHL player ID, team ID and the season ID", "meta": {}, "data_type": null, "quote": null, "tags": []}, "player_id": {"name": "player_id", "description": "Unique identifier for an NHL player", "meta": {}, "data_type": null, "quote": null, "tags": []}, "team_id": {"name": "team_id", "description": "Foreign key that maps to the NHL team ID that the NHL player played for in a given season", "meta": {}, "data_type": null, "quote": null, "tags": []}, "season_id": {"name": "season_id", "description": "Foreign key that maps to the NHL season that player was in", "meta": {}, "data_type": null, "quote": null, "tags": []}, "full_name": {"name": "full_name", "description": "Full name of the NHL player", "meta": {}, "data_type": null, "quote": null, "tags": []}, "player_url": {"name": "player_url", "description": "URL endpoint for NHL player", "meta": {}, "data_type": null, "quote": null, "tags": []}, "first_name": {"name": "first_name", "description": "First name of the NHL player", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_name": {"name": "last_name", "description": "Last name of the NHL player", "meta": {}, "data_type": null, "quote": null, "tags": []}, "primary_number": {"name": "primary_number", "description": "Number that the player usually wears", "meta": {}, "data_type": null, "quote": null, "tags": []}, "birth_date": {"name": "birth_date", "description": "Birth date of the NHL player", "meta": {}, "data_type": null, "quote": null, "tags": []}, "current_age": {"name": "current_age", "description": "Age in years of the NHL player", "meta": {}, "data_type": null, "quote": null, "tags": []}, "birth_city": {"name": "birth_city", "description": "Birth city of the NHL player", "meta": {}, "data_type": null, "quote": null, "tags": []}, "birth_state_province": {"name": "birth_state_province", "description": "Birth state or province of the NHL player", "meta": {}, "data_type": null, "quote": null, "tags": []}, "birth_country": {"name": "birth_country", "description": "Birth country of the NHL player", "meta": {}, "data_type": null, "quote": null, "tags": []}, "nationality": {"name": "nationality", "description": "Nationality of the NHL player", "meta": {}, "data_type": null, "quote": null, "tags": []}, "height": {"name": "height", "description": "Imperial height, in feet and inches (e.g. 5'10\")", "meta": {}, "data_type": null, "quote": null, "tags": []}, "weight": {"name": "weight", "description": "Imperial weight, in pounds (e.g. 140)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_active": {"name": "is_active", "description": "Whether or not the NHL player is currently active (True / False)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_alternate_captain": {"name": "is_alternate_captain", "description": "Whether or not the NHL player is currently an alternate captain for their team (True / False)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_captain": {"name": "is_captain", "description": "Whether or not the NHL player is currently the captain of their team (True / False)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_rookie": {"name": "is_rookie", "description": "Whether or not the NHL player is currently a rookie (True / False)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shoots_catches": {"name": "shoots_catches", "description": "The handedness of the NHL player (e.g. R = right, L = left)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "roster_status": {"name": "roster_status", "description": "Roster status of the NHL player (e.g. Y, N, I)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "primary_position_code": {"name": "primary_position_code", "description": "Position code of the position most played (e.g. C, L, D)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "primary_position_name": {"name": "primary_position_name", "description": "Position name of the position most played (e.g. Center, Left Wing, Defenseman)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "primary_position_type": {"name": "primary_position_type", "description": "Position grouping for the position most played (e.g. Forward, Defenseman)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "primary_position_abbreviation": {"name": "primary_position_abbreviation", "description": "Position abbreviation of the position most played (e.g. C, LW, D)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "extracted_at": {"name": "extracted_at", "description": "Timestamp that the data was retrieved", "meta": {}, "data_type": null, "quote": null, "tags": []}, "loaded_at": {"name": "loaded_at", "description": "Timestamp that the data was loaded", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dbt_nhl_breakouts://models/staging/stg_nhl__players.yml", "compiled_path": "target/compiled/dbt_nhl_breakouts/models/staging/stg_nhl__players.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "staging"}, "created_at": 1652151875.5204291, "compiled_sql": "select\n    /* Primary Key */\n    to_hex(md5(cast(coalesce(cast(players.id as \n    string\n), '') || '-' || coalesce(cast(players.teamid as \n    string\n), '') || '-' || coalesce(cast(players.seasonid as \n    string\n), '') as \n    string\n))) as stg_nhl__players_id\n\n    /* Identifiers */\n    , players.id as player_id\n    , players.seasonid as season_id\n    , players.teamid as team_id\n\n    /* Properties */\n    , players.fullname as full_name\n    , players.link as player_url\n    , players.firstname as first_name\n    , players.lastname as last_name\n    , players.primarynumber as primary_number\n    , players.birthdate as birth_date\n    , players.birthcity as birth_city\n    , players.birthstateprovince as birth_state_province\n    , players.birthcountry as birth_country\n    , players.nationality as nationality\n    , players.height\n    , players.weight\n    , players.active as is_active\n    , players.alternatecaptain as is_alternate_captain\n    , players.captain as is_captain\n    , players.rookie as is_rookie\n    , players.shootscatches as shoots_catches\n    , players.rosterstatus as roster_status\n    , players.primaryposition.code as primary_position_code\n    , players.primaryposition.name as primary_position_name\n    , players.primaryposition.type as primary_position_type\n    , players.primaryposition.abbreviation as primary_position_abbreviation\n    , players._time_extracted as extracted_at\n    , players._time_loaded as loaded_at\nfrom `nhl-breakouts`.`raw`.`people` as players", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`nhl-breakouts`.`analytics_staging`.`stg_nhl__players`"}, "model.dbt_nhl_breakouts.stg_nhl__boxscore": {"raw_sql": "with\nlive_boxscore as (\n    select * from {{ source('meltano', 'live_boxscore') }}\n)\n\n, final as (\n    select\n        /* Primary Key */\n        {{ dbt_utils.surrogate_key(['gameid']) }} as stg_nhl__boxscore_id\n\n        /* Identifiers */\n        , gameid as game_id\n        , teams.home.team.id as home_team_id\n        , teams.away.team.id as away_team_id\n\n        /* Properties */\n        -- Home team stats\n        , teams.home.team.name as home_team_name\n        , teams.home.teamstats.teamskaterstats.pim as home_team_pim\n        , teams.home.teamstats.teamskaterstats.shots as home_team_shots\n        , teams.home.teamstats.teamskaterstats.powerplaygoals as home_team_powerplay_goals\n        , teams.home.teamstats.teamskaterstats.powerplayopportunities as home_team_powerplay_opportunities\n        , teams.home.teamstats.teamskaterstats.faceoffwinpercentage as home_team_faceoff_percentage\n        , teams.home.teamstats.teamskaterstats.blocked as home_team_blocked\n        , teams.home.teamstats.teamskaterstats.takeaways as home_team_takeaways\n        , teams.home.teamstats.teamskaterstats.giveaways as home_team_giveaways\n        , teams.home.teamstats.teamskaterstats.hits as home_team_hits\n        , teams.home.scratches as home_team_scratches\n\n        -- Away team stats\n        , teams.away.team.name as away_team_name\n        , teams.away.teamstats.teamskaterstats.pim as away_team_pim\n        , teams.away.teamstats.teamskaterstats.shots as away_team_shots\n        , teams.away.teamstats.teamskaterstats.powerplaygoals as away_team_powerplay_goals\n        , teams.away.teamstats.teamskaterstats.powerplayopportunities as away_team_powerplay_opportunities\n        , teams.away.teamstats.teamskaterstats.faceoffwinpercentage as away_team_faceoff_percentage\n        , teams.away.teamstats.teamskaterstats.blocked as away_team_blocked\n        , teams.away.teamstats.teamskaterstats.takeaways as away_team_takeaways\n        , teams.away.teamstats.teamskaterstats.giveaways as away_team_giveaways\n        , teams.away.teamstats.teamskaterstats.hits as away_team_hits\n        , teams.away.scratches as away_team_scratches\n    from live_boxscore\n)\n\nselect * from final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["source.dbt_nhl_breakouts.meltano.live_boxscore"]}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "nhl-breakouts", "schema": "analytics_staging", "fqn": ["dbt_nhl_breakouts", "staging", "stg_nhl__boxscore"], "unique_id": "model.dbt_nhl_breakouts.stg_nhl__boxscore", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "staging/stg_nhl__boxscore.sql", "original_file_path": "models/staging/stg_nhl__boxscore.sql", "name": "stg_nhl__boxscore", "alias": "stg_nhl__boxscore", "checksum": {"name": "sha256", "checksum": "112a33bc4854a3ed4ab3faef8f1225ae61f60771df360538ff57fd80b3f63baf"}, "tags": [], "refs": [], "sources": [["meltano", "live_boxscore"]], "description": "Staged NHL linescore data from the NHL-API. Contains summarized stats of the teams involved at the game level.\n", "columns": {"stg_nhl__boxscore_id": {"name": "stg_nhl__boxscore_id", "description": "Unique surrogate key for the NHL boxscore game", "meta": {}, "data_type": null, "quote": null, "tags": []}, "game_id": {"name": "game_id", "description": "Foreign key that maps to an NHL game\n##### More about game_id\nThe first 4 digits identify the season of the game (ie. 2017 for the 2017-2018 season). The next 2 digits give the type of game, where 01 = preseason, 02 = regular season, 03 = playoffs, 04 = all-star. The final 4 digits identify the specific game number.\n\nFor regular season and preseason games, this ranges from 0001 to the number of games played. (1271 for seasons with 31 teams (2017 and onwards) and 1230 for seasons with 30 teams).\n\nFor playoff games, the 2nd digit of the specific number gives the round of the playoffs, the 3rd digit specifies the matchup, and the 4th digit specifies the game (out of 7).\n\n[Credit to Drew Hynes' NHL API docs](https://gitlab.com/dword4/nhlapi/-/blob/master/stats-api.md#game-ids)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "home_team_id": {"name": "home_team_id", "description": "Identifier for the home team, foreign key to stg_nhl__teams", "meta": {}, "data_type": null, "quote": null, "tags": []}, "away_team_id": {"name": "away_team_id", "description": "Identifier for the away team, foreign key to stg_nhl__teams", "meta": {}, "data_type": null, "quote": null, "tags": []}, "home_team_name": {"name": "home_team_name", "description": "Name of the home team", "meta": {}, "data_type": null, "quote": null, "tags": []}, "home_team_pim": {"name": "home_team_pim", "description": "Total home team penalty infraction minutes", "meta": {}, "data_type": null, "quote": null, "tags": []}, "home_team_shots": {"name": "home_team_shots", "description": "Total home team shots", "meta": {}, "data_type": null, "quote": null, "tags": []}, "home_team_powerplay_goals": {"name": "home_team_powerplay_goals", "description": "Total home team powerplay goals", "meta": {}, "data_type": null, "quote": null, "tags": []}, "home_team_powerplay_opportunities": {"name": "home_team_powerplay_opportunities", "description": "Total home team powerplay opportunities", "meta": {}, "data_type": null, "quote": null, "tags": []}, "home_team_faceoff_percentage": {"name": "home_team_faceoff_percentage", "description": "Home team faceoff percentage", "meta": {}, "data_type": null, "quote": null, "tags": []}, "home_team_blocked": {"name": "home_team_blocked", "description": "Total home team shots blocked", "meta": {}, "data_type": null, "quote": null, "tags": []}, "home_team_takeaways": {"name": "home_team_takeaways", "description": "Total home team takeaways", "meta": {}, "data_type": null, "quote": null, "tags": []}, "home_team_giveaways": {"name": "home_team_giveaways", "description": "Total home team giveaways", "meta": {}, "data_type": null, "quote": null, "tags": []}, "home_team_hits": {"name": "home_team_hits", "description": "Total home team hits", "meta": {}, "data_type": null, "quote": null, "tags": []}, "away_team_name": {"name": "away_team_name", "description": "Name of the away team", "meta": {}, "data_type": null, "quote": null, "tags": []}, "away_team_pim": {"name": "away_team_pim", "description": "Total away team penalty infraction minutes", "meta": {}, "data_type": null, "quote": null, "tags": []}, "away_team_shots": {"name": "away_team_shots", "description": "Total away team shots", "meta": {}, "data_type": null, "quote": null, "tags": []}, "away_team_powerplay_goals": {"name": "away_team_powerplay_goals", "description": "Total away team powerplay goals", "meta": {}, "data_type": null, "quote": null, "tags": []}, "away_team_powerplay_opportunities": {"name": "away_team_powerplay_opportunities", "description": "Total away team powerplay opportunities", "meta": {}, "data_type": null, "quote": null, "tags": []}, "away_team_faceoff_percentage": {"name": "away_team_faceoff_percentage", "description": "Away team faceoff percentage", "meta": {}, "data_type": null, "quote": null, "tags": []}, "away_team_blocked": {"name": "away_team_blocked", "description": "Total away team shots blocked", "meta": {}, "data_type": null, "quote": null, "tags": []}, "away_team_takeaways": {"name": "away_team_takeaways", "description": "Total away team takeaways", "meta": {}, "data_type": null, "quote": null, "tags": []}, "away_team_giveaways": {"name": "away_team_giveaways", "description": "Total away team giveaways", "meta": {}, "data_type": null, "quote": null, "tags": []}, "away_team_hits": {"name": "away_team_hits", "description": "Total away team hits", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dbt_nhl_breakouts://models/staging/stg_nhl__boxscore.yml", "compiled_path": "target/compiled/dbt_nhl_breakouts/models/staging/stg_nhl__boxscore.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "staging"}, "created_at": 1652151875.5271301, "compiled_sql": "with\nlive_boxscore as (\n    select * from `nhl-breakouts`.`raw`.`live_boxscore`\n)\n\n, final as (\n    select\n        /* Primary Key */\n        to_hex(md5(cast(coalesce(cast(gameid as \n    string\n), '') as \n    string\n))) as stg_nhl__boxscore_id\n\n        /* Identifiers */\n        , gameid as game_id\n        , teams.home.team.id as home_team_id\n        , teams.away.team.id as away_team_id\n\n        /* Properties */\n        -- Home team stats\n        , teams.home.team.name as home_team_name\n        , teams.home.teamstats.teamskaterstats.pim as home_team_pim\n        , teams.home.teamstats.teamskaterstats.shots as home_team_shots\n        , teams.home.teamstats.teamskaterstats.powerplaygoals as home_team_powerplay_goals\n        , teams.home.teamstats.teamskaterstats.powerplayopportunities as home_team_powerplay_opportunities\n        , teams.home.teamstats.teamskaterstats.faceoffwinpercentage as home_team_faceoff_percentage\n        , teams.home.teamstats.teamskaterstats.blocked as home_team_blocked\n        , teams.home.teamstats.teamskaterstats.takeaways as home_team_takeaways\n        , teams.home.teamstats.teamskaterstats.giveaways as home_team_giveaways\n        , teams.home.teamstats.teamskaterstats.hits as home_team_hits\n        , teams.home.scratches as home_team_scratches\n\n        -- Away team stats\n        , teams.away.team.name as away_team_name\n        , teams.away.teamstats.teamskaterstats.pim as away_team_pim\n        , teams.away.teamstats.teamskaterstats.shots as away_team_shots\n        , teams.away.teamstats.teamskaterstats.powerplaygoals as away_team_powerplay_goals\n        , teams.away.teamstats.teamskaterstats.powerplayopportunities as away_team_powerplay_opportunities\n        , teams.away.teamstats.teamskaterstats.faceoffwinpercentage as away_team_faceoff_percentage\n        , teams.away.teamstats.teamskaterstats.blocked as away_team_blocked\n        , teams.away.teamstats.teamskaterstats.takeaways as away_team_takeaways\n        , teams.away.teamstats.teamskaterstats.giveaways as away_team_giveaways\n        , teams.away.teamstats.teamskaterstats.hits as away_team_hits\n        , teams.away.scratches as away_team_scratches\n    from live_boxscore\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`nhl-breakouts`.`analytics_staging`.`stg_nhl__boxscore`"}, "model.dbt_nhl_breakouts.stg_nhl__live_plays": {"raw_sql": "with\n\n-- CTE1\nlive_plays as (\n    select * from {{ source('meltano', 'live_plays') }}\n)\n\n-- CTE2 Play-level information (each row is a player's involvement in a play)\n, cte_base_plays as (\n    select\n        {{ dbt_utils.surrogate_key(['live_plays.gameid', 'live_plays.about.eventidx', 'players.player.id']) }} as stg_nhl__live_plays_id\n        , live_plays.gameid as game_id\n        , live_plays.about.eventid as event_id\n        , players.player.id as player_id\n        , boxscore_player.team_id as team_id\n        , upper(players.playertype) as player_role\n        -- Was the play/player in question home or away?\n        , case\n            when live_plays.team.id = schedule.away_team_id\n                then 'AWAY'\n            else 'HOME'\n        end as player_role_team\n        -- Get mins elapsed, carrying over the period\n        , case\n            when live_plays.about.periodtype = 'REGULAR'\n                then cast((substr(live_plays.about.periodtime, 0, 2)) as int64) + (20 * (cast(live_plays.about.period as int64) - 1))\n        end as play_minutes_elapsed\n        -- Get seconds elapsed,do not carry over the period\n        , case\n            when live_plays.about.periodtype = 'REGULAR'\n                then cast((substr(live_plays.about.periodtime, 4, 2)) as int64)\n        end as play_seconds_elapsed\n        , live_plays.about.eventidx as event_idx\n        , live_plays.result.eventtypeid as event_type\n        , live_plays.result.eventcode as event_code\n        , live_plays.result.description as event_description\n        , live_plays.coordinates.x as play_x_coordinate\n        , live_plays.coordinates.y as play_y_coordinate\n        , live_plays.about.period as play_period\n        , live_plays.about.periodtype as play_period_type\n        , live_plays.about.periodtime as play_period_time_elapsed\n        , live_plays.about.periodtimeremaining as play_period_time_remaining\n        --,DATETIME(live_plays.about.dateTime) as play_time\n        , live_plays.about.datetime as play_time\n        -- BEGIN CUMULATIVE COUNTERS BY HOME/AWAY\n        -- SHOTS\n        , case\n            when live_plays.result.eventtypeid in ('SHOT', 'GOAL')\n                and live_plays.team.id = schedule.away_team_id\n                and upper(players.playertype) = 'GOALIE'\n                then 1\n            else 0\n        end as shot_away\n        , case\n            when live_plays.result.eventtypeid in ('SHOT', 'GOAL')\n                and live_plays.team.id = schedule.home_team_id\n                and upper(players.playertype) = 'GOALIE'\n                then 1\n            else 0\n        end as shot_home\n        -- HITS\n        , case\n            when live_plays.result.eventtypeid in ('HIT')\n                and live_plays.team.id = schedule.away_team_id\n                and upper(players.playertype) = 'HITTER'\n                then 1\n            else 0\n        end as hit_away\n        , case\n            when live_plays.result.eventtypeid in ('HIT')\n                and live_plays.team.id = schedule.home_team_id\n                and upper(players.playertype) = 'HITTER'\n                then 1\n            else 0\n        end as hit_home\n        -- FACEOFFS\n        , case\n            when live_plays.result.eventtypeid in ('FACEOFF')\n                and live_plays.team.id = schedule.away_team_id\n                and upper(players.playertype) = 'WINNER'\n                then 1\n            else 0\n        end as faceoff_away\n        , case\n            when live_plays.result.eventtypeid in ('FACEOFF')\n                and live_plays.team.id = schedule.home_team_id\n                and upper(players.playertype) = 'WINNER'\n                then 1\n            else 0\n        end as faceoff_home\n        -- TAKEAWAYS\n        , case\n            when live_plays.result.eventtypeid in ('TAKEAWAY')\n                and live_plays.team.id = schedule.away_team_id\n                and upper(players.playertype) = 'PLAYERID'\n                then 1\n            else 0\n        end as takeaway_away\n        , case\n            when live_plays.result.eventtypeid in ('TAKEAWAY')\n                and live_plays.team.id = schedule.home_team_id\n                and upper(players.playertype) = 'PLAYERID'\n                then 1\n            else 0\n        end as takeaway_home\n        -- GIVEAWAY\n        , case\n            when live_plays.result.eventtypeid in ('GIVEAWAY')\n                and live_plays.team.id = schedule.away_team_id\n                and upper(players.playertype) = 'PLAYERID'\n                then 1\n            else 0\n        end as giveaway_away\n        , case\n            when live_plays.result.eventtypeid in ('GIVEAWAY')\n                and live_plays.team.id = schedule.home_team_id\n                and upper(players.playertype) = 'PLAYERID'\n                then 1\n            else 0\n        end as giveaway_home\n        -- MISSED SHOT\n        , case\n            when live_plays.result.eventtypeid in ('MISSED_SHOT')\n                and live_plays.team.id = schedule.away_team_id\n                and upper(players.playertype) = 'SHOOTER'\n                then 1\n            else 0\n        end as missedshot_away\n        , case\n            when live_plays.result.eventtypeid in ('MISSED_SHOT')\n                and live_plays.team.id = schedule.home_team_id\n                and upper(players.playertype) = 'SHOOTER'\n                then 1\n            else 0\n        end as missedshot_home\n        -- BLOCKED SHOT\n        , case\n            when live_plays.result.eventtypeid in ('BLOCKED_SHOT')\n                and live_plays.team.id = schedule.away_team_id\n                and upper(players.playertype) = 'SHOOTER'\n                then 1\n            else 0\n        end as blockedshot_away\n        , case\n            when live_plays.result.eventtypeid in ('BLOCKED_SHOT')\n                and live_plays.team.id = schedule.home_team_id\n                and upper(players.playertype) = 'SHOOTER'\n                then 1\n            else 0\n        end as blockedshot_home\n        -- PENALTIES\n        , case\n            when live_plays.result.eventtypeid in ('PENALTY')\n                and live_plays.team.id = schedule.away_team_id\n                and upper(players.playertype) = 'PENALTYON'\n                then 1\n            else 0\n        end as penalty_away\n        , case\n            when live_plays.result.eventtypeid in ('PENALTY')\n                and live_plays.team.id = schedule.home_team_id\n                and upper(players.playertype) = 'PENALTYON'\n                then 1\n            else 0\n        end as penalty_home\n        -- GOALS\n        , live_plays.about.goals.away as goals_away\n        , live_plays.about.goals.home as goals_home\n\n    from live_plays\n    , unnest(live_plays.players) as players\n    left join {{ ref('stg_nhl__schedule') }} as schedule on schedule.game_id = live_plays.gameid\n    left join {{ ref('stg_nhl__boxscore_player') }} as boxscore_player on boxscore_player.game_id = live_plays.gameid and players.player.id = boxscore_player.player_id\n)\n\n-- Add in cumulative metrics\n, cte_cumulative as (\n    select\n        /* Primary Key */\n        bp.stg_nhl__live_plays_id\n\n        /* Identifiers */\n        , bp.game_id\n        , bp.event_idx\n        , bp.event_id\n        , bp.player_id\n        , bp.team_id\n\n        /* Properties */\n        , bp.player_role\n        , bp.player_role_team\n        , bp.event_type\n        , bp.event_code\n        , bp.event_description\n        , bp.play_x_coordinate\n        , bp.play_y_coordinate\n        , bp.play_period\n        , bp.play_period_type\n        , bp.play_period_time_elapsed\n        , bp.play_period_time_remaining\n        , bp.play_seconds_elapsed as play_period_seconds_elapsed\n        , 1200 - play_seconds_elapsed as play_period_seconds_remaining\n        , ((bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) as play_total_seconds_elapsed\n        , 3600 - ((bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) as play_total_seconds_remaining\n        , bp.play_time\n        -- Count cumulative shot totals\n        , sum(bp.shot_away) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) as shots_away\n        , sum(bp.shot_home) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) as shots_home\n        -- Count hit totals\n        , sum(bp.hit_away) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) as hits_away\n        , sum(bp.hit_home) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) as hits_home\n        -- Count faceoff totals\n        , sum(bp.faceoff_away) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) as faceoffs_away\n        , sum(bp.faceoff_home) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) as faceoffs_home\n        -- Count takeaways totals\n        , sum(bp.takeaway_away) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) as takeaways_away\n        , sum(bp.takeaway_home) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) as takeaways_home\n        -- Count giveaways totals\n        , sum(bp.giveaway_away) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) as giveaways_away\n        , sum(bp.giveaway_home) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) as giveaways_home\n        -- Count missedshot totals\n        , sum(bp.missedshot_away) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) as missedshots_away\n        , sum(bp.missedshot_home) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) as missedshots_home\n        -- Count blockedshot totals\n        , sum(bp.blockedshot_away) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) as blockedshots_away\n        , sum(bp.blockedshot_home) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) as blockedshots_home\n        -- Count penalty totals\n        , sum(bp.penalty_away) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) as penalties_away\n        , sum(bp.penalty_home) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) as penalties_home\n        -- Cumulative goal counts\n        , bp.goals_away\n        , bp.goals_home\n        -- Cumulative goal descriptors (current state)\n        , abs(bp.goals_home - bp.goals_away) as goal_difference_current\n        , case\n            when(bp.goals_home - bp.goals_away) = 0\n                then 'Tie'\n            when(bp.goals_home - bp.goals_away) > 0\n                then 'Home'\n            when(bp.goals_home - bp.goals_away) < 0\n                then 'Away'\n        end as winning_team_current\n        , case\n            when abs(bp.goals_home - bp.goals_away) = 0\n                then 'Tie'\n            when abs(bp.goals_home - bp.goals_away) = 1\n                then 'Close'\n            when abs(bp.goals_home - bp.goals_away) = 2\n                then 'Buffer'\n            when abs(bp.goals_home - bp.goals_away) = 3\n                then 'Comfortable'\n            when abs(bp.goals_home - bp.goals_away) >= 4\n                then 'Blowout'\n        end as game_state_current\n        -- First goal flag\n        , case\n            when min(if(bp.event_type = 'GOAL', bp.event_idx, null)) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed) rows between unbounded preceding and unbounded following) = bp.event_idx\n                then 1\n            else 0\n        end as first_goal_scored\n        -- Last goal flag\n        , case\n            when max(if(bp.event_type = 'GOAL', bp.event_idx, null)) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed) rows between unbounded preceding and unbounded following) = bp.event_idx\n                then 1\n            else 0\n        end as last_goal_scored\n        -- Cumulative goal descriptors (previous state)\n        , case\n            when lag(bp.event_idx, 1) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) <> bp.event_idx\n                then lag(bp.goals_home, 1) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed))\n            when lag(bp.event_idx, 2) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) <> bp.event_idx\n                then lag(bp.goals_home, 2) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed))\n            when lag(bp.event_idx, 3) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) <> bp.event_idx\n                then lag(bp.goals_home, 3) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed))\n            when lag(bp.event_idx, 4) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) <> bp.event_idx\n                then lag(bp.goals_home, 4) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed))\n            when lag(bp.event_idx, 5) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) <> bp.event_idx\n                then lag(bp.goals_home, 5) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed))\n        end as goals_home_lag\n        , case\n            when lag(bp.event_idx, 1) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) <> bp.event_idx\n                then lag(bp.goals_away, 1) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed))\n            when lag(bp.event_idx, 2) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) <> bp.event_idx\n                then lag(bp.goals_away, 2) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed))\n            when lag(bp.event_idx, 3) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) <> bp.event_idx\n                then lag(bp.goals_away, 3) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed))\n            when lag(bp.event_idx, 4) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) <> bp.event_idx\n                then lag(bp.goals_away, 4) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed))\n            when lag(bp.event_idx, 5) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) <> bp.event_idx\n                then lag(bp.goals_away, 5) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed))\n        end as goals_away_lag\n\n    from cte_base_plays as bp\n\n    order by\n        bp.game_id\n        , (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)\n        , event_idx\n)\n\n-- CTE to determine the state of the game as a result of the play\n, cte_game_state as (\n    select\n        c.*\n        -- Previous winning team\n        , abs(c.goals_home_lag - c.goals_away_lag) as goal_difference_lag\n        , case\n            when(c.goals_home_lag - c.goals_away_lag) = 0\n                then 'Tie'\n            when(c.goals_home_lag - c.goals_away_lag) > 0\n                then 'Home'\n            when(c.goals_home_lag - c.goals_away_lag) < 0\n                then 'Away'\n        end as winning_team_lag\n        -- Previous game state\n        , case\n            when abs(c.goals_home_lag - c.goals_away_lag) = 0\n                then 'Tie'\n            when abs(c.goals_home_lag - c.goals_away_lag) = 1\n                then 'Close'\n            when abs(c.goals_home_lag - c.goals_away_lag) = 2\n                then 'Buffer'\n            when abs(c.goals_home_lag - c.goals_away_lag) = 3\n                then 'Comfortable'\n            when abs(c.goals_home_lag - c.goals_away_lag) >= 4\n                then 'Blowout'\n        end as game_state_lag\n        -- Home - what was the result of the play on score?\n        , case\n            when c.goal_difference_current = abs(c.goals_home_lag - c.goals_away_lag)\n                then 'No change'\n            when c.goals_home > c.goals_home_lag\n                and c.goals_home < c.goals_away\n                then 'Chase goal'\n            when c.goals_home > c.goals_home_lag\n                and c.goals_home = c.goals_away\n                then 'Tying goal scored'\n            when c.goals_home < c.goals_home_lag\n                and c.goals_home = c.goals_away\n                then 'Tying goal allowed'\n            when c.goals_home > c.goals_home_lag\n                and c.goals_home_lag = c.goals_away_lag\n                and c.goals_home > c.goals_away\n                then 'Go-ahead goal scored'\n            when c.goals_home > c.goals_home_lag\n                and c.goals_home_lag > c.goals_away_lag\n                and c.goals_home > c.goals_away\n                then 'Buffer goal'\n            when c.goals_away > c.goals_away_lag\n                and c.goals_away_lag = c.goals_home_lag\n                and c.goals_away > c.goals_home\n                then 'Go-ahead goal allowed'\n        end as home_result_of_play\n        -- Away - what was the result of the play on score?\n        , case\n            when c.goal_difference_current = abs(c.goals_home_lag - c.goals_away_lag)\n                then 'No change'\n            when c.goals_away > c.goals_away_lag\n                and c.goals_away < c.goals_home\n                then 'Chase goal'\n            when c.goals_away > c.goals_away_lag\n                and c.goals_away = c.goals_home\n                then 'Tying goal scored'\n            when c.goals_home > c.goals_home_lag\n                and c.goals_home = c.goals_away\n                then 'Tying goal allowed'\n            when c.goals_away > c.goals_away_lag\n                and c.goals_away_lag = c.goals_home_lag\n                and c.goals_away > c.goals_home\n                then 'Go-ahead goal scored'\n            when c.goals_away > c.goals_away_lag\n                and c.goals_away_lag > c.goals_home_lag\n                and c.goals_away > c.goals_home\n                then 'Buffer goal'\n            when c.goals_home > c.goals_home_lag\n                and c.goals_home_lag = c.goals_away_lag\n                and c.goals_home > c.goals_away\n                then 'Go-ahead goal allowed'\n        end as away_result_of_play\n        -- Either team - last goal a game winning goal?\n        , case\n            when c.last_goal_scored = 1                       -- last goal\n                and abs(c.goals_away_lag - c.goals_home_lag) = 0  -- game was tied last play\n                and abs(c.goals_away - c.goals_home) <> 0         -- game no longer tied\n                then 1\n            else 0\n        end as last_goal_game_winning\n        -- Either team - last goal game tying?\n        -- #TODO this is not working as intended - goals that tied the games go to OT, and so there is 0 game tying goals with this logic\n        , case\n            when c.last_goal_scored = 1                       -- last goal\n                and abs(c.goals_away_lag - c.goals_home_lag) = 1  -- game was within 1 goal last play\n                and abs(c.goals_away - c.goals_home) = 0          -- game now tied\n                then 1\n            else 0\n        end as last_goal_game_tying\n\n    from cte_cumulative as c\n\n)\n\n-- Final return\nselect\n    /* Primary Key */\n    stg_nhl__live_plays_id\n\n    /* Identifiers */\n    , game_id\n    , event_idx\n    , event_id\n    , player_id\n    , team_id\n\n    /* Properties */\n    , player_role\n    , player_role_team\n    , event_type\n    , event_code\n    , event_description\n    , play_x_coordinate\n    , play_y_coordinate\n    , play_period\n    , play_period_type\n    , play_period_time_elapsed\n    , play_period_time_remaining\n    , play_period_seconds_elapsed\n    , play_period_seconds_remaining\n    , play_total_seconds_elapsed\n    , play_total_seconds_remaining\n    , play_time\n    , shots_away\n    , shots_home\n    , hits_away\n    , hits_home\n    , faceoffs_away\n    , faceoffs_home\n    , takeaways_away\n    , takeaways_home\n    , giveaways_away\n    , giveaways_home\n    , missedshots_away\n    , missedshots_home\n    , blockedshots_away\n    , blockedshots_home\n    , penalties_away\n    , penalties_home\n    , first_goal_scored\n    , last_goal_scored\n    , goals_away\n    , goals_home\n    , goal_difference_current\n    , winning_team_current\n    , game_state_current\n    , home_result_of_play\n    , away_result_of_play\n    , last_goal_game_winning\n    , last_goal_game_tying\n    , goals_home_lag\n    , goals_away_lag\n    , goal_difference_lag\n    , winning_team_lag\n    , game_state_lag\n\nfrom cte_game_state", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["source.dbt_nhl_breakouts.meltano.live_plays", "model.dbt_nhl_breakouts.stg_nhl__schedule", "model.dbt_nhl_breakouts.stg_nhl__boxscore_player"]}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "nhl-breakouts", "schema": "analytics_staging", "fqn": ["dbt_nhl_breakouts", "staging", "stg_nhl__live_plays"], "unique_id": "model.dbt_nhl_breakouts.stg_nhl__live_plays", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "staging/stg_nhl__live_plays.sql", "original_file_path": "models/staging/stg_nhl__live_plays.sql", "name": "stg_nhl__live_plays", "alias": "stg_nhl__live_plays", "checksum": {"name": "sha256", "checksum": "702d8e081172b80df63528cb2bf6a6cca050b5dcaa4c765d177b57395586d0af"}, "tags": [], "refs": [["stg_nhl__schedule"], ["stg_nhl__boxscore_player"]], "sources": [["meltano", "live_plays"]], "description": "Staged NHL event level data from the NHL-API (player-play level)", "columns": {"stg_nhl__live_plays_id": {"name": "stg_nhl__live_plays_id", "description": "Unique surrogate key for a player's event-level activity in an NHL game (game_id + team_id + player_id + event_id)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "game_id": {"name": "game_id", "description": "Foreign key that maps to an NHL game ID\n##### More about game_id\nThe first 4 digits identify the season of the game (ie. 2017 for the 2017-2018 season). The next 2 digits give the type of game, where 01 = preseason, 02 = regular season, 03 = playoffs, 04 = all-star. The final 4 digits identify the specific game number.\n\nFor regular season and preseason games, this ranges from 0001 to the number of games played. (1271 for seasons with 31 teams (2017 and onwards) and 1230 for seasons with 30 teams).\n\nFor playoff games, the 2nd digit of the specific number gives the round of the playoffs, the 3rd digit specifies the matchup, and the 4th digit specifies the game (out of 7).\n\n[Credit to Drew Hynes' NHL API docs](https://gitlab.com/dword4/nhlapi/-/blob/master/stats-api.md#game-ids)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_idx": {"name": "event_idx", "description": "Foreign key that maps to the sequence of the event relative to that game, in ascending order (e.g. 1 = first event, 2 - second event)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_id": {"name": "event_id", "description": "Foreign key that maps to a distinct event ID", "meta": {}, "data_type": null, "quote": null, "tags": []}, "player_id": {"name": "player_id", "description": "Foreign key that maps to an NHL player ID", "meta": {}, "data_type": null, "quote": null, "tags": []}, "team_id": {"name": "team_id", "description": "Foreign key that maps to an NHL team ID", "meta": {}, "data_type": null, "quote": null, "tags": []}, "player_role": {"name": "player_role", "description": "The role of the player in context to the event (e.g. Hitter, Hitee, Shooter, Winner, Loser, etc.)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "player_role_team": {"name": "player_role_team", "description": "The home / away status of the player's team", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_type": {"name": "event_type", "description": "Short description of the event type", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_code": {"name": "event_code", "description": "Event code that is unique at the game-event level (e.g. PHI8, PHI10)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_description": {"name": "event_description", "description": "Long description of the event (repeated for all the player's involved in the event)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "play_x_coordinate": {"name": "play_x_coordinate", "description": "The x-coordinate of where the event took place on the ice", "meta": {}, "data_type": null, "quote": null, "tags": []}, "play_y_coordinate": {"name": "play_y_coordinate", "description": "The y-coordinate of where the event took place on the ice", "meta": {}, "data_type": null, "quote": null, "tags": []}, "play_period": {"name": "play_period", "description": "The period in which the event occured (e.g. 3)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "play_period_type": {"name": "play_period_type", "description": "The type of period in which the event occured (e.g. Regular)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "play_period_time_elapsed": {"name": "play_period_time_elapsed", "description": "The time in minutes elapsed in the period", "meta": {}, "data_type": null, "quote": null, "tags": []}, "play_period_time_remaining": {"name": "play_period_time_remaining", "description": "The time in minutes remaining in the period", "meta": {}, "data_type": null, "quote": null, "tags": []}, "play_period_seconds_elapsed": {"name": "play_period_seconds_elapsed", "description": "The time in seconds elapsed in the period", "meta": {}, "data_type": null, "quote": null, "tags": []}, "play_period_seconds_remaining": {"name": "play_period_seconds_remaining", "description": "The time in seconds remaining the period", "meta": {}, "data_type": null, "quote": null, "tags": []}, "play_total_seconds_elapsed": {"name": "play_total_seconds_elapsed", "description": "The time in seconds elapsed in the entire game", "meta": {}, "data_type": null, "quote": null, "tags": []}, "play_total_seconds_remaining": {"name": "play_total_seconds_remaining", "description": "The time in seconds remaining in the entire game", "meta": {}, "data_type": null, "quote": null, "tags": []}, "play_time": {"name": "play_time", "description": "A timestamp of the event (e.g. 2021-01-13T22:32:45Z)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shots_away": {"name": "shots_away", "description": "Cumulative away team shots taken in the game at the point in time where the event occured", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shots_home": {"name": "shots_home", "description": "Cumulative ome team shots taken in the game at the point in time where the event occured", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hits_away": {"name": "hits_away", "description": "Cumulative away team hits made in the game at the point in time where the event occured", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hits_home": {"name": "hits_home", "description": "Cumulative home team hits made in the game at the point in time where the event occured", "meta": {}, "data_type": null, "quote": null, "tags": []}, "faceoffs_away": {"name": "faceoffs_away", "description": "Cumulative away team faceoffs won in the game at the point in time where the event occured", "meta": {}, "data_type": null, "quote": null, "tags": []}, "faceoffs_home": {"name": "faceoffs_home", "description": "Cumulative home team faceoffs won in the game at the point in time where the event occured", "meta": {}, "data_type": null, "quote": null, "tags": []}, "takeaways_away": {"name": "takeaways_away", "description": "Cumulative away team takeaways forced in the game at the point in time where the event occured", "meta": {}, "data_type": null, "quote": null, "tags": []}, "takeaways_home": {"name": "takeaways_home", "description": "Cumulative home team takeaways forced in the game at the point in time where the event occured", "meta": {}, "data_type": null, "quote": null, "tags": []}, "giveaways_away": {"name": "giveaways_away", "description": "Cumulative away team giveaways made in the game at the point in time where the event occured", "meta": {}, "data_type": null, "quote": null, "tags": []}, "giveaways_home": {"name": "giveaways_home", "description": "Cumulative home team giveaways made in the game at the point in time where the event occured", "meta": {}, "data_type": null, "quote": null, "tags": []}, "missedshots_away": {"name": "missedshots_away", "description": "Cumulative away team missed shots taken in the game at the point in time where the event occured", "meta": {}, "data_type": null, "quote": null, "tags": []}, "missedshots_home": {"name": "missedshots_home", "description": "Cumulative home team missed shots taken in the game at the point in time where the event occured", "meta": {}, "data_type": null, "quote": null, "tags": []}, "blockedshots_away": {"name": "blockedshots_away", "description": "Cumulative away team blocked shots made in the game at the point in time where the event occured", "meta": {}, "data_type": null, "quote": null, "tags": []}, "blockedshots_home": {"name": "blockedshots_home", "description": "Cumulative home team blocked shots made in the game at the point in time where the event occured", "meta": {}, "data_type": null, "quote": null, "tags": []}, "penalties_away": {"name": "penalties_away", "description": "Cumulative away team penalties in minutes taken in the game at the point in time where the event occured", "meta": {}, "data_type": null, "quote": null, "tags": []}, "penalties_home": {"name": "penalties_home", "description": "Cumulative home team penalties in minutes taken in the game at the point in time where the event occured", "meta": {}, "data_type": null, "quote": null, "tags": []}, "first_goal_scored": {"name": "first_goal_scored", "description": "Whether or not the event in question was the first goal of the game (1 or 0)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_goal_scored": {"name": "last_goal_scored", "description": "Whether or not the event in question was the last goal of the game (1 or 0)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "goals_away": {"name": "goals_away", "description": "Cumulative away team goals scored in the game at the point in time where the event occured", "meta": {}, "data_type": null, "quote": null, "tags": []}, "goals_home": {"name": "goals_home", "description": "Cumulative home team goals scored in the game at the point in time where the event occured", "meta": {}, "data_type": null, "quote": null, "tags": []}, "goal_difference_current": {"name": "goal_difference_current", "description": "The absolute value difference in goals between the home and away teams in the game at the point in time where the event occured", "meta": {}, "data_type": null, "quote": null, "tags": []}, "winning_team_current": {"name": "winning_team_current", "description": "The name of the team_type (e.g. \"Tie\", \"Home\" or \"Away\") for the team currently winning", "meta": {}, "data_type": null, "quote": null, "tags": []}, "game_state_current": {"name": "game_state_current", "description": "The current state of scoreboard (e.g. \"Tie\", \"Close\" (1 goal difference), \"Buffer\" (2 goal difference), \"Comfortable\" (3 goal difference), \"Blowout\" (4 goal difference))", "meta": {}, "data_type": null, "quote": null, "tags": []}, "home_result_of_play": {"name": "home_result_of_play", "description": "Description of the result of the current event / play for the home team (e.g. \"No change\", \"Chase goal\", \"Tying goal scored\", \"Tying goal allowed\", \"Go-ahead goal scored, Buffer goal\", \"Go-ahead goal allowed\")", "meta": {}, "data_type": null, "quote": null, "tags": []}, "away_result_of_play": {"name": "away_result_of_play", "description": "Description of the result of the current event / play for the away team (e.g. \"No change\", \"Chase goal\", \"Tying goal scored\", \"Tying goal allowed\", \"Go-ahead goal scored, Buffer goal\", \"Go-ahead goal allowed\")", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_goal_game_winning": {"name": "last_goal_game_winning", "description": "Whether or not the the current goal was the last goal and also the game winning goal (1 or 0)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_goal_game_tying": {"name": "last_goal_game_tying", "description": "Whether or not the the current goal was the last goal and also the game tying goal (1 or 0)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "goals_home_lag": {"name": "goals_home_lag", "description": "Cumulative home team goals scored in the game 1 play before the current play (e.g. if event prior to this event was a home team goal, and the current play was a hit, then the value for this column would be 1)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "goals_away_lag": {"name": "goals_away_lag", "description": "Cumulative away team goals scored in the game 1 play before the current play (e.g. if event prior to this event was a away team goal, and the current play was a hit, then the value for this column would be 1)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "goal_difference_lag": {"name": "goal_difference_lag", "description": "The absolute value difference in goals between the home and away teams in the game using the home and away team lagged goals scored", "meta": {}, "data_type": null, "quote": null, "tags": []}, "winning_team_lag": {"name": "winning_team_lag", "description": "Determines the previously winning team (e.g. \"Tie\", \"Home\" or \"Away\") before the play in question", "meta": {}, "data_type": null, "quote": null, "tags": []}, "game_state_lag": {"name": "game_state_lag", "description": "The previous state of scoreboard prior to the play in question (e.g. \"Tie\", \"Close\" (1 goal difference), \"Buffer\" (2 goal difference), \"Comfortable\" (3 goal difference), \"Blowout\" (4 goal difference))", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dbt_nhl_breakouts://models/staging/stg_nhl__live_plays.yml", "compiled_path": "target/compiled/dbt_nhl_breakouts/models/staging/stg_nhl__live_plays.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "staging"}, "created_at": 1652151875.537407, "compiled_sql": "with\n\n-- CTE1\nlive_plays as (\n    select * from `nhl-breakouts`.`raw`.`live_plays`\n)\n\n-- CTE2 Play-level information (each row is a player's involvement in a play)\n, cte_base_plays as (\n    select\n        to_hex(md5(cast(coalesce(cast(live_plays.gameid as \n    string\n), '') || '-' || coalesce(cast(live_plays.about.eventidx as \n    string\n), '') || '-' || coalesce(cast(players.player.id as \n    string\n), '') as \n    string\n))) as stg_nhl__live_plays_id\n        , live_plays.gameid as game_id\n        , live_plays.about.eventid as event_id\n        , players.player.id as player_id\n        , boxscore_player.team_id as team_id\n        , upper(players.playertype) as player_role\n        -- Was the play/player in question home or away?\n        , case\n            when live_plays.team.id = schedule.away_team_id\n                then 'AWAY'\n            else 'HOME'\n        end as player_role_team\n        -- Get mins elapsed, carrying over the period\n        , case\n            when live_plays.about.periodtype = 'REGULAR'\n                then cast((substr(live_plays.about.periodtime, 0, 2)) as int64) + (20 * (cast(live_plays.about.period as int64) - 1))\n        end as play_minutes_elapsed\n        -- Get seconds elapsed,do not carry over the period\n        , case\n            when live_plays.about.periodtype = 'REGULAR'\n                then cast((substr(live_plays.about.periodtime, 4, 2)) as int64)\n        end as play_seconds_elapsed\n        , live_plays.about.eventidx as event_idx\n        , live_plays.result.eventtypeid as event_type\n        , live_plays.result.eventcode as event_code\n        , live_plays.result.description as event_description\n        , live_plays.coordinates.x as play_x_coordinate\n        , live_plays.coordinates.y as play_y_coordinate\n        , live_plays.about.period as play_period\n        , live_plays.about.periodtype as play_period_type\n        , live_plays.about.periodtime as play_period_time_elapsed\n        , live_plays.about.periodtimeremaining as play_period_time_remaining\n        --,DATETIME(live_plays.about.dateTime) as play_time\n        , live_plays.about.datetime as play_time\n        -- BEGIN CUMULATIVE COUNTERS BY HOME/AWAY\n        -- SHOTS\n        , case\n            when live_plays.result.eventtypeid in ('SHOT', 'GOAL')\n                and live_plays.team.id = schedule.away_team_id\n                and upper(players.playertype) = 'GOALIE'\n                then 1\n            else 0\n        end as shot_away\n        , case\n            when live_plays.result.eventtypeid in ('SHOT', 'GOAL')\n                and live_plays.team.id = schedule.home_team_id\n                and upper(players.playertype) = 'GOALIE'\n                then 1\n            else 0\n        end as shot_home\n        -- HITS\n        , case\n            when live_plays.result.eventtypeid in ('HIT')\n                and live_plays.team.id = schedule.away_team_id\n                and upper(players.playertype) = 'HITTER'\n                then 1\n            else 0\n        end as hit_away\n        , case\n            when live_plays.result.eventtypeid in ('HIT')\n                and live_plays.team.id = schedule.home_team_id\n                and upper(players.playertype) = 'HITTER'\n                then 1\n            else 0\n        end as hit_home\n        -- FACEOFFS\n        , case\n            when live_plays.result.eventtypeid in ('FACEOFF')\n                and live_plays.team.id = schedule.away_team_id\n                and upper(players.playertype) = 'WINNER'\n                then 1\n            else 0\n        end as faceoff_away\n        , case\n            when live_plays.result.eventtypeid in ('FACEOFF')\n                and live_plays.team.id = schedule.home_team_id\n                and upper(players.playertype) = 'WINNER'\n                then 1\n            else 0\n        end as faceoff_home\n        -- TAKEAWAYS\n        , case\n            when live_plays.result.eventtypeid in ('TAKEAWAY')\n                and live_plays.team.id = schedule.away_team_id\n                and upper(players.playertype) = 'PLAYERID'\n                then 1\n            else 0\n        end as takeaway_away\n        , case\n            when live_plays.result.eventtypeid in ('TAKEAWAY')\n                and live_plays.team.id = schedule.home_team_id\n                and upper(players.playertype) = 'PLAYERID'\n                then 1\n            else 0\n        end as takeaway_home\n        -- GIVEAWAY\n        , case\n            when live_plays.result.eventtypeid in ('GIVEAWAY')\n                and live_plays.team.id = schedule.away_team_id\n                and upper(players.playertype) = 'PLAYERID'\n                then 1\n            else 0\n        end as giveaway_away\n        , case\n            when live_plays.result.eventtypeid in ('GIVEAWAY')\n                and live_plays.team.id = schedule.home_team_id\n                and upper(players.playertype) = 'PLAYERID'\n                then 1\n            else 0\n        end as giveaway_home\n        -- MISSED SHOT\n        , case\n            when live_plays.result.eventtypeid in ('MISSED_SHOT')\n                and live_plays.team.id = schedule.away_team_id\n                and upper(players.playertype) = 'SHOOTER'\n                then 1\n            else 0\n        end as missedshot_away\n        , case\n            when live_plays.result.eventtypeid in ('MISSED_SHOT')\n                and live_plays.team.id = schedule.home_team_id\n                and upper(players.playertype) = 'SHOOTER'\n                then 1\n            else 0\n        end as missedshot_home\n        -- BLOCKED SHOT\n        , case\n            when live_plays.result.eventtypeid in ('BLOCKED_SHOT')\n                and live_plays.team.id = schedule.away_team_id\n                and upper(players.playertype) = 'SHOOTER'\n                then 1\n            else 0\n        end as blockedshot_away\n        , case\n            when live_plays.result.eventtypeid in ('BLOCKED_SHOT')\n                and live_plays.team.id = schedule.home_team_id\n                and upper(players.playertype) = 'SHOOTER'\n                then 1\n            else 0\n        end as blockedshot_home\n        -- PENALTIES\n        , case\n            when live_plays.result.eventtypeid in ('PENALTY')\n                and live_plays.team.id = schedule.away_team_id\n                and upper(players.playertype) = 'PENALTYON'\n                then 1\n            else 0\n        end as penalty_away\n        , case\n            when live_plays.result.eventtypeid in ('PENALTY')\n                and live_plays.team.id = schedule.home_team_id\n                and upper(players.playertype) = 'PENALTYON'\n                then 1\n            else 0\n        end as penalty_home\n        -- GOALS\n        , live_plays.about.goals.away as goals_away\n        , live_plays.about.goals.home as goals_home\n\n    from live_plays\n    , unnest(live_plays.players) as players\n    left join `nhl-breakouts`.`analytics_staging`.`stg_nhl__schedule` as schedule on schedule.game_id = live_plays.gameid\n    left join `nhl-breakouts`.`analytics_staging`.`stg_nhl__boxscore_player` as boxscore_player on boxscore_player.game_id = live_plays.gameid and players.player.id = boxscore_player.player_id\n)\n\n-- Add in cumulative metrics\n, cte_cumulative as (\n    select\n        /* Primary Key */\n        bp.stg_nhl__live_plays_id\n\n        /* Identifiers */\n        , bp.game_id\n        , bp.event_idx\n        , bp.event_id\n        , bp.player_id\n        , bp.team_id\n\n        /* Properties */\n        , bp.player_role\n        , bp.player_role_team\n        , bp.event_type\n        , bp.event_code\n        , bp.event_description\n        , bp.play_x_coordinate\n        , bp.play_y_coordinate\n        , bp.play_period\n        , bp.play_period_type\n        , bp.play_period_time_elapsed\n        , bp.play_period_time_remaining\n        , bp.play_seconds_elapsed as play_period_seconds_elapsed\n        , 1200 - play_seconds_elapsed as play_period_seconds_remaining\n        , ((bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) as play_total_seconds_elapsed\n        , 3600 - ((bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) as play_total_seconds_remaining\n        , bp.play_time\n        -- Count cumulative shot totals\n        , sum(bp.shot_away) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) as shots_away\n        , sum(bp.shot_home) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) as shots_home\n        -- Count hit totals\n        , sum(bp.hit_away) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) as hits_away\n        , sum(bp.hit_home) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) as hits_home\n        -- Count faceoff totals\n        , sum(bp.faceoff_away) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) as faceoffs_away\n        , sum(bp.faceoff_home) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) as faceoffs_home\n        -- Count takeaways totals\n        , sum(bp.takeaway_away) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) as takeaways_away\n        , sum(bp.takeaway_home) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) as takeaways_home\n        -- Count giveaways totals\n        , sum(bp.giveaway_away) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) as giveaways_away\n        , sum(bp.giveaway_home) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) as giveaways_home\n        -- Count missedshot totals\n        , sum(bp.missedshot_away) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) as missedshots_away\n        , sum(bp.missedshot_home) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) as missedshots_home\n        -- Count blockedshot totals\n        , sum(bp.blockedshot_away) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) as blockedshots_away\n        , sum(bp.blockedshot_home) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) as blockedshots_home\n        -- Count penalty totals\n        , sum(bp.penalty_away) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) as penalties_away\n        , sum(bp.penalty_home) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) as penalties_home\n        -- Cumulative goal counts\n        , bp.goals_away\n        , bp.goals_home\n        -- Cumulative goal descriptors (current state)\n        , abs(bp.goals_home - bp.goals_away) as goal_difference_current\n        , case\n            when(bp.goals_home - bp.goals_away) = 0\n                then 'Tie'\n            when(bp.goals_home - bp.goals_away) > 0\n                then 'Home'\n            when(bp.goals_home - bp.goals_away) < 0\n                then 'Away'\n        end as winning_team_current\n        , case\n            when abs(bp.goals_home - bp.goals_away) = 0\n                then 'Tie'\n            when abs(bp.goals_home - bp.goals_away) = 1\n                then 'Close'\n            when abs(bp.goals_home - bp.goals_away) = 2\n                then 'Buffer'\n            when abs(bp.goals_home - bp.goals_away) = 3\n                then 'Comfortable'\n            when abs(bp.goals_home - bp.goals_away) >= 4\n                then 'Blowout'\n        end as game_state_current\n        -- First goal flag\n        , case\n            when min(if(bp.event_type = 'GOAL', bp.event_idx, null)) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed) rows between unbounded preceding and unbounded following) = bp.event_idx\n                then 1\n            else 0\n        end as first_goal_scored\n        -- Last goal flag\n        , case\n            when max(if(bp.event_type = 'GOAL', bp.event_idx, null)) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed) rows between unbounded preceding and unbounded following) = bp.event_idx\n                then 1\n            else 0\n        end as last_goal_scored\n        -- Cumulative goal descriptors (previous state)\n        , case\n            when lag(bp.event_idx, 1) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) <> bp.event_idx\n                then lag(bp.goals_home, 1) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed))\n            when lag(bp.event_idx, 2) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) <> bp.event_idx\n                then lag(bp.goals_home, 2) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed))\n            when lag(bp.event_idx, 3) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) <> bp.event_idx\n                then lag(bp.goals_home, 3) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed))\n            when lag(bp.event_idx, 4) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) <> bp.event_idx\n                then lag(bp.goals_home, 4) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed))\n            when lag(bp.event_idx, 5) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) <> bp.event_idx\n                then lag(bp.goals_home, 5) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed))\n        end as goals_home_lag\n        , case\n            when lag(bp.event_idx, 1) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) <> bp.event_idx\n                then lag(bp.goals_away, 1) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed))\n            when lag(bp.event_idx, 2) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) <> bp.event_idx\n                then lag(bp.goals_away, 2) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed))\n            when lag(bp.event_idx, 3) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) <> bp.event_idx\n                then lag(bp.goals_away, 3) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed))\n            when lag(bp.event_idx, 4) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) <> bp.event_idx\n                then lag(bp.goals_away, 4) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed))\n            when lag(bp.event_idx, 5) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)) <> bp.event_idx\n                then lag(bp.goals_away, 5) over (partition by game_id order by bp.game_id, event_idx, (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed))\n        end as goals_away_lag\n\n    from cte_base_plays as bp\n\n    order by\n        bp.game_id\n        , (bp.play_minutes_elapsed * 60) + (bp.play_seconds_elapsed)\n        , event_idx\n)\n\n-- CTE to determine the state of the game as a result of the play\n, cte_game_state as (\n    select\n        c.*\n        -- Previous winning team\n        , abs(c.goals_home_lag - c.goals_away_lag) as goal_difference_lag\n        , case\n            when(c.goals_home_lag - c.goals_away_lag) = 0\n                then 'Tie'\n            when(c.goals_home_lag - c.goals_away_lag) > 0\n                then 'Home'\n            when(c.goals_home_lag - c.goals_away_lag) < 0\n                then 'Away'\n        end as winning_team_lag\n        -- Previous game state\n        , case\n            when abs(c.goals_home_lag - c.goals_away_lag) = 0\n                then 'Tie'\n            when abs(c.goals_home_lag - c.goals_away_lag) = 1\n                then 'Close'\n            when abs(c.goals_home_lag - c.goals_away_lag) = 2\n                then 'Buffer'\n            when abs(c.goals_home_lag - c.goals_away_lag) = 3\n                then 'Comfortable'\n            when abs(c.goals_home_lag - c.goals_away_lag) >= 4\n                then 'Blowout'\n        end as game_state_lag\n        -- Home - what was the result of the play on score?\n        , case\n            when c.goal_difference_current = abs(c.goals_home_lag - c.goals_away_lag)\n                then 'No change'\n            when c.goals_home > c.goals_home_lag\n                and c.goals_home < c.goals_away\n                then 'Chase goal'\n            when c.goals_home > c.goals_home_lag\n                and c.goals_home = c.goals_away\n                then 'Tying goal scored'\n            when c.goals_home < c.goals_home_lag\n                and c.goals_home = c.goals_away\n                then 'Tying goal allowed'\n            when c.goals_home > c.goals_home_lag\n                and c.goals_home_lag = c.goals_away_lag\n                and c.goals_home > c.goals_away\n                then 'Go-ahead goal scored'\n            when c.goals_home > c.goals_home_lag\n                and c.goals_home_lag > c.goals_away_lag\n                and c.goals_home > c.goals_away\n                then 'Buffer goal'\n            when c.goals_away > c.goals_away_lag\n                and c.goals_away_lag = c.goals_home_lag\n                and c.goals_away > c.goals_home\n                then 'Go-ahead goal allowed'\n        end as home_result_of_play\n        -- Away - what was the result of the play on score?\n        , case\n            when c.goal_difference_current = abs(c.goals_home_lag - c.goals_away_lag)\n                then 'No change'\n            when c.goals_away > c.goals_away_lag\n                and c.goals_away < c.goals_home\n                then 'Chase goal'\n            when c.goals_away > c.goals_away_lag\n                and c.goals_away = c.goals_home\n                then 'Tying goal scored'\n            when c.goals_home > c.goals_home_lag\n                and c.goals_home = c.goals_away\n                then 'Tying goal allowed'\n            when c.goals_away > c.goals_away_lag\n                and c.goals_away_lag = c.goals_home_lag\n                and c.goals_away > c.goals_home\n                then 'Go-ahead goal scored'\n            when c.goals_away > c.goals_away_lag\n                and c.goals_away_lag > c.goals_home_lag\n                and c.goals_away > c.goals_home\n                then 'Buffer goal'\n            when c.goals_home > c.goals_home_lag\n                and c.goals_home_lag = c.goals_away_lag\n                and c.goals_home > c.goals_away\n                then 'Go-ahead goal allowed'\n        end as away_result_of_play\n        -- Either team - last goal a game winning goal?\n        , case\n            when c.last_goal_scored = 1                       -- last goal\n                and abs(c.goals_away_lag - c.goals_home_lag) = 0  -- game was tied last play\n                and abs(c.goals_away - c.goals_home) <> 0         -- game no longer tied\n                then 1\n            else 0\n        end as last_goal_game_winning\n        -- Either team - last goal game tying?\n        -- #TODO this is not working as intended - goals that tied the games go to OT, and so there is 0 game tying goals with this logic\n        , case\n            when c.last_goal_scored = 1                       -- last goal\n                and abs(c.goals_away_lag - c.goals_home_lag) = 1  -- game was within 1 goal last play\n                and abs(c.goals_away - c.goals_home) = 0          -- game now tied\n                then 1\n            else 0\n        end as last_goal_game_tying\n\n    from cte_cumulative as c\n\n)\n\n-- Final return\nselect\n    /* Primary Key */\n    stg_nhl__live_plays_id\n\n    /* Identifiers */\n    , game_id\n    , event_idx\n    , event_id\n    , player_id\n    , team_id\n\n    /* Properties */\n    , player_role\n    , player_role_team\n    , event_type\n    , event_code\n    , event_description\n    , play_x_coordinate\n    , play_y_coordinate\n    , play_period\n    , play_period_type\n    , play_period_time_elapsed\n    , play_period_time_remaining\n    , play_period_seconds_elapsed\n    , play_period_seconds_remaining\n    , play_total_seconds_elapsed\n    , play_total_seconds_remaining\n    , play_time\n    , shots_away\n    , shots_home\n    , hits_away\n    , hits_home\n    , faceoffs_away\n    , faceoffs_home\n    , takeaways_away\n    , takeaways_home\n    , giveaways_away\n    , giveaways_home\n    , missedshots_away\n    , missedshots_home\n    , blockedshots_away\n    , blockedshots_home\n    , penalties_away\n    , penalties_home\n    , first_goal_scored\n    , last_goal_scored\n    , goals_away\n    , goals_home\n    , goal_difference_current\n    , winning_team_current\n    , game_state_current\n    , home_result_of_play\n    , away_result_of_play\n    , last_goal_game_winning\n    , last_goal_game_tying\n    , goals_home_lag\n    , goals_away_lag\n    , goal_difference_lag\n    , winning_team_lag\n    , game_state_lag\n\nfrom cte_game_state", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`nhl-breakouts`.`analytics_staging`.`stg_nhl__live_plays`"}, "model.dbt_nhl_breakouts.dates": {"raw_sql": "with date_spine as (\n    {{ dbt_utils.date_spine(\n        datepart=\"day\",\n        start_date=\"cast('2010-01-01' as date)\",\n        end_date=\"cast('2030-01-01' as date)\"\n        )\n    }}\n)\n\n, date_periods as (\n    select\n        date_day\n        , format_datetime('%Y%m%d', date_day) as date_id\n        , extract(year from date_day) as year_number\n        , extract(quarter from date_day) as quarter_number\n        , extract(month from date_day) as month_number\n        , extract(week from date_day) as week_number\n        , format_datetime('%b', date_day) as month_name\n        , format_datetime('%a', date_day) as day_of_week_name\n    from date_spine\n)\n\n, dim_date as (\n    select\n        date_id\n        , date_day\n        , day_of_week_name\n        , quarter_number\n        , concat(\"Q\", quarter_number, ' ', year_number) as quarter_desc\n        , month_number\n        , month_name\n        , concat(\"M\", lpad(cast(month_number as string), 2, '0'), ' ', year_number) as month_desc\n        , week_number\n        , concat(\"Wk \", lpad(cast(week_number as string), 2, '0'), ' ', year_number) as week_desc\n    from date_periods\n)\n\nselect * from dim_date", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.date_spine"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "utils", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "nhl-breakouts", "schema": "analytics_utils", "fqn": ["dbt_nhl_breakouts", "utils", "dates"], "unique_id": "model.dbt_nhl_breakouts.dates", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "utils/dates.sql", "original_file_path": "models/utils/dates.sql", "name": "dates", "alias": "dates", "checksum": {"name": "sha256", "checksum": "1915802fb392bbc32d8c86482edf85e4ca9a5c7040290bed65b11c822740bcfb"}, "tags": [], "refs": [], "sources": [], "description": "Date spine containing calendar dates from 2010-01-01 through 2030-01-01", "columns": {"date_id": {"name": "date_id", "description": "Unique identifier for the date in YYYYMMDD format", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "Calendar date in YYYY-MM-DD format", "meta": {}, "data_type": null, "quote": null, "tags": []}, "day_of_week_name": {"name": "day_of_week_name", "description": "Three letter name for the day of week (i.e. Mon, Tue, Wed, Thu, Fri, Sat, Sun)\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "quarter_number": {"name": "quarter_number", "description": "Quarter of the year number ranging from 1 (Q1) to 4 (Q4)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "quarter_desc": {"name": "quarter_desc", "description": "Description of the quarter (i.e. Q1 2022 for Quarter 1 2022)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "month_number": {"name": "month_number", "description": "Month of the year number ranging from 1 (January) to 12 (December)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "month_name": {"name": "month_name", "description": "Abbreviated name of the month (i.e. Jan, Feb, Mar)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "month_desc": {"name": "month_desc", "description": "Description of the month (i.e. M01 2022 for January 2022)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "week_number": {"name": "week_number", "description": "Week of the year number ranging from 1 to 52", "meta": {}, "data_type": null, "quote": null, "tags": []}, "week_desc": {"name": "week_desc", "description": "Description of the week (i.e. W52 2022 for the last calendar week of 2022)", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dbt_nhl_breakouts://models/utils/dates.yml", "compiled_path": "target/compiled/dbt_nhl_breakouts/models/utils/dates.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "utils"}, "created_at": 1652151875.579715, "compiled_sql": "with date_spine as (\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n     + \n    \n    p9.generated_number * power(2, 9)\n     + \n    \n    p10.generated_number * power(2, 10)\n     + \n    \n    p11.generated_number * power(2, 11)\n     + \n    \n    p12.generated_number * power(2, 12)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n     cross join \n    \n    p as p11\n     cross join \n    \n    p as p12\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 7305\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n        datetime_add(\n            cast( cast('2010-01-01' as date) as datetime),\n        interval row_number() over (order by 1) - 1 day\n        )\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= cast('2030-01-01' as date)\n\n)\n\nselect * from filtered\n\n\n)\n\n, date_periods as (\n    select\n        date_day\n        , format_datetime('%Y%m%d', date_day) as date_id\n        , extract(year from date_day) as year_number\n        , extract(quarter from date_day) as quarter_number\n        , extract(month from date_day) as month_number\n        , extract(week from date_day) as week_number\n        , format_datetime('%b', date_day) as month_name\n        , format_datetime('%a', date_day) as day_of_week_name\n    from date_spine\n)\n\n, dim_date as (\n    select\n        date_id\n        , date_day\n        , day_of_week_name\n        , quarter_number\n        , concat(\"Q\", quarter_number, ' ', year_number) as quarter_desc\n        , month_number\n        , month_name\n        , concat(\"M\", lpad(cast(month_number as string), 2, '0'), ' ', year_number) as month_desc\n        , week_number\n        , concat(\"Wk \", lpad(cast(week_number as string), 2, '0'), ' ', year_number) as week_desc\n    from date_periods\n)\n\nselect * from dim_date", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`nhl-breakouts`.`analytics_utils`.`dates`"}, "model.dbt_nhl_breakouts.f_player_season": {"raw_sql": "with\nplayer_season as (\n    select\n        bp.player_id\n        , player.full_name as player_full_name\n        , season.season_id\n        , season.regular_season_start_date\n        , season.regular_season_end_date\n        , season.number_of_games as full_season_games\n        , count(distinct bp.game_id) as boxscore_games\n        , sum(ifnull(bp.assists, 0)) as assists\n        , sum(ifnull(bp.goals, 0)) as goals\n        , sum(ifnull(bp.shots, 0)) as shots\n        , sum(ifnull(bp.hits, 0)) as hits\n        , sum(bp.faceoff_wins) as faceoff_wins\n        , sum(bp.faceoff_taken) as faceoff_taken\n        , sum(ifnull(bp.takeaways, 0)) as takeaways\n        , sum(ifnull(bp.giveaways, 0)) as giveaways\n        , sum(ifnull(bp.blocked, 0)) as blocked\n        , sum(ifnull(bp.plus_minus, 0)) as plus_minus\n        , sum(ifnull(bp.pim, 0)) as pim\n        , sum(cast(split(bp.time_on_ice, ':')[offset(0)] as int)) as time_on_ice_mins\n        , sum(cast(split(bp.time_on_ice, ':')[offset(1)] as int)) as time_on_ice_seconds\n        , sum(ifnull(bp.powerplay_goals, 0)) as powerplay_goals\n        , sum(ifnull(bp.powerplay_assists, 0)) as powerplay_assists\n        , sum(ifnull(bp.short_handed_goals, 0)) as short_handed_goals\n        , sum(ifnull(bp.short_handed_assists, 0)) as short_handed_assists\n        , sum(ifnull(bp.saves, 0)) as saves\n        , sum(ifnull(bp.powerplay_saves, 0)) as powerplay_saves\n        , sum(ifnull(bp.even_saves, 0)) as even_saves\n        , sum(ifnull(bp.short_handed_shots_against, 0)) as shorthanded_shots_against\n        , sum(ifnull(bp.even_shots_against, 0)) as even_shots_against\n        , sum(ifnull(bp.powerplay_shots_against, 0)) as powerplay_shots_against\n    --,sum(case when bp.decision = \"W\" then 1 else 0) as wins\n    --,sum(case when bp.decision = \"L\" then 1 else 0) as losses\n    from {{ ref('f_boxscore_player') }} as bp\n    left join {{ ref('d_schedule') }} as schedule on schedule.game_id = bp.game_id\n    left join {{ ref('d_seasons') }} as season on season.season_id = schedule.season_id\n    left join {{ ref('d_players') }} as player on player.player_id = bp.player_id\n    where 1 = 1\n        and schedule.game_type = 'R'\n        and bp.time_on_ice is not null\n    group by\n        bp.player_id\n        , player.full_name\n        , season.season_id\n        , season.number_of_games\n        , season.regular_season_start_date\n        , season.regular_season_end_date\n    order by\n        count(distinct bp.game_id) desc\n        , sum(bp.goals) desc\n)\n\n-- at the player-season level, get the number of missed shots and blocked shots by each shooter\n, player_shots as (\n    select\n        plays.player_id\n        , season.season_id\n        , max(plays.event_description) as example_eventdescription\n        , sum(case when plays.event_type = \"BLOCKED_SHOT\" and plays.player_role = \"SHOOTER\" then 1 else 0 end) as shots_blocked\n        , sum(case when plays.event_type = \"MISSED_SHOT\" and plays.player_role = \"SHOOTER\" then 1 else 0 end) as shots_missed\n        , sum(case when plays.event_type = \"SHOT\" and plays.player_role = \"SHOOTER\" then 1 else 0 end) as shots_saved\n        , sum(case when plays.event_type = \"GOAL\" and plays.player_role = \"SCORER\" then 1 else 0 end) as shots_scored\n        , sum(case when plays.last_goal_game_winning = 1 and plays.player_role = \"SCORER\" then 1 else 0 end) as goals_gamewinning\n        , sum(case when (plays.home_result_of_play = 'Chase goal' or plays.away_result_of_play = 'Chase goal') and plays.player_role = \"SCORER\" then 1 else 0 end) as goals_chasegoal\n        , sum(case when (plays.home_result_of_play = 'Tying goal scored' or plays.away_result_of_play = 'Tying goal scored') and plays.player_role = \"SCORER\" then 1 else 0 end) as goals_gametying\n        , sum(case when (plays.home_result_of_play = 'Go-ahead goal scored' or plays.away_result_of_play = 'Go-ahead goal scored') and plays.player_role = \"SCORER\" then 1 else 0 end) as goals_goahead\n        , sum(case when (plays.home_result_of_play = 'Buffer goal' or plays.away_result_of_play = 'Buffer goal') and plays.player_role = \"SCORER\" then 1 else 0 end) as goals_buffergoal\n    from {{ ref('f_plays') }} as plays\n    left join {{ ref('d_schedule') }} as schedule on schedule.game_id = plays.game_id\n    left join {{ ref('d_seasons') }} as season on season.season_id = schedule.season_id\n    where 1 = 1\n        and plays.player_role in (\"SHOOTER\", \"SCORER\")\n        and plays.event_type in (\"BLOCKED_SHOT\", \"MISSED_SHOT\", \"SHOT\", \"GOAL\")\n        and plays.play_period_type <> 'SHOOTOUT'\n    group by\n        plays.player_id\n        , season.season_id\n    order by\n        sum(case when plays.event_type = \"GOAL\" and plays.player_role = \"SCORER\" then 1 else 0 end) desc\n)\n\nselect\n    /* Primary Key */\n    {{ dbt_utils.surrogate_key(['player_season.player_id', 'player_season.season_id']) }} as player_season_id\n    /* Foreign Keys */\n    , player_season.player_id\n    , player_season.season_id\n    /* Season Properties */\n    , player_season.regular_season_start_date\n    , player_season.regular_season_end_date\n    , player_season.full_season_games\n    , player_season.boxscore_games\n    /* Player Properties */\n    , player_season.player_full_name\n    /* Player Stats */\n    -- Time on Ice\n    , (player_season.time_on_ice_mins * 60) + (player_season.time_on_ice_seconds) as time_on_ice_seconds\n    , round((player_season.time_on_ice_mins) + (player_season.time_on_ice_seconds / 60), 2) as time_on_ice_minutes\n    , round(((player_season.time_on_ice_mins) + (player_season.time_on_ice_seconds / 60)) / player_season.boxscore_games, 2) as avg_time_on_ice_mins\n    -- Goal-scoring skater events (Goals, Assists, Points)\n    , player_season.goals\n    , (player_season.goals / player_season.boxscore_games) as goals_pergame\n    , player_shots.goals_gamewinning\n    , player_shots.goals_chasegoal\n    , player_shots.goals_gametying\n    , player_shots.goals_goahead\n    , player_shots.goals_buffergoal\n    , player_season.assists\n    , player_season.goals + player_season.assists as points\n    , ((player_season.goals + player_season.assists) / player_season.boxscore_games) as points_pergame\n    -- Shooting skater events\n    , player_season.shots\n    , case when player_season.shots < 1 then 0 else round((player_season.goals / player_season.shots), 2) end as pcnt_shooting\n    , player_shots.shots_blocked\n    , player_shots.shots_missed\n    , player_shots.shots_saved\n    , player_shots.shots_scored\n    -- Other skater events\n    , player_season.faceoff_wins\n    , player_season.faceoff_taken\n    , case when player_season.faceoff_taken < 1 then 0 else round((player_season.faceoff_wins / player_season.faceoff_taken), 2) end as pcnt_faceoffwins\n    , player_season.hits\n    , player_season.takeaways\n    , player_season.giveaways\n    , player_season.blocked\n    , player_season.plus_minus\n    , player_season.pim\n    -- Special teams skater events\n    , player_season.powerplay_goals\n    , player_season.powerplay_assists\n    , player_season.short_handed_goals\n    , player_season.short_handed_assists\n    -- Goalie events\n    , player_season.saves\n    , player_season.powerplay_saves\n    , player_season.even_saves\n    , player_season.shorthanded_shots_against\n    , player_season.even_shots_against\n    , player_season.powerplay_shots_against\n--,player_season.wins\n--,player_season.losses\nfrom player_season\nleft join player_shots on player_season.player_id = player_shots.player_id and player_season.season_id = player_shots.season_id\norder by\n    player_season.goals desc", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["model.dbt_nhl_breakouts.f_boxscore_player", "model.dbt_nhl_breakouts.d_schedule", "model.dbt_nhl_breakouts.d_seasons", "model.dbt_nhl_breakouts.d_players", "model.dbt_nhl_breakouts.f_plays", "model.dbt_nhl_breakouts.d_schedule", "model.dbt_nhl_breakouts.d_seasons"]}, "config": {"enabled": true, "alias": null, "schema": "core", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "nhl-breakouts", "schema": "analytics_core", "fqn": ["dbt_nhl_breakouts", "analytics", "core", "f_player_season"], "unique_id": "model.dbt_nhl_breakouts.f_player_season", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "analytics/core/f_player_season.sql", "original_file_path": "models/analytics/core/f_player_season.sql", "name": "f_player_season", "alias": "f_player_season", "checksum": {"name": "sha256", "checksum": "267d18334c00aaba4de384db724d8762869b97338a81ea1519e111b295edf7c0"}, "tags": [], "refs": [["f_boxscore_player"], ["d_schedule"], ["d_seasons"], ["d_players"], ["f_plays"], ["d_schedule"], ["d_seasons"]], "sources": [], "description": "Model-ready, feature rich dataset at the player-season level of granularity", "columns": {"player_season_id": {"name": "player_season_id", "description": "Unique identifier for a player's summarized activity in an NHL season (player_id + season_id)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "player_id": {"name": "player_id", "description": "Foreign key that maps to an NHL player ID", "meta": {}, "data_type": null, "quote": null, "tags": []}, "season_id": {"name": "season_id", "description": "Foreign key that maps to an NHL season (e.g. \"20172018\")", "meta": {}, "data_type": null, "quote": null, "tags": []}, "regular_season_start_date": {"name": "regular_season_start_date", "description": "The first date of the NHL regular season (e.g. \"2017-10-04\")", "meta": {}, "data_type": null, "quote": null, "tags": []}, "regular_season_end_date": {"name": "regular_season_end_date", "description": "The last date of the NHL regular season (e.g. \"2018-04-08\")", "meta": {}, "data_type": null, "quote": null, "tags": []}, "full_season_games": {"name": "full_season_games", "description": "The number of regular season games scheduled (e.g. 56 games in 2020-21 season)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "boxscore_games": {"name": "boxscore_games", "description": "The number of regular season games played. It is possible that the number of games played is different to the number of games scheduled because of injuries, scratches, or trades", "meta": {}, "data_type": null, "quote": null, "tags": []}, "player_full_name": {"name": "player_full_name", "description": "Full name of the NHL player", "meta": {}, "data_type": null, "quote": null, "tags": []}, "time_on_ice_seconds": {"name": "time_on_ice_seconds", "description": "The number of total seconds played in the regular season", "meta": {}, "data_type": null, "quote": null, "tags": []}, "time_on_ice_minutes": {"name": "time_on_ice_minutes", "description": "The number of total minutes played in the regular season", "meta": {}, "data_type": null, "quote": null, "tags": []}, "avg_time_on_ice_mins": {"name": "avg_time_on_ice_mins", "description": "The number of minutes played in the regular seasons divided by the number of games played in the regular season (e.g. 20.5 = 20 minutes and 30 seconds)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "goals": {"name": "goals", "description": "The number of goals scored in the regular season", "meta": {}, "data_type": null, "quote": null, "tags": []}, "goals_pergame": {"name": "goals_pergame", "description": "The number of goals scored in the regular season divided by the number of games played", "meta": {}, "data_type": null, "quote": null, "tags": []}, "goals_gamewinning": {"name": "goals_gamewinning", "description": "The number of goals scored that ended up becoming the game winning goal (either last goal scored in regulation, or the OT winner)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "goals_chasegoal": {"name": "goals_chasegoal", "description": "The number of goals scored while behind by more than 1 goal", "meta": {}, "data_type": null, "quote": null, "tags": []}, "goals_gametying": {"name": "goals_gametying", "description": "The number of goals scored from behind that tied the game up", "meta": {}, "data_type": null, "quote": null, "tags": []}, "goals_goahead": {"name": "goals_goahead", "description": "The number of goals scored to break the tie and take the lead in the game", "meta": {}, "data_type": null, "quote": null, "tags": []}, "goals_buffergoal": {"name": "goals_buffergoal", "description": "The number of goals scored while the team was ahead by at least 1 goal", "meta": {}, "data_type": null, "quote": null, "tags": []}, "assists": {"name": "assists", "description": "The number of assists on goals made in the regular season", "meta": {}, "data_type": null, "quote": null, "tags": []}, "points": {"name": "points", "description": "The number of points scored in the regular season", "meta": {}, "data_type": null, "quote": null, "tags": []}, "points_pergame": {"name": "points_pergame", "description": "The number of points scored in the regular season divided by the number of games played", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shots": {"name": "shots", "description": "Number of shots taken", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pcnt_shooting": {"name": "pcnt_shooting", "description": "The percent of shots on goal that were goals (e.g. 10% shooting means 1 out of 10 shots on net were goals)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shots_blocked": {"name": "shots_blocked", "description": "The number of shots taken that were blocked (e.g. shot taken that hits an opposing team defencemen)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shots_missed": {"name": "shots_missed", "description": "The number of shots taken that were missed (e.g. shot taken that missees the net)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shots_saved": {"name": "shots_saved", "description": "The number of shots taken that were on target but were saved", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shots_scored": {"name": "shots_scored", "description": "The number of shots taken that converted as goals", "meta": {}, "data_type": null, "quote": null, "tags": []}, "faceoff_wins": {"name": "faceoff_wins", "description": "Number of faceoffs won", "meta": {}, "data_type": null, "quote": null, "tags": []}, "faceoff_taken": {"name": "faceoff_taken", "description": "Number of faceoffs taken", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pcnt_faceoffwins": {"name": "pcnt_faceoffwins", "description": "The percent of faceoffs taken that were won (e.g. 0.50 = 50% faceoffs won)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hits": {"name": "hits", "description": "Number of hits made", "meta": {}, "data_type": null, "quote": null, "tags": []}, "takeaways": {"name": "takeaways", "description": "Number of takeaways made", "meta": {}, "data_type": null, "quote": null, "tags": []}, "giveaways": {"name": "giveaways", "description": "Number of giveaways faulted for", "meta": {}, "data_type": null, "quote": null, "tags": []}, "blocked": {"name": "blocked", "description": "Number of blocked shots", "meta": {}, "data_type": null, "quote": null, "tags": []}, "plus_minus": {"name": "plus_minus", "description": "Total plus minus in the game - plus for every goal scored while on the ice for, minus for every goal allowed while on the ice", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pim": {"name": "pim", "description": "Penalties in minutes:seconds", "meta": {}, "data_type": null, "quote": null, "tags": []}, "powerplay_goals": {"name": "powerplay_goals", "description": "Number of powerplay goals scored", "meta": {}, "data_type": null, "quote": null, "tags": []}, "powerplay_assists": {"name": "powerplay_assists", "description": "Number of powerplay assists (primary & secondary)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "short_handed_goals": {"name": "short_handed_goals", "description": "Number of short-handed goals scored", "meta": {}, "data_type": null, "quote": null, "tags": []}, "short_handed_assists": {"name": "short_handed_assists", "description": "Number of short-handed assists made", "meta": {}, "data_type": null, "quote": null, "tags": []}, "saves": {"name": "saves", "description": "Number of saves made", "meta": {}, "data_type": null, "quote": null, "tags": []}, "powerplay_saves": {"name": "powerplay_saves", "description": "Number of saves made on the powerplay", "meta": {}, "data_type": null, "quote": null, "tags": []}, "even_saves": {"name": "even_saves", "description": "Number of saves made at event strength", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shorthanded_shots_against": {"name": "shorthanded_shots_against", "description": "Number of saves made on the penalty kill / short-handed", "meta": {}, "data_type": null, "quote": null, "tags": []}, "even_shots_against": {"name": "even_shots_against", "description": "Number of shots against at event strength", "meta": {}, "data_type": null, "quote": null, "tags": []}, "powerplay_shots_against": {"name": "powerplay_shots_against", "description": "Number of shots against on the powerplay / man advantage", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dbt_nhl_breakouts://models/analytics/core/f_player_season.yml", "compiled_path": "target/compiled/dbt_nhl_breakouts/models/analytics/core/f_player_season.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "core"}, "created_at": 1652151875.5886562, "compiled_sql": "with\nplayer_season as (\n    select\n        bp.player_id\n        , player.full_name as player_full_name\n        , season.season_id\n        , season.regular_season_start_date\n        , season.regular_season_end_date\n        , season.number_of_games as full_season_games\n        , count(distinct bp.game_id) as boxscore_games\n        , sum(ifnull(bp.assists, 0)) as assists\n        , sum(ifnull(bp.goals, 0)) as goals\n        , sum(ifnull(bp.shots, 0)) as shots\n        , sum(ifnull(bp.hits, 0)) as hits\n        , sum(bp.faceoff_wins) as faceoff_wins\n        , sum(bp.faceoff_taken) as faceoff_taken\n        , sum(ifnull(bp.takeaways, 0)) as takeaways\n        , sum(ifnull(bp.giveaways, 0)) as giveaways\n        , sum(ifnull(bp.blocked, 0)) as blocked\n        , sum(ifnull(bp.plus_minus, 0)) as plus_minus\n        , sum(ifnull(bp.pim, 0)) as pim\n        , sum(cast(split(bp.time_on_ice, ':')[offset(0)] as int)) as time_on_ice_mins\n        , sum(cast(split(bp.time_on_ice, ':')[offset(1)] as int)) as time_on_ice_seconds\n        , sum(ifnull(bp.powerplay_goals, 0)) as powerplay_goals\n        , sum(ifnull(bp.powerplay_assists, 0)) as powerplay_assists\n        , sum(ifnull(bp.short_handed_goals, 0)) as short_handed_goals\n        , sum(ifnull(bp.short_handed_assists, 0)) as short_handed_assists\n        , sum(ifnull(bp.saves, 0)) as saves\n        , sum(ifnull(bp.powerplay_saves, 0)) as powerplay_saves\n        , sum(ifnull(bp.even_saves, 0)) as even_saves\n        , sum(ifnull(bp.short_handed_shots_against, 0)) as shorthanded_shots_against\n        , sum(ifnull(bp.even_shots_against, 0)) as even_shots_against\n        , sum(ifnull(bp.powerplay_shots_against, 0)) as powerplay_shots_against\n    --,sum(case when bp.decision = \"W\" then 1 else 0) as wins\n    --,sum(case when bp.decision = \"L\" then 1 else 0) as losses\n    from `nhl-breakouts`.`analytics_intermediate`.`f_boxscore_player` as bp\n    left join `nhl-breakouts`.`analytics_intermediate`.`d_schedule` as schedule on schedule.game_id = bp.game_id\n    left join `nhl-breakouts`.`analytics_intermediate`.`d_seasons` as season on season.season_id = schedule.season_id\n    left join `nhl-breakouts`.`analytics_intermediate`.`d_players` as player on player.player_id = bp.player_id\n    where 1 = 1\n        and schedule.game_type = 'R'\n        and bp.time_on_ice is not null\n    group by\n        bp.player_id\n        , player.full_name\n        , season.season_id\n        , season.number_of_games\n        , season.regular_season_start_date\n        , season.regular_season_end_date\n    order by\n        count(distinct bp.game_id) desc\n        , sum(bp.goals) desc\n)\n\n-- at the player-season level, get the number of missed shots and blocked shots by each shooter\n, player_shots as (\n    select\n        plays.player_id\n        , season.season_id\n        , max(plays.event_description) as example_eventdescription\n        , sum(case when plays.event_type = \"BLOCKED_SHOT\" and plays.player_role = \"SHOOTER\" then 1 else 0 end) as shots_blocked\n        , sum(case when plays.event_type = \"MISSED_SHOT\" and plays.player_role = \"SHOOTER\" then 1 else 0 end) as shots_missed\n        , sum(case when plays.event_type = \"SHOT\" and plays.player_role = \"SHOOTER\" then 1 else 0 end) as shots_saved\n        , sum(case when plays.event_type = \"GOAL\" and plays.player_role = \"SCORER\" then 1 else 0 end) as shots_scored\n        , sum(case when plays.last_goal_game_winning = 1 and plays.player_role = \"SCORER\" then 1 else 0 end) as goals_gamewinning\n        , sum(case when (plays.home_result_of_play = 'Chase goal' or plays.away_result_of_play = 'Chase goal') and plays.player_role = \"SCORER\" then 1 else 0 end) as goals_chasegoal\n        , sum(case when (plays.home_result_of_play = 'Tying goal scored' or plays.away_result_of_play = 'Tying goal scored') and plays.player_role = \"SCORER\" then 1 else 0 end) as goals_gametying\n        , sum(case when (plays.home_result_of_play = 'Go-ahead goal scored' or plays.away_result_of_play = 'Go-ahead goal scored') and plays.player_role = \"SCORER\" then 1 else 0 end) as goals_goahead\n        , sum(case when (plays.home_result_of_play = 'Buffer goal' or plays.away_result_of_play = 'Buffer goal') and plays.player_role = \"SCORER\" then 1 else 0 end) as goals_buffergoal\n    from `nhl-breakouts`.`analytics_intermediate`.`f_plays` as plays\n    left join `nhl-breakouts`.`analytics_intermediate`.`d_schedule` as schedule on schedule.game_id = plays.game_id\n    left join `nhl-breakouts`.`analytics_intermediate`.`d_seasons` as season on season.season_id = schedule.season_id\n    where 1 = 1\n        and plays.player_role in (\"SHOOTER\", \"SCORER\")\n        and plays.event_type in (\"BLOCKED_SHOT\", \"MISSED_SHOT\", \"SHOT\", \"GOAL\")\n        and plays.play_period_type <> 'SHOOTOUT'\n    group by\n        plays.player_id\n        , season.season_id\n    order by\n        sum(case when plays.event_type = \"GOAL\" and plays.player_role = \"SCORER\" then 1 else 0 end) desc\n)\n\nselect\n    /* Primary Key */\n    to_hex(md5(cast(coalesce(cast(player_season.player_id as \n    string\n), '') || '-' || coalesce(cast(player_season.season_id as \n    string\n), '') as \n    string\n))) as player_season_id\n    /* Foreign Keys */\n    , player_season.player_id\n    , player_season.season_id\n    /* Season Properties */\n    , player_season.regular_season_start_date\n    , player_season.regular_season_end_date\n    , player_season.full_season_games\n    , player_season.boxscore_games\n    /* Player Properties */\n    , player_season.player_full_name\n    /* Player Stats */\n    -- Time on Ice\n    , (player_season.time_on_ice_mins * 60) + (player_season.time_on_ice_seconds) as time_on_ice_seconds\n    , round((player_season.time_on_ice_mins) + (player_season.time_on_ice_seconds / 60), 2) as time_on_ice_minutes\n    , round(((player_season.time_on_ice_mins) + (player_season.time_on_ice_seconds / 60)) / player_season.boxscore_games, 2) as avg_time_on_ice_mins\n    -- Goal-scoring skater events (Goals, Assists, Points)\n    , player_season.goals\n    , (player_season.goals / player_season.boxscore_games) as goals_pergame\n    , player_shots.goals_gamewinning\n    , player_shots.goals_chasegoal\n    , player_shots.goals_gametying\n    , player_shots.goals_goahead\n    , player_shots.goals_buffergoal\n    , player_season.assists\n    , player_season.goals + player_season.assists as points\n    , ((player_season.goals + player_season.assists) / player_season.boxscore_games) as points_pergame\n    -- Shooting skater events\n    , player_season.shots\n    , case when player_season.shots < 1 then 0 else round((player_season.goals / player_season.shots), 2) end as pcnt_shooting\n    , player_shots.shots_blocked\n    , player_shots.shots_missed\n    , player_shots.shots_saved\n    , player_shots.shots_scored\n    -- Other skater events\n    , player_season.faceoff_wins\n    , player_season.faceoff_taken\n    , case when player_season.faceoff_taken < 1 then 0 else round((player_season.faceoff_wins / player_season.faceoff_taken), 2) end as pcnt_faceoffwins\n    , player_season.hits\n    , player_season.takeaways\n    , player_season.giveaways\n    , player_season.blocked\n    , player_season.plus_minus\n    , player_season.pim\n    -- Special teams skater events\n    , player_season.powerplay_goals\n    , player_season.powerplay_assists\n    , player_season.short_handed_goals\n    , player_season.short_handed_assists\n    -- Goalie events\n    , player_season.saves\n    , player_season.powerplay_saves\n    , player_season.even_saves\n    , player_season.shorthanded_shots_against\n    , player_season.even_shots_against\n    , player_season.powerplay_shots_against\n--,player_season.wins\n--,player_season.losses\nfrom player_season\nleft join player_shots on player_season.player_id = player_shots.player_id and player_season.season_id = player_shots.season_id\norder by\n    player_season.goals desc", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`nhl-breakouts`.`analytics_core`.`f_player_season`"}, "model.dbt_nhl_breakouts.f_plays": {"raw_sql": "select\n    /* Primary Key */\n    stg_nhl__live_plays_id as play_id\n\n    /* Identifiers */\n    , game_id\n    , event_idx\n    , event_id\n    , player_id\n    , team_id\n\n    /* Properties */\n    , player_role\n    , player_role_team\n    , event_type\n    , event_code\n    , event_description\n    , play_x_coordinate\n    , play_y_coordinate\n    , play_period\n    , play_period_type\n    , play_period_time_elapsed\n    , play_period_time_remaining\n    , play_period_seconds_elapsed\n    , play_period_seconds_remaining\n    , play_total_seconds_elapsed\n    , play_total_seconds_remaining\n    , play_time\n    , shots_away\n    , shots_home\n    , hits_away\n    , hits_home\n    , faceoffs_away\n    , faceoffs_home\n    , takeaways_away\n    , takeaways_home\n    , giveaways_away\n    , giveaways_home\n    , missedshots_away\n    , missedshots_home\n    , blockedshots_away\n    , blockedshots_home\n    , penalties_away\n    , penalties_home\n    , first_goal_scored\n    , last_goal_scored\n    , goals_away\n    , goals_home\n    , goal_difference_current\n    , winning_team_current\n    , game_state_current\n    , home_result_of_play\n    , away_result_of_play\n    , last_goal_game_winning\n    , last_goal_game_tying\n    , goals_home_lag\n    , goals_away_lag\n    , goal_difference_lag\n    , winning_team_lag\n    , game_state_lag\nfrom {{ ref('stg_nhl__live_plays') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dbt_nhl_breakouts.stg_nhl__live_plays"]}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "nhl-breakouts", "schema": "analytics_intermediate", "fqn": ["dbt_nhl_breakouts", "analytics", "intermediate", "f_plays"], "unique_id": "model.dbt_nhl_breakouts.f_plays", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "analytics/intermediate/f_plays.sql", "original_file_path": "models/analytics/intermediate/f_plays.sql", "name": "f_plays", "alias": "f_plays", "checksum": {"name": "sha256", "checksum": "bb7ec9ed49758edf3fe94697204aab29f778a2a915069ce41a91a21dc069d41f"}, "tags": [], "refs": [["stg_nhl__live_plays"]], "sources": [], "description": "Staged NHL event level data from the NHL-API (player-play level)", "columns": {"play_id": {"name": "play_id", "description": "Unique identifier for a player's event-level activity in an NHL game (hashed representation of game_id + team_id + player_id + event_id)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "game_id": {"name": "game_id", "description": "Foreign key that maps to an NHL game ID\n##### More about game_id\nThe first 4 digits identify the season of the game (ie. 2017 for the 2017-2018 season). The next 2 digits give the type of game, where 01 = preseason, 02 = regular season, 03 = playoffs, 04 = all-star. The final 4 digits identify the specific game number.\n\nFor regular season and preseason games, this ranges from 0001 to the number of games played. (1271 for seasons with 31 teams (2017 and onwards) and 1230 for seasons with 30 teams).\n\nFor playoff games, the 2nd digit of the specific number gives the round of the playoffs, the 3rd digit specifies the matchup, and the 4th digit specifies the game (out of 7).\n\n[Credit to Drew Hynes' NHL API docs](https://gitlab.com/dword4/nhlapi/-/blob/master/stats-api.md#game-ids)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_idx": {"name": "event_idx", "description": "Foreign key that maps to the sequence of the event relative to that game, in ascending order (e.g. 1 = first event, 2 - second event)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_id": {"name": "event_id", "description": "Foreign key that maps to a distinct event ID", "meta": {}, "data_type": null, "quote": null, "tags": []}, "player_id": {"name": "player_id", "description": "Foreign key that maps to an NHL player ID", "meta": {}, "data_type": null, "quote": null, "tags": []}, "team_id": {"name": "team_id", "description": "Foreign key that maps to an NHL team ID", "meta": {}, "data_type": null, "quote": null, "tags": []}, "player_role": {"name": "player_role", "description": "The role of the player in context to the event (e.g. Hitter, Hitee, Shooter, Winner, Loser, etc.)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "player_role_team": {"name": "player_role_team", "description": "The home / away status of the player's team", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_type": {"name": "event_type", "description": "Short description of the event type", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_code": {"name": "event_code", "description": "Event code that is unique at the game-event level (e.g. PHI8, PHI10)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_description": {"name": "event_description", "description": "Long description of the event (repeated for all the player's involved in the event)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "play_x_coordinate": {"name": "play_x_coordinate", "description": "The x-coordinate of where the event took place on the ice", "meta": {}, "data_type": null, "quote": null, "tags": []}, "play_y_coordinate": {"name": "play_y_coordinate", "description": "The y-coordinate of where the event took place on the ice", "meta": {}, "data_type": null, "quote": null, "tags": []}, "play_period": {"name": "play_period", "description": "The period in which the event occured (e.g. 3)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "play_period_type": {"name": "play_period_type", "description": "The type of period in which the event occured (e.g. Regular)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "play_period_time_elapsed": {"name": "play_period_time_elapsed", "description": "The time in minutes elapsed in the period", "meta": {}, "data_type": null, "quote": null, "tags": []}, "play_period_time_remaining": {"name": "play_period_time_remaining", "description": "The time in minutes remaining in the period", "meta": {}, "data_type": null, "quote": null, "tags": []}, "play_period_seconds_elapsed": {"name": "play_period_seconds_elapsed", "description": "The time in seconds elapsed in the period", "meta": {}, "data_type": null, "quote": null, "tags": []}, "play_period_seconds_remaining": {"name": "play_period_seconds_remaining", "description": "The time in seconds remaining the period", "meta": {}, "data_type": null, "quote": null, "tags": []}, "play_total_seconds_elapsed": {"name": "play_total_seconds_elapsed", "description": "The time in seconds elapsed in the entire game", "meta": {}, "data_type": null, "quote": null, "tags": []}, "play_total_seconds_remaining": {"name": "play_total_seconds_remaining", "description": "The time in seconds remaining in the entire game", "meta": {}, "data_type": null, "quote": null, "tags": []}, "play_time": {"name": "play_time", "description": "A timestamp of the event (e.g. 2021-01-13T22:32:45Z)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shots_away": {"name": "shots_away", "description": "Cumulative away team shots taken in the game at the point in time where the event occured", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shots_home": {"name": "shots_home", "description": "Cumulative ome team shots taken in the game at the point in time where the event occured", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hits_away": {"name": "hits_away", "description": "Cumulative away team hits made in the game at the point in time where the event occured", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hits_home": {"name": "hits_home", "description": "Cumulative home team hits made in the game at the point in time where the event occured", "meta": {}, "data_type": null, "quote": null, "tags": []}, "faceoffs_away": {"name": "faceoffs_away", "description": "Cumulative away team faceoffs won in the game at the point in time where the event occured", "meta": {}, "data_type": null, "quote": null, "tags": []}, "faceoffs_home": {"name": "faceoffs_home", "description": "Cumulative home team faceoffs won in the game at the point in time where the event occured", "meta": {}, "data_type": null, "quote": null, "tags": []}, "takeaways_away": {"name": "takeaways_away", "description": "Cumulative away team takeaways forced in the game at the point in time where the event occured", "meta": {}, "data_type": null, "quote": null, "tags": []}, "takeaways_home": {"name": "takeaways_home", "description": "Cumulative home team takeaways forced in the game at the point in time where the event occured", "meta": {}, "data_type": null, "quote": null, "tags": []}, "giveaways_away": {"name": "giveaways_away", "description": "Cumulative away team giveaways made in the game at the point in time where the event occured", "meta": {}, "data_type": null, "quote": null, "tags": []}, "giveaways_home": {"name": "giveaways_home", "description": "Cumulative home team giveaways made in the game at the point in time where the event occured", "meta": {}, "data_type": null, "quote": null, "tags": []}, "missedshots_away": {"name": "missedshots_away", "description": "Cumulative away team missed shots taken in the game at the point in time where the event occured", "meta": {}, "data_type": null, "quote": null, "tags": []}, "missedshots_home": {"name": "missedshots_home", "description": "Cumulative home team missed shots taken in the game at the point in time where the event occured", "meta": {}, "data_type": null, "quote": null, "tags": []}, "blockedshots_away": {"name": "blockedshots_away", "description": "Cumulative away team blocked shots made in the game at the point in time where the event occured", "meta": {}, "data_type": null, "quote": null, "tags": []}, "blockedshots_home": {"name": "blockedshots_home", "description": "Cumulative home team blocked shots made in the game at the point in time where the event occured", "meta": {}, "data_type": null, "quote": null, "tags": []}, "penalties_away": {"name": "penalties_away", "description": "Cumulative away team penalties in minutes taken in the game at the point in time where the event occured", "meta": {}, "data_type": null, "quote": null, "tags": []}, "penalties_home": {"name": "penalties_home", "description": "Cumulative home team penalties in minutes taken in the game at the point in time where the event occured", "meta": {}, "data_type": null, "quote": null, "tags": []}, "first_goal_scored": {"name": "first_goal_scored", "description": "Whether or not the event in question was the first goal of the game (1 or 0)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_goal_scored": {"name": "last_goal_scored", "description": "Whether or not the event in question was the last goal of the game (1 or 0)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "goals_away": {"name": "goals_away", "description": "Cumulative away team goals scored in the game at the point in time where the event occured", "meta": {}, "data_type": null, "quote": null, "tags": []}, "goals_home": {"name": "goals_home", "description": "Cumulative home team goals scored in the game at the point in time where the event occured", "meta": {}, "data_type": null, "quote": null, "tags": []}, "goal_difference_current": {"name": "goal_difference_current", "description": "The absolute value difference in goals between the home and away teams in the game at the point in time where the event occured", "meta": {}, "data_type": null, "quote": null, "tags": []}, "winning_team_current": {"name": "winning_team_current", "description": "The name of the team_type (e.g. \"Tie\", \"Home\" or \"Away\") for the team currently winning", "meta": {}, "data_type": null, "quote": null, "tags": []}, "game_state_current": {"name": "game_state_current", "description": "The current state of scoreboard (e.g. \"Tie\", \"Close\" (1 goal difference), \"Buffer\" (2 goal difference), \"Comfortable\" (3 goal difference), \"Blowout\" (4 goal difference))", "meta": {}, "data_type": null, "quote": null, "tags": []}, "home_result_of_play": {"name": "home_result_of_play", "description": "Description of the result of the current event / play for the home team (e.g. \"No change\", \"Chase goal\", \"Tying goal scored\", \"Tying goal allowed\", \"Go-ahead goal scored, Buffer goal\", \"Go-ahead goal allowed\")", "meta": {}, "data_type": null, "quote": null, "tags": []}, "away_result_of_play": {"name": "away_result_of_play", "description": "Description of the result of the current event / play for the away team (e.g. \"No change\", \"Chase goal\", \"Tying goal scored\", \"Tying goal allowed\", \"Go-ahead goal scored, Buffer goal\", \"Go-ahead goal allowed\")", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_goal_game_winning": {"name": "last_goal_game_winning", "description": "Whether or not the the current goal was the last goal and also the game winning goal (1 or 0)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_goal_game_tying": {"name": "last_goal_game_tying", "description": "Whether or not the the current goal was the last goal and also the game tying goal (1 or 0)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "goals_home_lag": {"name": "goals_home_lag", "description": "Cumulative home team goals scored in the game 1 play before the current play (e.g. if event prior to this event was a home team goal, and the current play was a hit, then the value for this column would be 1)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "goals_away_lag": {"name": "goals_away_lag", "description": "Cumulative away team goals scored in the game 1 play before the current play (e.g. if event prior to this event was a away team goal, and the current play was a hit, then the value for this column would be 1)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "goal_difference_lag": {"name": "goal_difference_lag", "description": "The absolute value difference in goals between the home and away teams in the game using the home and away team lagged goals scored", "meta": {}, "data_type": null, "quote": null, "tags": []}, "winning_team_lag": {"name": "winning_team_lag", "description": "Determines the previously winning team (e.g. \"Tie\", \"Home\" or \"Away\") before the play in question", "meta": {}, "data_type": null, "quote": null, "tags": []}, "game_state_lag": {"name": "game_state_lag", "description": "The previous state of scoreboard prior to the play in question (e.g. \"Tie\", \"Close\" (1 goal difference), \"Buffer\" (2 goal difference), \"Comfortable\" (3 goal difference), \"Blowout\" (4 goal difference))", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dbt_nhl_breakouts://models/analytics/intermediate/f_plays.yml", "compiled_path": "target/compiled/dbt_nhl_breakouts/models/analytics/intermediate/f_plays.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "intermediate"}, "created_at": 1652151875.6200929, "compiled_sql": "select\n    /* Primary Key */\n    stg_nhl__live_plays_id as play_id\n\n    /* Identifiers */\n    , game_id\n    , event_idx\n    , event_id\n    , player_id\n    , team_id\n\n    /* Properties */\n    , player_role\n    , player_role_team\n    , event_type\n    , event_code\n    , event_description\n    , play_x_coordinate\n    , play_y_coordinate\n    , play_period\n    , play_period_type\n    , play_period_time_elapsed\n    , play_period_time_remaining\n    , play_period_seconds_elapsed\n    , play_period_seconds_remaining\n    , play_total_seconds_elapsed\n    , play_total_seconds_remaining\n    , play_time\n    , shots_away\n    , shots_home\n    , hits_away\n    , hits_home\n    , faceoffs_away\n    , faceoffs_home\n    , takeaways_away\n    , takeaways_home\n    , giveaways_away\n    , giveaways_home\n    , missedshots_away\n    , missedshots_home\n    , blockedshots_away\n    , blockedshots_home\n    , penalties_away\n    , penalties_home\n    , first_goal_scored\n    , last_goal_scored\n    , goals_away\n    , goals_home\n    , goal_difference_current\n    , winning_team_current\n    , game_state_current\n    , home_result_of_play\n    , away_result_of_play\n    , last_goal_game_winning\n    , last_goal_game_tying\n    , goals_home_lag\n    , goals_away_lag\n    , goal_difference_lag\n    , winning_team_lag\n    , game_state_lag\nfrom `nhl-breakouts`.`analytics_staging`.`stg_nhl__live_plays`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`nhl-breakouts`.`analytics_intermediate`.`f_plays`"}, "model.dbt_nhl_breakouts.d_date": {"raw_sql": "select\n    /* Primary Key */\n    date_id\n\n    /* Properties */\n    , date_day\n    , day_of_week_name\n    , quarter_number\n    , quarter_desc\n    , month_number\n    , month_name\n    , month_desc\n    , week_number\n    , week_desc\nfrom {{ ref('dates') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dbt_nhl_breakouts.dates"]}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "nhl-breakouts", "schema": "analytics_intermediate", "fqn": ["dbt_nhl_breakouts", "analytics", "intermediate", "d_date"], "unique_id": "model.dbt_nhl_breakouts.d_date", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "analytics/intermediate/d_date.sql", "original_file_path": "models/analytics/intermediate/d_date.sql", "name": "d_date", "alias": "d_date", "checksum": {"name": "sha256", "checksum": "22c0a7a40727596f54bf0dee59cec1a1b5ddb592821e1f984702d9bad450186e"}, "tags": [], "refs": [["dates"]], "sources": [], "description": "Date spine containing calendar dates from 2010-01-01 through 2030-01-01", "columns": {"date_id": {"name": "date_id", "description": "Unique identifier for the date in YYYYMMDD format", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "Calendar date in YYYY-MM-DD format", "meta": {}, "data_type": null, "quote": null, "tags": []}, "day_of_week_name": {"name": "day_of_week_name", "description": "Three letter name for the day of week (i.e. Mon, Tue, Wed, Thu, Fri, Sat, Sun)\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "quarter_number": {"name": "quarter_number", "description": "Quarter of the year number ranging from 1 (Q1) to 4 (Q4)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "quarter_desc": {"name": "quarter_desc", "description": "Description of the quarter (i.e. Q1 2022 for Quarter 1 2022)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "month_number": {"name": "month_number", "description": "Month of the year number ranging from 1 (January) to 12 (December)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "month_name": {"name": "month_name", "description": "Abbreviated name of the month (i.e. Jan, Feb, Mar)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "month_desc": {"name": "month_desc", "description": "Description of the month (i.e. M01 2022 for January 2022)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "week_number": {"name": "week_number", "description": "Week of the year number ranging from 1 to 52", "meta": {}, "data_type": null, "quote": null, "tags": []}, "week_desc": {"name": "week_desc", "description": "Description of the week (i.e. W52 2022 for the last calendar week of 2022)", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dbt_nhl_breakouts://models/analytics/intermediate/d_date.yml", "compiled_path": "target/compiled/dbt_nhl_breakouts/models/analytics/intermediate/d_date.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "intermediate"}, "created_at": 1652151875.6275682, "compiled_sql": "select\n    /* Primary Key */\n    date_id\n\n    /* Properties */\n    , date_day\n    , day_of_week_name\n    , quarter_number\n    , quarter_desc\n    , month_number\n    , month_name\n    , month_desc\n    , week_number\n    , week_desc\nfrom `nhl-breakouts`.`analytics_utils`.`dates`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`nhl-breakouts`.`analytics_intermediate`.`d_date`"}, "model.dbt_nhl_breakouts.f_boxscore_team": {"raw_sql": "select\n    /* Primary Key */\n    stg_nhl__boxscore_team_id as boxscore_team_id\n\n    /* Identifiers */\n    , game_id\n    , team_id\n\n    /* Properties */\n    , team_type\n    -- team stats\n    , team_name\n    , team_winner\n    , team_goals\n    , team_goal_differential\n    , team_pim\n    , team_shots\n    , team_powerplay_goals\n    , team_powerplay_opportunities\n    , team_faceoff_percentage\n    , team_blocked\n    , team_takeaways\n    , team_giveaways\n    , team_hits\nfrom {{ ref('stg_nhl__boxscore_team') }}\norder by game_id desc", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dbt_nhl_breakouts.stg_nhl__boxscore_team"]}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "nhl-breakouts", "schema": "analytics_intermediate", "fqn": ["dbt_nhl_breakouts", "analytics", "intermediate", "f_boxscore_team"], "unique_id": "model.dbt_nhl_breakouts.f_boxscore_team", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "analytics/intermediate/f_boxscore_team.sql", "original_file_path": "models/analytics/intermediate/f_boxscore_team.sql", "name": "f_boxscore_team", "alias": "f_boxscore_team", "checksum": {"name": "sha256", "checksum": "30a534bf49a71083b96750784035239ef6efad8e62bb6a33873a079d73c3f9e6"}, "tags": [], "refs": [["stg_nhl__boxscore_team"]], "sources": [], "description": "Staged NHL boxscore game data from the NHL-API (game-team level)", "columns": {"boxscore_team_id": {"name": "boxscore_team_id", "description": "Unique identifier for an team's involvement in an NHL game (hashed representation of game_id + team_id)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "game_id": {"name": "game_id", "description": "Foreign key that maps to the NHL game ID - each game should have 2 rows in this table for each team involved in the game\n##### More about game_id\nThe first 4 digits identify the season of the game (ie. 2017 for the 2017-2018 season). The next 2 digits give the type of game, where 01 = preseason, 02 = regular season, 03 = playoffs, 04 = all-star. The final 4 digits identify the specific game number.\n\nFor regular season and preseason games, this ranges from 0001 to the number of games played. (1271 for seasons with 31 teams (2017 and onwards) and 1230 for seasons with 30 teams).\n\nFor playoff games, the 2nd digit of the specific number gives the round of the playoffs, the 3rd digit specifies the matchup, and the 4th digit specifies the game (out of 7).\n\n[Credit to Drew Hynes' NHL API docs](https://gitlab.com/dword4/nhlapi/-/blob/master/stats-api.md#game-ids)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "team_id": {"name": "team_id", "description": "Foreign key that maps to the NHL team ID - each row represents a team playing in a game", "meta": {}, "data_type": null, "quote": null, "tags": []}, "team_type": {"name": "team_type", "description": "Describes the Away / Home status for each team playing in a game", "meta": {}, "data_type": null, "quote": null, "tags": []}, "team_name": {"name": "team_name", "description": "Name of the NHL team", "meta": {}, "data_type": null, "quote": null, "tags": []}, "team_winner": {"name": "team_winner", "description": "True of the team scored more than the opposing team, False if the team scored less than the opposing team, NULL for Shootout results (will be fixed by linescore data, boxscore does not tell us the result of a shootout)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "team_goals": {"name": "team_goals", "description": "Number of goals scored by the team", "meta": {}, "data_type": null, "quote": null, "tags": []}, "team_goal_differential": {"name": "team_goal_differential", "description": "The difference between the number of goals scored, and the number of goals allowed by the team", "meta": {}, "data_type": null, "quote": null, "tags": []}, "team_pim": {"name": "team_pim", "description": "The number of penalties in minutes:seconds against the team", "meta": {}, "data_type": null, "quote": null, "tags": []}, "team_shots": {"name": "team_shots", "description": "The number of shots (unsure if this is on goal or attempts) for the team", "meta": {}, "data_type": null, "quote": null, "tags": []}, "team_powerplay_goals": {"name": "team_powerplay_goals", "description": "The number of powerplay goals for the team", "meta": {}, "data_type": null, "quote": null, "tags": []}, "team_powerplay_opportunities": {"name": "team_powerplay_opportunities", "description": "The number of powerplay opportunities for the team", "meta": {}, "data_type": null, "quote": null, "tags": []}, "team_faceoff_percentage": {"name": "team_faceoff_percentage", "description": "The percentage of faceoffs won by the team (e.g. 100 * (faceoff wins / faceoff attempts))", "meta": {}, "data_type": null, "quote": null, "tags": []}, "team_blocked": {"name": "team_blocked", "description": "The number of blocked shots for the team", "meta": {}, "data_type": null, "quote": null, "tags": []}, "team_takeaways": {"name": "team_takeaways", "description": "The number of takeaways for the team", "meta": {}, "data_type": null, "quote": null, "tags": []}, "team_giveaways": {"name": "team_giveaways", "description": "The number of giveaways for the team", "meta": {}, "data_type": null, "quote": null, "tags": []}, "team_hits": {"name": "team_hits", "description": "The number of hits for the team", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dbt_nhl_breakouts://models/analytics/intermediate/f_boxscore_team.yml", "compiled_path": "target/compiled/dbt_nhl_breakouts/models/analytics/intermediate/f_boxscore_team.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "intermediate"}, "created_at": 1652151875.593235, "compiled_sql": "select\n    /* Primary Key */\n    stg_nhl__boxscore_team_id as boxscore_team_id\n\n    /* Identifiers */\n    , game_id\n    , team_id\n\n    /* Properties */\n    , team_type\n    -- team stats\n    , team_name\n    , team_winner\n    , team_goals\n    , team_goal_differential\n    , team_pim\n    , team_shots\n    , team_powerplay_goals\n    , team_powerplay_opportunities\n    , team_faceoff_percentage\n    , team_blocked\n    , team_takeaways\n    , team_giveaways\n    , team_hits\nfrom `nhl-breakouts`.`analytics_staging`.`stg_nhl__boxscore_team`\norder by game_id desc", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`nhl-breakouts`.`analytics_intermediate`.`f_boxscore_team`"}, "model.dbt_nhl_breakouts.d_schedule": {"raw_sql": "select\n    /* Primary Key */\n    stg_nhl__schedule_id as schedule_id\n\n    /* Identifiers */\n    , game_id\n    , season_id\n    , away_team_id\n    , home_team_id\n    , venue_id\n\n    /* Properties */\n    , game_number\n    , url\n    , game_type\n    , game_date\n    , abstract_game_state\n    , coded_game_state\n    , detailed_state\n    , status_code\n    , is_start_time_tbd\n    , away_team_wins\n    , away_team_losses\n    , away_team_ot\n    , away_team_type\n    , away_team_score\n    , away_team_name\n    , away_team_url\n    , home_team_wins\n    , home_team_losses\n    , home_team_ot\n    , home_team_type\n    , home_team_score\n    , home_team_name\n    , home_team_url\n    , venue_name\n    , venue_url\n    , content_url\n    , extracted_at\n    , loaded_at\nfrom\n    {{ ref('stg_nhl__schedule') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dbt_nhl_breakouts.stg_nhl__schedule"]}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "nhl-breakouts", "schema": "analytics_intermediate", "fqn": ["dbt_nhl_breakouts", "analytics", "intermediate", "d_schedule"], "unique_id": "model.dbt_nhl_breakouts.d_schedule", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "analytics/intermediate/d_schedule.sql", "original_file_path": "models/analytics/intermediate/d_schedule.sql", "name": "d_schedule", "alias": "d_schedule", "checksum": {"name": "sha256", "checksum": "1663d7784762dec305a9d5a1a4f5fe6eb2bc40aea16505a32ec9f93668abb801"}, "tags": [], "refs": [["stg_nhl__schedule"]], "sources": [], "description": "Staged NHL schedule data from the NHL-API", "columns": {"schedule_id": {"name": "schedule_id", "description": "Unique identifier for NHL scheduled games", "meta": {}, "data_type": null, "quote": null, "tags": []}, "game_id": {"name": "game_id", "description": "Foreign key that maps to an NHL game\n##### More about game_id\nThe first 4 digits identify the season of the game (ie. 2017 for the 2017-2018 season). The next 2 digits give the type of game, where 01 = preseason, 02 = regular season, 03 = playoffs, 04 = all-star. The final 4 digits identify the specific game number.\n\nFor regular season and preseason games, this ranges from 0001 to the number of games played. (1271 for seasons with 31 teams (2017 and onwards) and 1230 for seasons with 30 teams).\n\nFor playoff games, the 2nd digit of the specific number gives the round of the playoffs, the 3rd digit specifies the matchup, and the 4th digit specifies the game (out of 7).\n\n[Credit to Drew Hynes' NHL API docs](https://gitlab.com/dword4/nhlapi/-/blob/master/stats-api.md#game-ids)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "season_id": {"name": "season_id", "description": "Foreign key that maps to an NHL season", "meta": {}, "data_type": null, "quote": null, "tags": []}, "away_team_id": {"name": "away_team_id", "description": "Foreign key that maps to an NHL team (away team)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "home_team_id": {"name": "home_team_id", "description": "Foreign key that maps to an NHL team (home team)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "venue_id": {"name": "venue_id", "description": "Foreign key tha tmaps to a team's venue (home team)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "game_number": {"name": "game_number", "description": "Four digit number that is unique to a game in the context of a season (e.g. 0002)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url": {"name": "url", "description": "URL endpoint for schedule", "meta": {}, "data_type": null, "quote": null, "tags": []}, "game_type": {"name": "game_type", "description": "Code for the type of game (e.g. R = regular season)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "game_date": {"name": "game_date", "description": "Date that the game takes place (e.g. 2021-01-14)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "abstract_game_state": {"name": "abstract_game_state", "description": "Game state (e.g. Final)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "coded_game_state": {"name": "coded_game_state", "description": "Coded game state (e.g. 7)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "detailed_state": {"name": "detailed_state", "description": "Detailed game state (e.g. Final) - should be different that game state, but look similar", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status_code": {"name": "status_code", "description": "Unknown - looks similar to code_game_state", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_start_time_tbd": {"name": "is_start_time_tbd", "description": "Whether or not the start time is still to be decided (True / False)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "away_team_wins": {"name": "away_team_wins", "description": "Cumulative number of wins for the away team for the given season (wins for the team at that point in time)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "away_team_losses": {"name": "away_team_losses", "description": "Cumulative number of losses for the away team for the given season (losses for the team at that point in time)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "away_team_ot": {"name": "away_team_ot", "description": "Cumulative number of overtime wins for the away team for the given season (overtime wins for the team at that point in time)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "away_team_type": {"name": "away_team_type", "description": "Type of away team (e.g. League)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "away_team_score": {"name": "away_team_score", "description": "Goals scored by the away team", "meta": {}, "data_type": null, "quote": null, "tags": []}, "away_team_name": {"name": "away_team_name", "description": "Away team name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "away_team_url": {"name": "away_team_url", "description": "Away team URL endpoint", "meta": {}, "data_type": null, "quote": null, "tags": []}, "home_team_wins": {"name": "home_team_wins", "description": "Cumulative number of wins for the home team for the given season (wins for the team at that point in time)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "home_team_losses": {"name": "home_team_losses", "description": "Cumulative number of losses for the home team for the given season (losses for the team at that point in time)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "home_team_ot": {"name": "home_team_ot", "description": "Cumulative number of overtime wins for the home team for the given season (overtime wins for the team at that point in time)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "home_team_type": {"name": "home_team_type", "description": "Type of home team (e.g. League)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "home_team_score": {"name": "home_team_score", "description": "Goals scored by the home team", "meta": {}, "data_type": null, "quote": null, "tags": []}, "home_team_name": {"name": "home_team_name", "description": "Home team name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "home_team_url": {"name": "home_team_url", "description": "Home team URL endpoint", "meta": {}, "data_type": null, "quote": null, "tags": []}, "venue_name": {"name": "venue_name", "description": "Home team's venue / arena that the teams played in", "meta": {}, "data_type": null, "quote": null, "tags": []}, "venue_url": {"name": "venue_url", "description": "URL endpoint for the venue", "meta": {}, "data_type": null, "quote": null, "tags": []}, "content_url": {"name": "content_url", "description": "URL endpoint for the content", "meta": {}, "data_type": null, "quote": null, "tags": []}, "extracted_at": {"name": "extracted_at", "description": "Timestamp that the data was retrieved", "meta": {}, "data_type": null, "quote": null, "tags": []}, "loaded_at": {"name": "loaded_at", "description": "Timestamp that the data was loaded", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dbt_nhl_breakouts://models/analytics/intermediate/d_schedule.yml", "compiled_path": "target/compiled/dbt_nhl_breakouts/models/analytics/intermediate/d_schedule.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "intermediate"}, "created_at": 1652151875.601975, "compiled_sql": "select\n    /* Primary Key */\n    stg_nhl__schedule_id as schedule_id\n\n    /* Identifiers */\n    , game_id\n    , season_id\n    , away_team_id\n    , home_team_id\n    , venue_id\n\n    /* Properties */\n    , game_number\n    , url\n    , game_type\n    , game_date\n    , abstract_game_state\n    , coded_game_state\n    , detailed_state\n    , status_code\n    , is_start_time_tbd\n    , away_team_wins\n    , away_team_losses\n    , away_team_ot\n    , away_team_type\n    , away_team_score\n    , away_team_name\n    , away_team_url\n    , home_team_wins\n    , home_team_losses\n    , home_team_ot\n    , home_team_type\n    , home_team_score\n    , home_team_name\n    , home_team_url\n    , venue_name\n    , venue_url\n    , content_url\n    , extracted_at\n    , loaded_at\nfrom\n    `nhl-breakouts`.`analytics_staging`.`stg_nhl__schedule`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`nhl-breakouts`.`analytics_intermediate`.`d_schedule`"}, "model.dbt_nhl_breakouts.d_divisions": {"raw_sql": "select\n    /* Primary Key */\n    division_id\n\n    /* Identifiers */\n    , conference_id\n\n    /* Properties */\n    , division_name\n    , division_short_name\n    , division_url\n    , division_abbreviation\n    , is_active\n\nfrom {{ ref('stg_nhl__divisions') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dbt_nhl_breakouts.stg_nhl__divisions"]}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "nhl-breakouts", "schema": "analytics_intermediate", "fqn": ["dbt_nhl_breakouts", "analytics", "intermediate", "d_divisions"], "unique_id": "model.dbt_nhl_breakouts.d_divisions", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "analytics/intermediate/d_divisions.sql", "original_file_path": "models/analytics/intermediate/d_divisions.sql", "name": "d_divisions", "alias": "d_divisions", "checksum": {"name": "sha256", "checksum": "543292caac43d6f2780b16c41fa6e9f253babc49479267a3692b7bb4b1be65de"}, "tags": [], "refs": [["stg_nhl__divisions"]], "sources": [], "description": "Staged NHL division data from the NHL-API", "columns": {"division_id": {"name": "division_id", "description": "Unique identifier for NHL divisions", "meta": {}, "data_type": null, "quote": null, "tags": []}, "conference_id": {"name": "conference_id", "description": "Foreign key that maps to the NHL conference", "meta": {}, "data_type": null, "quote": null, "tags": []}, "division_name": {"name": "division_name", "description": "Name of the NHL division", "meta": {}, "data_type": null, "quote": null, "tags": []}, "division_short_name": {"name": "division_short_name", "description": "Short name for the NHL division", "meta": {}, "data_type": null, "quote": null, "tags": []}, "division_url": {"name": "division_url", "description": "URL endpoint", "meta": {}, "data_type": null, "quote": null, "tags": []}, "division_abbreviation": {"name": "division_abbreviation", "description": "Abbreviated NHL conference name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_active": {"name": "is_active", "description": "Whether or not the conference is still active", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dbt_nhl_breakouts://models/analytics/intermediate/d_divisions.yml", "compiled_path": "target/compiled/dbt_nhl_breakouts/models/analytics/intermediate/d_divisions.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "intermediate"}, "created_at": 1652151875.608959, "compiled_sql": "select\n    /* Primary Key */\n    division_id\n\n    /* Identifiers */\n    , conference_id\n\n    /* Properties */\n    , division_name\n    , division_short_name\n    , division_url\n    , division_abbreviation\n    , is_active\n\nfrom `nhl-breakouts`.`analytics_staging`.`stg_nhl__divisions`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`nhl-breakouts`.`analytics_intermediate`.`d_divisions`"}, "model.dbt_nhl_breakouts.f_linescore": {"raw_sql": "select\n    /* Primary Key */\n    stg_nhl__linescore_id as linescore_id\n\n    /* Identifiers */\n    , game_id\n    , home_team_id\n    , away_team_id\n    , game_winning_team_id\n\n    /* Properties */\n    -- Game-level stats\n    , game_score_description\n    , game_matchup_description\n    , game_winning_team_name\n    , game_winning_team_type\n    , game_absolute_goal_differential\n    -- Team level stats\n    , home_team_goals\n    , away_team_goals\nfrom {{ ref('stg_nhl__linescore') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dbt_nhl_breakouts.stg_nhl__linescore"]}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "nhl-breakouts", "schema": "analytics_intermediate", "fqn": ["dbt_nhl_breakouts", "analytics", "intermediate", "f_linescore"], "unique_id": "model.dbt_nhl_breakouts.f_linescore", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "analytics/intermediate/f_linescore.sql", "original_file_path": "models/analytics/intermediate/f_linescore.sql", "name": "f_linescore", "alias": "f_linescore", "checksum": {"name": "sha256", "checksum": "37248a1b87bd74bd98a2b6bf28a21141479cc48118514c48bf758b0667acebc9"}, "tags": [], "refs": [["stg_nhl__linescore"]], "sources": [], "description": "Staged NHL linescore data from the NHL-API. Contains the summary of goals and teams involved at the game level.\n", "columns": {"linescore_id": {"name": "linescore_id", "description": "Unique identifier for an NHL game (hashed representation of game_id)\n##### More about game_id\nThe first 4 digits identify the season of the game (ie. 2017 for the 2017-2018 season). The next 2 digits give the type of game, where 01 = preseason, 02 = regular season, 03 = playoffs, 04 = all-star. The final 4 digits identify the specific game number.\n\nFor regular season and preseason games, this ranges from 0001 to the number of games played. (1271 for seasons with 31 teams (2017 and onwards) and 1230 for seasons with 30 teams).\n\nFor playoff games, the 2nd digit of the specific number gives the round of the playoffs, the 3rd digit specifies the matchup, and the 4th digit specifies the game (out of 7).\n\n[Credit to Drew Hynes' NHL API docs](https://gitlab.com/dword4/nhlapi/-/blob/master/stats-api.md#game-ids)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "game_id": {"name": "game_id", "description": "Unique identifier for an NHL game (game_id)\n##### More about game_id\nThe first 4 digits identify the season of the game (ie. 2017 for the 2017-2018 season). The next 2 digits give the type of game, where 01 = preseason, 02 = regular season, 03 = playoffs, 04 = all-star. The final 4 digits identify the specific game number.\n\nFor regular season and preseason games, this ranges from 0001 to the number of games played. (1271 for seasons with 31 teams (2017 and onwards) and 1230 for seasons with 30 teams).\n\nFor playoff games, the 2nd digit of the specific number gives the round of the playoffs, the 3rd digit specifies the matchup, and the 4th digit specifies the game (out of 7).\n\n[Credit to Drew Hynes' NHL API docs](https://gitlab.com/dword4/nhlapi/-/blob/master/stats-api.md#game-ids)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "home_team_id": {"name": "home_team_id", "description": "Identifier for the home team, foreign key to stg_nhl__teams", "meta": {}, "data_type": null, "quote": null, "tags": []}, "away_team_id": {"name": "away_team_id", "description": "Identifier for the away team, foreign key to stg_nhl__teams", "meta": {}, "data_type": null, "quote": null, "tags": []}, "game_winning_team_id": {"name": "game_winning_team_id", "description": "Identifier for the winning team, foreign key to stg_nhl__teams", "meta": {}, "data_type": null, "quote": null, "tags": []}, "game_score_description": {"name": "game_score_description", "description": "Description of the game score in the format `<home_team_score>`-`<away_team_score>`", "meta": {}, "data_type": null, "quote": null, "tags": []}, "game_matchup_description": {"name": "game_matchup_description", "description": "Description of the team matchup in the format `<home_team_name>` vs `<away_team_name>`", "meta": {}, "data_type": null, "quote": null, "tags": []}, "game_winning_team_name": {"name": "game_winning_team_name", "description": "Name of the winning team", "meta": {}, "data_type": null, "quote": null, "tags": []}, "game_winning_team_type": {"name": "game_winning_team_type", "description": "Winning team type (home or away)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "game_absolute_goal_differential": {"name": "game_absolute_goal_differential", "description": "The absolute difference of the home and away team scores", "meta": {}, "data_type": null, "quote": null, "tags": []}, "home_team_goals": {"name": "home_team_goals", "description": "Total goals scored by the home team", "meta": {}, "data_type": null, "quote": null, "tags": []}, "away_team_goals": {"name": "away_team_goals", "description": "Total goals scored by the away team", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dbt_nhl_breakouts://models/analytics/intermediate/f_linescore.yml", "compiled_path": "target/compiled/dbt_nhl_breakouts/models/analytics/intermediate/f_linescore.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "intermediate"}, "created_at": 1652151875.6670651, "compiled_sql": "select\n    /* Primary Key */\n    stg_nhl__linescore_id as linescore_id\n\n    /* Identifiers */\n    , game_id\n    , home_team_id\n    , away_team_id\n    , game_winning_team_id\n\n    /* Properties */\n    -- Game-level stats\n    , game_score_description\n    , game_matchup_description\n    , game_winning_team_name\n    , game_winning_team_type\n    , game_absolute_goal_differential\n    -- Team level stats\n    , home_team_goals\n    , away_team_goals\nfrom `nhl-breakouts`.`analytics_staging`.`stg_nhl__linescore`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`nhl-breakouts`.`analytics_intermediate`.`f_linescore`"}, "model.dbt_nhl_breakouts.d_players": {"raw_sql": "with deduplicated as (\n    {{ dedupe(\n        ref('stg_nhl__players'),\n        key_fields=['player_id'],\n        sort_fields=['season_id']\n    ) }}\n)\n\nselect\n    /* Primary Key */\n    player_id\n\n    /* Properties */\n    , full_name\n    , player_url\n    , first_name\n    , last_name\n    , primary_number\n    , birth_date\n    , birth_city\n    , birth_state_province\n    , birth_country\n    , nationality\n    , height\n    , weight\n    , is_active\n    , is_alternate_captain\n    , is_captain\n    , is_rookie\n    , shoots_catches\n    , roster_status\n    , primary_position_code\n    , primary_position_name\n    , primary_position_type\n    , primary_position_abbreviation\n    , extracted_at\n    , loaded_at\nfrom deduplicated", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_nhl_breakouts.dedupe"], "nodes": ["model.dbt_nhl_breakouts.stg_nhl__players"]}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "nhl-breakouts", "schema": "analytics_intermediate", "fqn": ["dbt_nhl_breakouts", "analytics", "intermediate", "d_players"], "unique_id": "model.dbt_nhl_breakouts.d_players", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "analytics/intermediate/d_players.sql", "original_file_path": "models/analytics/intermediate/d_players.sql", "name": "d_players", "alias": "d_players", "checksum": {"name": "sha256", "checksum": "b552dea5247a305ca6aa11d2174112430b8d8bfe55d7e5cf2b2530dd082574fc"}, "tags": [], "refs": [["stg_nhl__players"]], "sources": [], "description": "Staged NHL player data from the NHL-API", "columns": {"player_id": {"name": "player_id", "description": "Unique identifier for an NHL player", "meta": {}, "data_type": null, "quote": null, "tags": []}, "full_name": {"name": "full_name", "description": "Full name of the NHL player", "meta": {}, "data_type": null, "quote": null, "tags": []}, "player_url": {"name": "player_url", "description": "URL endpoint for NHL player", "meta": {}, "data_type": null, "quote": null, "tags": []}, "first_name": {"name": "first_name", "description": "First name of the NHL player", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_name": {"name": "last_name", "description": "Last name of the NHL player", "meta": {}, "data_type": null, "quote": null, "tags": []}, "primary_number": {"name": "primary_number", "description": "Number that the player usually wears", "meta": {}, "data_type": null, "quote": null, "tags": []}, "birth_date": {"name": "birth_date", "description": "Birth date of the NHL player", "meta": {}, "data_type": null, "quote": null, "tags": []}, "birth_city": {"name": "birth_city", "description": "Birth city of the NHL player", "meta": {}, "data_type": null, "quote": null, "tags": []}, "birth_state_province": {"name": "birth_state_province", "description": "Birth state or province of the NHL player", "meta": {}, "data_type": null, "quote": null, "tags": []}, "birth_country": {"name": "birth_country", "description": "Birth country of the NHL player", "meta": {}, "data_type": null, "quote": null, "tags": []}, "nationality": {"name": "nationality", "description": "Nationality of the NHL player", "meta": {}, "data_type": null, "quote": null, "tags": []}, "height": {"name": "height", "description": "Imperial height, in feet and inches (e.g. 5'10\")", "meta": {}, "data_type": null, "quote": null, "tags": []}, "weight": {"name": "weight", "description": "Imperial weight, in pounds (e.g. 140)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_active": {"name": "is_active", "description": "Whether or not the NHL player is currently active (True / False)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_alternate_captain": {"name": "is_alternate_captain", "description": "Whether or not the NHL player is currently an alternate captain for their team (True / False)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_captain": {"name": "is_captain", "description": "Whether or not the NHL player is currently the captain of their team (True / False)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_rookie": {"name": "is_rookie", "description": "Whether or not the NHL player is currently a rookie (True / False)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shoots_catches": {"name": "shoots_catches", "description": "The handedness of the NHL player (e.g. R = right, L = left)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "roster_status": {"name": "roster_status", "description": "Roster status of the NHL player (e.g. Y, N, I)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "primary_position_code": {"name": "primary_position_code", "description": "Position code of the position most played (e.g. C, L, D)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "primary_position_name": {"name": "primary_position_name", "description": "Position name of the position most played (e.g. Center, Left Wing, Defenseman)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "primary_position_type": {"name": "primary_position_type", "description": "Position grouping for the position most played (e.g. Forward, Defenseman)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "primary_position_abbreviation": {"name": "primary_position_abbreviation", "description": "Position abbreviation of the position most played (e.g. C, LW, D)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "extracted_at": {"name": "extracted_at", "description": "Timestamp that the data was retrieved", "meta": {}, "data_type": null, "quote": null, "tags": []}, "loaded_at": {"name": "loaded_at", "description": "Timestamp that the data was loaded", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dbt_nhl_breakouts://models/analytics/intermediate/d_players.yml", "compiled_path": "target/compiled/dbt_nhl_breakouts/models/analytics/intermediate/d_players.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "intermediate"}, "created_at": 1652151875.6639402, "compiled_sql": "with deduplicated as (\n    select *\n    from (\n        select *,\n            row_number() over (partition by player_id order by season_id) as rn\n        from `nhl-breakouts`.`analytics_staging`.`stg_nhl__players`\n    ) where rn = 1 -- dedupe\n)\n\nselect\n    /* Primary Key */\n    player_id\n\n    /* Properties */\n    , full_name\n    , player_url\n    , first_name\n    , last_name\n    , primary_number\n    , birth_date\n    , birth_city\n    , birth_state_province\n    , birth_country\n    , nationality\n    , height\n    , weight\n    , is_active\n    , is_alternate_captain\n    , is_captain\n    , is_rookie\n    , shoots_catches\n    , roster_status\n    , primary_position_code\n    , primary_position_name\n    , primary_position_type\n    , primary_position_abbreviation\n    , extracted_at\n    , loaded_at\nfrom deduplicated", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`nhl-breakouts`.`analytics_intermediate`.`d_players`"}, "model.dbt_nhl_breakouts.f_games_scratches": {"raw_sql": "with\n\nhome_team_scratches as (\n    select\n        boxscore.game_id\n        , scratches as player_id\n    from {{ ref('stg_nhl__boxscore') }} as boxscore\n    , unnest(boxscore.home_team_scratches) as scratches\n)\n\n, away_team_scratches as (\n    select\n        boxscore.game_id\n        , scratches as player_id\n    from {{ ref('stg_nhl__boxscore') }} as boxscore\n    , unnest(boxscore.away_team_scratches) as scratches\n)\n\n, unioned as (\n    select\n        game_id\n        , player_id\n    from home_team_scratches\n\n    union all\n\n    select\n        game_id\n        , player_id\n    from away_team_scratches\n)\n\nselect * from unioned", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dbt_nhl_breakouts.stg_nhl__boxscore", "model.dbt_nhl_breakouts.stg_nhl__boxscore"]}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "nhl-breakouts", "schema": "analytics_intermediate", "fqn": ["dbt_nhl_breakouts", "analytics", "intermediate", "f_games_scratches"], "unique_id": "model.dbt_nhl_breakouts.f_games_scratches", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "analytics/intermediate/f_games_scratches.sql", "original_file_path": "models/analytics/intermediate/f_games_scratches.sql", "name": "f_games_scratches", "alias": "f_games_scratches", "checksum": {"name": "sha256", "checksum": "a48a62a4bd28dff0d5fbbe4826b56efea24c898d5e946ec026dc956fd38f676e"}, "tags": [], "refs": [["stg_nhl__boxscore"], ["stg_nhl__boxscore"]], "sources": [], "description": "A table containing `game_id` and corresponding `player_id` of players who were scratched either due to injury or a coach's decision", "columns": {"game_id": {"name": "game_id", "description": "Foreign key that maps to an NHL game\n##### More about game_id\nThe first 4 digits identify the season of the game (ie. 2017 for the 2017-2018 season). The next 2 digits give the type of game, where 01 = preseason, 02 = regular season, 03 = playoffs, 04 = all-star. The final 4 digits identify the specific game number.\n\nFor regular season and preseason games, this ranges from 0001 to the number of games played. (1271 for seasons with 31 teams (2017 and onwards) and 1230 for seasons with 30 teams).\n\nFor playoff games, the 2nd digit of the specific number gives the round of the playoffs, the 3rd digit specifies the matchup, and the 4th digit specifies the game (out of 7).\n\n[Credit to Drew Hynes' NHL API docs](https://gitlab.com/dword4/nhlapi/-/blob/master/stats-api.md#game-ids)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "player_id": {"name": "player_id", "description": "Foreign key that maps to an NHL player", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dbt_nhl_breakouts://models/analytics/intermediate/f_games_scratches.yml", "compiled_path": "target/compiled/dbt_nhl_breakouts/models/analytics/intermediate/f_games_scratches.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "intermediate"}, "created_at": 1652151875.674175, "compiled_sql": "with\n\nhome_team_scratches as (\n    select\n        boxscore.game_id\n        , scratches as player_id\n    from `nhl-breakouts`.`analytics_staging`.`stg_nhl__boxscore` as boxscore\n    , unnest(boxscore.home_team_scratches) as scratches\n)\n\n, away_team_scratches as (\n    select\n        boxscore.game_id\n        , scratches as player_id\n    from `nhl-breakouts`.`analytics_staging`.`stg_nhl__boxscore` as boxscore\n    , unnest(boxscore.away_team_scratches) as scratches\n)\n\n, unioned as (\n    select\n        game_id\n        , player_id\n    from home_team_scratches\n\n    union all\n\n    select\n        game_id\n        , player_id\n    from away_team_scratches\n)\n\nselect * from unioned", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`nhl-breakouts`.`analytics_intermediate`.`f_games_scratches`"}, "model.dbt_nhl_breakouts.d_teams": {"raw_sql": "with deduplicated as (\n    {{ dedupe(\n        ref('stg_nhl__teams'),\n        key_fields=['team_id'],\n        sort_fields=['season_id']\n    ) }}\n)\n\nselect\n    /* Primary Key */\n    team_id\n\n    /* Identifiers */\n    , venue_timezone_id\n    , division_id\n    , conference_id\n    , franchise_id\n\n    /* Properties */\n    , full_name\n    , team_url\n    , venue_name\n    , venue_url\n    , venue_city\n    , venue_timezone_name\n    , venue_timezone_offset\n    , abbreviation\n    , team_name\n    , location_name\n    , first_year_of_play\n    , short_name\n    , is_active\nfrom deduplicated", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_nhl_breakouts.dedupe"], "nodes": ["model.dbt_nhl_breakouts.stg_nhl__teams"]}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "nhl-breakouts", "schema": "analytics_intermediate", "fqn": ["dbt_nhl_breakouts", "analytics", "intermediate", "d_teams"], "unique_id": "model.dbt_nhl_breakouts.d_teams", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "analytics/intermediate/d_teams.sql", "original_file_path": "models/analytics/intermediate/d_teams.sql", "name": "d_teams", "alias": "d_teams", "checksum": {"name": "sha256", "checksum": "9cf11e5650bc357336f953b8f18a34e7d5fecda1390f52d8e4352b006a594dee"}, "tags": [], "refs": [["stg_nhl__teams"]], "sources": [], "description": "Staged NHL teams data from the NHL-API", "columns": {"team_id": {"name": "team_id", "description": "Unique identifier for NHL teams", "meta": {}, "data_type": null, "quote": null, "tags": []}, "venue_timezone_id": {"name": "venue_timezone_id", "description": "Foreign key that maps to the timezone ID of the venue (e.g. America/Vancouver)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "division_id": {"name": "division_id", "description": "Foreign key that maps to the division ID that the NHL team belongs to", "meta": {}, "data_type": null, "quote": null, "tags": []}, "conference_id": {"name": "conference_id", "description": "Foreign key that maps to the conference ID that the NHL team belongs to", "meta": {}, "data_type": null, "quote": null, "tags": []}, "franchise_id": {"name": "franchise_id", "description": "Foreign key that maps to the franchise ID that the NHL originates from", "meta": {}, "data_type": null, "quote": null, "tags": []}, "full_name": {"name": "full_name", "description": "Full name of the NHL team (e.g. Vancouver Canucks)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "team_url": {"name": "team_url", "description": "URL endpoint for the NHl team", "meta": {}, "data_type": null, "quote": null, "tags": []}, "venue_name": {"name": "venue_name", "description": "Name of the venue / arena that the NHL team plays in", "meta": {}, "data_type": null, "quote": null, "tags": []}, "venue_url": {"name": "venue_url", "description": "URL endpoint for the NHL team venue", "meta": {}, "data_type": null, "quote": null, "tags": []}, "venue_city": {"name": "venue_city", "description": "City that the venue / arena is in", "meta": {}, "data_type": null, "quote": null, "tags": []}, "venue_timezone_offset": {"name": "venue_timezone_offset", "description": "Offset necessary to correct for timezone differences (e.g. Vancouver = -7)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "venue_timezone_name": {"name": "venue_timezone_name", "description": "Abbreviated timezone for the venue (e.g. PDT)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "abbreviation": {"name": "abbreviation", "description": "Abbreviation for the NHL team (e.g. VAN)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "team_name": {"name": "team_name", "description": "Second part of the team name (e.g. Canucks)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "location_name": {"name": "location_name", "description": "First part of the team name (e.g. Vancouer)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "first_year_of_play": {"name": "first_year_of_play", "description": "The inaugural year for the NHL team (e.g. 1970)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "division_name": {"name": "division_name", "description": "Name of the division that the team currently plays in", "meta": {}, "data_type": null, "quote": null, "tags": []}, "division_short_name": {"name": "division_short_name", "description": "Short name for the division that the team currently plays in", "meta": {}, "data_type": null, "quote": null, "tags": []}, "division_url": {"name": "division_url", "description": "URL endpoint for division", "meta": {}, "data_type": null, "quote": null, "tags": []}, "division_abbreviation": {"name": "division_abbreviation", "description": "Abbreviated NHL division name (e.g. P)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "conference_name": {"name": "conference_name", "description": "Conference name that the team currently plays in", "meta": {}, "data_type": null, "quote": null, "tags": []}, "conference_url": {"name": "conference_url", "description": "URL endpoint for the conference", "meta": {}, "data_type": null, "quote": null, "tags": []}, "franchise_team_name": {"name": "franchise_team_name", "description": "Name of the franchise (second part of full team name)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "franchise_url": {"name": "franchise_url", "description": "URL endpoint for the franchise", "meta": {}, "data_type": null, "quote": null, "tags": []}, "short_name": {"name": "short_name", "description": "Slightly different short version of the team name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "official_site_url": {"name": "official_site_url", "description": "Official site URL", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_active": {"name": "is_active", "description": "Whether or not the team is currently active in the NHL", "meta": {}, "data_type": null, "quote": null, "tags": []}, "extracted_at": {"name": "extracted_at", "description": "Timestamp that the data was retrieved", "meta": {}, "data_type": null, "quote": null, "tags": []}, "loaded_at": {"name": "loaded_at", "description": "Timestamp that the data was loaded", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dbt_nhl_breakouts://models/analytics/intermediate/d_teams.yml", "compiled_path": "target/compiled/dbt_nhl_breakouts/models/analytics/intermediate/d_teams.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "intermediate"}, "created_at": 1652151875.685705, "compiled_sql": "with deduplicated as (\n    select *\n    from (\n        select *,\n            row_number() over (partition by team_id order by season_id) as rn\n        from `nhl-breakouts`.`analytics_staging`.`stg_nhl__teams`\n    ) where rn = 1 -- dedupe\n)\n\nselect\n    /* Primary Key */\n    team_id\n\n    /* Identifiers */\n    , venue_timezone_id\n    , division_id\n    , conference_id\n    , franchise_id\n\n    /* Properties */\n    , full_name\n    , team_url\n    , venue_name\n    , venue_url\n    , venue_city\n    , venue_timezone_name\n    , venue_timezone_offset\n    , abbreviation\n    , team_name\n    , location_name\n    , first_year_of_play\n    , short_name\n    , is_active\nfrom deduplicated", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`nhl-breakouts`.`analytics_intermediate`.`d_teams`"}, "model.dbt_nhl_breakouts.d_draft": {"raw_sql": "select\n    /* Primary Key */\n    stg_nhl__draft_id as draft_id\n\n    /* Identifiers */\n    , overall_pick_id\n    , draft_prospect_id\n    , draft_team_id\n\n    /* Properties */\n    , draft_year\n    , draft_overall_pick\n    , draft_round\n    , draft_round_pick\n    , draft_prospect_name\n    , draft_url\n    , draft_team_name\nfrom {{ ref('stg_nhl__draft') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dbt_nhl_breakouts.stg_nhl__draft"]}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "nhl-breakouts", "schema": "analytics_intermediate", "fqn": ["dbt_nhl_breakouts", "analytics", "intermediate", "d_draft"], "unique_id": "model.dbt_nhl_breakouts.d_draft", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "analytics/intermediate/d_draft.sql", "original_file_path": "models/analytics/intermediate/d_draft.sql", "name": "d_draft", "alias": "d_draft", "checksum": {"name": "sha256", "checksum": "a5b63e7cc6bb8779b858e4194740491ea24c979ec3e2dc7b7166cb410311c1ba"}, "tags": [], "refs": [["stg_nhl__draft"]], "sources": [], "description": "Staged NHL entry draft data from the NHL-API", "columns": {"draft_id": {"name": "draft_id", "description": "Unique identifier for an NHL rookie draft (generated via dbt_utils.surrogate_key)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "overall_pick_id": {"name": "overall_pick_id", "description": "Unique identifier for an NHL rookie draft (draft year + overall pick)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "draft_prospect_id": {"name": "draft_prospect_id", "description": "Foreign key that maps to an NHL draft prospect", "meta": {}, "data_type": null, "quote": null, "tags": []}, "draft_team_id": {"name": "draft_team_id", "description": "Foreign key that maps to the NHL team that drafted the NHL prospect", "meta": {}, "data_type": null, "quote": null, "tags": []}, "draft_year": {"name": "draft_year", "description": "Year of the NHL entry draft", "meta": {}, "data_type": null, "quote": null, "tags": []}, "draft_overall_pick": {"name": "draft_overall_pick", "description": "The overall pick in the NHL entry draft. For example, `1` is the first overall pick", "meta": {}, "data_type": null, "quote": null, "tags": []}, "draft_round": {"name": "draft_round", "description": "The drafting round that the selection was made in", "meta": {}, "data_type": null, "quote": null, "tags": []}, "draft_round_pick": {"name": "draft_round_pick", "description": "The pick in the NHL entry draft made relative to the round", "meta": {}, "data_type": null, "quote": null, "tags": []}, "draft_prospect_name": {"name": "draft_prospect_name", "description": "Name of the drafted NHL prospect", "meta": {}, "data_type": null, "quote": null, "tags": []}, "draft_url": {"name": "draft_url", "description": "URL endpoint", "meta": {}, "data_type": null, "quote": null, "tags": []}, "draft_team_name": {"name": "draft_team_name", "description": "Name of the NHL team that drafted the NHL prospect", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dbt_nhl_breakouts://models/analytics/intermediate/d_draft.yml", "compiled_path": "target/compiled/dbt_nhl_breakouts/models/analytics/intermediate/d_draft.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "intermediate"}, "created_at": 1652151875.6926742, "compiled_sql": "select\n    /* Primary Key */\n    stg_nhl__draft_id as draft_id\n\n    /* Identifiers */\n    , overall_pick_id\n    , draft_prospect_id\n    , draft_team_id\n\n    /* Properties */\n    , draft_year\n    , draft_overall_pick\n    , draft_round\n    , draft_round_pick\n    , draft_prospect_name\n    , draft_url\n    , draft_team_name\nfrom `nhl-breakouts`.`analytics_staging`.`stg_nhl__draft`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`nhl-breakouts`.`analytics_intermediate`.`d_draft`"}, "model.dbt_nhl_breakouts.f_games": {"raw_sql": "select\n    /* Primary Key */\n    game_id\n\n    /* Identifiers */\n    , home_team_id\n    , away_team_id\n\n    /* Properties */\n    -- Game-level stats\n    , game_score_description\n    , game_matchup_description\n    , game_winning_team_id\n    , game_winning_team_name\n    , game_absolute_goal_differential\n    , home_team_goals\n    , away_team_goals\n    -- Home team stats\n    , home_team_name\n    , home_team_pim\n    , home_team_shots\n    , home_team_powerplay_goals\n    , home_team_powerplay_opportunities\n    , home_team_faceoff_percentage\n    , home_team_blocked\n    , home_team_takeaways\n    , home_team_giveaways\n    , home_team_hits\n    -- Away team stats\n    , away_team_name\n    , away_team_pim\n    , away_team_shots\n    , away_team_powerplay_goals\n    , away_team_powerplay_opportunities\n    , away_team_faceoff_percentage\n    , away_team_blocked\n    , away_team_takeaways\n    , away_team_giveaways\n    , away_team_hits\nfrom {{ ref('stg_nhl__games') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dbt_nhl_breakouts.stg_nhl__games"]}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "nhl-breakouts", "schema": "analytics_intermediate", "fqn": ["dbt_nhl_breakouts", "analytics", "intermediate", "f_games"], "unique_id": "model.dbt_nhl_breakouts.f_games", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "analytics/intermediate/f_games.sql", "original_file_path": "models/analytics/intermediate/f_games.sql", "name": "f_games", "alias": "f_games", "checksum": {"name": "sha256", "checksum": "176e06e89c049c482fec7ad50b0fffbb69c98a849d1c4c5260a6f32a38764254"}, "tags": [], "refs": [["stg_nhl__games"]], "sources": [], "description": "Staged NHL boxscore & linescore data from the NHL-API", "columns": {"game_id": {"name": "game_id", "description": "Unique identifier for an NHL game (game_id)\n##### More about game_id\nThe first 4 digits identify the season of the game (ie. 2017 for the 2017-2018 season). The next 2 digits give the type of game, where 01 = preseason, 02 = regular season, 03 = playoffs, 04 = all-star. The final 4 digits identify the specific game number.\n\nFor regular season and preseason games, this ranges from 0001 to the number of games played. (1271 for seasons with 31 teams (2017 and onwards) and 1230 for seasons with 30 teams).\n\nFor playoff games, the 2nd digit of the specific number gives the round of the playoffs, the 3rd digit specifies the matchup, and the 4th digit specifies the game (out of 7).\n\n[Credit to Drew Hynes' NHL API docs](https://gitlab.com/dword4/nhlapi/-/blob/master/stats-api.md#game-ids)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "home_team_id": {"name": "home_team_id", "description": "Foreign key that maps to an NHL team (home team)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "away_team_id": {"name": "away_team_id", "description": "Foreign key that maps to an NHL team (away team)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "game_score_description": {"name": "game_score_description", "description": "Description of the NHL game scoreline", "meta": {}, "data_type": null, "quote": null, "tags": []}, "game_matchup_description": {"name": "game_matchup_description", "description": "Description of the participants in the NHL game", "meta": {}, "data_type": null, "quote": null, "tags": []}, "game_winning_team_id": {"name": "game_winning_team_id", "description": "Winning team's team ID", "meta": {}, "data_type": null, "quote": null, "tags": []}, "game_winning_team_name": {"name": "game_winning_team_name", "description": "Winning team's team name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "game_absolute_goal_differential": {"name": "game_absolute_goal_differential", "description": "Absolute goal differential between the winner and loser", "meta": {}, "data_type": null, "quote": null, "tags": []}, "home_team_goals": {"name": "home_team_goals", "description": "Number of goals scored by the home team", "meta": {}, "data_type": null, "quote": null, "tags": []}, "away_team_goals": {"name": "away_team_goals", "description": "Number of goals scored by the away team", "meta": {}, "data_type": null, "quote": null, "tags": []}, "home_team_name": {"name": "home_team_name", "description": "Home team's team name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "home_team_pim": {"name": "home_team_pim", "description": "Number of penalty minutes taken by the home team", "meta": {}, "data_type": null, "quote": null, "tags": []}, "home_team_shots": {"name": "home_team_shots", "description": "Number of shots taken by the home team", "meta": {}, "data_type": null, "quote": null, "tags": []}, "home_team_powerplay_goals": {"name": "home_team_powerplay_goals", "description": "Number of powerplay goals scored by the home team", "meta": {}, "data_type": null, "quote": null, "tags": []}, "home_team_powerplay_opportunities": {"name": "home_team_powerplay_opportunities", "description": "Number of powerplay opportunities had by the home team", "meta": {}, "data_type": null, "quote": null, "tags": []}, "home_team_faceoff_percentage": {"name": "home_team_faceoff_percentage", "description": "Faceoff percentage (wins / attempts) of the home team", "meta": {}, "data_type": null, "quote": null, "tags": []}, "home_team_blocked": {"name": "home_team_blocked", "description": "Number of blocked shots by the home team", "meta": {}, "data_type": null, "quote": null, "tags": []}, "home_team_takeaways": {"name": "home_team_takeaways", "description": "Number of takeaways made by the home team", "meta": {}, "data_type": null, "quote": null, "tags": []}, "home_team_giveaways": {"name": "home_team_giveaways", "description": "Number of giveaways faulted for by the home team", "meta": {}, "data_type": null, "quote": null, "tags": []}, "home_team_hits": {"name": "home_team_hits", "description": "Number of hits made by the home team", "meta": {}, "data_type": null, "quote": null, "tags": []}, "away_team_name": {"name": "away_team_name", "description": "Away team's team name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "away_team_pim": {"name": "away_team_pim", "description": "Number of penalty minutes taken by the away team", "meta": {}, "data_type": null, "quote": null, "tags": []}, "away_team_shots": {"name": "away_team_shots", "description": "Number of shots taken by the away team", "meta": {}, "data_type": null, "quote": null, "tags": []}, "away_team_powerplay_goals": {"name": "away_team_powerplay_goals", "description": "Number of powerplay goals scored by the away team", "meta": {}, "data_type": null, "quote": null, "tags": []}, "away_team_powerplay_opportunities": {"name": "away_team_powerplay_opportunities", "description": "Number of powerplay opportunities had by the away team", "meta": {}, "data_type": null, "quote": null, "tags": []}, "away_team_faceoff_percentage": {"name": "away_team_faceoff_percentage", "description": "Faceoff percentage (wins / attempts) of the away team", "meta": {}, "data_type": null, "quote": null, "tags": []}, "away_team_blocked": {"name": "away_team_blocked", "description": "Number of blocked shots by the away team", "meta": {}, "data_type": null, "quote": null, "tags": []}, "away_team_takeaways": {"name": "away_team_takeaways", "description": "Number of takeaways made by the away team", "meta": {}, "data_type": null, "quote": null, "tags": []}, "away_team_giveaways": {"name": "away_team_giveaways", "description": "Number of giveaways faulted for by the away team", "meta": {}, "data_type": null, "quote": null, "tags": []}, "away_team_hits": {"name": "away_team_hits", "description": "Number of hits made by the away team", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dbt_nhl_breakouts://models/analytics/intermediate/f_games.yml", "compiled_path": "target/compiled/dbt_nhl_breakouts/models/analytics/intermediate/f_games.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "intermediate"}, "created_at": 1652151875.701746, "compiled_sql": "select\n    /* Primary Key */\n    game_id\n\n    /* Identifiers */\n    , home_team_id\n    , away_team_id\n\n    /* Properties */\n    -- Game-level stats\n    , game_score_description\n    , game_matchup_description\n    , game_winning_team_id\n    , game_winning_team_name\n    , game_absolute_goal_differential\n    , home_team_goals\n    , away_team_goals\n    -- Home team stats\n    , home_team_name\n    , home_team_pim\n    , home_team_shots\n    , home_team_powerplay_goals\n    , home_team_powerplay_opportunities\n    , home_team_faceoff_percentage\n    , home_team_blocked\n    , home_team_takeaways\n    , home_team_giveaways\n    , home_team_hits\n    -- Away team stats\n    , away_team_name\n    , away_team_pim\n    , away_team_shots\n    , away_team_powerplay_goals\n    , away_team_powerplay_opportunities\n    , away_team_faceoff_percentage\n    , away_team_blocked\n    , away_team_takeaways\n    , away_team_giveaways\n    , away_team_hits\nfrom `nhl-breakouts`.`analytics_staging`.`stg_nhl__games`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`nhl-breakouts`.`analytics_intermediate`.`f_games`"}, "model.dbt_nhl_breakouts.d_draft_prospects": {"raw_sql": "select distinct\n    /* Primary Key */\n    draft_prospect_id\n\n    /* Identifiers */\n    , prospect_player_id\n    , prospect_category_id\n\n    /* Properties */\n    , prospect_first_name\n    , prospect_last_name\n    , prospect_full_name\n    , prospect_birth_date\n    , prospect_age_years\n    , prospect_age_days\n    , prospect_birth_city\n    , prospect_birth_state_province\n    , prospect_birth_country\n    , prospect_height\n    , prospect_weight\n    , prospect_shoots_catches\n    , prospect_position_name\n    , prospect_position_abbreviation\n    , prospect_draft_status -- wtf is this?\n    , prospect_category_name\n    , prospect_category_short_name\n    , prospect_amateur_team_name\n    , prospect_amateur_team_url\n    , prospect_amateur_league_name\n    , prospect_amateur_league_url\n    , prospect_rank_midterm\n    , prospect_rank_draft_year\n    , prospect_url\nfrom {{ ref('stg_nhl__draft_prospects') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dbt_nhl_breakouts.stg_nhl__draft_prospects"]}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "nhl-breakouts", "schema": "analytics_intermediate", "fqn": ["dbt_nhl_breakouts", "analytics", "intermediate", "d_draft_prospects"], "unique_id": "model.dbt_nhl_breakouts.d_draft_prospects", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "analytics/intermediate/d_draft_prospects.sql", "original_file_path": "models/analytics/intermediate/d_draft_prospects.sql", "name": "d_draft_prospects", "alias": "d_draft_prospects", "checksum": {"name": "sha256", "checksum": "7a1bc31ccf32eb16babe144c1f501d4271eefe7df3d8491811f3be471f5bd578"}, "tags": [], "refs": [["stg_nhl__draft_prospects"]], "sources": [], "description": "Staged NHL draft_prospects data from the NHL-API", "columns": {"draft_prospect_id": {"name": "draft_prospect_id", "description": "Unique identifier for a drafted NHL prospect", "meta": {}, "data_type": null, "quote": null, "tags": []}, "prospect_player_id": {"name": "prospect_player_id", "description": "Foreign key that maps to an NHL player ID", "meta": {}, "data_type": null, "quote": null, "tags": []}, "prospect_category_id": {"name": "prospect_category_id", "description": "Foreign key that maps to one of the four prospect categories - North American Skater (1), European Skater (2), North American Goalie (3) or European Goalie (4)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "prospect_first_name": {"name": "prospect_first_name", "description": "First name of the NHL prospect", "meta": {}, "data_type": null, "quote": null, "tags": []}, "prospect_last_name": {"name": "prospect_last_name", "description": "Last name of the NHL prospect", "meta": {}, "data_type": null, "quote": null, "tags": []}, "prospect_full_name": {"name": "prospect_full_name", "description": "Full name of the NHL prospect", "meta": {}, "data_type": null, "quote": null, "tags": []}, "prospect_birth_date": {"name": "prospect_birth_date", "description": "Birth date of the NHL prospect", "meta": {}, "data_type": null, "quote": null, "tags": []}, "prospect_age_years": {"name": "prospect_age_years", "description": "Age in years of the NHL prospect", "meta": {}, "data_type": null, "quote": null, "tags": []}, "prospect_age_days": {"name": "prospect_age_days", "description": "Age in days of the NHL prospect", "meta": {}, "data_type": null, "quote": null, "tags": []}, "prospect_birth_city": {"name": "prospect_birth_city", "description": "Birth city of the NHL prospect", "meta": {}, "data_type": null, "quote": null, "tags": []}, "prospect_birth_state_province": {"name": "prospect_birth_state_province", "description": "Birth state or province of the NHL prospect", "meta": {}, "data_type": null, "quote": null, "tags": []}, "prospect_birth_country": {"name": "prospect_birth_country", "description": "Birth country of the NHL prospect", "meta": {}, "data_type": null, "quote": null, "tags": []}, "prospect_height": {"name": "prospect_height", "description": "Imperial height, in feet and inches (e.g. 5'10\")", "meta": {}, "data_type": null, "quote": null, "tags": []}, "prospect_weight": {"name": "prospect_weight", "description": "Imperial weight, in pounds (e.g. 140)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "prospect_shoots_catches": {"name": "prospect_shoots_catches", "description": "The handedness of the NHL prospect (e.g. R = right, L = left)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "prospect_position_name": {"name": "prospect_position_name", "description": "Name of the position (e.g. Center, Left Wing, Defenseman)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "prospect_position_abbreviation": {"name": "prospect_position_abbreviation", "description": "Abbreviation of the position (e.g. C, LW, D)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "prospect_draft_status": {"name": "prospect_draft_status", "description": "Unknown (e.g. NHL-10, NHL-54)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "prospect_category_name": {"name": "prospect_category_name", "description": "Describes four prospect categories - North American Skater, European Skater, North American Goalie or European Goalie", "meta": {}, "data_type": null, "quote": null, "tags": []}, "prospect_category_short_name": {"name": "prospect_category_short_name", "description": "Describes four prospect categories - NA Skater, Euro Skater, NA Goalie or Euro Goalie", "meta": {}, "data_type": null, "quote": null, "tags": []}, "prospect_amateur_team_name": {"name": "prospect_amateur_team_name", "description": "Name of the amateur team that the NHL prospect plays for - unknown when, lots of nulls", "meta": {}, "data_type": null, "quote": null, "tags": []}, "prospect_amateur_team_url": {"name": "prospect_amateur_team_url", "description": "URL endpoint for amateur team", "meta": {}, "data_type": null, "quote": null, "tags": []}, "prospect_rank_midterm": {"name": "prospect_rank_midterm", "description": "Unknown, lots of nulls", "meta": {}, "data_type": null, "quote": null, "tags": []}, "prospect_rank_draft_year": {"name": "prospect_rank_draft_year", "description": "Unknown, lots of null", "meta": {}, "data_type": null, "quote": null, "tags": []}, "prospect_url": {"name": "prospect_url", "description": "URL endpoint for the prospect", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dbt_nhl_breakouts://models/analytics/intermediate/d_draft_prospects.yml", "compiled_path": "target/compiled/dbt_nhl_breakouts/models/analytics/intermediate/d_draft_prospects.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "intermediate"}, "created_at": 1652151875.63324, "compiled_sql": "select distinct\n    /* Primary Key */\n    draft_prospect_id\n\n    /* Identifiers */\n    , prospect_player_id\n    , prospect_category_id\n\n    /* Properties */\n    , prospect_first_name\n    , prospect_last_name\n    , prospect_full_name\n    , prospect_birth_date\n    , prospect_age_years\n    , prospect_age_days\n    , prospect_birth_city\n    , prospect_birth_state_province\n    , prospect_birth_country\n    , prospect_height\n    , prospect_weight\n    , prospect_shoots_catches\n    , prospect_position_name\n    , prospect_position_abbreviation\n    , prospect_draft_status -- wtf is this?\n    , prospect_category_name\n    , prospect_category_short_name\n    , prospect_amateur_team_name\n    , prospect_amateur_team_url\n    , prospect_amateur_league_name\n    , prospect_amateur_league_url\n    , prospect_rank_midterm\n    , prospect_rank_draft_year\n    , prospect_url\nfrom `nhl-breakouts`.`analytics_staging`.`stg_nhl__draft_prospects`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`nhl-breakouts`.`analytics_intermediate`.`d_draft_prospects`"}, "model.dbt_nhl_breakouts.f_boxscore": {"raw_sql": "select\n    /* Primary Key */\n    stg_nhl__boxscore_id as boxscore_id\n\n    /* Identifiers */\n    , game_id\n    , home_team_id\n    , away_team_id\n\n    /* Properties */\n    -- Home team stats\n    , home_team_name\n    , home_team_pim\n    , home_team_shots\n    , home_team_powerplay_goals\n    , home_team_powerplay_opportunities\n    , home_team_faceoff_percentage\n    , home_team_blocked\n    , home_team_takeaways\n    , home_team_giveaways\n    , home_team_hits\n    -- Away team stats\n    , away_team_name\n    , away_team_pim\n    , away_team_shots\n    , away_team_powerplay_goals\n    , away_team_powerplay_opportunities\n    , away_team_faceoff_percentage\n    , away_team_blocked\n    , away_team_takeaways\n    , away_team_giveaways\n    , away_team_hits\nfrom {{ ref('stg_nhl__boxscore') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dbt_nhl_breakouts.stg_nhl__boxscore"]}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "nhl-breakouts", "schema": "analytics_intermediate", "fqn": ["dbt_nhl_breakouts", "analytics", "intermediate", "f_boxscore"], "unique_id": "model.dbt_nhl_breakouts.f_boxscore", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "analytics/intermediate/f_boxscore.sql", "original_file_path": "models/analytics/intermediate/f_boxscore.sql", "name": "f_boxscore", "alias": "f_boxscore", "checksum": {"name": "sha256", "checksum": "c2185e9c1c33b083a54222865274632931a53ce5ae190ab16ef2175463abe54e"}, "tags": [], "refs": [["stg_nhl__boxscore"]], "sources": [], "description": "Staged NHL linescore data from the NHL-API. Contains summarized stats of the teams involved at the game level.\n", "columns": {"boxscore_id": {"name": "boxscore_id", "description": "Unique identifier for the NHL boxscore game (hashed representation of game_id)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "game_id": {"name": "game_id", "description": "Foreign key that maps to an NHL game\n##### More about game_id\nThe first 4 digits identify the season of the game (ie. 2017 for the 2017-2018 season). The next 2 digits give the type of game, where 01 = preseason, 02 = regular season, 03 = playoffs, 04 = all-star. The final 4 digits identify the specific game number.\n\nFor regular season and preseason games, this ranges from 0001 to the number of games played. (1271 for seasons with 31 teams (2017 and onwards) and 1230 for seasons with 30 teams).\n\nFor playoff games, the 2nd digit of the specific number gives the round of the playoffs, the 3rd digit specifies the matchup, and the 4th digit specifies the game (out of 7).\n\n[Credit to Drew Hynes' NHL API docs](https://gitlab.com/dword4/nhlapi/-/blob/master/stats-api.md#game-ids)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "home_team_id": {"name": "home_team_id", "description": "Identifier for the home team, foreign key to stg_nhl__teams", "meta": {}, "data_type": null, "quote": null, "tags": []}, "away_team_id": {"name": "away_team_id", "description": "Identifier for the away team, foreign key to stg_nhl__teams", "meta": {}, "data_type": null, "quote": null, "tags": []}, "home_team_name": {"name": "home_team_name", "description": "Name of the home team", "meta": {}, "data_type": null, "quote": null, "tags": []}, "home_team_pim": {"name": "home_team_pim", "description": "Total home team penalty infraction minutes", "meta": {}, "data_type": null, "quote": null, "tags": []}, "home_team_shots": {"name": "home_team_shots", "description": "Total home team shots", "meta": {}, "data_type": null, "quote": null, "tags": []}, "home_team_powerplay_goals": {"name": "home_team_powerplay_goals", "description": "Total home team powerplay goals", "meta": {}, "data_type": null, "quote": null, "tags": []}, "home_team_powerplay_opportunities": {"name": "home_team_powerplay_opportunities", "description": "Total home team powerplay opportunities", "meta": {}, "data_type": null, "quote": null, "tags": []}, "home_team_faceoff_percentage": {"name": "home_team_faceoff_percentage", "description": "Home team faceoff percentage", "meta": {}, "data_type": null, "quote": null, "tags": []}, "home_team_blocked": {"name": "home_team_blocked", "description": "Total home team shots blocked", "meta": {}, "data_type": null, "quote": null, "tags": []}, "home_team_takeaways": {"name": "home_team_takeaways", "description": "Total home team takeaways", "meta": {}, "data_type": null, "quote": null, "tags": []}, "home_team_giveaways": {"name": "home_team_giveaways", "description": "Total home team giveaways", "meta": {}, "data_type": null, "quote": null, "tags": []}, "home_team_hits": {"name": "home_team_hits", "description": "Total home team hits", "meta": {}, "data_type": null, "quote": null, "tags": []}, "away_team_name": {"name": "away_team_name", "description": "Name of the away team", "meta": {}, "data_type": null, "quote": null, "tags": []}, "away_team_pim": {"name": "away_team_pim", "description": "Total away team penalty infraction minutes", "meta": {}, "data_type": null, "quote": null, "tags": []}, "away_team_shots": {"name": "away_team_shots", "description": "Total away team shots", "meta": {}, "data_type": null, "quote": null, "tags": []}, "away_team_powerplay_goals": {"name": "away_team_powerplay_goals", "description": "Total away team powerplay goals", "meta": {}, "data_type": null, "quote": null, "tags": []}, "away_team_powerplay_opportunities": {"name": "away_team_powerplay_opportunities", "description": "Total away team powerplay opportunities", "meta": {}, "data_type": null, "quote": null, "tags": []}, "away_team_faceoff_percentage": {"name": "away_team_faceoff_percentage", "description": "Away team faceoff percentage", "meta": {}, "data_type": null, "quote": null, "tags": []}, "away_team_blocked": {"name": "away_team_blocked", "description": "Total away team shots blocked", "meta": {}, "data_type": null, "quote": null, "tags": []}, "away_team_takeaways": {"name": "away_team_takeaways", "description": "Total away team takeaways", "meta": {}, "data_type": null, "quote": null, "tags": []}, "away_team_giveaways": {"name": "away_team_giveaways", "description": "Total away team giveaways", "meta": {}, "data_type": null, "quote": null, "tags": []}, "away_team_hits": {"name": "away_team_hits", "description": "Total away team hits", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dbt_nhl_breakouts://models/analytics/intermediate/f_boxscore.yml", "compiled_path": "target/compiled/dbt_nhl_breakouts/models/analytics/intermediate/f_boxscore.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "intermediate"}, "created_at": 1652151875.6518998, "compiled_sql": "select\n    /* Primary Key */\n    stg_nhl__boxscore_id as boxscore_id\n\n    /* Identifiers */\n    , game_id\n    , home_team_id\n    , away_team_id\n\n    /* Properties */\n    -- Home team stats\n    , home_team_name\n    , home_team_pim\n    , home_team_shots\n    , home_team_powerplay_goals\n    , home_team_powerplay_opportunities\n    , home_team_faceoff_percentage\n    , home_team_blocked\n    , home_team_takeaways\n    , home_team_giveaways\n    , home_team_hits\n    -- Away team stats\n    , away_team_name\n    , away_team_pim\n    , away_team_shots\n    , away_team_powerplay_goals\n    , away_team_powerplay_opportunities\n    , away_team_faceoff_percentage\n    , away_team_blocked\n    , away_team_takeaways\n    , away_team_giveaways\n    , away_team_hits\nfrom `nhl-breakouts`.`analytics_staging`.`stg_nhl__boxscore`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`nhl-breakouts`.`analytics_intermediate`.`f_boxscore`"}, "model.dbt_nhl_breakouts.d_conferences": {"raw_sql": "select\n    /* Primary Key */\n    conference_id\n\n    /* Properties */\n    , conference_name\n    , conference_url\n    , conference_abbreviation\n    , conference_short_name\n    , is_active\nfrom {{ ref('stg_nhl__conferences') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dbt_nhl_breakouts.stg_nhl__conferences"]}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "nhl-breakouts", "schema": "analytics_intermediate", "fqn": ["dbt_nhl_breakouts", "analytics", "intermediate", "d_conferences"], "unique_id": "model.dbt_nhl_breakouts.d_conferences", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "analytics/intermediate/d_conferences.sql", "original_file_path": "models/analytics/intermediate/d_conferences.sql", "name": "d_conferences", "alias": "d_conferences", "checksum": {"name": "sha256", "checksum": "ca61bc00eb8ecde71942b3c99d2a10c199741adb7d06314328db5ae97a26db25"}, "tags": [], "refs": [["stg_nhl__conferences"]], "sources": [], "description": "Staged NHL conferences data from the NHL-API", "columns": {"conference_id": {"name": "conference_id", "description": "Unique identifier for NHL conferences", "meta": {}, "data_type": null, "quote": null, "tags": []}, "conference_name": {"name": "conference_name", "description": "Name of the NHL conference", "meta": {}, "data_type": null, "quote": null, "tags": []}, "conference_url": {"name": "conference_url", "description": "URL endpoint", "meta": {}, "data_type": null, "quote": null, "tags": []}, "conference_abbreviation": {"name": "conference_abbreviation", "description": "Abbreviated NHL conference name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "conference_short_name": {"name": "conference_short_name", "description": "Short name for the NHL conference", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_active": {"name": "is_active", "description": "Whether or not the conference is still active", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dbt_nhl_breakouts://models/analytics/intermediate/d_conferences.yml", "compiled_path": "target/compiled/dbt_nhl_breakouts/models/analytics/intermediate/d_conferences.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "intermediate"}, "created_at": 1652151875.6464052, "compiled_sql": "select\n    /* Primary Key */\n    conference_id\n\n    /* Properties */\n    , conference_name\n    , conference_url\n    , conference_abbreviation\n    , conference_short_name\n    , is_active\nfrom `nhl-breakouts`.`analytics_staging`.`stg_nhl__conferences`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`nhl-breakouts`.`analytics_intermediate`.`d_conferences`"}, "model.dbt_nhl_breakouts.f_boxscore_player": {"raw_sql": "select\n    /* Primary Key */\n    stg_nhl__boxscore_player_id as boxscore_player_id\n\n    /* Identifiers */\n    , game_id\n    , team_id\n    , player_id\n\n    /* Properties */\n    , team_name\n    , team_type\n    -- player stats\n    , player_full_name\n    , player_roster_status\n    , player_position_code\n    , time_on_ice\n    , assists\n    , goals\n    , shots\n    , hits\n    , powerplay_goals\n    , powerplay_assists\n    , penalty_minutes\n    , faceoff_wins\n    , faceoff_taken\n    , takeaways\n    , giveaways\n    , short_handed_goals\n    , short_handed_assists\n    , blocked\n    , plus_minus\n    , even_time_on_ice\n    , powerplay_time_on_ice\n    , short_handed_time_on_ice\n    , pim\n    , saves\n    , powerplay_saves\n    , short_handed_saves\n    , even_saves\n    , short_handed_shots_against\n    , even_shots_against\n    , powerplay_shots_against\n    , decision\n    , save_percentage\n    , powerplay_save_percentage\n    , even_strength_save_percentage\nfrom {{ ref('stg_nhl__boxscore_player') }}\norder by\n    game_id desc\n    , team_id desc\n    , player_id desc", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dbt_nhl_breakouts.stg_nhl__boxscore_player"]}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "nhl-breakouts", "schema": "analytics_intermediate", "fqn": ["dbt_nhl_breakouts", "analytics", "intermediate", "f_boxscore_player"], "unique_id": "model.dbt_nhl_breakouts.f_boxscore_player", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "analytics/intermediate/f_boxscore_player.sql", "original_file_path": "models/analytics/intermediate/f_boxscore_player.sql", "name": "f_boxscore_player", "alias": "f_boxscore_player", "checksum": {"name": "sha256", "checksum": "79918adad0c8f40a6f8aa76def63cbcf5515be7d37242c5ce89d99a59c55e8b0"}, "tags": [], "refs": [["stg_nhl__boxscore_player"]], "sources": [], "description": "Staged NHL boxscore player data from the NHL-API (game-player level). Each row represents an individual player's summarized activity in an NHL game", "columns": {"boxscore_player_id": {"name": "boxscore_player_id", "description": "Unique identifier for a player's summarized activity in an NHL game (game_id + team_id + player_id)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "game_id": {"name": "game_id", "description": "Foreign key that maps to an NHL game ID\n##### More about game_id\nThe first 4 digits identify the season of the game (ie. 2017 for the 2017-2018 season). The next 2 digits give the type of game, where 01 = preseason, 02 = regular season, 03 = playoffs, 04 = all-star. The final 4 digits identify the specific game number.\n\nFor regular season and preseason games, this ranges from 0001 to the number of games played. (1271 for seasons with 31 teams (2017 and onwards) and 1230 for seasons with 30 teams).\n\nFor playoff games, the 2nd digit of the specific number gives the round of the playoffs, the 3rd digit specifies the matchup, and the 4th digit specifies the game (out of 7).\n\n[Credit to Drew Hynes' NHL API docs](https://gitlab.com/dword4/nhlapi/-/blob/master/stats-api.md#game-ids)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "team_id": {"name": "team_id", "description": "Foreign key that maps to an NHL team ID", "meta": {}, "data_type": null, "quote": null, "tags": []}, "player_id": {"name": "player_id", "description": "Foreign key that maps to an NHL player ID", "meta": {}, "data_type": null, "quote": null, "tags": []}, "team_name": {"name": "team_name", "description": "Name of the NHL team", "meta": {}, "data_type": null, "quote": null, "tags": []}, "team_type": {"name": "team_type", "description": "Describes the Away / Home status for the team that the player belonged to in that game", "meta": {}, "data_type": null, "quote": null, "tags": []}, "player_full_name": {"name": "player_full_name", "description": "Full name of the NHL player", "meta": {}, "data_type": null, "quote": null, "tags": []}, "player_roster_status": {"name": "player_roster_status", "description": "Roster status of the NHL player (e.g. Y, N, I)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "player_position_code": {"name": "player_position_code", "description": "Position code (e.g. C, LW, D)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "time_on_ice": {"name": "time_on_ice", "description": "Time on ice in minutes:seconds (e.g. 21:30)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "assists": {"name": "assists", "description": "Number of assists (primary & secondary)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "goals": {"name": "goals", "description": "Number of goals scored", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shots": {"name": "shots", "description": "Number of shots taken", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hits": {"name": "hits", "description": "Number of hits made", "meta": {}, "data_type": null, "quote": null, "tags": []}, "powerplay_goals": {"name": "powerplay_goals", "description": "Number of powerplay goals scored", "meta": {}, "data_type": null, "quote": null, "tags": []}, "powerplay_assists": {"name": "powerplay_assists", "description": "Number of powerplay assists (primary & secondary)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "penalty_minutes": {"name": "penalty_minutes", "description": "Number of penalties taken in minutes", "meta": {}, "data_type": null, "quote": null, "tags": []}, "faceoff_wins": {"name": "faceoff_wins", "description": "Number of faceoffs won", "meta": {}, "data_type": null, "quote": null, "tags": []}, "faceoff_taken": {"name": "faceoff_taken", "description": "Number of faceoffs taken", "meta": {}, "data_type": null, "quote": null, "tags": []}, "takeaways": {"name": "takeaways", "description": "Number of takeaways made", "meta": {}, "data_type": null, "quote": null, "tags": []}, "giveaways": {"name": "giveaways", "description": "Number of giveaways faulted for", "meta": {}, "data_type": null, "quote": null, "tags": []}, "short_handed_goals": {"name": "short_handed_goals", "description": "Number of short-handed goals scored", "meta": {}, "data_type": null, "quote": null, "tags": []}, "short_handed_assists": {"name": "short_handed_assists", "description": "Number of short-handed assists made", "meta": {}, "data_type": null, "quote": null, "tags": []}, "blocked": {"name": "blocked", "description": "Number of blocked shots", "meta": {}, "data_type": null, "quote": null, "tags": []}, "plus_minus": {"name": "plus_minus", "description": "Total plus minus in the game - plus for every goal scored while on the ice for, minus for every goal allowed while on the ice", "meta": {}, "data_type": null, "quote": null, "tags": []}, "even_time_on_ice": {"name": "even_time_on_ice", "description": "Time on ice in minutes:seconds at event-strength (5v5)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "powerplay_time_on_ice": {"name": "powerplay_time_on_ice", "description": "Time on ice in minutes:seconds on the man advantage / powerplay (5v4, 5v3, or 4v3)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "short_handed_time_on_ice": {"name": "short_handed_time_on_ice", "description": "Time on ice in minutes:seconds while short-handed / on the penalty kill (4v5, 3v5, or 3v4)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pim": {"name": "pim", "description": "Penalties in minutes:seconds", "meta": {}, "data_type": null, "quote": null, "tags": []}, "saves": {"name": "saves", "description": "Number of saves made", "meta": {}, "data_type": null, "quote": null, "tags": []}, "powerplay_saves": {"name": "powerplay_saves", "description": "Number of saves made on the powerplay", "meta": {}, "data_type": null, "quote": null, "tags": []}, "short_handed_saves": {"name": "short_handed_saves", "description": "Number of saves made on the penalty kill / short-handed", "meta": {}, "data_type": null, "quote": null, "tags": []}, "even_saves": {"name": "even_saves", "description": "Number of saves made at event strength", "meta": {}, "data_type": null, "quote": null, "tags": []}, "short_handed_shots_against": {"name": "short_handed_shots_against", "description": "Number of shots against on the penalth kill / short-handed", "meta": {}, "data_type": null, "quote": null, "tags": []}, "even_shots_against": {"name": "even_shots_against", "description": "Number of shots against at event strength", "meta": {}, "data_type": null, "quote": null, "tags": []}, "powerplay_shots_against": {"name": "powerplay_shots_against", "description": "Number of shots against on the powerplay / man advantage", "meta": {}, "data_type": null, "quote": null, "tags": []}, "decision": {"name": "decision", "description": "Win (W) or Loss (L) for goalies only (NULL if player)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "save_percentage": {"name": "save_percentage", "description": "Percentage of shots faced that were saved (100% * (Number of shots saved / Number of shots))", "meta": {}, "data_type": null, "quote": null, "tags": []}, "powerplay_save_percentage": {"name": "powerplay_save_percentage", "description": "Percentage of shots faced on the powerplay that were saved (100% * (Number of shots saved / Number of shots))", "meta": {}, "data_type": null, "quote": null, "tags": []}, "even_strength_save_percentage": {"name": "even_strength_save_percentage", "description": "Percentage of shots faced at even strength that were saved (100% * (Number of shots saved / Number of shots))", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dbt_nhl_breakouts://models/analytics/intermediate/f_boxscore_player.yml", "compiled_path": "target/compiled/dbt_nhl_breakouts/models/analytics/intermediate/f_boxscore_player.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "intermediate"}, "created_at": 1652151875.64188, "compiled_sql": "select\n    /* Primary Key */\n    stg_nhl__boxscore_player_id as boxscore_player_id\n\n    /* Identifiers */\n    , game_id\n    , team_id\n    , player_id\n\n    /* Properties */\n    , team_name\n    , team_type\n    -- player stats\n    , player_full_name\n    , player_roster_status\n    , player_position_code\n    , time_on_ice\n    , assists\n    , goals\n    , shots\n    , hits\n    , powerplay_goals\n    , powerplay_assists\n    , penalty_minutes\n    , faceoff_wins\n    , faceoff_taken\n    , takeaways\n    , giveaways\n    , short_handed_goals\n    , short_handed_assists\n    , blocked\n    , plus_minus\n    , even_time_on_ice\n    , powerplay_time_on_ice\n    , short_handed_time_on_ice\n    , pim\n    , saves\n    , powerplay_saves\n    , short_handed_saves\n    , even_saves\n    , short_handed_shots_against\n    , even_shots_against\n    , powerplay_shots_against\n    , decision\n    , save_percentage\n    , powerplay_save_percentage\n    , even_strength_save_percentage\nfrom `nhl-breakouts`.`analytics_staging`.`stg_nhl__boxscore_player`\norder by\n    game_id desc\n    , team_id desc\n    , player_id desc", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`nhl-breakouts`.`analytics_intermediate`.`f_boxscore_player`"}, "model.dbt_nhl_breakouts.d_seasons": {"raw_sql": "select\n    /* Primary Key */\n    season_id\n\n    /* Properties */\n    , regular_season_start_date\n    , regular_season_end_date\n    , season_end_date\n    , number_of_games\n    , has_ties_in_use\n    , has_olympics_participation\n    , has_conferences_in_use\n    , has_divisions_in_use\n    , has_wildcard_in_use\nfrom {{ ref('stg_nhl__seasons') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dbt_nhl_breakouts.stg_nhl__seasons"]}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "nhl-breakouts", "schema": "analytics_intermediate", "fqn": ["dbt_nhl_breakouts", "analytics", "intermediate", "d_seasons"], "unique_id": "model.dbt_nhl_breakouts.d_seasons", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "analytics/intermediate/d_seasons.sql", "original_file_path": "models/analytics/intermediate/d_seasons.sql", "name": "d_seasons", "alias": "d_seasons", "checksum": {"name": "sha256", "checksum": "462d96e5a4a03f3e58a858a756eb91dcc362f2ec666e7f383303b1ea68ce93f0"}, "tags": [], "refs": [["stg_nhl__seasons"]], "sources": [], "description": "Staged NHL seasons data from the NHL-API", "columns": {"season_id": {"name": "season_id", "description": "Unique identifier for an NHL season (e.g. \"20172018\")", "meta": {}, "data_type": null, "quote": null, "tags": []}, "regular_season_start_date": {"name": "regular_season_start_date", "description": "The first date of the NHL regular season (e.g. \"2017-10-04\")", "meta": {}, "data_type": null, "quote": null, "tags": []}, "regular_season_end_date": {"name": "regular_season_end_date", "description": "The last date of the NHL regular season (e.g. \"2018-04-08\")", "meta": {}, "data_type": null, "quote": null, "tags": []}, "season_end_date": {"name": "season_end_date", "description": "The last date of the NHL post season (e.g. \"2018-06-07\")", "meta": {}, "data_type": null, "quote": null, "tags": []}, "number_of_games": {"name": "number_of_games", "description": "The number of total games played by each NHL team", "meta": {}, "data_type": null, "quote": null, "tags": []}, "has_ties_in_use": {"name": "has_ties_in_use", "description": "Whether or not ties were possible for that season (True / False)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "has_olympics_participation": {"name": "has_olympics_participation", "description": "Whether or not olympic participation at the NHL level was allowed for that season (True / False)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "has_conferences_in_use": {"name": "has_conferences_in_use", "description": "Whether or not conferences were used for that season's playoff consideration (True / False)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "has_divisions_in_use": {"name": "has_divisions_in_use", "description": "Whether or not divisions were used for that season's playoff consideration (True / False)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "has_wildcard_in_use": {"name": "has_wildcard_in_use", "description": "Whether or not wildcards were used for that season's playoff consideration (True / False)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "extracted_at": {"name": "extracted_at", "description": "Timestamp that the data was retrieved", "meta": {}, "data_type": null, "quote": null, "tags": []}, "loaded_at": {"name": "loaded_at", "description": "Timestamp that the data was loaded", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dbt_nhl_breakouts://models/analytics/intermediate/d_seasons.yml", "compiled_path": "target/compiled/dbt_nhl_breakouts/models/analytics/intermediate/d_seasons.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "intermediate"}, "created_at": 1652151875.658067, "compiled_sql": "select\n    /* Primary Key */\n    season_id\n\n    /* Properties */\n    , regular_season_start_date\n    , regular_season_end_date\n    , season_end_date\n    , number_of_games\n    , has_ties_in_use\n    , has_olympics_participation\n    , has_conferences_in_use\n    , has_divisions_in_use\n    , has_wildcard_in_use\nfrom `nhl-breakouts`.`analytics_staging`.`stg_nhl__seasons`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`nhl-breakouts`.`analytics_intermediate`.`d_seasons`"}, "test.dbt_nhl_breakouts.unique_stg_nhl__divisions_stg_nhl__divisions_id.c441593bdd": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "stg_nhl__divisions_id", "model": "{{ get_where_subquery(ref('stg_nhl__divisions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.stg_nhl__divisions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "staging", "unique_stg_nhl__divisions_stg_nhl__divisions_id"], "unique_id": "test.dbt_nhl_breakouts.unique_stg_nhl__divisions_stg_nhl__divisions_id.c441593bdd", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "unique_stg_nhl__divisions_stg_nhl__divisions_id.sql", "original_file_path": "models/staging/stg_nhl__divisions.yml", "name": "unique_stg_nhl__divisions_stg_nhl__divisions_id", "alias": "unique_stg_nhl__divisions_stg_nhl__divisions_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_nhl__divisions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/staging/stg_nhl__divisions.yml/unique_stg_nhl__divisions_stg_nhl__divisions_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.471709, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select stg_nhl__divisions_id as unique_field\n  from `nhl-breakouts`.`analytics_staging`.`stg_nhl__divisions`\n  where stg_nhl__divisions_id is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "stg_nhl__divisions_id", "file_key_name": "models.stg_nhl__divisions"}, "test.dbt_nhl_breakouts.not_null_stg_nhl__divisions_stg_nhl__divisions_id.09bf3b6736": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "stg_nhl__divisions_id", "model": "{{ get_where_subquery(ref('stg_nhl__divisions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.stg_nhl__divisions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "staging", "not_null_stg_nhl__divisions_stg_nhl__divisions_id"], "unique_id": "test.dbt_nhl_breakouts.not_null_stg_nhl__divisions_stg_nhl__divisions_id.09bf3b6736", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "not_null_stg_nhl__divisions_stg_nhl__divisions_id.sql", "original_file_path": "models/staging/stg_nhl__divisions.yml", "name": "not_null_stg_nhl__divisions_stg_nhl__divisions_id", "alias": "not_null_stg_nhl__divisions_stg_nhl__divisions_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_nhl__divisions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/staging/stg_nhl__divisions.yml/not_null_stg_nhl__divisions_stg_nhl__divisions_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.4726589, "compiled_sql": "\n    \n    \n\nselect *\nfrom `nhl-breakouts`.`analytics_staging`.`stg_nhl__divisions`\nwhere stg_nhl__divisions_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "stg_nhl__divisions_id", "file_key_name": "models.stg_nhl__divisions"}, "test.dbt_nhl_breakouts.unique_stg_nhl__divisions_division_id.765d509a33": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "division_id", "model": "{{ get_where_subquery(ref('stg_nhl__divisions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.stg_nhl__divisions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "staging", "unique_stg_nhl__divisions_division_id"], "unique_id": "test.dbt_nhl_breakouts.unique_stg_nhl__divisions_division_id.765d509a33", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "unique_stg_nhl__divisions_division_id.sql", "original_file_path": "models/staging/stg_nhl__divisions.yml", "name": "unique_stg_nhl__divisions_division_id", "alias": "unique_stg_nhl__divisions_division_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_nhl__divisions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/staging/stg_nhl__divisions.yml/unique_stg_nhl__divisions_division_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.4734468, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select division_id as unique_field\n  from `nhl-breakouts`.`analytics_staging`.`stg_nhl__divisions`\n  where division_id is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "division_id", "file_key_name": "models.stg_nhl__divisions"}, "test.dbt_nhl_breakouts.not_null_stg_nhl__divisions_division_id.e799976dcb": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "division_id", "model": "{{ get_where_subquery(ref('stg_nhl__divisions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.stg_nhl__divisions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "staging", "not_null_stg_nhl__divisions_division_id"], "unique_id": "test.dbt_nhl_breakouts.not_null_stg_nhl__divisions_division_id.e799976dcb", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "not_null_stg_nhl__divisions_division_id.sql", "original_file_path": "models/staging/stg_nhl__divisions.yml", "name": "not_null_stg_nhl__divisions_division_id", "alias": "not_null_stg_nhl__divisions_division_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_nhl__divisions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/staging/stg_nhl__divisions.yml/not_null_stg_nhl__divisions_division_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.4743302, "compiled_sql": "\n    \n    \n\nselect *\nfrom `nhl-breakouts`.`analytics_staging`.`stg_nhl__divisions`\nwhere division_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "division_id", "file_key_name": "models.stg_nhl__divisions"}, "test.dbt_nhl_breakouts.unique_stg_nhl__conferences_stg_nhl__conferences_id.894c9c38c2": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "stg_nhl__conferences_id", "model": "{{ get_where_subquery(ref('stg_nhl__conferences')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.stg_nhl__conferences"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "staging", "unique_stg_nhl__conferences_stg_nhl__conferences_id"], "unique_id": "test.dbt_nhl_breakouts.unique_stg_nhl__conferences_stg_nhl__conferences_id.894c9c38c2", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "unique_stg_nhl__conferences_stg_nhl__conferences_id.sql", "original_file_path": "models/staging/stg_nhl__conferences.yml", "name": "unique_stg_nhl__conferences_stg_nhl__conferences_id", "alias": "unique_stg_nhl__conferences_stg_nhl__conferences_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_nhl__conferences"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/staging/stg_nhl__conferences.yml/unique_stg_nhl__conferences_stg_nhl__conferences_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.476806, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select stg_nhl__conferences_id as unique_field\n  from `nhl-breakouts`.`analytics_staging`.`stg_nhl__conferences`\n  where stg_nhl__conferences_id is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "stg_nhl__conferences_id", "file_key_name": "models.stg_nhl__conferences"}, "test.dbt_nhl_breakouts.not_null_stg_nhl__conferences_stg_nhl__conferences_id.a13a757e3c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "stg_nhl__conferences_id", "model": "{{ get_where_subquery(ref('stg_nhl__conferences')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.stg_nhl__conferences"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "staging", "not_null_stg_nhl__conferences_stg_nhl__conferences_id"], "unique_id": "test.dbt_nhl_breakouts.not_null_stg_nhl__conferences_stg_nhl__conferences_id.a13a757e3c", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "not_null_stg_nhl__conferences_stg_nhl__conferences_id.sql", "original_file_path": "models/staging/stg_nhl__conferences.yml", "name": "not_null_stg_nhl__conferences_stg_nhl__conferences_id", "alias": "not_null_stg_nhl__conferences_stg_nhl__conferences_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_nhl__conferences"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/staging/stg_nhl__conferences.yml/not_null_stg_nhl__conferences_stg_nhl__conferences_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.477684, "compiled_sql": "\n    \n    \n\nselect *\nfrom `nhl-breakouts`.`analytics_staging`.`stg_nhl__conferences`\nwhere stg_nhl__conferences_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "stg_nhl__conferences_id", "file_key_name": "models.stg_nhl__conferences"}, "test.dbt_nhl_breakouts.unique_stg_nhl__conferences_conference_id.31d27aa7cd": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "conference_id", "model": "{{ get_where_subquery(ref('stg_nhl__conferences')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.stg_nhl__conferences"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "staging", "unique_stg_nhl__conferences_conference_id"], "unique_id": "test.dbt_nhl_breakouts.unique_stg_nhl__conferences_conference_id.31d27aa7cd", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "unique_stg_nhl__conferences_conference_id.sql", "original_file_path": "models/staging/stg_nhl__conferences.yml", "name": "unique_stg_nhl__conferences_conference_id", "alias": "unique_stg_nhl__conferences_conference_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_nhl__conferences"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/staging/stg_nhl__conferences.yml/unique_stg_nhl__conferences_conference_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.478605, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select conference_id as unique_field\n  from `nhl-breakouts`.`analytics_staging`.`stg_nhl__conferences`\n  where conference_id is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "conference_id", "file_key_name": "models.stg_nhl__conferences"}, "test.dbt_nhl_breakouts.not_null_stg_nhl__conferences_conference_id.5900814b75": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "conference_id", "model": "{{ get_where_subquery(ref('stg_nhl__conferences')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.stg_nhl__conferences"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "staging", "not_null_stg_nhl__conferences_conference_id"], "unique_id": "test.dbt_nhl_breakouts.not_null_stg_nhl__conferences_conference_id.5900814b75", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "not_null_stg_nhl__conferences_conference_id.sql", "original_file_path": "models/staging/stg_nhl__conferences.yml", "name": "not_null_stg_nhl__conferences_conference_id", "alias": "not_null_stg_nhl__conferences_conference_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_nhl__conferences"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/staging/stg_nhl__conferences.yml/not_null_stg_nhl__conferences_conference_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.479389, "compiled_sql": "\n    \n    \n\nselect *\nfrom `nhl-breakouts`.`analytics_staging`.`stg_nhl__conferences`\nwhere conference_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "conference_id", "file_key_name": "models.stg_nhl__conferences"}, "test.dbt_nhl_breakouts.unique_stg_nhl__draft_prospects_stg_nhl__draft_prospects_id.81b61a4ac5": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "stg_nhl__draft_prospects_id", "model": "{{ get_where_subquery(ref('stg_nhl__draft_prospects')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.stg_nhl__draft_prospects"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "staging", "unique_stg_nhl__draft_prospects_stg_nhl__draft_prospects_id"], "unique_id": "test.dbt_nhl_breakouts.unique_stg_nhl__draft_prospects_stg_nhl__draft_prospects_id.81b61a4ac5", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "unique_stg_nhl__draft_prospects_stg_nhl__draft_prospects_id.sql", "original_file_path": "models/staging/stg_nhl__draft_prospects.yml", "name": "unique_stg_nhl__draft_prospects_stg_nhl__draft_prospects_id", "alias": "unique_stg_nhl__draft_prospects_stg_nhl__draft_prospects_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_nhl__draft_prospects"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/staging/stg_nhl__draft_prospects.yml/unique_stg_nhl__draft_prospects_stg_nhl__draft_prospects_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.4847832, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select stg_nhl__draft_prospects_id as unique_field\n  from `nhl-breakouts`.`analytics_staging`.`stg_nhl__draft_prospects`\n  where stg_nhl__draft_prospects_id is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "stg_nhl__draft_prospects_id", "file_key_name": "models.stg_nhl__draft_prospects"}, "test.dbt_nhl_breakouts.not_null_stg_nhl__draft_prospects_stg_nhl__draft_prospects_id.1866c4a0e2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "stg_nhl__draft_prospects_id", "model": "{{ get_where_subquery(ref('stg_nhl__draft_prospects')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.stg_nhl__draft_prospects"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "staging", "not_null_stg_nhl__draft_prospects_stg_nhl__draft_prospects_id"], "unique_id": "test.dbt_nhl_breakouts.not_null_stg_nhl__draft_prospects_stg_nhl__draft_prospects_id.1866c4a0e2", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "not_null_stg_nhl__draft_prospects_stg_nhl__draft_prospects_id.sql", "original_file_path": "models/staging/stg_nhl__draft_prospects.yml", "name": "not_null_stg_nhl__draft_prospects_stg_nhl__draft_prospects_id", "alias": "not_null_stg_nhl__draft_prospects_stg_nhl__draft_prospects_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_nhl__draft_prospects"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/staging/stg_nhl__draft_prospects.yml/not_null_stg_nhl__draft_prospects_stg_nhl__draft_prospects_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.485579, "compiled_sql": "\n    \n    \n\nselect *\nfrom `nhl-breakouts`.`analytics_staging`.`stg_nhl__draft_prospects`\nwhere stg_nhl__draft_prospects_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "stg_nhl__draft_prospects_id", "file_key_name": "models.stg_nhl__draft_prospects"}, "test.dbt_nhl_breakouts.not_null_stg_nhl__draft_prospects_draft_prospect_id.c2f4218bb5": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "draft_prospect_id", "model": "{{ get_where_subquery(ref('stg_nhl__draft_prospects')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.stg_nhl__draft_prospects"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "staging", "not_null_stg_nhl__draft_prospects_draft_prospect_id"], "unique_id": "test.dbt_nhl_breakouts.not_null_stg_nhl__draft_prospects_draft_prospect_id.c2f4218bb5", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "not_null_stg_nhl__draft_prospects_draft_prospect_id.sql", "original_file_path": "models/staging/stg_nhl__draft_prospects.yml", "name": "not_null_stg_nhl__draft_prospects_draft_prospect_id", "alias": "not_null_stg_nhl__draft_prospects_draft_prospect_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_nhl__draft_prospects"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/staging/stg_nhl__draft_prospects.yml/not_null_stg_nhl__draft_prospects_draft_prospect_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.4863539, "compiled_sql": "\n    \n    \n\nselect *\nfrom `nhl-breakouts`.`analytics_staging`.`stg_nhl__draft_prospects`\nwhere draft_prospect_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "draft_prospect_id", "file_key_name": "models.stg_nhl__draft_prospects"}, "test.dbt_nhl_breakouts.unique_stg_nhl__draft_prospects_draft_prospect_id.439cea6ec2": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "draft_prospect_id", "model": "{{ get_where_subquery(ref('stg_nhl__draft_prospects')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.stg_nhl__draft_prospects"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "staging", "unique_stg_nhl__draft_prospects_draft_prospect_id"], "unique_id": "test.dbt_nhl_breakouts.unique_stg_nhl__draft_prospects_draft_prospect_id.439cea6ec2", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "unique_stg_nhl__draft_prospects_draft_prospect_id.sql", "original_file_path": "models/staging/stg_nhl__draft_prospects.yml", "name": "unique_stg_nhl__draft_prospects_draft_prospect_id", "alias": "unique_stg_nhl__draft_prospects_draft_prospect_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_nhl__draft_prospects"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/staging/stg_nhl__draft_prospects.yml/unique_stg_nhl__draft_prospects_draft_prospect_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.487126, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select draft_prospect_id as unique_field\n  from `nhl-breakouts`.`analytics_staging`.`stg_nhl__draft_prospects`\n  where draft_prospect_id is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "draft_prospect_id", "file_key_name": "models.stg_nhl__draft_prospects"}, "test.dbt_nhl_breakouts.unique_stg_nhl__boxscore_player_stg_nhl__boxscore_player_id.21d484e820": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "stg_nhl__boxscore_player_id", "model": "{{ get_where_subquery(ref('stg_nhl__boxscore_player')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.stg_nhl__boxscore_player"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "staging", "unique_stg_nhl__boxscore_player_stg_nhl__boxscore_player_id"], "unique_id": "test.dbt_nhl_breakouts.unique_stg_nhl__boxscore_player_stg_nhl__boxscore_player_id.21d484e820", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "unique_stg_nhl__boxscore_player_stg_nhl__boxscore_player_id.sql", "original_file_path": "models/staging/stg_nhl__boxscore_player.yml", "name": "unique_stg_nhl__boxscore_player_stg_nhl__boxscore_player_id", "alias": "unique_stg_nhl__boxscore_player_stg_nhl__boxscore_player_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_nhl__boxscore_player"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/staging/stg_nhl__boxscore_player.yml/unique_stg_nhl__boxscore_player_stg_nhl__boxscore_player_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.494743, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select stg_nhl__boxscore_player_id as unique_field\n  from `nhl-breakouts`.`analytics_staging`.`stg_nhl__boxscore_player`\n  where stg_nhl__boxscore_player_id is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "stg_nhl__boxscore_player_id", "file_key_name": "models.stg_nhl__boxscore_player"}, "test.dbt_nhl_breakouts.not_null_stg_nhl__boxscore_player_stg_nhl__boxscore_player_id.13756d4737": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "stg_nhl__boxscore_player_id", "model": "{{ get_where_subquery(ref('stg_nhl__boxscore_player')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.stg_nhl__boxscore_player"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "staging", "not_null_stg_nhl__boxscore_player_stg_nhl__boxscore_player_id"], "unique_id": "test.dbt_nhl_breakouts.not_null_stg_nhl__boxscore_player_stg_nhl__boxscore_player_id.13756d4737", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "not_null_stg_nhl__boxscore_player_stg_nhl__boxscore_player_id.sql", "original_file_path": "models/staging/stg_nhl__boxscore_player.yml", "name": "not_null_stg_nhl__boxscore_player_stg_nhl__boxscore_player_id", "alias": "not_null_stg_nhl__boxscore_player_stg_nhl__boxscore_player_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_nhl__boxscore_player"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/staging/stg_nhl__boxscore_player.yml/not_null_stg_nhl__boxscore_player_stg_nhl__boxscore_player_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.495598, "compiled_sql": "\n    \n    \n\nselect *\nfrom `nhl-breakouts`.`analytics_staging`.`stg_nhl__boxscore_player`\nwhere stg_nhl__boxscore_player_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "stg_nhl__boxscore_player_id", "file_key_name": "models.stg_nhl__boxscore_player"}, "test.dbt_nhl_breakouts.unique_stg_nhl__linescore_stg_nhl__linescore_id.ada282fc78": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "stg_nhl__linescore_id", "model": "{{ get_where_subquery(ref('stg_nhl__linescore')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.stg_nhl__linescore"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "staging", "unique_stg_nhl__linescore_stg_nhl__linescore_id"], "unique_id": "test.dbt_nhl_breakouts.unique_stg_nhl__linescore_stg_nhl__linescore_id.ada282fc78", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "unique_stg_nhl__linescore_stg_nhl__linescore_id.sql", "original_file_path": "models/staging/stg_nhl__linescore.yml", "name": "unique_stg_nhl__linescore_stg_nhl__linescore_id", "alias": "unique_stg_nhl__linescore_stg_nhl__linescore_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_nhl__linescore"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/staging/stg_nhl__linescore.yml/unique_stg_nhl__linescore_stg_nhl__linescore_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.49881, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select stg_nhl__linescore_id as unique_field\n  from `nhl-breakouts`.`analytics_staging`.`stg_nhl__linescore`\n  where stg_nhl__linescore_id is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "stg_nhl__linescore_id", "file_key_name": "models.stg_nhl__linescore"}, "test.dbt_nhl_breakouts.not_null_stg_nhl__linescore_stg_nhl__linescore_id.e449d10122": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "stg_nhl__linescore_id", "model": "{{ get_where_subquery(ref('stg_nhl__linescore')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.stg_nhl__linescore"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "staging", "not_null_stg_nhl__linescore_stg_nhl__linescore_id"], "unique_id": "test.dbt_nhl_breakouts.not_null_stg_nhl__linescore_stg_nhl__linescore_id.e449d10122", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "not_null_stg_nhl__linescore_stg_nhl__linescore_id.sql", "original_file_path": "models/staging/stg_nhl__linescore.yml", "name": "not_null_stg_nhl__linescore_stg_nhl__linescore_id", "alias": "not_null_stg_nhl__linescore_stg_nhl__linescore_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_nhl__linescore"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/staging/stg_nhl__linescore.yml/not_null_stg_nhl__linescore_stg_nhl__linescore_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.499586, "compiled_sql": "\n    \n    \n\nselect *\nfrom `nhl-breakouts`.`analytics_staging`.`stg_nhl__linescore`\nwhere stg_nhl__linescore_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "stg_nhl__linescore_id", "file_key_name": "models.stg_nhl__linescore"}, "test.dbt_nhl_breakouts.accepted_values_stg_nhl__linescore_game_winning_team_type__True__Home__Away.a5678ea10b": {"raw_sql": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_stg_nhl__lines_c8f90e209d8e7057294060ea65046ba0\") }}", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["Home", "Away"], "quote": true, "column_name": "game_winning_team_type", "model": "{{ get_where_subquery(ref('stg_nhl__linescore')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.stg_nhl__linescore"]}, "config": {"enabled": true, "alias": "accepted_values_stg_nhl__lines_c8f90e209d8e7057294060ea65046ba0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "staging", "accepted_values_stg_nhl__linescore_game_winning_team_type__True__Home__Away"], "unique_id": "test.dbt_nhl_breakouts.accepted_values_stg_nhl__linescore_game_winning_team_type__True__Home__Away.a5678ea10b", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "accepted_values_stg_nhl__lines_c8f90e209d8e7057294060ea65046ba0.sql", "original_file_path": "models/staging/stg_nhl__linescore.yml", "name": "accepted_values_stg_nhl__linescore_game_winning_team_type__True__Home__Away", "alias": "accepted_values_stg_nhl__lines_c8f90e209d8e7057294060ea65046ba0", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_nhl__linescore"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/staging/stg_nhl__linescore.yml/accepted_values_stg_nhl__lines_c8f90e209d8e7057294060ea65046ba0.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_stg_nhl__lines_c8f90e209d8e7057294060ea65046ba0"}, "created_at": 1652151875.500373, "compiled_sql": "\n    \n    \n\nwith all_values as (\n\n    select\n        game_winning_team_type as value_field,\n        count(*) as n_records\n\n    from `nhl-breakouts`.`analytics_staging`.`stg_nhl__linescore`\n    group by game_winning_team_type\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Home','Away'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "game_winning_team_type", "file_key_name": "models.stg_nhl__linescore"}, "test.dbt_nhl_breakouts.unique_stg_nhl__games_stg_nhl__games_id.5157268cdb": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "stg_nhl__games_id", "model": "{{ get_where_subquery(ref('stg_nhl__games')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.stg_nhl__games"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "staging", "unique_stg_nhl__games_stg_nhl__games_id"], "unique_id": "test.dbt_nhl_breakouts.unique_stg_nhl__games_stg_nhl__games_id.5157268cdb", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "unique_stg_nhl__games_stg_nhl__games_id.sql", "original_file_path": "models/staging/stg_nhl__games.yml", "name": "unique_stg_nhl__games_stg_nhl__games_id", "alias": "unique_stg_nhl__games_stg_nhl__games_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_nhl__games"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/staging/stg_nhl__games.yml/unique_stg_nhl__games_stg_nhl__games_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.512723, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select stg_nhl__games_id as unique_field\n  from `nhl-breakouts`.`analytics_staging`.`stg_nhl__games`\n  where stg_nhl__games_id is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "stg_nhl__games_id", "file_key_name": "models.stg_nhl__games"}, "test.dbt_nhl_breakouts.not_null_stg_nhl__games_stg_nhl__games_id.183ba17ec8": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "stg_nhl__games_id", "model": "{{ get_where_subquery(ref('stg_nhl__games')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.stg_nhl__games"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "staging", "not_null_stg_nhl__games_stg_nhl__games_id"], "unique_id": "test.dbt_nhl_breakouts.not_null_stg_nhl__games_stg_nhl__games_id.183ba17ec8", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "not_null_stg_nhl__games_stg_nhl__games_id.sql", "original_file_path": "models/staging/stg_nhl__games.yml", "name": "not_null_stg_nhl__games_stg_nhl__games_id", "alias": "not_null_stg_nhl__games_stg_nhl__games_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_nhl__games"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/staging/stg_nhl__games.yml/not_null_stg_nhl__games_stg_nhl__games_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.513526, "compiled_sql": "\n    \n    \n\nselect *\nfrom `nhl-breakouts`.`analytics_staging`.`stg_nhl__games`\nwhere stg_nhl__games_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "stg_nhl__games_id", "file_key_name": "models.stg_nhl__games"}, "test.dbt_nhl_breakouts.not_null_stg_nhl__games_game_id.26acd3f369": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "game_id", "model": "{{ get_where_subquery(ref('stg_nhl__games')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.stg_nhl__games"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "staging", "not_null_stg_nhl__games_game_id"], "unique_id": "test.dbt_nhl_breakouts.not_null_stg_nhl__games_game_id.26acd3f369", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "not_null_stg_nhl__games_game_id.sql", "original_file_path": "models/staging/stg_nhl__games.yml", "name": "not_null_stg_nhl__games_game_id", "alias": "not_null_stg_nhl__games_game_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_nhl__games"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/staging/stg_nhl__games.yml/not_null_stg_nhl__games_game_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.514411, "compiled_sql": "\n    \n    \n\nselect *\nfrom `nhl-breakouts`.`analytics_staging`.`stg_nhl__games`\nwhere game_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "game_id", "file_key_name": "models.stg_nhl__games"}, "test.dbt_nhl_breakouts.unique_stg_nhl__games_game_id.c3bead4ebc": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "game_id", "model": "{{ get_where_subquery(ref('stg_nhl__games')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.stg_nhl__games"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "staging", "unique_stg_nhl__games_game_id"], "unique_id": "test.dbt_nhl_breakouts.unique_stg_nhl__games_game_id.c3bead4ebc", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "unique_stg_nhl__games_game_id.sql", "original_file_path": "models/staging/stg_nhl__games.yml", "name": "unique_stg_nhl__games_game_id", "alias": "unique_stg_nhl__games_game_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_nhl__games"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/staging/stg_nhl__games.yml/unique_stg_nhl__games_game_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.515195, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select game_id as unique_field\n  from `nhl-breakouts`.`analytics_staging`.`stg_nhl__games`\n  where game_id is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "game_id", "file_key_name": "models.stg_nhl__games"}, "test.dbt_nhl_breakouts.unique_stg_nhl__players_stg_nhl__players_id.a676defad4": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "stg_nhl__players_id", "model": "{{ get_where_subquery(ref('stg_nhl__players')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.stg_nhl__players"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "staging", "unique_stg_nhl__players_stg_nhl__players_id"], "unique_id": "test.dbt_nhl_breakouts.unique_stg_nhl__players_stg_nhl__players_id.a676defad4", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "unique_stg_nhl__players_stg_nhl__players_id.sql", "original_file_path": "models/staging/stg_nhl__players.yml", "name": "unique_stg_nhl__players_stg_nhl__players_id", "alias": "unique_stg_nhl__players_stg_nhl__players_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_nhl__players"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/staging/stg_nhl__players.yml/unique_stg_nhl__players_stg_nhl__players_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.520936, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select stg_nhl__players_id as unique_field\n  from `nhl-breakouts`.`analytics_staging`.`stg_nhl__players`\n  where stg_nhl__players_id is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "stg_nhl__players_id", "file_key_name": "models.stg_nhl__players"}, "test.dbt_nhl_breakouts.not_null_stg_nhl__players_stg_nhl__players_id.cf9bfc0f93": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "stg_nhl__players_id", "model": "{{ get_where_subquery(ref('stg_nhl__players')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.stg_nhl__players"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "staging", "not_null_stg_nhl__players_stg_nhl__players_id"], "unique_id": "test.dbt_nhl_breakouts.not_null_stg_nhl__players_stg_nhl__players_id.cf9bfc0f93", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "not_null_stg_nhl__players_stg_nhl__players_id.sql", "original_file_path": "models/staging/stg_nhl__players.yml", "name": "not_null_stg_nhl__players_stg_nhl__players_id", "alias": "not_null_stg_nhl__players_stg_nhl__players_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_nhl__players"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/staging/stg_nhl__players.yml/not_null_stg_nhl__players_stg_nhl__players_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.521754, "compiled_sql": "\n    \n    \n\nselect *\nfrom `nhl-breakouts`.`analytics_staging`.`stg_nhl__players`\nwhere stg_nhl__players_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "stg_nhl__players_id", "file_key_name": "models.stg_nhl__players"}, "test.dbt_nhl_breakouts.not_null_stg_nhl__players_player_id.f9c1dc568f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "player_id", "model": "{{ get_where_subquery(ref('stg_nhl__players')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.stg_nhl__players"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "staging", "not_null_stg_nhl__players_player_id"], "unique_id": "test.dbt_nhl_breakouts.not_null_stg_nhl__players_player_id.f9c1dc568f", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "not_null_stg_nhl__players_player_id.sql", "original_file_path": "models/staging/stg_nhl__players.yml", "name": "not_null_stg_nhl__players_player_id", "alias": "not_null_stg_nhl__players_player_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_nhl__players"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/staging/stg_nhl__players.yml/not_null_stg_nhl__players_player_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.522541, "compiled_sql": "\n    \n    \n\nselect *\nfrom `nhl-breakouts`.`analytics_staging`.`stg_nhl__players`\nwhere player_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "player_id", "file_key_name": "models.stg_nhl__players"}, "test.dbt_nhl_breakouts.not_null_stg_nhl__boxscore_stg_nhl__boxscore_id.f531645344": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "stg_nhl__boxscore_id", "model": "{{ get_where_subquery(ref('stg_nhl__boxscore')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.stg_nhl__boxscore"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "staging", "not_null_stg_nhl__boxscore_stg_nhl__boxscore_id"], "unique_id": "test.dbt_nhl_breakouts.not_null_stg_nhl__boxscore_stg_nhl__boxscore_id.f531645344", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "not_null_stg_nhl__boxscore_stg_nhl__boxscore_id.sql", "original_file_path": "models/staging/stg_nhl__boxscore.yml", "name": "not_null_stg_nhl__boxscore_stg_nhl__boxscore_id", "alias": "not_null_stg_nhl__boxscore_stg_nhl__boxscore_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_nhl__boxscore"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/staging/stg_nhl__boxscore.yml/not_null_stg_nhl__boxscore_stg_nhl__boxscore_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.527644, "compiled_sql": "\n    \n    \n\nselect *\nfrom `nhl-breakouts`.`analytics_staging`.`stg_nhl__boxscore`\nwhere stg_nhl__boxscore_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "stg_nhl__boxscore_id", "file_key_name": "models.stg_nhl__boxscore"}, "test.dbt_nhl_breakouts.unique_stg_nhl__boxscore_stg_nhl__boxscore_id.5cb4ed999d": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "stg_nhl__boxscore_id", "model": "{{ get_where_subquery(ref('stg_nhl__boxscore')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.stg_nhl__boxscore"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "staging", "unique_stg_nhl__boxscore_stg_nhl__boxscore_id"], "unique_id": "test.dbt_nhl_breakouts.unique_stg_nhl__boxscore_stg_nhl__boxscore_id.5cb4ed999d", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "unique_stg_nhl__boxscore_stg_nhl__boxscore_id.sql", "original_file_path": "models/staging/stg_nhl__boxscore.yml", "name": "unique_stg_nhl__boxscore_stg_nhl__boxscore_id", "alias": "unique_stg_nhl__boxscore_stg_nhl__boxscore_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_nhl__boxscore"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/staging/stg_nhl__boxscore.yml/unique_stg_nhl__boxscore_stg_nhl__boxscore_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.528499, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select stg_nhl__boxscore_id as unique_field\n  from `nhl-breakouts`.`analytics_staging`.`stg_nhl__boxscore`\n  where stg_nhl__boxscore_id is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "stg_nhl__boxscore_id", "file_key_name": "models.stg_nhl__boxscore"}, "test.dbt_nhl_breakouts.unique_stg_nhl__live_plays_stg_nhl__live_plays_id.e5043c61a1": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "stg_nhl__live_plays_id", "model": "{{ get_where_subquery(ref('stg_nhl__live_plays')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.stg_nhl__live_plays"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "staging", "unique_stg_nhl__live_plays_stg_nhl__live_plays_id"], "unique_id": "test.dbt_nhl_breakouts.unique_stg_nhl__live_plays_stg_nhl__live_plays_id.e5043c61a1", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "unique_stg_nhl__live_plays_stg_nhl__live_plays_id.sql", "original_file_path": "models/staging/stg_nhl__live_plays.yml", "name": "unique_stg_nhl__live_plays_stg_nhl__live_plays_id", "alias": "unique_stg_nhl__live_plays_stg_nhl__live_plays_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_nhl__live_plays"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/staging/stg_nhl__live_plays.yml/unique_stg_nhl__live_plays_stg_nhl__live_plays_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.5378401, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select stg_nhl__live_plays_id as unique_field\n  from `nhl-breakouts`.`analytics_staging`.`stg_nhl__live_plays`\n  where stg_nhl__live_plays_id is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "stg_nhl__live_plays_id", "file_key_name": "models.stg_nhl__live_plays"}, "test.dbt_nhl_breakouts.not_null_stg_nhl__live_plays_stg_nhl__live_plays_id.180653fbd3": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "stg_nhl__live_plays_id", "model": "{{ get_where_subquery(ref('stg_nhl__live_plays')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.stg_nhl__live_plays"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "staging", "not_null_stg_nhl__live_plays_stg_nhl__live_plays_id"], "unique_id": "test.dbt_nhl_breakouts.not_null_stg_nhl__live_plays_stg_nhl__live_plays_id.180653fbd3", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "not_null_stg_nhl__live_plays_stg_nhl__live_plays_id.sql", "original_file_path": "models/staging/stg_nhl__live_plays.yml", "name": "not_null_stg_nhl__live_plays_stg_nhl__live_plays_id", "alias": "not_null_stg_nhl__live_plays_stg_nhl__live_plays_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_nhl__live_plays"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/staging/stg_nhl__live_plays.yml/not_null_stg_nhl__live_plays_stg_nhl__live_plays_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.538644, "compiled_sql": "\n    \n    \n\nselect *\nfrom `nhl-breakouts`.`analytics_staging`.`stg_nhl__live_plays`\nwhere stg_nhl__live_plays_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "stg_nhl__live_plays_id", "file_key_name": "models.stg_nhl__live_plays"}, "test.dbt_nhl_breakouts.unique_stg_nhl__teams_stg_nhl__teams_id.b6f2cc8f8f": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "stg_nhl__teams_id", "model": "{{ get_where_subquery(ref('stg_nhl__teams')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.stg_nhl__teams"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "staging", "unique_stg_nhl__teams_stg_nhl__teams_id"], "unique_id": "test.dbt_nhl_breakouts.unique_stg_nhl__teams_stg_nhl__teams_id.b6f2cc8f8f", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "unique_stg_nhl__teams_stg_nhl__teams_id.sql", "original_file_path": "models/staging/stg_nhl__teams.yml", "name": "unique_stg_nhl__teams_stg_nhl__teams_id", "alias": "unique_stg_nhl__teams_stg_nhl__teams_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_nhl__teams"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/staging/stg_nhl__teams.yml/unique_stg_nhl__teams_stg_nhl__teams_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.5446742, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select stg_nhl__teams_id as unique_field\n  from `nhl-breakouts`.`analytics_staging`.`stg_nhl__teams`\n  where stg_nhl__teams_id is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "stg_nhl__teams_id", "file_key_name": "models.stg_nhl__teams"}, "test.dbt_nhl_breakouts.not_null_stg_nhl__teams_stg_nhl__teams_id.e03adc9f63": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "stg_nhl__teams_id", "model": "{{ get_where_subquery(ref('stg_nhl__teams')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.stg_nhl__teams"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "staging", "not_null_stg_nhl__teams_stg_nhl__teams_id"], "unique_id": "test.dbt_nhl_breakouts.not_null_stg_nhl__teams_stg_nhl__teams_id.e03adc9f63", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "not_null_stg_nhl__teams_stg_nhl__teams_id.sql", "original_file_path": "models/staging/stg_nhl__teams.yml", "name": "not_null_stg_nhl__teams_stg_nhl__teams_id", "alias": "not_null_stg_nhl__teams_stg_nhl__teams_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_nhl__teams"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/staging/stg_nhl__teams.yml/not_null_stg_nhl__teams_stg_nhl__teams_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.545467, "compiled_sql": "\n    \n    \n\nselect *\nfrom `nhl-breakouts`.`analytics_staging`.`stg_nhl__teams`\nwhere stg_nhl__teams_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "stg_nhl__teams_id", "file_key_name": "models.stg_nhl__teams"}, "test.dbt_nhl_breakouts.not_null_stg_nhl__teams_team_id.7c3a30af17": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "team_id", "model": "{{ get_where_subquery(ref('stg_nhl__teams')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.stg_nhl__teams"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "staging", "not_null_stg_nhl__teams_team_id"], "unique_id": "test.dbt_nhl_breakouts.not_null_stg_nhl__teams_team_id.7c3a30af17", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "not_null_stg_nhl__teams_team_id.sql", "original_file_path": "models/staging/stg_nhl__teams.yml", "name": "not_null_stg_nhl__teams_team_id", "alias": "not_null_stg_nhl__teams_team_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_nhl__teams"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/staging/stg_nhl__teams.yml/not_null_stg_nhl__teams_team_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.546335, "compiled_sql": "\n    \n    \n\nselect *\nfrom `nhl-breakouts`.`analytics_staging`.`stg_nhl__teams`\nwhere team_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "team_id", "file_key_name": "models.stg_nhl__teams"}, "test.dbt_nhl_breakouts.unique_stg_nhl__schedule_stg_nhl__schedule_id.02ca3a9680": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "stg_nhl__schedule_id", "model": "{{ get_where_subquery(ref('stg_nhl__schedule')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.stg_nhl__schedule"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "staging", "unique_stg_nhl__schedule_stg_nhl__schedule_id"], "unique_id": "test.dbt_nhl_breakouts.unique_stg_nhl__schedule_stg_nhl__schedule_id.02ca3a9680", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "unique_stg_nhl__schedule_stg_nhl__schedule_id.sql", "original_file_path": "models/staging/stg_nhl__schedule.yml", "name": "unique_stg_nhl__schedule_stg_nhl__schedule_id", "alias": "unique_stg_nhl__schedule_stg_nhl__schedule_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_nhl__schedule"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/staging/stg_nhl__schedule.yml/unique_stg_nhl__schedule_stg_nhl__schedule_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.552644, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select stg_nhl__schedule_id as unique_field\n  from `nhl-breakouts`.`analytics_staging`.`stg_nhl__schedule`\n  where stg_nhl__schedule_id is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "stg_nhl__schedule_id", "file_key_name": "models.stg_nhl__schedule"}, "test.dbt_nhl_breakouts.not_null_stg_nhl__schedule_stg_nhl__schedule_id.22069ed10b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "stg_nhl__schedule_id", "model": "{{ get_where_subquery(ref('stg_nhl__schedule')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.stg_nhl__schedule"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "staging", "not_null_stg_nhl__schedule_stg_nhl__schedule_id"], "unique_id": "test.dbt_nhl_breakouts.not_null_stg_nhl__schedule_stg_nhl__schedule_id.22069ed10b", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "not_null_stg_nhl__schedule_stg_nhl__schedule_id.sql", "original_file_path": "models/staging/stg_nhl__schedule.yml", "name": "not_null_stg_nhl__schedule_stg_nhl__schedule_id", "alias": "not_null_stg_nhl__schedule_stg_nhl__schedule_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_nhl__schedule"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/staging/stg_nhl__schedule.yml/not_null_stg_nhl__schedule_stg_nhl__schedule_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.553428, "compiled_sql": "\n    \n    \n\nselect *\nfrom `nhl-breakouts`.`analytics_staging`.`stg_nhl__schedule`\nwhere stg_nhl__schedule_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "stg_nhl__schedule_id", "file_key_name": "models.stg_nhl__schedule"}, "test.dbt_nhl_breakouts.not_null_stg_nhl__schedule_game_id.5980307620": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "game_id", "model": "{{ get_where_subquery(ref('stg_nhl__schedule')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.stg_nhl__schedule"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "staging", "not_null_stg_nhl__schedule_game_id"], "unique_id": "test.dbt_nhl_breakouts.not_null_stg_nhl__schedule_game_id.5980307620", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "not_null_stg_nhl__schedule_game_id.sql", "original_file_path": "models/staging/stg_nhl__schedule.yml", "name": "not_null_stg_nhl__schedule_game_id", "alias": "not_null_stg_nhl__schedule_game_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_nhl__schedule"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/staging/stg_nhl__schedule.yml/not_null_stg_nhl__schedule_game_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.5541928, "compiled_sql": "\n    \n    \n\nselect *\nfrom `nhl-breakouts`.`analytics_staging`.`stg_nhl__schedule`\nwhere game_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "game_id", "file_key_name": "models.stg_nhl__schedule"}, "test.dbt_nhl_breakouts.unique_stg_nhl__schedule_game_id.a33bfba589": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "game_id", "model": "{{ get_where_subquery(ref('stg_nhl__schedule')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.stg_nhl__schedule"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "staging", "unique_stg_nhl__schedule_game_id"], "unique_id": "test.dbt_nhl_breakouts.unique_stg_nhl__schedule_game_id.a33bfba589", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "unique_stg_nhl__schedule_game_id.sql", "original_file_path": "models/staging/stg_nhl__schedule.yml", "name": "unique_stg_nhl__schedule_game_id", "alias": "unique_stg_nhl__schedule_game_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_nhl__schedule"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/staging/stg_nhl__schedule.yml/unique_stg_nhl__schedule_game_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.554955, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select game_id as unique_field\n  from `nhl-breakouts`.`analytics_staging`.`stg_nhl__schedule`\n  where game_id is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "game_id", "file_key_name": "models.stg_nhl__schedule"}, "test.dbt_nhl_breakouts.not_null_stg_nhl__schedule_season_id.89ee97b591": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "season_id", "model": "{{ get_where_subquery(ref('stg_nhl__schedule')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.stg_nhl__schedule"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "staging", "not_null_stg_nhl__schedule_season_id"], "unique_id": "test.dbt_nhl_breakouts.not_null_stg_nhl__schedule_season_id.89ee97b591", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "not_null_stg_nhl__schedule_season_id.sql", "original_file_path": "models/staging/stg_nhl__schedule.yml", "name": "not_null_stg_nhl__schedule_season_id", "alias": "not_null_stg_nhl__schedule_season_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_nhl__schedule"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/staging/stg_nhl__schedule.yml/not_null_stg_nhl__schedule_season_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.555823, "compiled_sql": "\n    \n    \n\nselect *\nfrom `nhl-breakouts`.`analytics_staging`.`stg_nhl__schedule`\nwhere season_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "season_id", "file_key_name": "models.stg_nhl__schedule"}, "test.dbt_nhl_breakouts.not_null_stg_nhl__schedule_away_team_id.8366912c5b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "away_team_id", "model": "{{ get_where_subquery(ref('stg_nhl__schedule')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.stg_nhl__schedule"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "staging", "not_null_stg_nhl__schedule_away_team_id"], "unique_id": "test.dbt_nhl_breakouts.not_null_stg_nhl__schedule_away_team_id.8366912c5b", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "not_null_stg_nhl__schedule_away_team_id.sql", "original_file_path": "models/staging/stg_nhl__schedule.yml", "name": "not_null_stg_nhl__schedule_away_team_id", "alias": "not_null_stg_nhl__schedule_away_team_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_nhl__schedule"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/staging/stg_nhl__schedule.yml/not_null_stg_nhl__schedule_away_team_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.556577, "compiled_sql": "\n    \n    \n\nselect *\nfrom `nhl-breakouts`.`analytics_staging`.`stg_nhl__schedule`\nwhere away_team_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "away_team_id", "file_key_name": "models.stg_nhl__schedule"}, "test.dbt_nhl_breakouts.not_null_stg_nhl__schedule_home_team_id.f4f7114670": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "home_team_id", "model": "{{ get_where_subquery(ref('stg_nhl__schedule')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.stg_nhl__schedule"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "staging", "not_null_stg_nhl__schedule_home_team_id"], "unique_id": "test.dbt_nhl_breakouts.not_null_stg_nhl__schedule_home_team_id.f4f7114670", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "not_null_stg_nhl__schedule_home_team_id.sql", "original_file_path": "models/staging/stg_nhl__schedule.yml", "name": "not_null_stg_nhl__schedule_home_team_id", "alias": "not_null_stg_nhl__schedule_home_team_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_nhl__schedule"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/staging/stg_nhl__schedule.yml/not_null_stg_nhl__schedule_home_team_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.5573251, "compiled_sql": "\n    \n    \n\nselect *\nfrom `nhl-breakouts`.`analytics_staging`.`stg_nhl__schedule`\nwhere home_team_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "home_team_id", "file_key_name": "models.stg_nhl__schedule"}, "test.dbt_nhl_breakouts.unique_stg_nhl__draft_stg_nhl__draft_id.e0b1a661b5": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "stg_nhl__draft_id", "model": "{{ get_where_subquery(ref('stg_nhl__draft')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.stg_nhl__draft"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "staging", "unique_stg_nhl__draft_stg_nhl__draft_id"], "unique_id": "test.dbt_nhl_breakouts.unique_stg_nhl__draft_stg_nhl__draft_id.e0b1a661b5", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "unique_stg_nhl__draft_stg_nhl__draft_id.sql", "original_file_path": "models/staging/stg_nhl__draft.yml", "name": "unique_stg_nhl__draft_stg_nhl__draft_id", "alias": "unique_stg_nhl__draft_stg_nhl__draft_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_nhl__draft"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/staging/stg_nhl__draft.yml/unique_stg_nhl__draft_stg_nhl__draft_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.5602372, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select stg_nhl__draft_id as unique_field\n  from `nhl-breakouts`.`analytics_staging`.`stg_nhl__draft`\n  where stg_nhl__draft_id is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "stg_nhl__draft_id", "file_key_name": "models.stg_nhl__draft"}, "test.dbt_nhl_breakouts.not_null_stg_nhl__draft_stg_nhl__draft_id.b677065bc5": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "stg_nhl__draft_id", "model": "{{ get_where_subquery(ref('stg_nhl__draft')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.stg_nhl__draft"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "staging", "not_null_stg_nhl__draft_stg_nhl__draft_id"], "unique_id": "test.dbt_nhl_breakouts.not_null_stg_nhl__draft_stg_nhl__draft_id.b677065bc5", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "not_null_stg_nhl__draft_stg_nhl__draft_id.sql", "original_file_path": "models/staging/stg_nhl__draft.yml", "name": "not_null_stg_nhl__draft_stg_nhl__draft_id", "alias": "not_null_stg_nhl__draft_stg_nhl__draft_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_nhl__draft"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/staging/stg_nhl__draft.yml/not_null_stg_nhl__draft_stg_nhl__draft_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.561013, "compiled_sql": "\n    \n    \n\nselect *\nfrom `nhl-breakouts`.`analytics_staging`.`stg_nhl__draft`\nwhere stg_nhl__draft_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "stg_nhl__draft_id", "file_key_name": "models.stg_nhl__draft"}, "test.dbt_nhl_breakouts.unique_stg_nhl__seasons_stg_nhl__seasons_id.3ef0f38a83": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "stg_nhl__seasons_id", "model": "{{ get_where_subquery(ref('stg_nhl__seasons')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.stg_nhl__seasons"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "staging", "unique_stg_nhl__seasons_stg_nhl__seasons_id"], "unique_id": "test.dbt_nhl_breakouts.unique_stg_nhl__seasons_stg_nhl__seasons_id.3ef0f38a83", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "unique_stg_nhl__seasons_stg_nhl__seasons_id.sql", "original_file_path": "models/staging/stg_nhl__seasons.yml", "name": "unique_stg_nhl__seasons_stg_nhl__seasons_id", "alias": "unique_stg_nhl__seasons_stg_nhl__seasons_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_nhl__seasons"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/staging/stg_nhl__seasons.yml/unique_stg_nhl__seasons_stg_nhl__seasons_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.564218, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select stg_nhl__seasons_id as unique_field\n  from `nhl-breakouts`.`analytics_staging`.`stg_nhl__seasons`\n  where stg_nhl__seasons_id is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "stg_nhl__seasons_id", "file_key_name": "models.stg_nhl__seasons"}, "test.dbt_nhl_breakouts.not_null_stg_nhl__seasons_stg_nhl__seasons_id.e0d5931aa0": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "stg_nhl__seasons_id", "model": "{{ get_where_subquery(ref('stg_nhl__seasons')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.stg_nhl__seasons"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "staging", "not_null_stg_nhl__seasons_stg_nhl__seasons_id"], "unique_id": "test.dbt_nhl_breakouts.not_null_stg_nhl__seasons_stg_nhl__seasons_id.e0d5931aa0", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "not_null_stg_nhl__seasons_stg_nhl__seasons_id.sql", "original_file_path": "models/staging/stg_nhl__seasons.yml", "name": "not_null_stg_nhl__seasons_stg_nhl__seasons_id", "alias": "not_null_stg_nhl__seasons_stg_nhl__seasons_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_nhl__seasons"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/staging/stg_nhl__seasons.yml/not_null_stg_nhl__seasons_stg_nhl__seasons_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.564995, "compiled_sql": "\n    \n    \n\nselect *\nfrom `nhl-breakouts`.`analytics_staging`.`stg_nhl__seasons`\nwhere stg_nhl__seasons_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "stg_nhl__seasons_id", "file_key_name": "models.stg_nhl__seasons"}, "test.dbt_nhl_breakouts.unique_stg_nhl__seasons_season_id.9b4d7cf6f0": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "season_id", "model": "{{ get_where_subquery(ref('stg_nhl__seasons')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.stg_nhl__seasons"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "staging", "unique_stg_nhl__seasons_season_id"], "unique_id": "test.dbt_nhl_breakouts.unique_stg_nhl__seasons_season_id.9b4d7cf6f0", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "unique_stg_nhl__seasons_season_id.sql", "original_file_path": "models/staging/stg_nhl__seasons.yml", "name": "unique_stg_nhl__seasons_season_id", "alias": "unique_stg_nhl__seasons_season_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_nhl__seasons"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/staging/stg_nhl__seasons.yml/unique_stg_nhl__seasons_season_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.565865, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select season_id as unique_field\n  from `nhl-breakouts`.`analytics_staging`.`stg_nhl__seasons`\n  where season_id is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "season_id", "file_key_name": "models.stg_nhl__seasons"}, "test.dbt_nhl_breakouts.not_null_stg_nhl__seasons_season_id.a335e0b9f9": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "season_id", "model": "{{ get_where_subquery(ref('stg_nhl__seasons')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.stg_nhl__seasons"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "staging", "not_null_stg_nhl__seasons_season_id"], "unique_id": "test.dbt_nhl_breakouts.not_null_stg_nhl__seasons_season_id.a335e0b9f9", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "not_null_stg_nhl__seasons_season_id.sql", "original_file_path": "models/staging/stg_nhl__seasons.yml", "name": "not_null_stg_nhl__seasons_season_id", "alias": "not_null_stg_nhl__seasons_season_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_nhl__seasons"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/staging/stg_nhl__seasons.yml/not_null_stg_nhl__seasons_season_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.566622, "compiled_sql": "\n    \n    \n\nselect *\nfrom `nhl-breakouts`.`analytics_staging`.`stg_nhl__seasons`\nwhere season_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "season_id", "file_key_name": "models.stg_nhl__seasons"}, "test.dbt_nhl_breakouts.unique_stg_nhl__boxscore_team_stg_nhl__boxscore_team_id.3ff8ece5fa": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "stg_nhl__boxscore_team_id", "model": "{{ get_where_subquery(ref('stg_nhl__boxscore_team')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.stg_nhl__boxscore_team"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "staging", "unique_stg_nhl__boxscore_team_stg_nhl__boxscore_team_id"], "unique_id": "test.dbt_nhl_breakouts.unique_stg_nhl__boxscore_team_stg_nhl__boxscore_team_id.3ff8ece5fa", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "unique_stg_nhl__boxscore_team_stg_nhl__boxscore_team_id.sql", "original_file_path": "models/staging/stg_nhl__boxscore_team.yml", "name": "unique_stg_nhl__boxscore_team_stg_nhl__boxscore_team_id", "alias": "unique_stg_nhl__boxscore_team_stg_nhl__boxscore_team_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_nhl__boxscore_team"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/staging/stg_nhl__boxscore_team.yml/unique_stg_nhl__boxscore_team_stg_nhl__boxscore_team_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.576583, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select stg_nhl__boxscore_team_id as unique_field\n  from `nhl-breakouts`.`analytics_staging`.`stg_nhl__boxscore_team`\n  where stg_nhl__boxscore_team_id is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "stg_nhl__boxscore_team_id", "file_key_name": "models.stg_nhl__boxscore_team"}, "test.dbt_nhl_breakouts.not_null_stg_nhl__boxscore_team_stg_nhl__boxscore_team_id.9bd9688044": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "stg_nhl__boxscore_team_id", "model": "{{ get_where_subquery(ref('stg_nhl__boxscore_team')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.stg_nhl__boxscore_team"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "staging", "not_null_stg_nhl__boxscore_team_stg_nhl__boxscore_team_id"], "unique_id": "test.dbt_nhl_breakouts.not_null_stg_nhl__boxscore_team_stg_nhl__boxscore_team_id.9bd9688044", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "not_null_stg_nhl__boxscore_team_stg_nhl__boxscore_team_id.sql", "original_file_path": "models/staging/stg_nhl__boxscore_team.yml", "name": "not_null_stg_nhl__boxscore_team_stg_nhl__boxscore_team_id", "alias": "not_null_stg_nhl__boxscore_team_stg_nhl__boxscore_team_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_nhl__boxscore_team"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/staging/stg_nhl__boxscore_team.yml/not_null_stg_nhl__boxscore_team_stg_nhl__boxscore_team_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.577374, "compiled_sql": "\n    \n    \n\nselect *\nfrom `nhl-breakouts`.`analytics_staging`.`stg_nhl__boxscore_team`\nwhere stg_nhl__boxscore_team_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "stg_nhl__boxscore_team_id", "file_key_name": "models.stg_nhl__boxscore_team"}, "test.dbt_nhl_breakouts.not_null_dates_date_id.ecacfb484c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date_id", "model": "{{ get_where_subquery(ref('dates')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.dates"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "utils", "not_null_dates_date_id"], "unique_id": "test.dbt_nhl_breakouts.not_null_dates_date_id.ecacfb484c", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "not_null_dates_date_id.sql", "original_file_path": "models/utils/dates.yml", "name": "not_null_dates_date_id", "alias": "not_null_dates_date_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dates"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/utils/dates.yml/not_null_dates_date_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.580132, "compiled_sql": "\n    \n    \n\nselect *\nfrom `nhl-breakouts`.`analytics_utils`.`dates`\nwhere date_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date_id", "file_key_name": "models.dates"}, "test.dbt_nhl_breakouts.unique_dates_date_id.a3a9dc1a29": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "date_id", "model": "{{ get_where_subquery(ref('dates')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.dates"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "utils", "unique_dates_date_id"], "unique_id": "test.dbt_nhl_breakouts.unique_dates_date_id.a3a9dc1a29", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "unique_dates_date_id.sql", "original_file_path": "models/utils/dates.yml", "name": "unique_dates_date_id", "alias": "unique_dates_date_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dates"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/utils/dates.yml/unique_dates_date_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.5809112, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select date_id as unique_field\n  from `nhl-breakouts`.`analytics_utils`.`dates`\n  where date_id is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date_id", "file_key_name": "models.dates"}, "test.dbt_nhl_breakouts.unique_f_player_season_player_season_id.e9ba28a61b": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "player_season_id", "model": "{{ get_where_subquery(ref('f_player_season')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.f_player_season"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "analytics", "core", "unique_f_player_season_player_season_id"], "unique_id": "test.dbt_nhl_breakouts.unique_f_player_season_player_season_id.e9ba28a61b", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "unique_f_player_season_player_season_id.sql", "original_file_path": "models/analytics/core/f_player_season.yml", "name": "unique_f_player_season_player_season_id", "alias": "unique_f_player_season_player_season_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["f_player_season"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/analytics/core/f_player_season.yml/unique_f_player_season_player_season_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.589074, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select player_season_id as unique_field\n  from `nhl-breakouts`.`analytics_core`.`f_player_season`\n  where player_season_id is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "player_season_id", "file_key_name": "models.f_player_season"}, "test.dbt_nhl_breakouts.not_null_f_player_season_player_season_id.1047e040ba": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "player_season_id", "model": "{{ get_where_subquery(ref('f_player_season')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.f_player_season"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "analytics", "core", "not_null_f_player_season_player_season_id"], "unique_id": "test.dbt_nhl_breakouts.not_null_f_player_season_player_season_id.1047e040ba", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "not_null_f_player_season_player_season_id.sql", "original_file_path": "models/analytics/core/f_player_season.yml", "name": "not_null_f_player_season_player_season_id", "alias": "not_null_f_player_season_player_season_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["f_player_season"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/analytics/core/f_player_season.yml/not_null_f_player_season_player_season_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.589857, "compiled_sql": "\n    \n    \n\nselect *\nfrom `nhl-breakouts`.`analytics_core`.`f_player_season`\nwhere player_season_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "player_season_id", "file_key_name": "models.f_player_season"}, "test.dbt_nhl_breakouts.unique_f_boxscore_team_boxscore_team_id.4861e1676d": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "boxscore_team_id", "model": "{{ get_where_subquery(ref('f_boxscore_team')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.f_boxscore_team"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "analytics", "intermediate", "unique_f_boxscore_team_boxscore_team_id"], "unique_id": "test.dbt_nhl_breakouts.unique_f_boxscore_team_boxscore_team_id.4861e1676d", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "unique_f_boxscore_team_boxscore_team_id.sql", "original_file_path": "models/analytics/intermediate/f_boxscore_team.yml", "name": "unique_f_boxscore_team_boxscore_team_id", "alias": "unique_f_boxscore_team_boxscore_team_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["f_boxscore_team"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/analytics/intermediate/f_boxscore_team.yml/unique_f_boxscore_team_boxscore_team_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.593647, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select boxscore_team_id as unique_field\n  from `nhl-breakouts`.`analytics_intermediate`.`f_boxscore_team`\n  where boxscore_team_id is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "boxscore_team_id", "file_key_name": "models.f_boxscore_team"}, "test.dbt_nhl_breakouts.not_null_f_boxscore_team_boxscore_team_id.e62d4c1299": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "boxscore_team_id", "model": "{{ get_where_subquery(ref('f_boxscore_team')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.f_boxscore_team"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "analytics", "intermediate", "not_null_f_boxscore_team_boxscore_team_id"], "unique_id": "test.dbt_nhl_breakouts.not_null_f_boxscore_team_boxscore_team_id.e62d4c1299", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "not_null_f_boxscore_team_boxscore_team_id.sql", "original_file_path": "models/analytics/intermediate/f_boxscore_team.yml", "name": "not_null_f_boxscore_team_boxscore_team_id", "alias": "not_null_f_boxscore_team_boxscore_team_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["f_boxscore_team"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/analytics/intermediate/f_boxscore_team.yml/not_null_f_boxscore_team_boxscore_team_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.594521, "compiled_sql": "\n    \n    \n\nselect *\nfrom `nhl-breakouts`.`analytics_intermediate`.`f_boxscore_team`\nwhere boxscore_team_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "boxscore_team_id", "file_key_name": "models.f_boxscore_team"}, "test.dbt_nhl_breakouts.not_null_f_boxscore_team_game_id.35d88eabfb": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "game_id", "model": "{{ get_where_subquery(ref('f_boxscore_team')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.f_boxscore_team"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "analytics", "intermediate", "not_null_f_boxscore_team_game_id"], "unique_id": "test.dbt_nhl_breakouts.not_null_f_boxscore_team_game_id.35d88eabfb", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "not_null_f_boxscore_team_game_id.sql", "original_file_path": "models/analytics/intermediate/f_boxscore_team.yml", "name": "not_null_f_boxscore_team_game_id", "alias": "not_null_f_boxscore_team_game_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["f_boxscore_team"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/analytics/intermediate/f_boxscore_team.yml/not_null_f_boxscore_team_game_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.5952861, "compiled_sql": "\n    \n    \n\nselect *\nfrom `nhl-breakouts`.`analytics_intermediate`.`f_boxscore_team`\nwhere game_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "game_id", "file_key_name": "models.f_boxscore_team"}, "test.dbt_nhl_breakouts.not_null_f_boxscore_team_team_id.80b942dc8f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "team_id", "model": "{{ get_where_subquery(ref('f_boxscore_team')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.f_boxscore_team"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "analytics", "intermediate", "not_null_f_boxscore_team_team_id"], "unique_id": "test.dbt_nhl_breakouts.not_null_f_boxscore_team_team_id.80b942dc8f", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "not_null_f_boxscore_team_team_id.sql", "original_file_path": "models/analytics/intermediate/f_boxscore_team.yml", "name": "not_null_f_boxscore_team_team_id", "alias": "not_null_f_boxscore_team_team_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["f_boxscore_team"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/analytics/intermediate/f_boxscore_team.yml/not_null_f_boxscore_team_team_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.596043, "compiled_sql": "\n    \n    \n\nselect *\nfrom `nhl-breakouts`.`analytics_intermediate`.`f_boxscore_team`\nwhere team_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "team_id", "file_key_name": "models.f_boxscore_team"}, "test.dbt_nhl_breakouts.unique_d_schedule_schedule_id.5268ef07af": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "schedule_id", "model": "{{ get_where_subquery(ref('d_schedule')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.d_schedule"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "analytics", "intermediate", "unique_d_schedule_schedule_id"], "unique_id": "test.dbt_nhl_breakouts.unique_d_schedule_schedule_id.5268ef07af", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "unique_d_schedule_schedule_id.sql", "original_file_path": "models/analytics/intermediate/d_schedule.yml", "name": "unique_d_schedule_schedule_id", "alias": "unique_d_schedule_schedule_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["d_schedule"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/analytics/intermediate/d_schedule.yml/unique_d_schedule_schedule_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.602388, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select schedule_id as unique_field\n  from `nhl-breakouts`.`analytics_intermediate`.`d_schedule`\n  where schedule_id is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "schedule_id", "file_key_name": "models.d_schedule"}, "test.dbt_nhl_breakouts.not_null_d_schedule_schedule_id.05b7735a58": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "schedule_id", "model": "{{ get_where_subquery(ref('d_schedule')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.d_schedule"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "analytics", "intermediate", "not_null_d_schedule_schedule_id"], "unique_id": "test.dbt_nhl_breakouts.not_null_d_schedule_schedule_id.05b7735a58", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "not_null_d_schedule_schedule_id.sql", "original_file_path": "models/analytics/intermediate/d_schedule.yml", "name": "not_null_d_schedule_schedule_id", "alias": "not_null_d_schedule_schedule_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["d_schedule"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/analytics/intermediate/d_schedule.yml/not_null_d_schedule_schedule_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.603172, "compiled_sql": "\n    \n    \n\nselect *\nfrom `nhl-breakouts`.`analytics_intermediate`.`d_schedule`\nwhere schedule_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "schedule_id", "file_key_name": "models.d_schedule"}, "test.dbt_nhl_breakouts.not_null_d_schedule_game_id.16aa7a404b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "game_id", "model": "{{ get_where_subquery(ref('d_schedule')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.d_schedule"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "analytics", "intermediate", "not_null_d_schedule_game_id"], "unique_id": "test.dbt_nhl_breakouts.not_null_d_schedule_game_id.16aa7a404b", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "not_null_d_schedule_game_id.sql", "original_file_path": "models/analytics/intermediate/d_schedule.yml", "name": "not_null_d_schedule_game_id", "alias": "not_null_d_schedule_game_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["d_schedule"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/analytics/intermediate/d_schedule.yml/not_null_d_schedule_game_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.6040251, "compiled_sql": "\n    \n    \n\nselect *\nfrom `nhl-breakouts`.`analytics_intermediate`.`d_schedule`\nwhere game_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "game_id", "file_key_name": "models.d_schedule"}, "test.dbt_nhl_breakouts.unique_d_schedule_game_id.195e8d1feb": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "game_id", "model": "{{ get_where_subquery(ref('d_schedule')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.d_schedule"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "analytics", "intermediate", "unique_d_schedule_game_id"], "unique_id": "test.dbt_nhl_breakouts.unique_d_schedule_game_id.195e8d1feb", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "unique_d_schedule_game_id.sql", "original_file_path": "models/analytics/intermediate/d_schedule.yml", "name": "unique_d_schedule_game_id", "alias": "unique_d_schedule_game_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["d_schedule"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/analytics/intermediate/d_schedule.yml/unique_d_schedule_game_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.604778, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select game_id as unique_field\n  from `nhl-breakouts`.`analytics_intermediate`.`d_schedule`\n  where game_id is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "game_id", "file_key_name": "models.d_schedule"}, "test.dbt_nhl_breakouts.not_null_d_schedule_season_id.231c1ee113": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "season_id", "model": "{{ get_where_subquery(ref('d_schedule')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.d_schedule"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "analytics", "intermediate", "not_null_d_schedule_season_id"], "unique_id": "test.dbt_nhl_breakouts.not_null_d_schedule_season_id.231c1ee113", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "not_null_d_schedule_season_id.sql", "original_file_path": "models/analytics/intermediate/d_schedule.yml", "name": "not_null_d_schedule_season_id", "alias": "not_null_d_schedule_season_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["d_schedule"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/analytics/intermediate/d_schedule.yml/not_null_d_schedule_season_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.60553, "compiled_sql": "\n    \n    \n\nselect *\nfrom `nhl-breakouts`.`analytics_intermediate`.`d_schedule`\nwhere season_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "season_id", "file_key_name": "models.d_schedule"}, "test.dbt_nhl_breakouts.not_null_d_schedule_away_team_id.a0c1750c24": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "away_team_id", "model": "{{ get_where_subquery(ref('d_schedule')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.d_schedule"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "analytics", "intermediate", "not_null_d_schedule_away_team_id"], "unique_id": "test.dbt_nhl_breakouts.not_null_d_schedule_away_team_id.a0c1750c24", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "not_null_d_schedule_away_team_id.sql", "original_file_path": "models/analytics/intermediate/d_schedule.yml", "name": "not_null_d_schedule_away_team_id", "alias": "not_null_d_schedule_away_team_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["d_schedule"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/analytics/intermediate/d_schedule.yml/not_null_d_schedule_away_team_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.6062772, "compiled_sql": "\n    \n    \n\nselect *\nfrom `nhl-breakouts`.`analytics_intermediate`.`d_schedule`\nwhere away_team_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "away_team_id", "file_key_name": "models.d_schedule"}, "test.dbt_nhl_breakouts.not_null_d_schedule_home_team_id.5bd88d400b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "home_team_id", "model": "{{ get_where_subquery(ref('d_schedule')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.d_schedule"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "analytics", "intermediate", "not_null_d_schedule_home_team_id"], "unique_id": "test.dbt_nhl_breakouts.not_null_d_schedule_home_team_id.5bd88d400b", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "not_null_d_schedule_home_team_id.sql", "original_file_path": "models/analytics/intermediate/d_schedule.yml", "name": "not_null_d_schedule_home_team_id", "alias": "not_null_d_schedule_home_team_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["d_schedule"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/analytics/intermediate/d_schedule.yml/not_null_d_schedule_home_team_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.60715, "compiled_sql": "\n    \n    \n\nselect *\nfrom `nhl-breakouts`.`analytics_intermediate`.`d_schedule`\nwhere home_team_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "home_team_id", "file_key_name": "models.d_schedule"}, "test.dbt_nhl_breakouts.unique_d_divisions_division_id.83aca42a7c": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "division_id", "model": "{{ get_where_subquery(ref('d_divisions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.d_divisions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "analytics", "intermediate", "unique_d_divisions_division_id"], "unique_id": "test.dbt_nhl_breakouts.unique_d_divisions_division_id.83aca42a7c", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "unique_d_divisions_division_id.sql", "original_file_path": "models/analytics/intermediate/d_divisions.yml", "name": "unique_d_divisions_division_id", "alias": "unique_d_divisions_division_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["d_divisions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/analytics/intermediate/d_divisions.yml/unique_d_divisions_division_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.6093671, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select division_id as unique_field\n  from `nhl-breakouts`.`analytics_intermediate`.`d_divisions`\n  where division_id is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "division_id", "file_key_name": "models.d_divisions"}, "test.dbt_nhl_breakouts.not_null_d_divisions_division_id.9a7aadfdb2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "division_id", "model": "{{ get_where_subquery(ref('d_divisions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.d_divisions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "analytics", "intermediate", "not_null_d_divisions_division_id"], "unique_id": "test.dbt_nhl_breakouts.not_null_d_divisions_division_id.9a7aadfdb2", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "not_null_d_divisions_division_id.sql", "original_file_path": "models/analytics/intermediate/d_divisions.yml", "name": "not_null_d_divisions_division_id", "alias": "not_null_d_divisions_division_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["d_divisions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/analytics/intermediate/d_divisions.yml/not_null_d_divisions_division_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.6101398, "compiled_sql": "\n    \n    \n\nselect *\nfrom `nhl-breakouts`.`analytics_intermediate`.`d_divisions`\nwhere division_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "division_id", "file_key_name": "models.d_divisions"}, "test.dbt_nhl_breakouts.not_null_d_divisions_conference_id.08feeb1868": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "conference_id", "model": "{{ get_where_subquery(ref('d_divisions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.d_divisions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "analytics", "intermediate", "not_null_d_divisions_conference_id"], "unique_id": "test.dbt_nhl_breakouts.not_null_d_divisions_conference_id.08feeb1868", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "not_null_d_divisions_conference_id.sql", "original_file_path": "models/analytics/intermediate/d_divisions.yml", "name": "not_null_d_divisions_conference_id", "alias": "not_null_d_divisions_conference_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["d_divisions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/analytics/intermediate/d_divisions.yml/not_null_d_divisions_conference_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.611018, "compiled_sql": "\n    \n    \n\nselect *\nfrom `nhl-breakouts`.`analytics_intermediate`.`d_divisions`\nwhere conference_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "conference_id", "file_key_name": "models.d_divisions"}, "test.dbt_nhl_breakouts.unique_f_plays_play_id.f1d5dd28d5": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "play_id", "model": "{{ get_where_subquery(ref('f_plays')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.f_plays"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "analytics", "intermediate", "unique_f_plays_play_id"], "unique_id": "test.dbt_nhl_breakouts.unique_f_plays_play_id.f1d5dd28d5", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "unique_f_plays_play_id.sql", "original_file_path": "models/analytics/intermediate/f_plays.yml", "name": "unique_f_plays_play_id", "alias": "unique_f_plays_play_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["f_plays"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/analytics/intermediate/f_plays.yml/unique_f_plays_play_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.6205308, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select play_id as unique_field\n  from `nhl-breakouts`.`analytics_intermediate`.`f_plays`\n  where play_id is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "play_id", "file_key_name": "models.f_plays"}, "test.dbt_nhl_breakouts.not_null_f_plays_play_id.50869b6b5e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "play_id", "model": "{{ get_where_subquery(ref('f_plays')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.f_plays"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "analytics", "intermediate", "not_null_f_plays_play_id"], "unique_id": "test.dbt_nhl_breakouts.not_null_f_plays_play_id.50869b6b5e", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "not_null_f_plays_play_id.sql", "original_file_path": "models/analytics/intermediate/f_plays.yml", "name": "not_null_f_plays_play_id", "alias": "not_null_f_plays_play_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["f_plays"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/analytics/intermediate/f_plays.yml/not_null_f_plays_play_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.621359, "compiled_sql": "\n    \n    \n\nselect *\nfrom `nhl-breakouts`.`analytics_intermediate`.`f_plays`\nwhere play_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "play_id", "file_key_name": "models.f_plays"}, "test.dbt_nhl_breakouts.not_null_f_plays_game_id.be283c768c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "game_id", "model": "{{ get_where_subquery(ref('f_plays')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.f_plays"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "analytics", "intermediate", "not_null_f_plays_game_id"], "unique_id": "test.dbt_nhl_breakouts.not_null_f_plays_game_id.be283c768c", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "not_null_f_plays_game_id.sql", "original_file_path": "models/analytics/intermediate/f_plays.yml", "name": "not_null_f_plays_game_id", "alias": "not_null_f_plays_game_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["f_plays"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/analytics/intermediate/f_plays.yml/not_null_f_plays_game_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.622119, "compiled_sql": "\n    \n    \n\nselect *\nfrom `nhl-breakouts`.`analytics_intermediate`.`f_plays`\nwhere game_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "game_id", "file_key_name": "models.f_plays"}, "test.dbt_nhl_breakouts.not_null_f_plays_event_idx.88cd93f8ae": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_idx", "model": "{{ get_where_subquery(ref('f_plays')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.f_plays"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "analytics", "intermediate", "not_null_f_plays_event_idx"], "unique_id": "test.dbt_nhl_breakouts.not_null_f_plays_event_idx.88cd93f8ae", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "not_null_f_plays_event_idx.sql", "original_file_path": "models/analytics/intermediate/f_plays.yml", "name": "not_null_f_plays_event_idx", "alias": "not_null_f_plays_event_idx", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["f_plays"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/analytics/intermediate/f_plays.yml/not_null_f_plays_event_idx.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.622865, "compiled_sql": "\n    \n    \n\nselect *\nfrom `nhl-breakouts`.`analytics_intermediate`.`f_plays`\nwhere event_idx is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "event_idx", "file_key_name": "models.f_plays"}, "test.dbt_nhl_breakouts.not_null_f_plays_event_id.42f7019a28": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('f_plays')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.f_plays"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "analytics", "intermediate", "not_null_f_plays_event_id"], "unique_id": "test.dbt_nhl_breakouts.not_null_f_plays_event_id.42f7019a28", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "not_null_f_plays_event_id.sql", "original_file_path": "models/analytics/intermediate/f_plays.yml", "name": "not_null_f_plays_event_id", "alias": "not_null_f_plays_event_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["f_plays"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/analytics/intermediate/f_plays.yml/not_null_f_plays_event_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.623725, "compiled_sql": "\n    \n    \n\nselect *\nfrom `nhl-breakouts`.`analytics_intermediate`.`f_plays`\nwhere event_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "event_id", "file_key_name": "models.f_plays"}, "test.dbt_nhl_breakouts.not_null_f_plays_player_id.3976f4d4f0": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "player_id", "model": "{{ get_where_subquery(ref('f_plays')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.f_plays"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "analytics", "intermediate", "not_null_f_plays_player_id"], "unique_id": "test.dbt_nhl_breakouts.not_null_f_plays_player_id.3976f4d4f0", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "not_null_f_plays_player_id.sql", "original_file_path": "models/analytics/intermediate/f_plays.yml", "name": "not_null_f_plays_player_id", "alias": "not_null_f_plays_player_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["f_plays"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/analytics/intermediate/f_plays.yml/not_null_f_plays_player_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.624476, "compiled_sql": "\n    \n    \n\nselect *\nfrom `nhl-breakouts`.`analytics_intermediate`.`f_plays`\nwhere player_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "player_id", "file_key_name": "models.f_plays"}, "test.dbt_nhl_breakouts.not_null_f_plays_team_id.26ff5ba943": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "team_id", "model": "{{ get_where_subquery(ref('f_plays')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.f_plays"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "analytics", "intermediate", "not_null_f_plays_team_id"], "unique_id": "test.dbt_nhl_breakouts.not_null_f_plays_team_id.26ff5ba943", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "not_null_f_plays_team_id.sql", "original_file_path": "models/analytics/intermediate/f_plays.yml", "name": "not_null_f_plays_team_id", "alias": "not_null_f_plays_team_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["f_plays"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/analytics/intermediate/f_plays.yml/not_null_f_plays_team_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.625204, "compiled_sql": "\n    \n    \n\nselect *\nfrom `nhl-breakouts`.`analytics_intermediate`.`f_plays`\nwhere team_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "team_id", "file_key_name": "models.f_plays"}, "test.dbt_nhl_breakouts.not_null_d_date_date_id.17765c9312": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date_id", "model": "{{ get_where_subquery(ref('d_date')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.d_date"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "analytics", "intermediate", "not_null_d_date_date_id"], "unique_id": "test.dbt_nhl_breakouts.not_null_d_date_date_id.17765c9312", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "not_null_d_date_date_id.sql", "original_file_path": "models/analytics/intermediate/d_date.yml", "name": "not_null_d_date_date_id", "alias": "not_null_d_date_date_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["d_date"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/analytics/intermediate/d_date.yml/not_null_d_date_date_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.627977, "compiled_sql": "\n    \n    \n\nselect *\nfrom `nhl-breakouts`.`analytics_intermediate`.`d_date`\nwhere date_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date_id", "file_key_name": "models.d_date"}, "test.dbt_nhl_breakouts.unique_d_date_date_id.bd95340cc8": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "date_id", "model": "{{ get_where_subquery(ref('d_date')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.d_date"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "analytics", "intermediate", "unique_d_date_date_id"], "unique_id": "test.dbt_nhl_breakouts.unique_d_date_date_id.bd95340cc8", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "unique_d_date_date_id.sql", "original_file_path": "models/analytics/intermediate/d_date.yml", "name": "unique_d_date_date_id", "alias": "unique_d_date_date_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["d_date"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/analytics/intermediate/d_date.yml/unique_d_date_date_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.628743, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select date_id as unique_field\n  from `nhl-breakouts`.`analytics_intermediate`.`d_date`\n  where date_id is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date_id", "file_key_name": "models.d_date"}, "test.dbt_nhl_breakouts.unique_d_draft_prospects_draft_prospect_id.ca7e404f29": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "draft_prospect_id", "model": "{{ get_where_subquery(ref('d_draft_prospects')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.d_draft_prospects"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "analytics", "intermediate", "unique_d_draft_prospects_draft_prospect_id"], "unique_id": "test.dbt_nhl_breakouts.unique_d_draft_prospects_draft_prospect_id.ca7e404f29", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "unique_d_draft_prospects_draft_prospect_id.sql", "original_file_path": "models/analytics/intermediate/d_draft_prospects.yml", "name": "unique_d_draft_prospects_draft_prospect_id", "alias": "unique_d_draft_prospects_draft_prospect_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["d_draft_prospects"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/analytics/intermediate/d_draft_prospects.yml/unique_d_draft_prospects_draft_prospect_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.6336472, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select draft_prospect_id as unique_field\n  from `nhl-breakouts`.`analytics_intermediate`.`d_draft_prospects`\n  where draft_prospect_id is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "draft_prospect_id", "file_key_name": "models.d_draft_prospects"}, "test.dbt_nhl_breakouts.not_null_d_draft_prospects_draft_prospect_id.28b9527b5b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "draft_prospect_id", "model": "{{ get_where_subquery(ref('d_draft_prospects')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.d_draft_prospects"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "analytics", "intermediate", "not_null_d_draft_prospects_draft_prospect_id"], "unique_id": "test.dbt_nhl_breakouts.not_null_d_draft_prospects_draft_prospect_id.28b9527b5b", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "not_null_d_draft_prospects_draft_prospect_id.sql", "original_file_path": "models/analytics/intermediate/d_draft_prospects.yml", "name": "not_null_d_draft_prospects_draft_prospect_id", "alias": "not_null_d_draft_prospects_draft_prospect_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["d_draft_prospects"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/analytics/intermediate/d_draft_prospects.yml/not_null_d_draft_prospects_draft_prospect_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.634416, "compiled_sql": "\n    \n    \n\nselect *\nfrom `nhl-breakouts`.`analytics_intermediate`.`d_draft_prospects`\nwhere draft_prospect_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "draft_prospect_id", "file_key_name": "models.d_draft_prospects"}, "test.dbt_nhl_breakouts.not_null_d_draft_prospects_prospect_category_id.a27ca2b454": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "prospect_category_id", "model": "{{ get_where_subquery(ref('d_draft_prospects')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.d_draft_prospects"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "analytics", "intermediate", "not_null_d_draft_prospects_prospect_category_id"], "unique_id": "test.dbt_nhl_breakouts.not_null_d_draft_prospects_prospect_category_id.a27ca2b454", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "not_null_d_draft_prospects_prospect_category_id.sql", "original_file_path": "models/analytics/intermediate/d_draft_prospects.yml", "name": "not_null_d_draft_prospects_prospect_category_id", "alias": "not_null_d_draft_prospects_prospect_category_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["d_draft_prospects"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/analytics/intermediate/d_draft_prospects.yml/not_null_d_draft_prospects_prospect_category_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.635173, "compiled_sql": "\n    \n    \n\nselect *\nfrom `nhl-breakouts`.`analytics_intermediate`.`d_draft_prospects`\nwhere prospect_category_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "prospect_category_id", "file_key_name": "models.d_draft_prospects"}, "test.dbt_nhl_breakouts.unique_f_boxscore_player_boxscore_player_id.b8346d82bf": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "boxscore_player_id", "model": "{{ get_where_subquery(ref('f_boxscore_player')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.f_boxscore_player"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "analytics", "intermediate", "unique_f_boxscore_player_boxscore_player_id"], "unique_id": "test.dbt_nhl_breakouts.unique_f_boxscore_player_boxscore_player_id.b8346d82bf", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "unique_f_boxscore_player_boxscore_player_id.sql", "original_file_path": "models/analytics/intermediate/f_boxscore_player.yml", "name": "unique_f_boxscore_player_boxscore_player_id", "alias": "unique_f_boxscore_player_boxscore_player_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["f_boxscore_player"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/analytics/intermediate/f_boxscore_player.yml/unique_f_boxscore_player_boxscore_player_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.642336, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select boxscore_player_id as unique_field\n  from `nhl-breakouts`.`analytics_intermediate`.`f_boxscore_player`\n  where boxscore_player_id is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "boxscore_player_id", "file_key_name": "models.f_boxscore_player"}, "test.dbt_nhl_breakouts.not_null_f_boxscore_player_boxscore_player_id.e3fb20d4c1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "boxscore_player_id", "model": "{{ get_where_subquery(ref('f_boxscore_player')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.f_boxscore_player"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "analytics", "intermediate", "not_null_f_boxscore_player_boxscore_player_id"], "unique_id": "test.dbt_nhl_breakouts.not_null_f_boxscore_player_boxscore_player_id.e3fb20d4c1", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "not_null_f_boxscore_player_boxscore_player_id.sql", "original_file_path": "models/analytics/intermediate/f_boxscore_player.yml", "name": "not_null_f_boxscore_player_boxscore_player_id", "alias": "not_null_f_boxscore_player_boxscore_player_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["f_boxscore_player"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/analytics/intermediate/f_boxscore_player.yml/not_null_f_boxscore_player_boxscore_player_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.6431732, "compiled_sql": "\n    \n    \n\nselect *\nfrom `nhl-breakouts`.`analytics_intermediate`.`f_boxscore_player`\nwhere boxscore_player_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "boxscore_player_id", "file_key_name": "models.f_boxscore_player"}, "test.dbt_nhl_breakouts.not_null_f_boxscore_player_game_id.e3b77d4354": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "game_id", "model": "{{ get_where_subquery(ref('f_boxscore_player')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.f_boxscore_player"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "analytics", "intermediate", "not_null_f_boxscore_player_game_id"], "unique_id": "test.dbt_nhl_breakouts.not_null_f_boxscore_player_game_id.e3b77d4354", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "not_null_f_boxscore_player_game_id.sql", "original_file_path": "models/analytics/intermediate/f_boxscore_player.yml", "name": "not_null_f_boxscore_player_game_id", "alias": "not_null_f_boxscore_player_game_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["f_boxscore_player"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/analytics/intermediate/f_boxscore_player.yml/not_null_f_boxscore_player_game_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.6439219, "compiled_sql": "\n    \n    \n\nselect *\nfrom `nhl-breakouts`.`analytics_intermediate`.`f_boxscore_player`\nwhere game_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "game_id", "file_key_name": "models.f_boxscore_player"}, "test.dbt_nhl_breakouts.not_null_f_boxscore_player_team_id.97e0e7a733": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "team_id", "model": "{{ get_where_subquery(ref('f_boxscore_player')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.f_boxscore_player"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "analytics", "intermediate", "not_null_f_boxscore_player_team_id"], "unique_id": "test.dbt_nhl_breakouts.not_null_f_boxscore_player_team_id.97e0e7a733", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "not_null_f_boxscore_player_team_id.sql", "original_file_path": "models/analytics/intermediate/f_boxscore_player.yml", "name": "not_null_f_boxscore_player_team_id", "alias": "not_null_f_boxscore_player_team_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["f_boxscore_player"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/analytics/intermediate/f_boxscore_player.yml/not_null_f_boxscore_player_team_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.644661, "compiled_sql": "\n    \n    \n\nselect *\nfrom `nhl-breakouts`.`analytics_intermediate`.`f_boxscore_player`\nwhere team_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "team_id", "file_key_name": "models.f_boxscore_player"}, "test.dbt_nhl_breakouts.unique_d_conferences_conference_id.b7e5789a87": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "conference_id", "model": "{{ get_where_subquery(ref('d_conferences')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.d_conferences"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "analytics", "intermediate", "unique_d_conferences_conference_id"], "unique_id": "test.dbt_nhl_breakouts.unique_d_conferences_conference_id.b7e5789a87", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "unique_d_conferences_conference_id.sql", "original_file_path": "models/analytics/intermediate/d_conferences.yml", "name": "unique_d_conferences_conference_id", "alias": "unique_d_conferences_conference_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["d_conferences"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/analytics/intermediate/d_conferences.yml/unique_d_conferences_conference_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.646815, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select conference_id as unique_field\n  from `nhl-breakouts`.`analytics_intermediate`.`d_conferences`\n  where conference_id is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "conference_id", "file_key_name": "models.d_conferences"}, "test.dbt_nhl_breakouts.not_null_d_conferences_conference_id.8ff2ef5d4e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "conference_id", "model": "{{ get_where_subquery(ref('d_conferences')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.d_conferences"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "analytics", "intermediate", "not_null_d_conferences_conference_id"], "unique_id": "test.dbt_nhl_breakouts.not_null_d_conferences_conference_id.8ff2ef5d4e", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "not_null_d_conferences_conference_id.sql", "original_file_path": "models/analytics/intermediate/d_conferences.yml", "name": "not_null_d_conferences_conference_id", "alias": "not_null_d_conferences_conference_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["d_conferences"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/analytics/intermediate/d_conferences.yml/not_null_d_conferences_conference_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.647585, "compiled_sql": "\n    \n    \n\nselect *\nfrom `nhl-breakouts`.`analytics_intermediate`.`d_conferences`\nwhere conference_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "conference_id", "file_key_name": "models.d_conferences"}, "test.dbt_nhl_breakouts.not_null_f_boxscore_boxscore_id.b9891c33b1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "boxscore_id", "model": "{{ get_where_subquery(ref('f_boxscore')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.f_boxscore"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "analytics", "intermediate", "not_null_f_boxscore_boxscore_id"], "unique_id": "test.dbt_nhl_breakouts.not_null_f_boxscore_boxscore_id.b9891c33b1", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "not_null_f_boxscore_boxscore_id.sql", "original_file_path": "models/analytics/intermediate/f_boxscore.yml", "name": "not_null_f_boxscore_boxscore_id", "alias": "not_null_f_boxscore_boxscore_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["f_boxscore"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/analytics/intermediate/f_boxscore.yml/not_null_f_boxscore_boxscore_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.652389, "compiled_sql": "\n    \n    \n\nselect *\nfrom `nhl-breakouts`.`analytics_intermediate`.`f_boxscore`\nwhere boxscore_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "boxscore_id", "file_key_name": "models.f_boxscore"}, "test.dbt_nhl_breakouts.unique_f_boxscore_boxscore_id.48507f2e1c": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "boxscore_id", "model": "{{ get_where_subquery(ref('f_boxscore')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.f_boxscore"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "analytics", "intermediate", "unique_f_boxscore_boxscore_id"], "unique_id": "test.dbt_nhl_breakouts.unique_f_boxscore_boxscore_id.48507f2e1c", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "unique_f_boxscore_boxscore_id.sql", "original_file_path": "models/analytics/intermediate/f_boxscore.yml", "name": "unique_f_boxscore_boxscore_id", "alias": "unique_f_boxscore_boxscore_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["f_boxscore"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/analytics/intermediate/f_boxscore.yml/unique_f_boxscore_boxscore_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.653156, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select boxscore_id as unique_field\n  from `nhl-breakouts`.`analytics_intermediate`.`f_boxscore`\n  where boxscore_id is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "boxscore_id", "file_key_name": "models.f_boxscore"}, "test.dbt_nhl_breakouts.not_null_f_boxscore_game_id.b46db17d13": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "game_id", "model": "{{ get_where_subquery(ref('f_boxscore')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.f_boxscore"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "analytics", "intermediate", "not_null_f_boxscore_game_id"], "unique_id": "test.dbt_nhl_breakouts.not_null_f_boxscore_game_id.b46db17d13", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "not_null_f_boxscore_game_id.sql", "original_file_path": "models/analytics/intermediate/f_boxscore.yml", "name": "not_null_f_boxscore_game_id", "alias": "not_null_f_boxscore_game_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["f_boxscore"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/analytics/intermediate/f_boxscore.yml/not_null_f_boxscore_game_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.653905, "compiled_sql": "\n    \n    \n\nselect *\nfrom `nhl-breakouts`.`analytics_intermediate`.`f_boxscore`\nwhere game_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "game_id", "file_key_name": "models.f_boxscore"}, "test.dbt_nhl_breakouts.not_null_f_boxscore_home_team_id.cea06ce20f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "home_team_id", "model": "{{ get_where_subquery(ref('f_boxscore')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.f_boxscore"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "analytics", "intermediate", "not_null_f_boxscore_home_team_id"], "unique_id": "test.dbt_nhl_breakouts.not_null_f_boxscore_home_team_id.cea06ce20f", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "not_null_f_boxscore_home_team_id.sql", "original_file_path": "models/analytics/intermediate/f_boxscore.yml", "name": "not_null_f_boxscore_home_team_id", "alias": "not_null_f_boxscore_home_team_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["f_boxscore"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/analytics/intermediate/f_boxscore.yml/not_null_f_boxscore_home_team_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.6546571, "compiled_sql": "\n    \n    \n\nselect *\nfrom `nhl-breakouts`.`analytics_intermediate`.`f_boxscore`\nwhere home_team_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "home_team_id", "file_key_name": "models.f_boxscore"}, "test.dbt_nhl_breakouts.not_null_f_boxscore_away_team_id.9d1f965941": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "away_team_id", "model": "{{ get_where_subquery(ref('f_boxscore')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.f_boxscore"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "analytics", "intermediate", "not_null_f_boxscore_away_team_id"], "unique_id": "test.dbt_nhl_breakouts.not_null_f_boxscore_away_team_id.9d1f965941", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "not_null_f_boxscore_away_team_id.sql", "original_file_path": "models/analytics/intermediate/f_boxscore.yml", "name": "not_null_f_boxscore_away_team_id", "alias": "not_null_f_boxscore_away_team_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["f_boxscore"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/analytics/intermediate/f_boxscore.yml/not_null_f_boxscore_away_team_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.655572, "compiled_sql": "\n    \n    \n\nselect *\nfrom `nhl-breakouts`.`analytics_intermediate`.`f_boxscore`\nwhere away_team_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "away_team_id", "file_key_name": "models.f_boxscore"}, "test.dbt_nhl_breakouts.unique_d_seasons_season_id.e1642ef274": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "season_id", "model": "{{ get_where_subquery(ref('d_seasons')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.d_seasons"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "analytics", "intermediate", "unique_d_seasons_season_id"], "unique_id": "test.dbt_nhl_breakouts.unique_d_seasons_season_id.e1642ef274", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "unique_d_seasons_season_id.sql", "original_file_path": "models/analytics/intermediate/d_seasons.yml", "name": "unique_d_seasons_season_id", "alias": "unique_d_seasons_season_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["d_seasons"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/analytics/intermediate/d_seasons.yml/unique_d_seasons_season_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.658477, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select season_id as unique_field\n  from `nhl-breakouts`.`analytics_intermediate`.`d_seasons`\n  where season_id is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "season_id", "file_key_name": "models.d_seasons"}, "test.dbt_nhl_breakouts.not_null_d_seasons_season_id.e9ba12da0e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "season_id", "model": "{{ get_where_subquery(ref('d_seasons')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.d_seasons"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "analytics", "intermediate", "not_null_d_seasons_season_id"], "unique_id": "test.dbt_nhl_breakouts.not_null_d_seasons_season_id.e9ba12da0e", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "not_null_d_seasons_season_id.sql", "original_file_path": "models/analytics/intermediate/d_seasons.yml", "name": "not_null_d_seasons_season_id", "alias": "not_null_d_seasons_season_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["d_seasons"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/analytics/intermediate/d_seasons.yml/not_null_d_seasons_season_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.659456, "compiled_sql": "\n    \n    \n\nselect *\nfrom `nhl-breakouts`.`analytics_intermediate`.`d_seasons`\nwhere season_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "season_id", "file_key_name": "models.d_seasons"}, "test.dbt_nhl_breakouts.not_null_d_players_player_id.1ac147c310": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "player_id", "model": "{{ get_where_subquery(ref('d_players')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.d_players"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "analytics", "intermediate", "not_null_d_players_player_id"], "unique_id": "test.dbt_nhl_breakouts.not_null_d_players_player_id.1ac147c310", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "not_null_d_players_player_id.sql", "original_file_path": "models/analytics/intermediate/d_players.yml", "name": "not_null_d_players_player_id", "alias": "not_null_d_players_player_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["d_players"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/analytics/intermediate/d_players.yml/not_null_d_players_player_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.66436, "compiled_sql": "\n    \n    \n\nselect *\nfrom `nhl-breakouts`.`analytics_intermediate`.`d_players`\nwhere player_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "player_id", "file_key_name": "models.d_players"}, "test.dbt_nhl_breakouts.unique_f_linescore_linescore_id.c88b3cc327": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "linescore_id", "model": "{{ get_where_subquery(ref('f_linescore')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.f_linescore"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "analytics", "intermediate", "unique_f_linescore_linescore_id"], "unique_id": "test.dbt_nhl_breakouts.unique_f_linescore_linescore_id.c88b3cc327", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "unique_f_linescore_linescore_id.sql", "original_file_path": "models/analytics/intermediate/f_linescore.yml", "name": "unique_f_linescore_linescore_id", "alias": "unique_f_linescore_linescore_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["f_linescore"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/analytics/intermediate/f_linescore.yml/unique_f_linescore_linescore_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.667475, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select linescore_id as unique_field\n  from `nhl-breakouts`.`analytics_intermediate`.`f_linescore`\n  where linescore_id is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "linescore_id", "file_key_name": "models.f_linescore"}, "test.dbt_nhl_breakouts.not_null_f_linescore_linescore_id.0d3f94c5dc": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "linescore_id", "model": "{{ get_where_subquery(ref('f_linescore')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.f_linescore"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "analytics", "intermediate", "not_null_f_linescore_linescore_id"], "unique_id": "test.dbt_nhl_breakouts.not_null_f_linescore_linescore_id.0d3f94c5dc", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "not_null_f_linescore_linescore_id.sql", "original_file_path": "models/analytics/intermediate/f_linescore.yml", "name": "not_null_f_linescore_linescore_id", "alias": "not_null_f_linescore_linescore_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["f_linescore"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/analytics/intermediate/f_linescore.yml/not_null_f_linescore_linescore_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.668256, "compiled_sql": "\n    \n    \n\nselect *\nfrom `nhl-breakouts`.`analytics_intermediate`.`f_linescore`\nwhere linescore_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "linescore_id", "file_key_name": "models.f_linescore"}, "test.dbt_nhl_breakouts.not_null_f_linescore_home_team_id.a4238ef224": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "home_team_id", "model": "{{ get_where_subquery(ref('f_linescore')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.f_linescore"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "analytics", "intermediate", "not_null_f_linescore_home_team_id"], "unique_id": "test.dbt_nhl_breakouts.not_null_f_linescore_home_team_id.a4238ef224", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "not_null_f_linescore_home_team_id.sql", "original_file_path": "models/analytics/intermediate/f_linescore.yml", "name": "not_null_f_linescore_home_team_id", "alias": "not_null_f_linescore_home_team_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["f_linescore"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/analytics/intermediate/f_linescore.yml/not_null_f_linescore_home_team_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.66913, "compiled_sql": "\n    \n    \n\nselect *\nfrom `nhl-breakouts`.`analytics_intermediate`.`f_linescore`\nwhere home_team_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "home_team_id", "file_key_name": "models.f_linescore"}, "test.dbt_nhl_breakouts.not_null_f_linescore_away_team_id.f71f2cffd0": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "away_team_id", "model": "{{ get_where_subquery(ref('f_linescore')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.f_linescore"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "analytics", "intermediate", "not_null_f_linescore_away_team_id"], "unique_id": "test.dbt_nhl_breakouts.not_null_f_linescore_away_team_id.f71f2cffd0", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "not_null_f_linescore_away_team_id.sql", "original_file_path": "models/analytics/intermediate/f_linescore.yml", "name": "not_null_f_linescore_away_team_id", "alias": "not_null_f_linescore_away_team_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["f_linescore"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/analytics/intermediate/f_linescore.yml/not_null_f_linescore_away_team_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.669893, "compiled_sql": "\n    \n    \n\nselect *\nfrom `nhl-breakouts`.`analytics_intermediate`.`f_linescore`\nwhere away_team_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "away_team_id", "file_key_name": "models.f_linescore"}, "test.dbt_nhl_breakouts.not_null_f_linescore_game_winning_team_id.08e106d171": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "game_winning_team_id", "model": "{{ get_where_subquery(ref('f_linescore')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.f_linescore"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "analytics", "intermediate", "not_null_f_linescore_game_winning_team_id"], "unique_id": "test.dbt_nhl_breakouts.not_null_f_linescore_game_winning_team_id.08e106d171", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "not_null_f_linescore_game_winning_team_id.sql", "original_file_path": "models/analytics/intermediate/f_linescore.yml", "name": "not_null_f_linescore_game_winning_team_id", "alias": "not_null_f_linescore_game_winning_team_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["f_linescore"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/analytics/intermediate/f_linescore.yml/not_null_f_linescore_game_winning_team_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.670645, "compiled_sql": "\n    \n    \n\nselect *\nfrom `nhl-breakouts`.`analytics_intermediate`.`f_linescore`\nwhere game_winning_team_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "game_winning_team_id", "file_key_name": "models.f_linescore"}, "test.dbt_nhl_breakouts.accepted_values_f_linescore_game_winning_team_type__True__Home__Away.76664920a4": {"raw_sql": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_f_linescore_4b016ce404a0a07f39274129565bdce3\") }}", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["Home", "Away"], "quote": true, "column_name": "game_winning_team_type", "model": "{{ get_where_subquery(ref('f_linescore')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.f_linescore"]}, "config": {"enabled": true, "alias": "accepted_values_f_linescore_4b016ce404a0a07f39274129565bdce3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "analytics", "intermediate", "accepted_values_f_linescore_game_winning_team_type__True__Home__Away"], "unique_id": "test.dbt_nhl_breakouts.accepted_values_f_linescore_game_winning_team_type__True__Home__Away.76664920a4", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "accepted_values_f_linescore_4b016ce404a0a07f39274129565bdce3.sql", "original_file_path": "models/analytics/intermediate/f_linescore.yml", "name": "accepted_values_f_linescore_game_winning_team_type__True__Home__Away", "alias": "accepted_values_f_linescore_4b016ce404a0a07f39274129565bdce3", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["f_linescore"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/analytics/intermediate/f_linescore.yml/accepted_values_f_linescore_4b016ce404a0a07f39274129565bdce3.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_f_linescore_4b016ce404a0a07f39274129565bdce3"}, "created_at": 1652151875.671414, "compiled_sql": "\n    \n    \n\nwith all_values as (\n\n    select\n        game_winning_team_type as value_field,\n        count(*) as n_records\n\n    from `nhl-breakouts`.`analytics_intermediate`.`f_linescore`\n    group by game_winning_team_type\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Home','Away'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "game_winning_team_type", "file_key_name": "models.f_linescore"}, "test.dbt_nhl_breakouts.not_null_f_games_scratches_game_id.cb6976b79e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "game_id", "model": "{{ get_where_subquery(ref('f_games_scratches')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.f_games_scratches"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "analytics", "intermediate", "not_null_f_games_scratches_game_id"], "unique_id": "test.dbt_nhl_breakouts.not_null_f_games_scratches_game_id.cb6976b79e", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "not_null_f_games_scratches_game_id.sql", "original_file_path": "models/analytics/intermediate/f_games_scratches.yml", "name": "not_null_f_games_scratches_game_id", "alias": "not_null_f_games_scratches_game_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["f_games_scratches"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/analytics/intermediate/f_games_scratches.yml/not_null_f_games_scratches_game_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.6745868, "compiled_sql": "\n    \n    \n\nselect *\nfrom `nhl-breakouts`.`analytics_intermediate`.`f_games_scratches`\nwhere game_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "game_id", "file_key_name": "models.f_games_scratches"}, "test.dbt_nhl_breakouts.not_null_f_games_scratches_player_id.25c3aadc1a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "player_id", "model": "{{ get_where_subquery(ref('f_games_scratches')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.f_games_scratches"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "analytics", "intermediate", "not_null_f_games_scratches_player_id"], "unique_id": "test.dbt_nhl_breakouts.not_null_f_games_scratches_player_id.25c3aadc1a", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "not_null_f_games_scratches_player_id.sql", "original_file_path": "models/analytics/intermediate/f_games_scratches.yml", "name": "not_null_f_games_scratches_player_id", "alias": "not_null_f_games_scratches_player_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["f_games_scratches"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/analytics/intermediate/f_games_scratches.yml/not_null_f_games_scratches_player_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.67537, "compiled_sql": "\n    \n    \n\nselect *\nfrom `nhl-breakouts`.`analytics_intermediate`.`f_games_scratches`\nwhere player_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "player_id", "file_key_name": "models.f_games_scratches"}, "test.dbt_nhl_breakouts.dbt_utils_unique_combination_of_columns_f_games_scratches_game_id__player_id.35d4642951": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_85f8d979cba4a4cb022a6e80f91bee73\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["game_id", "player_id"], "model": "{{ get_where_subquery(ref('f_games_scratches')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.f_games_scratches"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_85f8d979cba4a4cb022a6e80f91bee73", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "analytics", "intermediate", "dbt_utils_unique_combination_of_columns_f_games_scratches_game_id__player_id"], "unique_id": "test.dbt_nhl_breakouts.dbt_utils_unique_combination_of_columns_f_games_scratches_game_id__player_id.35d4642951", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "dbt_utils_unique_combination_o_85f8d979cba4a4cb022a6e80f91bee73.sql", "original_file_path": "models/analytics/intermediate/f_games_scratches.yml", "name": "dbt_utils_unique_combination_of_columns_f_games_scratches_game_id__player_id", "alias": "dbt_utils_unique_combination_o_85f8d979cba4a4cb022a6e80f91bee73", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["f_games_scratches"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/analytics/intermediate/f_games_scratches.yml/dbt_utils_unique_combination_o_85f8d979cba4a4cb022a6e80f91bee73.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_85f8d979cba4a4cb022a6e80f91bee73"}, "created_at": 1652151875.676283, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        game_id, player_id\n    from `nhl-breakouts`.`analytics_intermediate`.`f_games_scratches`\n    group by game_id, player_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.f_games_scratches"}, "test.dbt_nhl_breakouts.unique_d_teams_team_id.c26fd9864c": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "team_id", "model": "{{ get_where_subquery(ref('d_teams')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.d_teams"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "analytics", "intermediate", "unique_d_teams_team_id"], "unique_id": "test.dbt_nhl_breakouts.unique_d_teams_team_id.c26fd9864c", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "unique_d_teams_team_id.sql", "original_file_path": "models/analytics/intermediate/d_teams.yml", "name": "unique_d_teams_team_id", "alias": "unique_d_teams_team_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["d_teams"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/analytics/intermediate/d_teams.yml/unique_d_teams_team_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.686123, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select team_id as unique_field\n  from `nhl-breakouts`.`analytics_intermediate`.`d_teams`\n  where team_id is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "team_id", "file_key_name": "models.d_teams"}, "test.dbt_nhl_breakouts.not_null_d_teams_team_id.453d8c80dc": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "team_id", "model": "{{ get_where_subquery(ref('d_teams')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.d_teams"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "analytics", "intermediate", "not_null_d_teams_team_id"], "unique_id": "test.dbt_nhl_breakouts.not_null_d_teams_team_id.453d8c80dc", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "not_null_d_teams_team_id.sql", "original_file_path": "models/analytics/intermediate/d_teams.yml", "name": "not_null_d_teams_team_id", "alias": "not_null_d_teams_team_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["d_teams"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/analytics/intermediate/d_teams.yml/not_null_d_teams_team_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.6870022, "compiled_sql": "\n    \n    \n\nselect *\nfrom `nhl-breakouts`.`analytics_intermediate`.`d_teams`\nwhere team_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "team_id", "file_key_name": "models.d_teams"}, "test.dbt_nhl_breakouts.not_null_d_teams_venue_timezone_id.86ef9a6f43": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "venue_timezone_id", "model": "{{ get_where_subquery(ref('d_teams')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.d_teams"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "analytics", "intermediate", "not_null_d_teams_venue_timezone_id"], "unique_id": "test.dbt_nhl_breakouts.not_null_d_teams_venue_timezone_id.86ef9a6f43", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "not_null_d_teams_venue_timezone_id.sql", "original_file_path": "models/analytics/intermediate/d_teams.yml", "name": "not_null_d_teams_venue_timezone_id", "alias": "not_null_d_teams_venue_timezone_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["d_teams"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/analytics/intermediate/d_teams.yml/not_null_d_teams_venue_timezone_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.687882, "compiled_sql": "\n    \n    \n\nselect *\nfrom `nhl-breakouts`.`analytics_intermediate`.`d_teams`\nwhere venue_timezone_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "venue_timezone_id", "file_key_name": "models.d_teams"}, "test.dbt_nhl_breakouts.not_null_d_teams_division_id.0cedee4730": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "division_id", "model": "{{ get_where_subquery(ref('d_teams')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.d_teams"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "analytics", "intermediate", "not_null_d_teams_division_id"], "unique_id": "test.dbt_nhl_breakouts.not_null_d_teams_division_id.0cedee4730", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "not_null_d_teams_division_id.sql", "original_file_path": "models/analytics/intermediate/d_teams.yml", "name": "not_null_d_teams_division_id", "alias": "not_null_d_teams_division_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["d_teams"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/analytics/intermediate/d_teams.yml/not_null_d_teams_division_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.6886451, "compiled_sql": "\n    \n    \n\nselect *\nfrom `nhl-breakouts`.`analytics_intermediate`.`d_teams`\nwhere division_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "division_id", "file_key_name": "models.d_teams"}, "test.dbt_nhl_breakouts.not_null_d_teams_conference_id.491172dfc9": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "conference_id", "model": "{{ get_where_subquery(ref('d_teams')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.d_teams"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "analytics", "intermediate", "not_null_d_teams_conference_id"], "unique_id": "test.dbt_nhl_breakouts.not_null_d_teams_conference_id.491172dfc9", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "not_null_d_teams_conference_id.sql", "original_file_path": "models/analytics/intermediate/d_teams.yml", "name": "not_null_d_teams_conference_id", "alias": "not_null_d_teams_conference_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["d_teams"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/analytics/intermediate/d_teams.yml/not_null_d_teams_conference_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.689402, "compiled_sql": "\n    \n    \n\nselect *\nfrom `nhl-breakouts`.`analytics_intermediate`.`d_teams`\nwhere conference_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "conference_id", "file_key_name": "models.d_teams"}, "test.dbt_nhl_breakouts.not_null_d_teams_franchise_id.9ffcb46923": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "franchise_id", "model": "{{ get_where_subquery(ref('d_teams')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.d_teams"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "analytics", "intermediate", "not_null_d_teams_franchise_id"], "unique_id": "test.dbt_nhl_breakouts.not_null_d_teams_franchise_id.9ffcb46923", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "not_null_d_teams_franchise_id.sql", "original_file_path": "models/analytics/intermediate/d_teams.yml", "name": "not_null_d_teams_franchise_id", "alias": "not_null_d_teams_franchise_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["d_teams"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/analytics/intermediate/d_teams.yml/not_null_d_teams_franchise_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.690149, "compiled_sql": "\n    \n    \n\nselect *\nfrom `nhl-breakouts`.`analytics_intermediate`.`d_teams`\nwhere franchise_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "franchise_id", "file_key_name": "models.d_teams"}, "test.dbt_nhl_breakouts.unique_d_draft_draft_id.74ebc0e053": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "draft_id", "model": "{{ get_where_subquery(ref('d_draft')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.d_draft"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "analytics", "intermediate", "unique_d_draft_draft_id"], "unique_id": "test.dbt_nhl_breakouts.unique_d_draft_draft_id.74ebc0e053", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "unique_d_draft_draft_id.sql", "original_file_path": "models/analytics/intermediate/d_draft.yml", "name": "unique_d_draft_draft_id", "alias": "unique_d_draft_draft_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["d_draft"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/analytics/intermediate/d_draft.yml/unique_d_draft_draft_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.693084, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select draft_id as unique_field\n  from `nhl-breakouts`.`analytics_intermediate`.`d_draft`\n  where draft_id is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "draft_id", "file_key_name": "models.d_draft"}, "test.dbt_nhl_breakouts.not_null_d_draft_draft_id.2d93ef0913": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "draft_id", "model": "{{ get_where_subquery(ref('d_draft')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.d_draft"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "analytics", "intermediate", "not_null_d_draft_draft_id"], "unique_id": "test.dbt_nhl_breakouts.not_null_d_draft_draft_id.2d93ef0913", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "not_null_d_draft_draft_id.sql", "original_file_path": "models/analytics/intermediate/d_draft.yml", "name": "not_null_d_draft_draft_id", "alias": "not_null_d_draft_draft_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["d_draft"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/analytics/intermediate/d_draft.yml/not_null_d_draft_draft_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.6939762, "compiled_sql": "\n    \n    \n\nselect *\nfrom `nhl-breakouts`.`analytics_intermediate`.`d_draft`\nwhere draft_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "draft_id", "file_key_name": "models.d_draft"}, "test.dbt_nhl_breakouts.not_null_d_draft_overall_pick_id.124222f98e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "overall_pick_id", "model": "{{ get_where_subquery(ref('d_draft')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.d_draft"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "analytics", "intermediate", "not_null_d_draft_overall_pick_id"], "unique_id": "test.dbt_nhl_breakouts.not_null_d_draft_overall_pick_id.124222f98e", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "not_null_d_draft_overall_pick_id.sql", "original_file_path": "models/analytics/intermediate/d_draft.yml", "name": "not_null_d_draft_overall_pick_id", "alias": "not_null_d_draft_overall_pick_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["d_draft"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/analytics/intermediate/d_draft.yml/not_null_d_draft_overall_pick_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.694732, "compiled_sql": "\n    \n    \n\nselect *\nfrom `nhl-breakouts`.`analytics_intermediate`.`d_draft`\nwhere overall_pick_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "overall_pick_id", "file_key_name": "models.d_draft"}, "test.dbt_nhl_breakouts.not_null_d_draft_draft_prospect_id.072ca19acd": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "draft_prospect_id", "model": "{{ get_where_subquery(ref('d_draft')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.d_draft"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "analytics", "intermediate", "not_null_d_draft_draft_prospect_id"], "unique_id": "test.dbt_nhl_breakouts.not_null_d_draft_draft_prospect_id.072ca19acd", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "not_null_d_draft_draft_prospect_id.sql", "original_file_path": "models/analytics/intermediate/d_draft.yml", "name": "not_null_d_draft_draft_prospect_id", "alias": "not_null_d_draft_draft_prospect_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["d_draft"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/analytics/intermediate/d_draft.yml/not_null_d_draft_draft_prospect_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.695478, "compiled_sql": "\n    \n    \n\nselect *\nfrom `nhl-breakouts`.`analytics_intermediate`.`d_draft`\nwhere draft_prospect_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "draft_prospect_id", "file_key_name": "models.d_draft"}, "test.dbt_nhl_breakouts.not_null_d_draft_draft_team_id.d67c00c582": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "draft_team_id", "model": "{{ get_where_subquery(ref('d_draft')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.d_draft"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "analytics", "intermediate", "not_null_d_draft_draft_team_id"], "unique_id": "test.dbt_nhl_breakouts.not_null_d_draft_draft_team_id.d67c00c582", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "not_null_d_draft_draft_team_id.sql", "original_file_path": "models/analytics/intermediate/d_draft.yml", "name": "not_null_d_draft_draft_team_id", "alias": "not_null_d_draft_draft_team_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["d_draft"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/analytics/intermediate/d_draft.yml/not_null_d_draft_draft_team_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.696228, "compiled_sql": "\n    \n    \n\nselect *\nfrom `nhl-breakouts`.`analytics_intermediate`.`d_draft`\nwhere draft_team_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "draft_team_id", "file_key_name": "models.d_draft"}, "test.dbt_nhl_breakouts.unique_f_games_game_id.61c2bee3b0": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "game_id", "model": "{{ get_where_subquery(ref('f_games')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.f_games"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "analytics", "intermediate", "unique_f_games_game_id"], "unique_id": "test.dbt_nhl_breakouts.unique_f_games_game_id.61c2bee3b0", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "unique_f_games_game_id.sql", "original_file_path": "models/analytics/intermediate/f_games.yml", "name": "unique_f_games_game_id", "alias": "unique_f_games_game_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["f_games"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/analytics/intermediate/f_games.yml/unique_f_games_game_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.7021608, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select game_id as unique_field\n  from `nhl-breakouts`.`analytics_intermediate`.`f_games`\n  where game_id is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "game_id", "file_key_name": "models.f_games"}, "test.dbt_nhl_breakouts.not_null_f_games_game_id.12c36fc40e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "game_id", "model": "{{ get_where_subquery(ref('f_games')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.f_games"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "analytics", "intermediate", "not_null_f_games_game_id"], "unique_id": "test.dbt_nhl_breakouts.not_null_f_games_game_id.12c36fc40e", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "not_null_f_games_game_id.sql", "original_file_path": "models/analytics/intermediate/f_games.yml", "name": "not_null_f_games_game_id", "alias": "not_null_f_games_game_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["f_games"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/analytics/intermediate/f_games.yml/not_null_f_games_game_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.702935, "compiled_sql": "\n    \n    \n\nselect *\nfrom `nhl-breakouts`.`analytics_intermediate`.`f_games`\nwhere game_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "game_id", "file_key_name": "models.f_games"}, "test.dbt_nhl_breakouts.not_null_f_games_home_team_id.fac98e5082": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "home_team_id", "model": "{{ get_where_subquery(ref('f_games')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.f_games"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "analytics", "intermediate", "not_null_f_games_home_team_id"], "unique_id": "test.dbt_nhl_breakouts.not_null_f_games_home_team_id.fac98e5082", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "not_null_f_games_home_team_id.sql", "original_file_path": "models/analytics/intermediate/f_games.yml", "name": "not_null_f_games_home_team_id", "alias": "not_null_f_games_home_team_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["f_games"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/analytics/intermediate/f_games.yml/not_null_f_games_home_team_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.703794, "compiled_sql": "\n    \n    \n\nselect *\nfrom `nhl-breakouts`.`analytics_intermediate`.`f_games`\nwhere home_team_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "home_team_id", "file_key_name": "models.f_games"}, "test.dbt_nhl_breakouts.not_null_f_games_away_team_id.61e8a8d336": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "away_team_id", "model": "{{ get_where_subquery(ref('f_games')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_nhl_breakouts.f_games"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "nhl-breakouts", "schema": "analytics_dbt_test__audit", "fqn": ["dbt_nhl_breakouts", "analytics", "intermediate", "not_null_f_games_away_team_id"], "unique_id": "test.dbt_nhl_breakouts.not_null_f_games_away_team_id.61e8a8d336", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "not_null_f_games_away_team_id.sql", "original_file_path": "models/analytics/intermediate/f_games.yml", "name": "not_null_f_games_away_team_id", "alias": "not_null_f_games_away_team_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["f_games"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_nhl_breakouts/models/analytics/intermediate/f_games.yml/not_null_f_games_away_team_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652151875.704549, "compiled_sql": "\n    \n    \n\nselect *\nfrom `nhl-breakouts`.`analytics_intermediate`.`f_games`\nwhere away_team_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "away_team_id", "file_key_name": "models.f_games"}}, "sources": {"source.dbt_nhl_breakouts.meltano.conferences": {"fqn": ["dbt_nhl_breakouts", "staging", "meltano", "conferences"], "database": "nhl-breakouts", "schema": "raw", "unique_id": "source.dbt_nhl_breakouts.meltano.conferences", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "models/staging/_sources.yml", "original_file_path": "models/staging/_sources.yml", "name": "conferences", "source_name": "meltano", "source_description": "", "loader": "", "identifier": "conferences", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`nhl-breakouts`.`raw`.`conferences`", "created_at": 1652151875.7049851}, "source.dbt_nhl_breakouts.meltano.divisions": {"fqn": ["dbt_nhl_breakouts", "staging", "meltano", "divisions"], "database": "nhl-breakouts", "schema": "raw", "unique_id": "source.dbt_nhl_breakouts.meltano.divisions", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "models/staging/_sources.yml", "original_file_path": "models/staging/_sources.yml", "name": "divisions", "source_name": "meltano", "source_description": "", "loader": "", "identifier": "divisions", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`nhl-breakouts`.`raw`.`divisions`", "created_at": 1652151875.705058}, "source.dbt_nhl_breakouts.meltano.draft": {"fqn": ["dbt_nhl_breakouts", "staging", "meltano", "draft"], "database": "nhl-breakouts", "schema": "raw", "unique_id": "source.dbt_nhl_breakouts.meltano.draft", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "models/staging/_sources.yml", "original_file_path": "models/staging/_sources.yml", "name": "draft", "source_name": "meltano", "source_description": "", "loader": "", "identifier": "draft", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`nhl-breakouts`.`raw`.`draft`", "created_at": 1652151875.7051158}, "source.dbt_nhl_breakouts.meltano.draft_prospects": {"fqn": ["dbt_nhl_breakouts", "staging", "meltano", "draft_prospects"], "database": "nhl-breakouts", "schema": "raw", "unique_id": "source.dbt_nhl_breakouts.meltano.draft_prospects", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "models/staging/_sources.yml", "original_file_path": "models/staging/_sources.yml", "name": "draft_prospects", "source_name": "meltano", "source_description": "", "loader": "", "identifier": "draft_prospects", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`nhl-breakouts`.`raw`.`draft_prospects`", "created_at": 1652151875.7051709}, "source.dbt_nhl_breakouts.meltano.live_boxscore": {"fqn": ["dbt_nhl_breakouts", "staging", "meltano", "live_boxscore"], "database": "nhl-breakouts", "schema": "raw", "unique_id": "source.dbt_nhl_breakouts.meltano.live_boxscore", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "models/staging/_sources.yml", "original_file_path": "models/staging/_sources.yml", "name": "live_boxscore", "source_name": "meltano", "source_description": "", "loader": "", "identifier": "live_boxscore", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`nhl-breakouts`.`raw`.`live_boxscore`", "created_at": 1652151875.705224}, "source.dbt_nhl_breakouts.meltano.live_linescore": {"fqn": ["dbt_nhl_breakouts", "staging", "meltano", "live_linescore"], "database": "nhl-breakouts", "schema": "raw", "unique_id": "source.dbt_nhl_breakouts.meltano.live_linescore", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "models/staging/_sources.yml", "original_file_path": "models/staging/_sources.yml", "name": "live_linescore", "source_name": "meltano", "source_description": "", "loader": "", "identifier": "live_linescore", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`nhl-breakouts`.`raw`.`live_linescore`", "created_at": 1652151875.7052748}, "source.dbt_nhl_breakouts.meltano.live_plays": {"fqn": ["dbt_nhl_breakouts", "staging", "meltano", "live_plays"], "database": "nhl-breakouts", "schema": "raw", "unique_id": "source.dbt_nhl_breakouts.meltano.live_plays", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "models/staging/_sources.yml", "original_file_path": "models/staging/_sources.yml", "name": "live_plays", "source_name": "meltano", "source_description": "", "loader": "", "identifier": "live_plays", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`nhl-breakouts`.`raw`.`live_plays`", "created_at": 1652151875.7053282}, "source.dbt_nhl_breakouts.meltano.people": {"fqn": ["dbt_nhl_breakouts", "staging", "meltano", "people"], "database": "nhl-breakouts", "schema": "raw", "unique_id": "source.dbt_nhl_breakouts.meltano.people", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "models/staging/_sources.yml", "original_file_path": "models/staging/_sources.yml", "name": "people", "source_name": "meltano", "source_description": "", "loader": "", "identifier": "people", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`nhl-breakouts`.`raw`.`people`", "created_at": 1652151875.705379}, "source.dbt_nhl_breakouts.meltano.schedule": {"fqn": ["dbt_nhl_breakouts", "staging", "meltano", "schedule"], "database": "nhl-breakouts", "schema": "raw", "unique_id": "source.dbt_nhl_breakouts.meltano.schedule", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "models/staging/_sources.yml", "original_file_path": "models/staging/_sources.yml", "name": "schedule", "source_name": "meltano", "source_description": "", "loader": "", "identifier": "schedule", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`nhl-breakouts`.`raw`.`schedule`", "created_at": 1652151875.70543}, "source.dbt_nhl_breakouts.meltano.seasons": {"fqn": ["dbt_nhl_breakouts", "staging", "meltano", "seasons"], "database": "nhl-breakouts", "schema": "raw", "unique_id": "source.dbt_nhl_breakouts.meltano.seasons", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "models/staging/_sources.yml", "original_file_path": "models/staging/_sources.yml", "name": "seasons", "source_name": "meltano", "source_description": "", "loader": "", "identifier": "seasons", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`nhl-breakouts`.`raw`.`seasons`", "created_at": 1652151875.705481}, "source.dbt_nhl_breakouts.meltano.teams": {"fqn": ["dbt_nhl_breakouts", "staging", "meltano", "teams"], "database": "nhl-breakouts", "schema": "raw", "unique_id": "source.dbt_nhl_breakouts.meltano.teams", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "models/staging/_sources.yml", "original_file_path": "models/staging/_sources.yml", "name": "teams", "source_name": "meltano", "source_description": "", "loader": "", "identifier": "teams", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`nhl-breakouts`.`raw`.`teams`", "created_at": 1652151875.705533}}, "macros": {"macro.dbt_nhl_breakouts.dedupe": {"unique_id": "macro.dbt_nhl_breakouts.dedupe", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "macros/dedupe.sql", "original_file_path": "macros/dedupe.sql", "name": "dedupe", "macro_sql": "{%- macro dedupe(model, key_fields, sort_fields=[], field_list=['*'], filter_list=[]) -%}\n{#-\nExample usage:\nwith deduped as (\n    {{ dedupe(\n        source('raw_packet_db', 'addresses'),\n        key_fields=['id'],\n        sort_fields=['updated_at desc']\n    ) }}\n)\n....\n-#}\n    select {{field_list|join(', ')}}\n    from (\n        select {{field_list|join(', ')}},\n            row_number() over (partition by {{ key_fields|join(', ') }}{% if sort_fields %} order by {{ sort_fields|join(', ') }}{% endif %}) as rn\n        from {{ model }}\n        {%- if filter_list -%}\n            where {{ filter_list|join('\\n and ') }}\n        {% endif %}\n    ) where rn = 1 -- dedupe\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151874.899429}, "macro.dbt_nhl_breakouts.generate_schema_name": {"unique_id": "macro.dbt_nhl_breakouts.generate_schema_name", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "macros/generate_schema_name.sql", "original_file_path": "macros/generate_schema_name.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n\n    {%- if target.name == 'prod' -%}\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- else -%}\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151874.900198}, "macro.dbt_bigquery.date_sharded_table": {"unique_id": "macro.dbt_bigquery.date_sharded_table", "package_name": "dbt_bigquery", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "name": "date_sharded_table", "macro_sql": "{% macro date_sharded_table(base_name) %}\n    {{ return(base_name ~ \"[DBT__PARTITION_DATE]\") }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151874.900704}, "macro.dbt_bigquery.grant_access_to": {"unique_id": "macro.dbt_bigquery.grant_access_to", "package_name": "dbt_bigquery", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "name": "grant_access_to", "macro_sql": "{% macro grant_access_to(entity, entity_type, role, grant_target_dict) -%}\n  {% do adapter.grant_access_to(entity, entity_type, role, grant_target_dict) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151874.90112}, "macro.dbt_bigquery.get_partitions_metadata": {"unique_id": "macro.dbt_bigquery.get_partitions_metadata", "package_name": "dbt_bigquery", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "name": "get_partitions_metadata", "macro_sql": "\n\n{%- macro get_partitions_metadata(table) -%}\n  {%- if execute -%}\n    {%- set res = adapter.get_partitions_metadata(table) -%}\n    {{- return(res) -}}\n  {%- endif -%}\n  {{- return(None) -}}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151874.901717}, "macro.dbt_bigquery.bigquery__get_catalog": {"unique_id": "macro.dbt_bigquery.bigquery__get_catalog", "package_name": "dbt_bigquery", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "bigquery__get_catalog", "macro_sql": "{% macro bigquery__get_catalog(information_schema, schemas) -%}\n\n  {%- if (schemas | length) == 0 -%}\n    {# Hopefully nothing cares about the columns we return when there are no rows #}\n    {%- set query  = \"select 1 as id limit 0\" -%}\n  {%- else -%}\n\n  {%- set query -%}\n    with tables as (\n        select\n            project_id as table_database,\n            dataset_id as table_schema,\n            table_id as original_table_name,\n\n            concat(project_id, '.', dataset_id, '.', table_id) as relation_id,\n\n            row_count,\n            size_bytes as size_bytes,\n            case\n                when type = 1 then 'table'\n                when type = 2 then 'view'\n                else 'external'\n            end as table_type,\n\n            REGEXP_CONTAINS(table_id, '^.+[0-9]{8}$') and coalesce(type, 0) = 1 as is_date_shard,\n            REGEXP_EXTRACT(table_id, '^(.+)[0-9]{8}$') as shard_base_name,\n            REGEXP_EXTRACT(table_id, '^.+([0-9]{8})$') as shard_name\n\n        from {{ information_schema.replace(information_schema_view='__TABLES__') }}\n        where (\n          {%- for schema in schemas -%}\n            upper(dataset_id) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n          {%- endfor -%}\n        )\n    ),\n\n    extracted as (\n\n        select *,\n            case\n                when is_date_shard then shard_base_name\n                else original_table_name\n            end as table_name\n\n        from tables\n\n    ),\n\n    unsharded_tables as (\n\n        select\n            table_database,\n            table_schema,\n            table_name,\n            coalesce(table_type, 'external') as table_type,\n            is_date_shard,\n\n            struct(\n                min(shard_name) as shard_min,\n                max(shard_name) as shard_max,\n                count(*) as shard_count\n            ) as table_shards,\n\n            sum(size_bytes) as size_bytes,\n            sum(row_count) as row_count,\n\n            max(relation_id) as relation_id\n\n        from extracted\n        group by 1,2,3,4,5\n\n    ),\n\n    info_schema_columns as (\n\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            table_catalog as table_database,\n            table_schema,\n            table_name,\n\n            -- use the \"real\" column name from the paths query below\n            column_name as base_column_name,\n            ordinal_position as column_index,\n\n            is_partitioning_column,\n            clustering_ordinal_position\n\n        from {{ information_schema.replace(information_schema_view='COLUMNS') }}\n        where ordinal_position is not null\n\n    ),\n\n    info_schema_column_paths as (\n\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            field_path as column_name,\n            data_type as column_type,\n            column_name as base_column_name,\n            description as column_comment\n\n        from {{ information_schema.replace(information_schema_view='COLUMN_FIELD_PATHS') }}\n\n    ),\n\n    columns as (\n\n        select * except (base_column_name)\n        from info_schema_columns\n        join info_schema_column_paths using (relation_id, base_column_name)\n\n    ),\n\n    column_stats as (\n\n        select\n            table_database,\n            table_schema,\n            table_name,\n            max(relation_id) as relation_id,\n            max(case when is_partitioning_column = 'YES' then 1 else 0 end) = 1 as is_partitioned,\n            max(case when is_partitioning_column = 'YES' then column_name else null end) as partition_column,\n            max(case when clustering_ordinal_position is not null then 1 else 0 end) = 1 as is_clustered,\n            array_to_string(\n                array_agg(\n                    case\n                        when clustering_ordinal_position is not null then column_name\n                        else null\n                    end ignore nulls\n                    order by clustering_ordinal_position\n                ), ', '\n            ) as clustering_columns\n\n        from columns\n        group by 1,2,3\n\n    )\n\n    select\n        unsharded_tables.table_database,\n        unsharded_tables.table_schema,\n        case\n            when is_date_shard then concat(unsharded_tables.table_name, '*')\n            else unsharded_tables.table_name\n        end as table_name,\n        unsharded_tables.table_type,\n\n        -- coalesce name and type for External tables - these columns are not\n        -- present in the COLUMN_FIELD_PATHS resultset\n        coalesce(columns.column_name, '<unknown>') as column_name,\n        -- invent a row number to account for nested fields -- BQ does\n        -- not treat these nested properties as independent fields\n        row_number() over (\n            partition by relation_id\n            order by columns.column_index, columns.column_name\n        ) as column_index,\n        coalesce(columns.column_type, '<unknown>') as column_type,\n        columns.column_comment,\n\n        'Shard count' as `stats__date_shards__label`,\n        table_shards.shard_count as `stats__date_shards__value`,\n        'The number of date shards in this table' as `stats__date_shards__description`,\n        is_date_shard as `stats__date_shards__include`,\n\n        'Shard (min)' as `stats__date_shard_min__label`,\n        table_shards.shard_min as `stats__date_shard_min__value`,\n        'The first date shard in this table' as `stats__date_shard_min__description`,\n        is_date_shard as `stats__date_shard_min__include`,\n\n        'Shard (max)' as `stats__date_shard_max__label`,\n        table_shards.shard_max as `stats__date_shard_max__value`,\n        'The last date shard in this table' as `stats__date_shard_max__description`,\n        is_date_shard as `stats__date_shard_max__include`,\n\n        '# Rows' as `stats__num_rows__label`,\n        row_count as `stats__num_rows__value`,\n        'Approximate count of rows in this table' as `stats__num_rows__description`,\n        (unsharded_tables.table_type = 'table') as `stats__num_rows__include`,\n\n        'Approximate Size' as `stats__num_bytes__label`,\n        size_bytes as `stats__num_bytes__value`,\n        'Approximate size of table as reported by BigQuery' as `stats__num_bytes__description`,\n        (unsharded_tables.table_type = 'table') as `stats__num_bytes__include`,\n\n        'Partitioned By' as `stats__partitioning_type__label`,\n        partition_column as `stats__partitioning_type__value`,\n        'The partitioning column for this table' as `stats__partitioning_type__description`,\n        is_partitioned as `stats__partitioning_type__include`,\n\n        'Clustered By' as `stats__clustering_fields__label`,\n        clustering_columns as `stats__clustering_fields__value`,\n        'The clustering columns for this table' as `stats__clustering_fields__description`,\n        is_clustered as `stats__clustering_fields__include`\n\n    -- join using relation_id (an actual relation, not a shard prefix) to make\n    -- sure that column metadata is picked up through the join. This will only\n    -- return the column information for the \"max\" table in a date-sharded table set\n    from unsharded_tables\n    left join columns using (relation_id)\n    left join column_stats using (relation_id)\n  {%- endset -%}\n\n  {%- endif -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151874.9063628}, "macro.dbt_bigquery.partition_by": {"unique_id": "macro.dbt_bigquery.partition_by", "package_name": "dbt_bigquery", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "partition_by", "macro_sql": "{% macro partition_by(partition_config) -%}\n    {%- if partition_config is none -%}\n      {% do return('') %}\n    {%- elif partition_config.data_type | lower in ('date','timestamp','datetime') -%}\n        partition by {{ partition_config.render() }}\n    {%- elif partition_config.data_type | lower in ('int64') -%}\n        {%- set range = partition_config.range -%}\n        partition by range_bucket(\n            {{ partition_config.field }},\n            generate_array({{ range.start}}, {{ range.end }}, {{ range.interval }})\n        )\n    {%- endif -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151874.913824}, "macro.dbt_bigquery.cluster_by": {"unique_id": "macro.dbt_bigquery.cluster_by", "package_name": "dbt_bigquery", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "cluster_by", "macro_sql": "{% macro cluster_by(raw_cluster_by) %}\n  {%- if raw_cluster_by is not none -%}\n  cluster by {% if raw_cluster_by is string -%}\n    {% set raw_cluster_by = [raw_cluster_by] %}\n  {%- endif -%}\n  {%- for cluster in raw_cluster_by -%}\n    {{ cluster }}\n    {%- if not loop.last -%}, {% endif -%}\n  {%- endfor -%}\n\n  {% endif %}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151874.914295}, "macro.dbt_bigquery.bigquery_options": {"unique_id": "macro.dbt_bigquery.bigquery_options", "package_name": "dbt_bigquery", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery_options", "macro_sql": "{% macro bigquery_options(opts) %}\n  {% set options -%}\n    OPTIONS({% for opt_key, opt_val in opts.items() %}\n      {{ opt_key }}={{ opt_val }}{{ \",\" if not loop.last }}\n    {% endfor %})\n  {%- endset %}\n  {%- do return(options) -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151874.914861}, "macro.dbt_bigquery.bigquery_table_options": {"unique_id": "macro.dbt_bigquery.bigquery_table_options", "package_name": "dbt_bigquery", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery_table_options", "macro_sql": "{% macro bigquery_table_options(config, node, temporary) %}\n  {% set opts = adapter.get_table_options(config, node, temporary) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151874.915185}, "macro.dbt_bigquery.bigquery__create_table_as": {"unique_id": "macro.dbt_bigquery.bigquery__create_table_as", "package_name": "dbt_bigquery", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__create_table_as", "macro_sql": "{% macro bigquery__create_table_as(temporary, relation, sql) -%}\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set raw_cluster_by = config.get('cluster_by', none) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {%- set partition_config = adapter.parse_partition_by(raw_partition_by) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create or replace table {{ relation }}\n  {{ partition_by(partition_config) }}\n  {{ cluster_by(raw_cluster_by) }}\n  {{ bigquery_table_options(config, model, temporary) }}\n  as (\n    {{ sql }}\n  );\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.partition_by", "macro.dbt_bigquery.cluster_by", "macro.dbt_bigquery.bigquery_table_options"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151874.9161868}, "macro.dbt_bigquery.bigquery_view_options": {"unique_id": "macro.dbt_bigquery.bigquery_view_options", "package_name": "dbt_bigquery", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery_view_options", "macro_sql": "{% macro bigquery_view_options(config, node) %}\n  {% set opts = adapter.get_view_options(config, node) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151874.916536}, "macro.dbt_bigquery.bigquery__create_view_as": {"unique_id": "macro.dbt_bigquery.bigquery__create_view_as", "package_name": "dbt_bigquery", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__create_view_as", "macro_sql": "{% macro bigquery__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create or replace view {{ relation }}\n  {{ bigquery_view_options(config, model) }}\n  as {{ sql }};\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_view_options"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151874.917042}, "macro.dbt_bigquery.bigquery__create_schema": {"unique_id": "macro.dbt_bigquery.bigquery__create_schema", "package_name": "dbt_bigquery", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__create_schema", "macro_sql": "{% macro bigquery__create_schema(relation) -%}\n  {{ adapter.create_schema(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151874.917197}, "macro.dbt_bigquery.bigquery__drop_schema": {"unique_id": "macro.dbt_bigquery.bigquery__drop_schema", "package_name": "dbt_bigquery", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__drop_schema", "macro_sql": "{% macro bigquery__drop_schema(relation) -%}\n  {{ adapter.drop_schema(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151874.917342}, "macro.dbt_bigquery.bigquery__drop_relation": {"unique_id": "macro.dbt_bigquery.bigquery__drop_relation", "package_name": "dbt_bigquery", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__drop_relation", "macro_sql": "{% macro bigquery__drop_relation(relation) -%}\n  {% call statement('drop_relation') -%}\n    drop {{ relation.type }} if exists {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151874.917631}, "macro.dbt_bigquery.bigquery__get_columns_in_relation": {"unique_id": "macro.dbt_bigquery.bigquery__get_columns_in_relation", "package_name": "dbt_bigquery", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__get_columns_in_relation", "macro_sql": "{% macro bigquery__get_columns_in_relation(relation) -%}\n  {{ return(adapter.get_columns_in_relation(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151874.917891}, "macro.dbt_bigquery.bigquery__list_relations_without_caching": {"unique_id": "macro.dbt_bigquery.bigquery__list_relations_without_caching", "package_name": "dbt_bigquery", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__list_relations_without_caching", "macro_sql": "{% macro bigquery__list_relations_without_caching(schema_relation) -%}\n  {{ return(adapter.list_relations_without_caching(schema_relation)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151874.918069}, "macro.dbt_bigquery.bigquery__current_timestamp": {"unique_id": "macro.dbt_bigquery.bigquery__current_timestamp", "package_name": "dbt_bigquery", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() -%}\n  CURRENT_TIMESTAMP()\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151874.918154}, "macro.dbt_bigquery.bigquery__snapshot_string_as_time": {"unique_id": "macro.dbt_bigquery.bigquery__snapshot_string_as_time", "package_name": "dbt_bigquery", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__snapshot_string_as_time", "macro_sql": "{% macro bigquery__snapshot_string_as_time(timestamp) -%}\n    {%- set result = 'TIMESTAMP(\"' ~ timestamp ~ '\")' -%}\n    {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151874.918356}, "macro.dbt_bigquery.bigquery__list_schemas": {"unique_id": "macro.dbt_bigquery.bigquery__list_schemas", "package_name": "dbt_bigquery", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__list_schemas", "macro_sql": "{% macro bigquery__list_schemas(database) -%}\n  {{ return(adapter.list_schemas(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151874.918564}, "macro.dbt_bigquery.bigquery__check_schema_exists": {"unique_id": "macro.dbt_bigquery.bigquery__check_schema_exists", "package_name": "dbt_bigquery", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__check_schema_exists", "macro_sql": "{% macro bigquery__check_schema_exists(information_schema, schema) %}\n  {{ return(adapter.check_schema_exists(information_schema.database, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151874.918987}, "macro.dbt_bigquery.bigquery__persist_docs": {"unique_id": "macro.dbt_bigquery.bigquery__persist_docs", "package_name": "dbt_bigquery", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__persist_docs", "macro_sql": "{% macro bigquery__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do alter_column_comment(relation, model.columns) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151874.9193301}, "macro.dbt_bigquery.bigquery__alter_column_comment": {"unique_id": "macro.dbt_bigquery.bigquery__alter_column_comment", "package_name": "dbt_bigquery", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__alter_column_comment", "macro_sql": "{% macro bigquery__alter_column_comment(relation, column_dict) -%}\n  {% do adapter.update_columns(relation, column_dict) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151874.91954}, "macro.dbt_bigquery.bigquery__rename_relation": {"unique_id": "macro.dbt_bigquery.bigquery__rename_relation", "package_name": "dbt_bigquery", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__rename_relation", "macro_sql": "{% macro bigquery__rename_relation(from_relation, to_relation) -%}\n  {% do adapter.rename_relation(from_relation, to_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151874.9198232}, "macro.dbt_bigquery.bigquery__alter_relation_add_columns": {"unique_id": "macro.dbt_bigquery.bigquery__alter_relation_add_columns", "package_name": "dbt_bigquery", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__alter_relation_add_columns", "macro_sql": "{% macro bigquery__alter_relation_add_columns(relation, add_columns) %}\n  \n  {% set sql -%}\n     \n     alter {{ relation.type }} {{ relation }}\n        {% for column in add_columns %}\n          add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n        {% endfor %}\n  \n  {%- endset -%}\n\n  {{ return(run_query(sql)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151874.920298}, "macro.dbt_bigquery.bigquery__alter_relation_drop_columns": {"unique_id": "macro.dbt_bigquery.bigquery__alter_relation_drop_columns", "package_name": "dbt_bigquery", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__alter_relation_drop_columns", "macro_sql": "{% macro bigquery__alter_relation_drop_columns(relation, drop_columns) %}\n  \n  {% set sql -%}\n     \n     alter {{ relation.type }} {{ relation }}\n\n        {% for column in drop_columns %}\n          drop column {{ column.name }}{{ ',' if not loop.last }}\n        {% endfor %}\n  \n  {%- endset -%}\n  \n  {{ return(run_query(sql)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151874.9209359}, "macro.dbt_bigquery.bigquery__alter_column_type": {"unique_id": "macro.dbt_bigquery.bigquery__alter_column_type", "package_name": "dbt_bigquery", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__alter_column_type", "macro_sql": "{% macro bigquery__alter_column_type(relation, column_name, new_column_type) -%}\n  {#-- Changing a column's data type using a query requires you to scan the entire table.\n    The query charges can be significant if the table is very large.\n\n    https://cloud.google.com/bigquery/docs/manually-changing-schemas#changing_a_columns_data_type\n  #}\n  {% set relation_columns = get_columns_in_relation(relation) %}\n\n  {% set sql %}\n    select\n      {%- for col in relation_columns -%}\n        {% if col.column == column_name %}\n          CAST({{ col.quoted }} AS {{ new_column_type }}) AS {{ col.quoted }}\n        {%- else %}\n          {{ col.quoted }}\n        {%- endif %}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor %}\n    from {{ relation }}\n  {% endset %}\n\n  {% call statement('alter_column_type') %}\n    {{ create_table_as(False, relation, sql)}}\n  {%- endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_relation", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151874.921781}, "macro.dbt_bigquery.bigquery__test_unique": {"unique_id": "macro.dbt_bigquery.bigquery__test_unique", "package_name": "dbt_bigquery", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__test_unique", "macro_sql": "{% macro bigquery__test_unique(model, column_name) %}\n\nwith dbt_test__target as (\n  \n  select {{ column_name }} as unique_field\n  from {{ model }}\n  where {{ column_name }} is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151874.9219909}, "macro.dbt_bigquery.bigquery__create_csv_table": {"unique_id": "macro.dbt_bigquery.bigquery__create_csv_table", "package_name": "dbt_bigquery", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "bigquery__create_csv_table", "macro_sql": "{% macro bigquery__create_csv_table(model, agate_table) %}\n    -- no-op\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151874.922593}, "macro.dbt_bigquery.bigquery__reset_csv_table": {"unique_id": "macro.dbt_bigquery.bigquery__reset_csv_table", "package_name": "dbt_bigquery", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "bigquery__reset_csv_table", "macro_sql": "{% macro bigquery__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151874.922817}, "macro.dbt_bigquery.bigquery__load_csv_rows": {"unique_id": "macro.dbt_bigquery.bigquery__load_csv_rows", "package_name": "dbt_bigquery", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "bigquery__load_csv_rows", "macro_sql": "{% macro bigquery__load_csv_rows(model, agate_table) %}\n\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {{ adapter.load_dataframe(model['database'], model['schema'], model['alias'],\n  \t\t\t\t\t\t\tagate_table, column_override) }}\n  {% if config.persist_relation_docs() and 'description' in model %}\n\n  \t{{ adapter.update_table_description(model['database'], model['schema'], model['alias'], model['description']) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151874.923983}, "macro.dbt_bigquery.bigquery__handle_existing_table": {"unique_id": "macro.dbt_bigquery.bigquery__handle_existing_table", "package_name": "dbt_bigquery", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "name": "bigquery__handle_existing_table", "macro_sql": "{% macro bigquery__handle_existing_table(full_refresh, old_relation) %}\n    {%- if full_refresh -%}\n      {{ adapter.drop_relation(old_relation) }}\n    {%- else -%}\n      {{ exceptions.relation_wrong_type(old_relation, 'view') }}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151874.924939}, "macro.dbt_bigquery.materialization_view_bigquery": {"unique_id": "macro.dbt_bigquery.materialization_view_bigquery", "package_name": "dbt_bigquery", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "name": "materialization_view_bigquery", "macro_sql": "{% materialization view, adapter='bigquery' -%}\n    {% set to_return = create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n    {% do persist_docs(target_relation, model) %}\n\n    {% if config.get('grant_access_to') %}\n      {% for grant_target_dict in config.get('grant_access_to') %}\n        {% do adapter.grant_access_to(this, 'view', None, grant_target_dict) %}\n      {% endfor %}\n    {% endif %}\n\n    {% do return(to_return) %}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151874.9256651}, "macro.dbt_bigquery.materialization_table_bigquery": {"unique_id": "macro.dbt_bigquery.materialization_table_bigquery", "package_name": "dbt_bigquery", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "name": "materialization_table_bigquery", "macro_sql": "{% materialization table, adapter='bigquery' -%}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n  {%- set target_relation = api.Relation.create(database=database, schema=schema, identifier=identifier, type='table') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#\n      We only need to drop this thing if it is not a table.\n      If it _is_ already a table, then we can overwrite it without downtime\n      Unlike table -> view, no need for `--full-refresh`: dropping a view is no big deal\n  #}\n  {%- if exists_not_as_table -%}\n      {{ adapter.drop_relation(old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n  {% if not adapter.is_replaceable(old_relation, partition_by, cluster_by) %}\n    {% do log(\"Hard refreshing \" ~ old_relation ~ \" because it is not replaceable\") %}\n    {% do adapter.drop_relation(old_relation) %}\n  {% endif %}\n  {% call statement('main') -%}\n    {{ create_table_as(False, target_relation, sql) }}\n  {% endcall -%}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151874.927888}, "macro.dbt_bigquery.materialization_copy_bigquery": {"unique_id": "macro.dbt_bigquery.materialization_copy_bigquery", "package_name": "dbt_bigquery", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/copy.sql", "original_file_path": "macros/materializations/copy.sql", "name": "materialization_copy_bigquery", "macro_sql": "{% materialization copy, adapter='bigquery' -%}\n\n  {# Setup #}\n  {{ run_hooks(pre_hooks) }}\n\n  {% set destination = this.incorporate(type='table') %}\n\n  {# there can be several ref() or source() according to BQ copy API docs #}\n  {# cycle over ref() and source() to create source tables array #}\n  {% set source_array = [] %}\n  {% for ref_table in model.refs %}\n    {{ source_array.append(ref(*ref_table)) }}\n  {% endfor %}\n\n  {% for src_table in model.sources %}\n    {{ source_array.append(source(*src_table)) }}\n  {% endfor %}\n\n  {# Call adapter's copy_table function #}\n  {%- set result_str = adapter.copy_table(\n      source_array,\n      destination,\n      config.get('copy_materialization', default = 'table')) -%}\n\n  {{ store_result('main', response=result_str) }}\n\n  {# Clean up #}\n  {{ run_hooks(post_hooks) }}\n  {{ adapter.commit() }}\n\n  {{ return({'relations': [destination]}) }}\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151874.929398}, "macro.dbt_bigquery.declare_dbt_max_partition": {"unique_id": "macro.dbt_bigquery.declare_dbt_max_partition", "package_name": "dbt_bigquery", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "declare_dbt_max_partition", "macro_sql": "{% macro declare_dbt_max_partition(relation, partition_by, sql) %}\n\n  {% if '_dbt_max_partition' in sql %}\n\n    declare _dbt_max_partition {{ partition_by.data_type }} default (\n      select max({{ partition_by.field }}) from {{ this }}\n      where {{ partition_by.field }} is not null\n    );\n  \n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151874.9318101}, "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy": {"unique_id": "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "package_name": "dbt_bigquery", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "dbt_bigquery_validate_get_incremental_strategy", "macro_sql": "{% macro dbt_bigquery_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\", default=\"merge\") -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'insert_overwrite'\n  {%- endset %}\n  {% if strategy not in ['merge', 'insert_overwrite'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151874.9323149}, "macro.dbt_bigquery.bq_insert_overwrite": {"unique_id": "macro.dbt_bigquery.bq_insert_overwrite", "package_name": "dbt_bigquery", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "bq_insert_overwrite", "macro_sql": "{% macro bq_insert_overwrite(\n    tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists\n) %}\n\n  {% if partitions is not none and partitions != [] %} {# static #}\n\n      {% set predicate -%}\n          {{ partition_by.render(alias='DBT_INTERNAL_DEST') }} in (\n              {{ partitions | join (', ') }}\n          )\n      {%- endset %}\n\n      {%- set source_sql -%}\n        (\n          {{sql}}\n        )\n      {%- endset -%}\n\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate], include_sql_header=true) }}\n\n  {% else %} {# dynamic #}\n\n      {% set predicate -%}\n          {{ partition_by.render(alias='DBT_INTERNAL_DEST') }} in unnest(dbt_partitions_for_replacement)\n      {%- endset %}\n\n      {%- set source_sql -%}\n      (\n        select * from {{ tmp_relation }}\n      )\n      {%- endset -%}\n\n      -- generated script to merge partitions into {{ target_relation }}\n      declare dbt_partitions_for_replacement array<{{ partition_by.data_type }}>;\n\n      {# have we already created the temp table to check for schema changes? #}\n      {% if not tmp_relation_exists %}\n        {{ declare_dbt_max_partition(this, partition_by, sql) }}\n        \n        -- 1. create a temp table\n        {{ create_table_as(True, tmp_relation, sql) }}\n      {% else %}\n        -- 1. temp table already exists, we used it to check for schema changes\n      {% endif %}\n\n      -- 2. define partitions to update\n      set (dbt_partitions_for_replacement) = (\n          select as struct\n              array_agg(distinct {{ partition_by.render() }})\n          from {{ tmp_relation }}\n      );\n\n      {#\n        TODO: include_sql_header is a hack; consider a better approach that includes\n              the sql_header at the materialization-level instead\n      #}\n      -- 3. run the merge statement\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate], include_sql_header=false) }};\n\n      -- 4. clean up the temp table\n      drop table if exists {{ tmp_relation }}\n\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql", "macro.dbt_bigquery.declare_dbt_max_partition", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151874.933963}, "macro.dbt_bigquery.bq_generate_incremental_build_sql": {"unique_id": "macro.dbt_bigquery.bq_generate_incremental_build_sql", "package_name": "dbt_bigquery", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "bq_generate_incremental_build_sql", "macro_sql": "{% macro bq_generate_incremental_build_sql(\n    strategy, tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists\n) %}\n  {#-- if partitioned, use BQ scripting to get the range of partition values to be updated --#}\n  {% if strategy == 'insert_overwrite' %}\n\n    {% set missing_partition_msg -%}\n      The 'insert_overwrite' strategy requires the `partition_by` config.\n    {%- endset %}\n    {% if partition_by is none %}\n      {% do exceptions.raise_compiler_error(missing_partition_msg) %}\n    {% endif %}\n\n    {% set build_sql = bq_insert_overwrite(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, on_schema_change\n    ) %}\n\n  {% else %} {# strategy == 'merge' #}\n    {%- set source_sql -%}\n      {%- if tmp_relation_exists -%}\n        (\n          select * from {{ tmp_relation }}\n        )\n      {%- else -%} {#-- wrap sql in parens to make it a subquery --#}\n        (\n          {{sql}}\n        )\n      {%- endif -%}\n    {%- endset -%}\n\n    {% set build_sql = get_merge_sql(target_relation, source_sql, unique_key, dest_columns) %}\n\n  {% endif %}\n\n  {{ return(build_sql) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bq_insert_overwrite", "macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151874.934932}, "macro.dbt_bigquery.materialization_incremental_bigquery": {"unique_id": "macro.dbt_bigquery.materialization_incremental_bigquery", "package_name": "dbt_bigquery", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "materialization_incremental_bigquery", "macro_sql": "{% materialization incremental, adapter='bigquery' -%}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set target_relation = this %}\n  {%- set existing_relation = load_relation(this) %}\n  {%- set tmp_relation = make_temp_relation(this) %}\n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_bigquery_validate_get_incremental_strategy(config) -%}\n\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set partitions = config.get('partitions', none) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n  \n  {% elif existing_relation.is_view %}\n      {#-- There's no way to atomically replace a view with a table on BQ --#}\n      {{ adapter.drop_relation(existing_relation) }}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n  \n  {% elif full_refresh_mode %}\n      {#-- If the partition/cluster config has changed, then we must drop and recreate --#}\n      {% if not adapter.is_replaceable(existing_relation, partition_by, cluster_by) %}\n          {% do log(\"Hard refreshing \" ~ existing_relation ~ \" because it is not replaceable\") %}\n          {{ adapter.drop_relation(existing_relation) }}\n      {% endif %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n  \n  {% else %}\n    {% set tmp_relation_exists = false %}\n    {% if on_schema_change != 'ignore' %} {# Check first, since otherwise we may not build a temp table #}\n      {% do run_query(\n        declare_dbt_max_partition(this, partition_by, sql) + create_table_as(True, tmp_relation, sql)\n      ) %}\n      {% set tmp_relation_exists = true %}\n      {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n      {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% endif %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = bq_generate_incremental_build_sql(\n        strategy, tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists\n    ) %}\n\n  {% endif %}\n\n  {%- call statement('main') -%}\n    {{ build_sql }}\n  {% endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt_bigquery.declare_dbt_max_partition", "macro.dbt.process_schema_changes", "macro.dbt_bigquery.bq_generate_incremental_build_sql", "macro.dbt.statement", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151874.938038}, "macro.dbt_bigquery.bigquery__snapshot_hash_arguments": {"unique_id": "macro.dbt_bigquery.bigquery__snapshot_hash_arguments", "package_name": "dbt_bigquery", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "bigquery__snapshot_hash_arguments", "macro_sql": "{% macro bigquery__snapshot_hash_arguments(args) -%}\n  to_hex(md5(concat({%- for arg in args -%}\n    coalesce(cast({{ arg }} as string), ''){% if not loop.last %}, '|',{% endif -%}\n  {%- endfor -%}\n  )))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151874.938626}, "macro.dbt_bigquery.bigquery__create_columns": {"unique_id": "macro.dbt_bigquery.bigquery__create_columns", "package_name": "dbt_bigquery", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "bigquery__create_columns", "macro_sql": "{% macro bigquery__create_columns(relation, columns) %}\n  {{ adapter.alter_table_add_columns(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151874.938865}, "macro.dbt_bigquery.bigquery__post_snapshot": {"unique_id": "macro.dbt_bigquery.bigquery__post_snapshot", "package_name": "dbt_bigquery", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "bigquery__post_snapshot", "macro_sql": "{% macro bigquery__post_snapshot(staging_relation) %}\n  -- Clean up the snapshot temp table\n  {% do drop_relation(staging_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151874.939021}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151874.940329}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151874.940556}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151874.940751}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151874.940953}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151874.941122}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151874.9416802}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151874.942044}, "macro.dbt.should_store_failures": {"unique_id": "macro.dbt.should_store_failures", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151874.942403}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151874.943095}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151874.943393}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151874.9474208}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151874.9476879}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151874.947938}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_get_time", "macro_sql": "{% macro snapshot_get_time() -%}\n  {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151874.9480991}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() -%}\n  {{ current_timestamp() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151874.948203}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151874.9490938}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151874.949282}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151874.9494772}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists) -%}\n    {%- set query_columns = get_columns_in_query(node['compiled_sql']) -%}\n    {%- if not target_exists -%}\n        {# no table yet -> return whatever the query does #}\n        {{ return([false, query_columns]) }}\n    {%- endif -%}\n    {# handle any schema changes #}\n    {%- set target_table = node.get('alias', node.get('name')) -%}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=target_table) -%}\n    {%- set existing_cols = get_columns_in_query('select * from ' ~ target_relation) -%}\n    {%- set ns = namespace() -%} {# handle for-loop scoping with a namespace #}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(col) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return([ns.column_added, intersection]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151874.950798}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    \n    {% set select_current_time -%}\n        select {{ snapshot_get_time() }} as snapshot_start\n    {%- endset %}\n\n    {#-- don't access the column by name, to avoid dealing with casing issues on snowflake #}\n    {%- set now = run_query(select_current_time)[0][0] -%}\n    {% if now is none or now is undefined -%}\n        {%- do exceptions.raise_compiler_error('Could not get a snapshot start time from the database') -%}\n    {%- endif %}\n    {% set updated_at = config.get('updated_at', snapshot_string_as_time(now)) %}\n\n    {% set column_added = false %}\n\n    {% if check_cols_config == 'all' %}\n        {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists) %}\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {% set check_cols = check_cols_config %}\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        TRUE\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.run_query", "macro.dbt.snapshot_string_as_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151874.9530292}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151874.9571462}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151874.957481}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151874.957752}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151874.957864}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151874.958098}, "macro.dbt.default__snapshot_staging_table": {"unique_id": "macro.dbt.default__snapshot_staging_table", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select \n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n    \n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n    \n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151874.95914}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151874.959348}, "macro.dbt.default__build_snapshot_table": {"unique_id": "macro.dbt.default__build_snapshot_table", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151874.9596648}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set tmp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, tmp_relation, select) }}\n    {% endcall %}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151874.960184}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n\n  {% if not adapter.check_schema_exists(model.database, model.schema) %}\n    {% do create_schema(model.database, model.schema) %}\n  {% endif %}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_sql']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_schema", "macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151874.967542}, "macro.dbt.materialization_test_default": {"unique_id": "macro.dbt.materialization_test_default", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "name": "materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n    \n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n    \n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n    \n    {% do relations.append(target_relation) %}\n  \n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n    \n    {{ adapter.commit() }}\n  \n  {% else %}\n\n      {% set main_sql = sql %}\n  \n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n  \n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151874.970071}, "macro.dbt.get_test_sql": {"unique_id": "macro.dbt.get_test_sql", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151874.9707332}, "macro.dbt.default__get_test_sql": {"unique_id": "macro.dbt.default__get_test_sql", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151874.971097}, "macro.dbt.get_where_subquery": {"unique_id": "macro.dbt.get_where_subquery", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151874.971634}, "macro.dbt.default__get_where_subquery": {"unique_id": "macro.dbt.default__get_where_subquery", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151874.972099}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n    \n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151874.973164}, "macro.dbt.diff_columns": {"unique_id": "macro.dbt.diff_columns", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n   \n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n  \n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151874.973855}, "macro.dbt.diff_column_data_types": {"unique_id": "macro.dbt.diff_column_data_types", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n  \n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }} \n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151874.9745789}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151874.9780679}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set update_columns = config.get('merge_update_columns', default = dest_columns | map(attribute=\"quoted\") | list) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% set unique_key_match %}\n            DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n        {% endset %}\n        {% do predicates.append(unique_key_match) %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151874.979542}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151874.9798741}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key is not none %}\n    delete from {{ target }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ source }}\n    );\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151874.9803572}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151874.980754}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151874.981517}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151874.982369}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  {% set unique_key = config.get('unique_key') %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(target_relation) %}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\n  {% set backup_identifier = model['name'] + \"__dbt_backup\" %}\n\n  -- the intermediate_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {% set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                  schema=schema,\n                                                                  database=database) %}                                               \n  {% set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                            schema=schema,\n                                                            database=database) %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {# -- first check whether we want to full refresh for source view or config reasons #}\n  {% set trigger_full_refresh = (full_refresh_mode or existing_relation.is_view) %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n{% elif trigger_full_refresh %}\n      {#-- Make sure the backup doesn't exist so we don't encounter issues with the rename below #}\n      {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\n      {% set backup_identifier = model['name'] + '__dbt_backup' %}\n      {% set intermediate_relation = existing_relation.incorporate(path={\"identifier\": tmp_identifier}) %}\n      {% set backup_relation = existing_relation.incorporate(path={\"identifier\": backup_identifier}) %}\n\n      {% set build_sql = create_table_as(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n      {% do to_drop.append(backup_relation) %}\n  {% else %}\n    {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=tmp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = get_delete_insert_merge_sql(target_relation, tmp_relation, unique_key, dest_columns) %}\n  \n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %} \n      {% do adapter.rename_relation(target_relation, backup_relation) %} \n      {% do adapter.rename_relation(intermediate_relation, target_relation) %} \n  {% endif %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.get_delete_insert_merge_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151874.988422}, "macro.dbt.incremental_validate_on_schema_change": {"unique_id": "macro.dbt.incremental_validate_on_schema_change", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n   \n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n     \n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n     \n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n   \n   {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151874.994522}, "macro.dbt.check_for_schema_changes": {"unique_id": "macro.dbt.check_for_schema_changes", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n  \n  {% set schema_changed = False %}\n  \n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n  \n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n  \n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151874.996174}, "macro.dbt.sync_column_schemas": {"unique_id": "macro.dbt.sync_column_schemas", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n  \n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n  \n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n  \n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %} \n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n  \n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n  \n  {% do log(schema_change_message) %}\n  \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151874.997706}, "macro.dbt.process_schema_changes": {"unique_id": "macro.dbt.process_schema_changes", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n    \n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n    \n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n      \n      {% if schema_changes_dict['schema_changed'] %}\n    \n        {% if on_schema_change == 'fail' %}\n        \n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways: \n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n          {% endset %}\n          \n          {% do exceptions.raise_compiler_error(fail_msg) %}\n        \n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n          \n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n        \n        {% endif %}\n      \n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n    \n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151874.9985301}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type='table') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema,\n                                                      database=database,\n                                                      type='table') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                   schema=schema,\n                                                                   database=database) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type=backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                             schema=schema,\n                                                             database=database) -%}\n\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if old_relation is not none %}\n      {{ adapter.rename_relation(old_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.002919}, "macro.dbt.get_create_table_as_sql": {"unique_id": "macro.dbt.get_create_table_as_sql", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.003482}, "macro.dbt.default__get_create_table_as_sql": {"unique_id": "macro.dbt.default__get_create_table_as_sql", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.003686}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.0039139}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n  \n  {{ sql_header if sql_header is not none }}\n  \n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.004375}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, database=database,\n                                                type='view') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema, database=database, type='view') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                   schema=schema,\n                                                                   database=database) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"old_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the old_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the old_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema, database=database,\n                                                type=backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                             schema=schema,\n                                                             database=database) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if old_relation is not none %}\n    {{ adapter.rename_relation(old_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_view_as", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.008798}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.0092428}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.009514}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.0109482}, "macro.dbt.get_create_view_as_sql": {"unique_id": "macro.dbt.get_create_view_as_sql", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.0114172}, "macro.dbt.default__get_create_view_as_sql": {"unique_id": "macro.dbt.default__get_create_view_as_sql", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.011595}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.011799}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.012091}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set agate_table = load_agate_table() -%}\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ create_table_sql }};\n    -- dbt seed --\n    {{ sql }}\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.015405}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.020373}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.0214689}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.021751}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.022301}, "macro.dbt.get_binding_char": {"unique_id": "macro.dbt.get_binding_char", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.022464}, "macro.dbt.default__get_binding_char": {"unique_id": "macro.dbt.default__get_binding_char", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.022589}, "macro.dbt.get_batch_size": {"unique_id": "macro.dbt.get_batch_size", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.022764}, "macro.dbt.default__get_batch_size": {"unique_id": "macro.dbt.default__get_batch_size", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.02289}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.023437}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.0236402}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.025032}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.0255911}, "macro.dbt.default__generate_alias_name": {"unique_id": "macro.dbt.default__generate_alias_name", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.025882}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.026538}, "macro.dbt.default__generate_schema_name": {"unique_id": "macro.dbt.default__generate_schema_name", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.026857}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.02717}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.027672}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.027947}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.028386}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\nselect *\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.028636}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.028963}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.029975}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "statement", "macro_sql": "{% macro statement(name=None, fetch_result=False, auto_begin=True) -%}\n  {%- if execute: -%}\n    {%- set sql = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n      {{ write(sql) }}\n    {%- endif -%}\n\n    {%- set res, table = adapter.execute(sql, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.031348}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.032091}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.0324218}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.034566}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.035908}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.036733}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.036986}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.037531}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.037822}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.0380092}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.038213}, "macro.dbt.get_create_index_sql": {"unique_id": "macro.dbt.get_create_index_sql", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.038815}, "macro.dbt.default__get_create_index_sql": {"unique_id": "macro.dbt.default__get_create_index_sql", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.0389628}, "macro.dbt.create_indexes": {"unique_id": "macro.dbt.create_indexes", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.039135}, "macro.dbt.default__create_indexes": {"unique_id": "macro.dbt.default__create_indexes", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.0396202}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.041523}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier}) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.0419378}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.042141}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.04238}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.042618}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.0428329}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.043138}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.043455}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.043811}, "macro.dbt.default__get_or_create_relation": {"unique_id": "macro.dbt.default__get_or_create_relation", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.044432}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.0447402}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.044953}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.045537}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.045697}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.045957}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.046431}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.0472488}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.047442}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.047671}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.047864}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.048168}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.0487301}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.050435}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.0507252}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.0509388}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.051105}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.0513039}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.05157}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.0518332}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.052253}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.05247}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.0526452}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.054695}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.054873}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.055219}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.05542}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.055789}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.0560372}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.0566971}, "macro.dbt.alter_relation_add_remove_columns": {"unique_id": "macro.dbt.alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.0569758}, "macro.dbt.default__alter_relation_add_remove_columns": {"unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n  \n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n  \n  {% set sql -%}\n     \n     alter {{ relation.type }} {{ relation }}\n       \n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n            \n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n  \n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.05794}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.0586822}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.058958}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.05928}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.0595908}, "macro.dbt_utils.except": {"unique_id": "macro.dbt_utils.except", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.0599601}, "macro.dbt_utils.default__except": {"unique_id": "macro.dbt_utils.default__except", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.0600388}, "macro.dbt_utils.bigquery__except": {"unique_id": "macro.dbt_utils.bigquery__except", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "bigquery__except", "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.060114}, "macro.dbt_utils.replace": {"unique_id": "macro.dbt_utils.replace", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/replace.sql", "original_file_path": "macros/cross_db_utils/replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt_utils') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.060552}, "macro.dbt_utils.default__replace": {"unique_id": "macro.dbt_utils.default__replace", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/replace.sql", "original_file_path": "macros/cross_db_utils/replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n    \n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.060736}, "macro.dbt_utils.concat": {"unique_id": "macro.dbt_utils.concat", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt_utils')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.0611079}, "macro.dbt_utils.default__concat": {"unique_id": "macro.dbt_utils.default__concat", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.0612512}, "macro.dbt_utils.type_string": {"unique_id": "macro.dbt_utils.type_string", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.062059}, "macro.dbt_utils.default__type_string": {"unique_id": "macro.dbt_utils.default__type_string", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    string\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.062224}, "macro.dbt_utils.redshift__type_string": {"unique_id": "macro.dbt_utils.redshift__type_string", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "redshift__type_string", "macro_sql": "\n\n{%- macro redshift__type_string() -%}\n    varchar\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.062303}, "macro.dbt_utils.postgres__type_string": {"unique_id": "macro.dbt_utils.postgres__type_string", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "postgres__type_string", "macro_sql": "{% macro postgres__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.062387}, "macro.dbt_utils.snowflake__type_string": {"unique_id": "macro.dbt_utils.snowflake__type_string", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "snowflake__type_string", "macro_sql": "{% macro snowflake__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.062459}, "macro.dbt_utils.type_timestamp": {"unique_id": "macro.dbt_utils.type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.062633}, "macro.dbt_utils.default__type_timestamp": {"unique_id": "macro.dbt_utils.default__type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.0627131}, "macro.dbt_utils.snowflake__type_timestamp": {"unique_id": "macro.dbt_utils.snowflake__type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "snowflake__type_timestamp", "macro_sql": "{% macro snowflake__type_timestamp() %}\n    timestamp_ntz\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.0627918}, "macro.dbt_utils.type_float": {"unique_id": "macro.dbt_utils.type_float", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.062966}, "macro.dbt_utils.default__type_float": {"unique_id": "macro.dbt_utils.default__type_float", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    float\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.063046}, "macro.dbt_utils.bigquery__type_float": {"unique_id": "macro.dbt_utils.bigquery__type_float", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_float", "macro_sql": "{% macro bigquery__type_float() %}\n    float64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.063122}, "macro.dbt_utils.type_numeric": {"unique_id": "macro.dbt_utils.type_numeric", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.0632918}, "macro.dbt_utils.default__type_numeric": {"unique_id": "macro.dbt_utils.default__type_numeric", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    numeric(28, 6)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.063366}, "macro.dbt_utils.bigquery__type_numeric": {"unique_id": "macro.dbt_utils.bigquery__type_numeric", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_numeric", "macro_sql": "{% macro bigquery__type_numeric() %}\n    numeric\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.063444}, "macro.dbt_utils.type_bigint": {"unique_id": "macro.dbt_utils.type_bigint", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.063616}, "macro.dbt_utils.default__type_bigint": {"unique_id": "macro.dbt_utils.default__type_bigint", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    bigint\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.063696}, "macro.dbt_utils.bigquery__type_bigint": {"unique_id": "macro.dbt_utils.bigquery__type_bigint", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_bigint", "macro_sql": "{% macro bigquery__type_bigint() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.063772}, "macro.dbt_utils.type_int": {"unique_id": "macro.dbt_utils.type_int", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.06395}, "macro.dbt_utils.default__type_int": {"unique_id": "macro.dbt_utils.default__type_int", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_int", "macro_sql": "{% macro default__type_int() %}\n    int\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.0640268}, "macro.dbt_utils.bigquery__type_int": {"unique_id": "macro.dbt_utils.bigquery__type_int", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_int", "macro_sql": "{% macro bigquery__type_int() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.064097}, "macro.dbt_utils._is_relation": {"unique_id": "macro.dbt_utils._is_relation", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/_is_relation.sql", "original_file_path": "macros/cross_db_utils/_is_relation.sql", "name": "_is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.064672}, "macro.dbt_utils.length": {"unique_id": "macro.dbt_utils.length", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__length"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.065073}, "macro.dbt_utils.default__length": {"unique_id": "macro.dbt_utils.default__length", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) %}\n    \n    length(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.0651891}, "macro.dbt_utils.redshift__length": {"unique_id": "macro.dbt_utils.redshift__length", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "redshift__length", "macro_sql": "{% macro redshift__length(expression) %}\n\n    len(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.0652952}, "macro.dbt_utils.dateadd": {"unique_id": "macro.dbt_utils.dateadd", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt_utils')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.066011}, "macro.dbt_utils.default__dateadd": {"unique_id": "macro.dbt_utils.default__dateadd", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.0662751}, "macro.dbt_utils.bigquery__dateadd": {"unique_id": "macro.dbt_utils.bigquery__dateadd", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "bigquery__dateadd", "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.066463}, "macro.dbt_utils.postgres__dateadd": {"unique_id": "macro.dbt_utils.postgres__dateadd", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "postgres__dateadd", "macro_sql": "{% macro postgres__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.066637}, "macro.dbt_utils.redshift__dateadd": {"unique_id": "macro.dbt_utils.redshift__dateadd", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "redshift__dateadd", "macro_sql": "{% macro redshift__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ return(dbt_utils.default__dateadd(datepart, interval, from_date_or_timestamp)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.066859}, "macro.dbt_utils.intersect": {"unique_id": "macro.dbt_utils.intersect", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__intersect"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.0672069}, "macro.dbt_utils.default__intersect": {"unique_id": "macro.dbt_utils.default__intersect", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.067285}, "macro.dbt_utils.bigquery__intersect": {"unique_id": "macro.dbt_utils.bigquery__intersect", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "bigquery__intersect", "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.06736}, "macro.dbt_utils.right": {"unique_id": "macro.dbt_utils.right", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt_utils') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__right"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.068029}, "macro.dbt_utils.default__right": {"unique_id": "macro.dbt_utils.default__right", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.068179}, "macro.dbt_utils.bigquery__right": {"unique_id": "macro.dbt_utils.bigquery__right", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "bigquery__right", "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.068346}, "macro.dbt_utils.snowflake__right": {"unique_id": "macro.dbt_utils.snowflake__right", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.068521}, "macro.dbt_utils.datediff": {"unique_id": "macro.dbt_utils.datediff", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt_utils')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.071485}, "macro.dbt_utils.default__datediff": {"unique_id": "macro.dbt_utils.default__datediff", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) %}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.071664}, "macro.dbt_utils.bigquery__datediff": {"unique_id": "macro.dbt_utils.bigquery__datediff", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "bigquery__datediff", "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) %}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.071836}, "macro.dbt_utils.postgres__datediff": {"unique_id": "macro.dbt_utils.postgres__datediff", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "postgres__datediff", "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) %}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.0738418}, "macro.dbt_utils.redshift__datediff": {"unique_id": "macro.dbt_utils.redshift__datediff", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "redshift__datediff", "macro_sql": "{% macro redshift__datediff(first_date, second_date, datepart) %}\n\n    {{ return(dbt_utils.default__datediff(first_date, second_date, datepart)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.07408}, "macro.dbt_utils.safe_cast": {"unique_id": "macro.dbt_utils.safe_cast", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt_utils') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.0745568}, "macro.dbt_utils.default__safe_cast": {"unique_id": "macro.dbt_utils.default__safe_cast", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.074707}, "macro.dbt_utils.snowflake__safe_cast": {"unique_id": "macro.dbt_utils.snowflake__safe_cast", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.07484}, "macro.dbt_utils.bigquery__safe_cast": {"unique_id": "macro.dbt_utils.bigquery__safe_cast", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "bigquery__safe_cast", "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.074971}, "macro.dbt_utils.hash": {"unique_id": "macro.dbt_utils.hash", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt_utils') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.075348}, "macro.dbt_utils.default__hash": {"unique_id": "macro.dbt_utils.default__hash", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{field}} as {{dbt_utils.type_string()}}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.075495}, "macro.dbt_utils.bigquery__hash": {"unique_id": "macro.dbt_utils.bigquery__hash", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "bigquery__hash", "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt_utils.default__hash(field)}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.075632}, "macro.dbt_utils.cast_bool_to_text": {"unique_id": "macro.dbt_utils.cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt_utils') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.076023}, "macro.dbt_utils.default__cast_bool_to_text": {"unique_id": "macro.dbt_utils.default__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ dbt_utils.type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.076172}, "macro.dbt_utils.redshift__cast_bool_to_text": {"unique_id": "macro.dbt_utils.redshift__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "redshift__cast_bool_to_text", "macro_sql": "{% macro redshift__cast_bool_to_text(field) %}\n    case\n        when {{ field }} is true then 'true'\n        when {{ field }} is false then 'false'\n    end::text\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.0763059}, "macro.dbt_utils.identifier": {"unique_id": "macro.dbt_utils.identifier", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "identifier", "macro_sql": "{% macro identifier(value) %}\t\n  {%- set error_message = '\n    Warning: the `identifier` macro is no longer supported and will be deprecated in a future release of dbt-utils. \\\n    Use `adapter.quote` instead. The {}.{} model triggered this warning. \\\n    '.format(model.package_name, model.name) -%}\n  {%- do exceptions.warn(error_message) -%}\n  {{ return(adapter.dispatch('identifier', 'dbt_utils') (value)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__identifier"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.076869}, "macro.dbt_utils.default__identifier": {"unique_id": "macro.dbt_utils.default__identifier", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "default__identifier", "macro_sql": "{% macro default__identifier(value) -%}\t\n    \"{{ value }}\"\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.076983}, "macro.dbt_utils.bigquery__identifier": {"unique_id": "macro.dbt_utils.bigquery__identifier", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "bigquery__identifier", "macro_sql": "{% macro bigquery__identifier(value) -%}\t\n    `{{ value }}`\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.077096}, "macro.dbt_utils.position": {"unique_id": "macro.dbt_utils.position", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt_utils') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__position"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.0775528}, "macro.dbt_utils.default__position": {"unique_id": "macro.dbt_utils.default__position", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.077748}, "macro.dbt_utils.bigquery__position": {"unique_id": "macro.dbt_utils.bigquery__position", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "bigquery__position", "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n        \n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.077904}, "macro.dbt_utils.string_literal": {"unique_id": "macro.dbt_utils.string_literal", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/literal.sql", "original_file_path": "macros/cross_db_utils/literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt_utils') (value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.07824}, "macro.dbt_utils.default__string_literal": {"unique_id": "macro.dbt_utils.default__string_literal", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/literal.sql", "original_file_path": "macros/cross_db_utils/literal.sql", "name": "default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.078347}, "macro.dbt_utils.current_timestamp": {"unique_id": "macro.dbt_utils.current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ return(adapter.dispatch('current_timestamp', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.0790012}, "macro.dbt_utils.default__current_timestamp": {"unique_id": "macro.dbt_utils.default__current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() %}\n    current_timestamp::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.0791209}, "macro.dbt_utils.redshift__current_timestamp": {"unique_id": "macro.dbt_utils.redshift__current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "redshift__current_timestamp", "macro_sql": "{% macro redshift__current_timestamp() %}\n    getdate()\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.079196}, "macro.dbt_utils.bigquery__current_timestamp": {"unique_id": "macro.dbt_utils.bigquery__current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() %}\n    current_timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.079278}, "macro.dbt_utils.current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp_in_utc", "macro_sql": "{% macro current_timestamp_in_utc() -%}\n  {{ return(adapter.dispatch('current_timestamp_in_utc', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.079527}, "macro.dbt_utils.default__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.default__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp_in_utc", "macro_sql": "{% macro default__current_timestamp_in_utc() %}\n    {{dbt_utils.current_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.079647}, "macro.dbt_utils.snowflake__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.snowflake__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "snowflake__current_timestamp_in_utc", "macro_sql": "{% macro snowflake__current_timestamp_in_utc() %}\n    convert_timezone('UTC', {{dbt_utils.current_timestamp()}})::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.0798101}, "macro.dbt_utils.postgres__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.postgres__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "postgres__current_timestamp_in_utc", "macro_sql": "{% macro postgres__current_timestamp_in_utc() %}\n    (current_timestamp at time zone 'utc')::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.079934}, "macro.dbt_utils.redshift__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.redshift__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "redshift__current_timestamp_in_utc", "macro_sql": "{% macro redshift__current_timestamp_in_utc() %}\n    {{ return(dbt_utils.default__current_timestamp_in_utc()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.0800729}, "macro.dbt_utils.width_bucket": {"unique_id": "macro.dbt_utils.width_bucket", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.0817122}, "macro.dbt_utils.default__width_bucket": {"unique_id": "macro.dbt_utils.default__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }},\n                    {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.082238}, "macro.dbt_utils.redshift__width_bucket": {"unique_id": "macro.dbt_utils.redshift__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "redshift__width_bucket", "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is exactly at the bucket edge\n        case\n            when\n                {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }} %\n                {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                 = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.082762}, "macro.dbt_utils.snowflake__width_bucket": {"unique_id": "macro.dbt_utils.snowflake__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.082977}, "macro.dbt_utils.last_day": {"unique_id": "macro.dbt_utils.last_day", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt_utils') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.083638}, "macro.dbt_utils.default_last_day": {"unique_id": "macro.dbt_utils.default_last_day", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "default_last_day", "macro_sql": "\n\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd(datepart, '1', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.0839272}, "macro.dbt_utils.default__last_day": {"unique_id": "macro.dbt_utils.default__last_day", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.084085}, "macro.dbt_utils.postgres__last_day": {"unique_id": "macro.dbt_utils.postgres__last_day", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "postgres__last_day", "macro_sql": "{% macro postgres__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- postgres dateadd does not support quarter interval.\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd('month', '3', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc", "macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.084522}, "macro.dbt_utils.redshift__last_day": {"unique_id": "macro.dbt_utils.redshift__last_day", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "redshift__last_day", "macro_sql": "{% macro redshift__last_day(date, datepart) %}\n\n    {{ return(dbt_utils.default__last_day(date, datepart)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.0847192}, "macro.dbt_utils.split_part": {"unique_id": "macro.dbt_utils.split_part", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt_utils') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.0852501}, "macro.dbt_utils.default__split_part": {"unique_id": "macro.dbt_utils.default__split_part", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.085433}, "macro.dbt_utils.bigquery__split_part": {"unique_id": "macro.dbt_utils.bigquery__split_part", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "bigquery__split_part", "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.085629}, "macro.dbt_utils.date_trunc": {"unique_id": "macro.dbt_utils.date_trunc", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt_utils') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.086057}, "macro.dbt_utils.default__date_trunc": {"unique_id": "macro.dbt_utils.default__date_trunc", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) %}\n    date_trunc('{{datepart}}', {{date}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.086198}, "macro.dbt_utils.bigquery__date_trunc": {"unique_id": "macro.dbt_utils.bigquery__date_trunc", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "bigquery__date_trunc", "macro_sql": "{% macro bigquery__date_trunc(datepart, date) %}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.086336}, "macro.dbt_utils._is_ephemeral": {"unique_id": "macro.dbt_utils._is_ephemeral", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/_is_ephemeral.sql", "original_file_path": "macros/cross_db_utils/_is_ephemeral.sql", "name": "_is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.087348}, "macro.dbt_utils.get_period_boundaries": {"unique_id": "macro.dbt_utils.get_period_boundaries", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_boundaries", "macro_sql": "{% macro get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n    {{ return(adapter.dispatch('get_period_boundaries', 'dbt_utils')(target_schema, target_table, timestamp_field, start_date, stop_date, period)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_boundaries"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.09456}, "macro.dbt_utils.default__get_period_boundaries": {"unique_id": "macro.dbt_utils.default__get_period_boundaries", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_boundaries", "macro_sql": "{% macro default__get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n\n  {% call statement('period_boundaries', fetch_result=True) -%}\n    with data as (\n      select\n          coalesce(max(\"{{timestamp_field}}\"), '{{start_date}}')::timestamp as start_timestamp,\n          coalesce(\n            {{dbt_utils.dateadd('millisecond',\n                                -1,\n                                \"nullif('\" ~ stop_date ~ \"','')::timestamp\")}},\n            {{dbt_utils.current_timestamp()}}\n          ) as stop_timestamp\n      from \"{{target_schema}}\".\"{{target_table}}\"\n    )\n\n    select\n      start_timestamp,\n      stop_timestamp,\n      {{dbt_utils.datediff('start_timestamp',\n                           'stop_timestamp',\n                           period)}}  + 1 as num_periods\n    from data\n  {%- endcall %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.095344}, "macro.dbt_utils.get_period_sql": {"unique_id": "macro.dbt_utils.get_period_sql", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_sql", "macro_sql": "{% macro get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n    {{ return(adapter.dispatch('get_period_sql', 'dbt_utils')(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.095757}, "macro.dbt_utils.default__get_period_sql": {"unique_id": "macro.dbt_utils.default__get_period_sql", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_sql", "macro_sql": "{% macro default__get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n\n  {%- set period_filter -%}\n    (\"{{timestamp_field}}\" >  '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' and\n     \"{{timestamp_field}}\" <= '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' + interval '1 {{period}}' and\n     \"{{timestamp_field}}\" <  '{{stop_timestamp}}'::timestamp)\n  {%- endset -%}\n\n  {%- set filtered_sql = sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\n\n  select\n    {{target_cols_csv}}\n  from (\n    {{filtered_sql}}\n  )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.096313}, "macro.dbt_utils.materialization_insert_by_period_default": {"unique_id": "macro.dbt_utils.materialization_insert_by_period_default", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "materialization_insert_by_period_default", "macro_sql": "{% materialization insert_by_period, default -%}\n  {%- set timestamp_field = config.require('timestamp_field') -%}\n  {%- set start_date = config.require('start_date') -%}\n  {%- set stop_date = config.get('stop_date') or '' -%}}\n  {%- set period = config.get('period') or 'week' -%}\n\n  {%- if sql.find('__PERIOD_FILTER__') == -1 -%}\n    {%- set error_message -%}\n      Model '{{ model.unique_id }}' does not include the required string '__PERIOD_FILTER__' in its sql\n    {%- endset -%}\n    {{ exceptions.raise_compiler_error(error_message) }}\n  {%- endif -%}\n\n  {%- set identifier = model['name'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, type='table') -%}\n\n  {%- set non_destructive_mode = (flags.NON_DESTRUCTIVE == True) -%}\n  {%- set full_refresh_mode = (flags.FULL_REFRESH == True) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n\n  {%- set should_truncate = (non_destructive_mode and full_refresh_mode and exists_as_table) -%}\n  {%- set should_drop = (not should_truncate and (full_refresh_mode or exists_not_as_table)) -%}\n  {%- set force_create = (flags.FULL_REFRESH and not flags.NON_DESTRUCTIVE) -%}\n\n  -- setup\n  {% if old_relation is none -%}\n    -- noop\n  {%- elif should_truncate -%}\n    {{adapter.truncate_relation(old_relation)}}\n  {%- elif should_drop -%}\n    {{adapter.drop_relation(old_relation)}}\n    {%- set old_relation = none -%}\n  {%- endif %}\n\n  {{run_hooks(pre_hooks, inside_transaction=False)}}\n\n  -- `begin` happens here, so `commit` after it to finish the transaction\n  {{run_hooks(pre_hooks, inside_transaction=True)}}\n  {% call statement() -%}\n    begin; -- make extra sure we've closed out the transaction\n    commit;\n  {%- endcall %}\n\n  -- build model\n  {% if force_create or old_relation is none -%}\n    {# Create an empty target table -#}\n    {% call statement('main') -%}\n      {%- set empty_sql = sql | replace(\"__PERIOD_FILTER__\", 'false') -%}\n      {{create_table_as(False, target_relation, empty_sql)}}\n    {%- endcall %}\n  {%- endif %}\n\n  {% set _ = dbt_utils.get_period_boundaries(schema,\n                                              identifier,\n                                              timestamp_field,\n                                              start_date,\n                                              stop_date,\n                                              period) %}\n  {%- set start_timestamp = load_result('period_boundaries')['data'][0][0] | string -%}\n  {%- set stop_timestamp = load_result('period_boundaries')['data'][0][1] | string -%}\n  {%- set num_periods = load_result('period_boundaries')['data'][0][2] | int -%}\n\n  {% set target_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set target_cols_csv = target_columns | map(attribute='quoted') | join(', ') -%}\n  {%- set loop_vars = {'sum_rows_inserted': 0} -%}\n\n  -- commit each period as a separate transaction\n  {% for i in range(num_periods) -%}\n    {%- set msg = \"Running for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) -%}\n    {{ dbt_utils.log_info(msg) }}\n\n    {%- set tmp_identifier = model['name'] ~ '__dbt_incremental_period' ~ i ~ '_tmp' -%}\n    {%- set tmp_relation = api.Relation.create(identifier=tmp_identifier,\n                                               schema=schema, type='table') -%}\n    {% call statement() -%}\n      {% set tmp_table_sql = dbt_utils.get_period_sql(target_cols_csv,\n                                                       sql,\n                                                       timestamp_field,\n                                                       period,\n                                                       start_timestamp,\n                                                       stop_timestamp,\n                                                       i) %}\n      {{dbt.create_table_as(True, tmp_relation, tmp_table_sql)}}\n    {%- endcall %}\n\n    {{adapter.expand_target_column_types(from_relation=tmp_relation,\n                                         to_relation=target_relation)}}\n    {%- set name = 'main-' ~ i -%}\n    {% call statement(name, fetch_result=True) -%}\n      insert into {{target_relation}} ({{target_cols_csv}})\n      (\n          select\n              {{target_cols_csv}}\n          from {{tmp_relation.include(schema=False)}}\n      );\n    {%- endcall %}\n    {% set result = load_result('main-' ~ i) %}\n    {% if 'response' in result.keys() %} {# added in v0.19.0 #}\n        {% set rows_inserted = result['response']['rows_affected'] %}\n    {% else %} {# older versions #}\n        {% set rows_inserted = result['status'].split(\" \")[2] | int %}\n    {% endif %}\n    \n    {%- set sum_rows_inserted = loop_vars['sum_rows_inserted'] + rows_inserted -%}\n    {%- if loop_vars.update({'sum_rows_inserted': sum_rows_inserted}) %} {% endif -%}\n\n    {%- set msg = \"Ran for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) ~ \"; \" ~ rows_inserted ~ \" records inserted\" -%}\n    {{ dbt_utils.log_info(msg) }}\n\n  {%- endfor %}\n\n  {% call statement() -%}\n    begin;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=True)}}\n\n  {% call statement() -%}\n    commit;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=False)}}\n\n  {%- set status_string = \"INSERT \" ~ loop_vars['sum_rows_inserted'] -%}\n\n  {% call noop_statement('main', status_string) -%}\n    -- no-op\n  {%- endcall %}\n\n  -- Return the relations created in this materialization\n  {{ return({'relations': [target_relation]}) }}  \n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt_utils.get_period_boundaries", "macro.dbt_utils.log_info", "macro.dbt_utils.get_period_sql", "macro.dbt.noop_statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.102499}, "macro.dbt_utils.get_url_host": {"unique_id": "macro.dbt_utils.get_url_host", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.103091}, "macro.dbt_utils.default__get_url_host": {"unique_id": "macro.dbt_utils.default__get_url_host", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt_utils.split_part(\n        dbt_utils.split_part(\n            dbt_utils.replace(\n                dbt_utils.replace(\n                    dbt_utils.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt_utils.safe_cast(\n        parsed,\n        dbt_utils.type_string()\n        )}}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part", "macro.dbt_utils.replace", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.103703}, "macro.dbt_utils.get_url_path": {"unique_id": "macro.dbt_utils.get_url_path", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.104343}, "macro.dbt_utils.default__get_url_path": {"unique_id": "macro.dbt_utils.default__get_url_path", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url = \n        dbt_utils.replace(\n            dbt_utils.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{dbt_utils.position(\"'/'\", stripped_url)}}, 0),\n            {{dbt_utils.position(\"'?'\", stripped_url)}} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt_utils.split_part(\n            dbt_utils.right(\n                stripped_url, \n                dbt_utils.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ), \n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt_utils.safe_cast(\n        parsed_path,\n        dbt_utils.type_string()\n    )}}\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt_utils.position", "macro.dbt_utils.split_part", "macro.dbt_utils.right", "macro.dbt_utils.length", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.105224}, "macro.dbt_utils.get_url_parameter": {"unique_id": "macro.dbt_utils.get_url_parameter", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.105719}, "macro.dbt_utils.default__get_url_parameter": {"unique_id": "macro.dbt_utils.default__get_url_parameter", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt_utils.split_part(dbt_utils.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.1060941}, "macro.dbt_utils.pretty_log_format": {"unique_id": "macro.dbt_utils.pretty_log_format", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.106459}, "macro.dbt_utils.default__pretty_log_format": {"unique_id": "macro.dbt_utils.default__pretty_log_format", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.106646}, "macro.dbt_utils.pretty_time": {"unique_id": "macro.dbt_utils.pretty_time", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.107018}, "macro.dbt_utils.default__pretty_time": {"unique_id": "macro.dbt_utils.default__pretty_time", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.1072361}, "macro.dbt_utils.log_info": {"unique_id": "macro.dbt_utils.log_info", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.10762}, "macro.dbt_utils.default__log_info": {"unique_id": "macro.dbt_utils.default__log_info", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.107876}, "macro.dbt_utils.slugify": {"unique_id": "macro.dbt_utils.slugify", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "name": "slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.108484}, "macro.dbt_utils.test_fewer_rows_than": {"unique_id": "macro.dbt_utils.test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/schema_tests/fewer_rows_than.sql", "original_file_path": "macros/schema_tests/fewer_rows_than.sql", "name": "test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.1091762}, "macro.dbt_utils.default__test_fewer_rows_than": {"unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/schema_tests/fewer_rows_than.sql", "original_file_path": "macros/schema_tests/fewer_rows_than.sql", "name": "default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model) %}\n\n{{ config(fail_calc = 'coalesce(row_count_delta, 0)') }}\n\nwith a as (\n\n    select count(*) as count_our_model from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_comparison_model from {{ compare_model }}\n\n),\ncounts as (\n\n    select\n        count_our_model,\n        count_comparison_model\n    from a\n    cross join b\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.109432}, "macro.dbt_utils.test_equal_rowcount": {"unique_id": "macro.dbt_utils.test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/schema_tests/equal_rowcount.sql", "original_file_path": "macros/schema_tests/equal_rowcount.sql", "name": "test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.1099641}, "macro.dbt_utils.default__test_equal_rowcount": {"unique_id": "macro.dbt_utils.default__test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/schema_tests/equal_rowcount.sql", "original_file_path": "macros/schema_tests/equal_rowcount.sql", "name": "default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'coalesce(diff_count, 0)') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\nwith a as (\n\n    select count(*) as count_a from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_b from {{ compare_model }}\n\n),\nfinal as (\n\n    select\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n    from a\n    cross join b\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.110307}, "macro.dbt_utils.test_relationships_where": {"unique_id": "macro.dbt_utils.test_relationships_where", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/schema_tests/relationships_where.sql", "original_file_path": "macros/schema_tests/relationships_where.sql", "name": "test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.111153}, "macro.dbt_utils.default__test_relationships_where": {"unique_id": "macro.dbt_utils.default__test_relationships_where", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/schema_tests/relationships_where.sql", "original_file_path": "macros/schema_tests/relationships_where.sql", "name": "default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.111549}, "macro.dbt_utils.test_recency": {"unique_id": "macro.dbt_utils.test_recency", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/schema_tests/recency.sql", "original_file_path": "macros/schema_tests/recency.sql", "name": "test_recency", "macro_sql": "{% test recency(model, field, datepart, interval) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.1120481}, "macro.dbt_utils.default__test_recency": {"unique_id": "macro.dbt_utils.default__test_recency", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/schema_tests/recency.sql", "original_file_path": "macros/schema_tests/recency.sql", "name": "default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval) %}\n\n{% set threshold = dbt_utils.dateadd(datepart, interval * -1, dbt_utils.current_timestamp()) %}\n\nwith recency as (\n\n    select max({{field}}) as most_recent\n    from {{ model }}\n\n)\n\nselect\n\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.11249}, "macro.dbt_utils.test_not_constant": {"unique_id": "macro.dbt_utils.test_not_constant", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/schema_tests/not_constant.sql", "original_file_path": "macros/schema_tests/not_constant.sql", "name": "test_not_constant", "macro_sql": "{% test not_constant(model, column_name) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.112962}, "macro.dbt_utils.default__test_not_constant": {"unique_id": "macro.dbt_utils.default__test_not_constant", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/schema_tests/not_constant.sql", "original_file_path": "macros/schema_tests/not_constant.sql", "name": "default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name) %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.113153}, "macro.dbt_utils.test_accepted_range": {"unique_id": "macro.dbt_utils.test_accepted_range", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/schema_tests/accepted_range.sql", "original_file_path": "macros/schema_tests/accepted_range.sql", "name": "test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.113961}, "macro.dbt_utils.default__test_accepted_range": {"unique_id": "macro.dbt_utils.default__test_accepted_range", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/schema_tests/accepted_range.sql", "original_file_path": "macros/schema_tests/accepted_range.sql", "name": "default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.114511}, "macro.dbt_utils.test_not_accepted_values": {"unique_id": "macro.dbt_utils.test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/schema_tests/not_accepted_values.sql", "original_file_path": "macros/schema_tests/not_accepted_values.sql", "name": "test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.1152608}, "macro.dbt_utils.default__test_not_accepted_values": {"unique_id": "macro.dbt_utils.default__test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/schema_tests/not_accepted_values.sql", "original_file_path": "macros/schema_tests/not_accepted_values.sql", "name": "default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.115751}, "macro.dbt_utils.test_unique_where": {"unique_id": "macro.dbt_utils.test_unique_where", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/schema_tests/test_unique_where.sql", "original_file_path": "macros/schema_tests/test_unique_where.sql", "name": "test_unique_where", "macro_sql": "{% test unique_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.unique_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `unique` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_unique_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.1163661}, "macro.dbt_utils.default__test_unique_where": {"unique_id": "macro.dbt_utils.default__test_unique_where", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/schema_tests/test_unique_where.sql", "original_file_path": "macros/schema_tests/test_unique_where.sql", "name": "default__test_unique_where", "macro_sql": "{% macro default__test_unique_where(model, column_name) %}\r\n  {{ return(test_unique(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.116566}, "macro.dbt_utils.test_at_least_one": {"unique_id": "macro.dbt_utils.test_at_least_one", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/schema_tests/at_least_one.sql", "original_file_path": "macros/schema_tests/at_least_one.sql", "name": "test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.117159}, "macro.dbt_utils.default__test_at_least_one": {"unique_id": "macro.dbt_utils.default__test_at_least_one", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/schema_tests/at_least_one.sql", "original_file_path": "macros/schema_tests/at_least_one.sql", "name": "default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name) %}\n\nselect *\nfrom (\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      count({{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.1173902}, "macro.dbt_utils.test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/schema_tests/unique_combination_of_columns.sql", "original_file_path": "macros/schema_tests/unique_combination_of_columns.sql", "name": "test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.118196}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/schema_tests/unique_combination_of_columns.sql", "original_file_path": "macros/schema_tests/unique_combination_of_columns.sql", "name": "default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.1189709}, "macro.dbt_utils.test_cardinality_equality": {"unique_id": "macro.dbt_utils.test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/schema_tests/cardinality_equality.sql", "original_file_path": "macros/schema_tests/cardinality_equality.sql", "name": "test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.119735}, "macro.dbt_utils.default__test_cardinality_equality": {"unique_id": "macro.dbt_utils.default__test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/schema_tests/cardinality_equality.sql", "original_file_path": "macros/schema_tests/cardinality_equality.sql", "name": "default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt_utils.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt_utils.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.120136}, "macro.dbt_utils.test_expression_is_true": {"unique_id": "macro.dbt_utils.test_expression_is_true", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/schema_tests/expression_is_true.sql", "original_file_path": "macros/schema_tests/expression_is_true.sql", "name": "test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None, condition='1=1') %}\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name, condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.12079}, "macro.dbt_utils.default__test_expression_is_true": {"unique_id": "macro.dbt_utils.default__test_expression_is_true", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/schema_tests/expression_is_true.sql", "original_file_path": "macros/schema_tests/expression_is_true.sql", "name": "default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name, condition) %}\n\nwith meet_condition as (\n    select * from {{ model }} where {{ condition }}\n)\n\nselect\n    *\nfrom meet_condition\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.12116}, "macro.dbt_utils.test_not_null_proportion": {"unique_id": "macro.dbt_utils.test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/schema_tests/not_null_proportion.sql", "original_file_path": "macros/schema_tests/not_null_proportion.sql", "name": "test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.121747}, "macro.dbt_utils.default__test_not_null_proportion": {"unique_id": "macro.dbt_utils.default__test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/schema_tests/not_null_proportion.sql", "original_file_path": "macros/schema_tests/not_null_proportion.sql", "name": "default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\nwith validation as (\n  select\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n),\nvalidation_errors as (\n  select\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.122354}, "macro.dbt_utils.test_sequential_values": {"unique_id": "macro.dbt_utils.test_sequential_values", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/schema_tests/sequential_values.sql", "original_file_path": "macros/schema_tests/sequential_values.sql", "name": "test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart)) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.1232052}, "macro.dbt_utils.default__test_sequential_values": {"unique_id": "macro.dbt_utils.default__test_sequential_values", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/schema_tests/sequential_values.sql", "original_file_path": "macros/schema_tests/sequential_values.sql", "name": "default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None) %}\n\nwith windowed as (\n\n    select\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            order by {{ column_name }}\n        ) as previous_{{ column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt_utils.type_timestamp() }})= cast({{ dbt_utils.dateadd(datepart, interval, 'previous_' + column_name) }} as {{ dbt_utils.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = previous_{{ column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.124013}, "macro.dbt_utils.test_not_null_where": {"unique_id": "macro.dbt_utils.test_not_null_where", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/schema_tests/test_not_null_where.sql", "original_file_path": "macros/schema_tests/test_not_null_where.sql", "name": "test_not_null_where", "macro_sql": "{% test not_null_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.not_null_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `not_null` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_not_null_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.124543}, "macro.dbt_utils.default__test_not_null_where": {"unique_id": "macro.dbt_utils.default__test_not_null_where", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/schema_tests/test_not_null_where.sql", "original_file_path": "macros/schema_tests/test_not_null_where.sql", "name": "default__test_not_null_where", "macro_sql": "{% macro default__test_not_null_where(model, column_name) %}\r\n  {{ return(test_not_null(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.1247811}, "macro.dbt_utils.test_equality": {"unique_id": "macro.dbt_utils.test_equality", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/schema_tests/equality.sql", "original_file_path": "macros/schema_tests/equality.sql", "name": "test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.125706}, "macro.dbt_utils.default__test_equality": {"unique_id": "macro.dbt_utils.default__test_equality", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/schema_tests/equality.sql", "original_file_path": "macros/schema_tests/equality.sql", "name": "default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.1267872}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/schema_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/schema_tests/mutually_exclusive_ranges.sql", "name": "test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.1305668}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/schema_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/schema_tests/mutually_exclusive_ranges.sql", "name": "default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions nore cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.132277}, "macro.dbt_utils.get_intervals_between": {"unique_id": "macro.dbt_utils.get_intervals_between", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.133481}, "macro.dbt_utils.default__get_intervals_between": {"unique_id": "macro.dbt_utils.default__get_intervals_between", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{dbt_utils.datediff(start_date, end_date, datepart)}}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.134161}, "macro.dbt_utils.date_spine": {"unique_id": "macro.dbt_utils.date_spine", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.13442}, "macro.dbt_utils.default__date_spine": {"unique_id": "macro.dbt_utils.default__date_spine", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt_utils.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.134825}, "macro.dbt_utils.nullcheck_table": {"unique_id": "macro.dbt_utils.nullcheck_table", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.135277}, "macro.dbt_utils.default__nullcheck_table": {"unique_id": "macro.dbt_utils.default__nullcheck_table", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.135669}, "macro.dbt_utils.get_relations_by_pattern": {"unique_id": "macro.dbt_utils.get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.136501}, "macro.dbt_utils.default__get_relations_by_pattern": {"unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.1374478}, "macro.dbt_utils.get_powers_of_two": {"unique_id": "macro.dbt_utils.get_powers_of_two", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.1385531}, "macro.dbt_utils.default__get_powers_of_two": {"unique_id": "macro.dbt_utils.default__get_powers_of_two", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.139091}, "macro.dbt_utils.generate_series": {"unique_id": "macro.dbt_utils.generate_series", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.139301}, "macro.dbt_utils.default__generate_series": {"unique_id": "macro.dbt_utils.default__generate_series", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.13998}, "macro.dbt_utils.get_relations_by_prefix": {"unique_id": "macro.dbt_utils.get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.1409159}, "macro.dbt_utils.default__get_relations_by_prefix": {"unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.1420631}, "macro.dbt_utils.get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.142609}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.142935}, "macro.dbt_utils.star": {"unique_id": "macro.dbt_utils.star", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.143803}, "macro.dbt_utils.default__star": {"unique_id": "macro.dbt_utils.default__star", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {%- do dbt_utils._is_relation(from, 'star') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n\n        {%- endif %}\n    {%- endfor %}\n\n    {%- for col in include_cols %}\n\n        {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}{{ adapter.quote(col)|trim }} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }}\n        {%- if not loop.last %},{{ '\\n  ' }}{% endif %}\n\n    {%- endfor -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.145003}, "macro.dbt_utils.unpivot": {"unique_id": "macro.dbt_utils.unpivot", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name, table)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.147233}, "macro.dbt_utils.default__unpivot": {"unique_id": "macro.dbt_utils.default__unpivot", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n\n    {% if table %}\n        {%- set error_message = '\n            Warning: the `unpivot` macro no longer accepts a `table` parameter. \\\n            This parameter will be deprecated in a future release of dbt-utils. Use the `relation` parameter instead. \\\n            The {}.{} model triggered this warning. \\\n            '.format(model.package_name, model.name) -%}\n        {%- do exceptions.warn(error_message) -%}\n    {% endif %}\n\n    {% if relation and table %}\n        {{ exceptions.raise_compiler_error(\"Error: both the `relation` and `table` parameters were provided to `unpivot` macro. Choose one only (we recommend `relation`).\") }}\n    {% elif not relation and table %}\n        {% set relation=table %}\n    {% elif not relation and not table %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt_utils.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt_utils.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.type_string", "macro.dbt_utils.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.15022}, "macro.dbt_utils.union_relations": {"unique_id": "macro.dbt_utils.union_relations", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation') -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.1523252}, "macro.dbt_utils.default__union_relations": {"unique_id": "macro.dbt_utils.default__union_relations", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation') -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                cast({{ dbt_utils.string_literal(relation) }} as {{ dbt_utils.type_string() }}) as {{ source_column_name }},\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.string_literal", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.155806}, "macro.dbt_utils.group_by": {"unique_id": "macro.dbt_utils.group_by", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.156325}, "macro.dbt_utils.default__group_by": {"unique_id": "macro.dbt_utils.default__group_by", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.156697}, "macro.dbt_utils.surrogate_key": {"unique_id": "macro.dbt_utils.surrogate_key", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.157461}, "macro.dbt_utils.default__surrogate_key": {"unique_id": "macro.dbt_utils.default__surrogate_key", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- if varargs|length >= 1 or field_list is string %}\n\n{%- set error_message = '\nWarning: the `surrogate_key` macro now takes a single list argument instead of \\\nmultiple string arguments. Support for multiple string arguments will be \\\ndeprecated in a future release of dbt-utils. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{# first argument is not included in varargs, so add first element to field_list_xf #}\n{%- set field_list_xf = [field_list] -%}\n\n{%- for field in varargs %}\n{%- set _ = field_list_xf.append(field) -%}\n{%- endfor -%}\n\n{%- else -%}\n\n{# if using list, just set field_list_xf as field_list #}\n{%- set field_list_xf = field_list -%}\n\n{%- endif -%}\n\n\n{%- set fields = [] -%}\n\n{%- for field in field_list_xf -%}\n\n    {%- set _ = fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt_utils.type_string() ~ \"), '')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- set _ = fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{dbt_utils.hash(dbt_utils.concat(fields))}}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.hash", "macro.dbt_utils.concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.158582}, "macro.dbt_utils.safe_add": {"unique_id": "macro.dbt_utils.safe_add", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "safe_add", "macro_sql": "{%- macro safe_add() -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(*varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.159113}, "macro.dbt_utils.default__safe_add": {"unique_id": "macro.dbt_utils.default__safe_add", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add() -%}\n\n{% set fields = [] %}\n\n{%- for field in varargs -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.1594381}, "macro.dbt_utils.nullcheck": {"unique_id": "macro.dbt_utils.nullcheck", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.159913}, "macro.dbt_utils.default__nullcheck": {"unique_id": "macro.dbt_utils.default__nullcheck", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.160297}, "macro.dbt_utils.get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.162251}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as \"table_schema\",\n            table_name as \"table_name\",\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as \"table_type\"\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.16256}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                case table_type\n                    when 'BASE TABLE' then 'table'\n                    else lower(table_type)\n                end as table_type\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.163418}, "macro.dbt_utils._bigquery__get_matching_schemata": {"unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "_bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.1640792}, "macro.dbt_utils.get_column_values": {"unique_id": "macro.dbt_utils.get_column_values", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.165378}, "macro.dbt_utils.default__get_column_values": {"unique_id": "macro.dbt_utils.default__get_column_values", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none) -%}\n{% if default is none %}\n    {% set default = [] %}\n{% endif %}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return(default) }}\n    {% endif %}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.167169}, "macro.dbt_utils.pivot": {"unique_id": "macro.dbt_utils.pivot", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.168441}, "macro.dbt_utils.default__pivot": {"unique_id": "macro.dbt_utils.default__pivot", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for v in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ v }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ v ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ v ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.169607}, "macro.dbt_utils.get_query_results_as_dict": {"unique_id": "macro.dbt_utils.get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.1702101}, "macro.dbt_utils.default__get_query_results_as_dict": {"unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.170977}, "macro.dbt_utils.degrees_to_radians": {"unique_id": "macro.dbt_utils.degrees_to_radians", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.172239}, "macro.dbt_utils.haversine_distance": {"unique_id": "macro.dbt_utils.haversine_distance", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.172565}, "macro.dbt_utils.default__haversine_distance": {"unique_id": "macro.dbt_utils.default__haversine_distance", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.1732218}, "macro.dbt_utils.bigquery__haversine_distance": {"unique_id": "macro.dbt_utils.bigquery__haversine_distance", "package_name": "dbt_utils", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.174164}, "macro.codegen.generate_model_yaml": {"unique_id": "macro.codegen.generate_model_yaml", "package_name": "codegen", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/codegen", "path": "macros/generate_model_yaml.sql", "original_file_path": "macros/generate_model_yaml.sql", "name": "generate_model_yaml", "macro_sql": "{% macro generate_model_yaml(model_name) %}\n\n{% set model_yaml=[] %}\n\n{% do model_yaml.append('version: 2') %}\n{% do model_yaml.append('') %}\n{% do model_yaml.append('models:') %}\n{% do model_yaml.append('  - name: ' ~ model_name | lower) %}\n{% do model_yaml.append('    description: \"\"') %}\n{% do model_yaml.append('    columns:') %}\n\n{% set relation=ref(model_name) %}\n{%- set columns = adapter.get_columns_in_relation(relation) -%}\n\n{% for column in columns %}\n    {% do model_yaml.append('      - name: ' ~ column.name | lower ) %}\n    {% do model_yaml.append('        description: \"\"') %}\n    {% do model_yaml.append('') %}\n{% endfor %}\n\n{% if execute %}\n\n    {% set joined = model_yaml | join ('\\n') %}\n    {{ log(joined, info=True) }}\n    {% do return(joined) %}\n\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.175807}, "macro.codegen.generate_base_model": {"unique_id": "macro.codegen.generate_base_model", "package_name": "codegen", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/codegen", "path": "macros/generate_base_model.sql", "original_file_path": "macros/generate_base_model.sql", "name": "generate_base_model", "macro_sql": "{% macro generate_base_model(source_name, table_name, leading_commas=False) %}\n\n{%- set source_relation = source(source_name, table_name) -%}\n\n{%- set columns = adapter.get_columns_in_relation(source_relation) -%}\n{% set column_names=columns | map(attribute='name') %}\n{% set base_model_sql %}\nwith source as (\n\n    select * from {% raw %}{{ source({% endraw %}'{{ source_name }}', '{{ table_name }}'{% raw %}) }}{% endraw %}\n\n),\n\nrenamed as (\n\n    select\n        {%- if leading_commas -%}\n        {%- for column in column_names %}\n        {{\", \" if not loop.first}}{{ column | lower }}\n        {%- endfor %}\n        {%- else -%}\n        {%- for column in column_names %}\n        {{ column | lower }}{{\",\" if not loop.last}}\n        {%- endfor -%}\n        {%- endif %}\n\n    from source\n\n)\n\nselect * from renamed\n{% endset %}\n\n{% if execute %}\n\n{{ log(base_model_sql, info=True) }}\n{% do return(base_model_sql) %}\n\n{% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.1773582}, "macro.codegen.get_tables_in_schema": {"unique_id": "macro.codegen.get_tables_in_schema", "package_name": "codegen", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/codegen", "path": "macros/generate_source.sql", "original_file_path": "macros/generate_source.sql", "name": "get_tables_in_schema", "macro_sql": "{% macro get_tables_in_schema(schema_name, database_name=target.database, table_pattern='%', exclude='') %}\n    \n    {% set tables=dbt_utils.get_relations_by_pattern(\n        schema_pattern=schema_name,\n        database=database_name,\n        table_pattern=table_pattern,\n        exclude=exclude\n    ) %}\n\n    {% set table_list= tables | map(attribute='identifier') %}\n\n    {{ return(table_list | sort) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.179041}, "macro.codegen.generate_source": {"unique_id": "macro.codegen.generate_source", "package_name": "codegen", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts/dbt_packages/codegen", "path": "macros/generate_source.sql", "original_file_path": "macros/generate_source.sql", "name": "generate_source", "macro_sql": "{% macro generate_source(schema_name, database_name=target.database, generate_columns=False, include_descriptions=False, table_pattern='%', exclude='') %}\n\n{% set sources_yaml=[] %}\n\n{% do sources_yaml.append('version: 2') %}\n{% do sources_yaml.append('') %}\n{% do sources_yaml.append('sources:') %}\n{% do sources_yaml.append('  - name: ' ~ schema_name | lower) %}\n\n{% if database_name != target.database %}\n{% do sources_yaml.append('    database: ' ~ database_name | lower) %}\n{% endif %}\n\n{% do sources_yaml.append('    tables:') %}\n\n{% set tables=codegen.get_tables_in_schema(schema_name, database_name, table_pattern, exclude) %}\n\n{% for table in tables %}\n    {% do sources_yaml.append('      - name: ' ~ table | lower ) %}\n\n    {% if generate_columns %}\n    {% do sources_yaml.append('        columns:') %}\n\n        {% set table_relation=api.Relation.create(\n            database=database_name,\n            schema=schema_name,\n            identifier=table\n        ) %}\n\n        {% set columns=adapter.get_columns_in_relation(table_relation) %}\n\n        {% for column in columns %}\n            {% do sources_yaml.append('          - name: ' ~ column.name | lower ) %}\n            {% if include_descriptions %}\n                {% do sources_yaml.append('            description: \"\"' ) %}\n            {% endif %}\n        {% endfor %}\n            {% do sources_yaml.append('') %}\n\n    {% endif %}\n\n{% endfor %}\n\n{% if execute %}\n\n    {% set joined = sources_yaml | join ('\\n') %}\n    {{ log(joined, info=True) }}\n    {% do return(joined) %}\n\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.codegen.get_tables_in_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652151875.18112}}, "docs": {"dbt_nhl_breakouts.game_id_description": {"unique_id": "dbt_nhl_breakouts.game_id_description", "package_name": "dbt_nhl_breakouts", "root_path": "/Users/t0rracat/Documents/Repositories/dbt_nhl_breakouts", "path": "staging/_staging.md", "original_file_path": "models/staging/_staging.md", "name": "game_id_description", "block_contents": "##### More about game_id\nThe first 4 digits identify the season of the game (ie. 2017 for the 2017-2018 season). The next 2 digits give the type of game, where 01 = preseason, 02 = regular season, 03 = playoffs, 04 = all-star. The final 4 digits identify the specific game number.\n\nFor regular season and preseason games, this ranges from 0001 to the number of games played. (1271 for seasons with 31 teams (2017 and onwards) and 1230 for seasons with 30 teams).\n\nFor playoff games, the 2nd digit of the specific number gives the round of the playoffs, the 3rd digit specifies the matchup, and the 4th digit specifies the game (out of 7).\n\n[Credit to Drew Hynes' NHL API docs](https://gitlab.com/dword4/nhlapi/-/blob/master/stats-api.md#game-ids)"}, "dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "/Users/t0rracat/.local/pipx/venvs/dbt-bigquery/lib/python3.8/site-packages/dbt/include/global_project", "path": "overview.md", "original_file_path": "docs/overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.dbt_nhl_breakouts.stg_nhl__draft_prospects": ["source.dbt_nhl_breakouts.meltano.draft_prospects"], "model.dbt_nhl_breakouts.stg_nhl__conferences": ["source.dbt_nhl_breakouts.meltano.conferences"], "model.dbt_nhl_breakouts.stg_nhl__divisions": ["source.dbt_nhl_breakouts.meltano.divisions"], "model.dbt_nhl_breakouts.stg_nhl__boxscore_player": ["source.dbt_nhl_breakouts.meltano.live_boxscore"], "model.dbt_nhl_breakouts.stg_nhl__linescore": ["source.dbt_nhl_breakouts.meltano.live_linescore"], "model.dbt_nhl_breakouts.stg_nhl__games": ["model.dbt_nhl_breakouts.stg_nhl__boxscore", "model.dbt_nhl_breakouts.stg_nhl__linescore"], "model.dbt_nhl_breakouts.stg_nhl__schedule": ["source.dbt_nhl_breakouts.meltano.schedule"], "model.dbt_nhl_breakouts.stg_nhl__teams": ["source.dbt_nhl_breakouts.meltano.teams"], "model.dbt_nhl_breakouts.stg_nhl__draft": ["source.dbt_nhl_breakouts.meltano.draft"], "model.dbt_nhl_breakouts.stg_nhl__seasons": ["source.dbt_nhl_breakouts.meltano.seasons"], "model.dbt_nhl_breakouts.stg_nhl__boxscore_team": ["source.dbt_nhl_breakouts.meltano.live_boxscore"], "model.dbt_nhl_breakouts.stg_nhl__players": ["source.dbt_nhl_breakouts.meltano.people"], "model.dbt_nhl_breakouts.stg_nhl__boxscore": ["source.dbt_nhl_breakouts.meltano.live_boxscore"], "model.dbt_nhl_breakouts.stg_nhl__live_plays": ["model.dbt_nhl_breakouts.stg_nhl__boxscore_player", "model.dbt_nhl_breakouts.stg_nhl__schedule", "source.dbt_nhl_breakouts.meltano.live_plays"], "model.dbt_nhl_breakouts.dates": [], "model.dbt_nhl_breakouts.f_player_season": ["model.dbt_nhl_breakouts.d_players", "model.dbt_nhl_breakouts.d_schedule", "model.dbt_nhl_breakouts.d_schedule", "model.dbt_nhl_breakouts.d_seasons", "model.dbt_nhl_breakouts.d_seasons", "model.dbt_nhl_breakouts.f_boxscore_player", "model.dbt_nhl_breakouts.f_plays"], "model.dbt_nhl_breakouts.f_plays": ["model.dbt_nhl_breakouts.stg_nhl__live_plays"], "model.dbt_nhl_breakouts.d_date": ["model.dbt_nhl_breakouts.dates"], "model.dbt_nhl_breakouts.f_boxscore_team": ["model.dbt_nhl_breakouts.stg_nhl__boxscore_team"], "model.dbt_nhl_breakouts.d_schedule": ["model.dbt_nhl_breakouts.stg_nhl__schedule"], "model.dbt_nhl_breakouts.d_divisions": ["model.dbt_nhl_breakouts.stg_nhl__divisions"], "model.dbt_nhl_breakouts.f_linescore": ["model.dbt_nhl_breakouts.stg_nhl__linescore"], "model.dbt_nhl_breakouts.d_players": ["model.dbt_nhl_breakouts.stg_nhl__players"], "model.dbt_nhl_breakouts.f_games_scratches": ["model.dbt_nhl_breakouts.stg_nhl__boxscore", "model.dbt_nhl_breakouts.stg_nhl__boxscore"], "model.dbt_nhl_breakouts.d_teams": ["model.dbt_nhl_breakouts.stg_nhl__teams"], "model.dbt_nhl_breakouts.d_draft": ["model.dbt_nhl_breakouts.stg_nhl__draft"], "model.dbt_nhl_breakouts.f_games": ["model.dbt_nhl_breakouts.stg_nhl__games"], "model.dbt_nhl_breakouts.d_draft_prospects": ["model.dbt_nhl_breakouts.stg_nhl__draft_prospects"], "model.dbt_nhl_breakouts.f_boxscore": ["model.dbt_nhl_breakouts.stg_nhl__boxscore"], "model.dbt_nhl_breakouts.d_conferences": ["model.dbt_nhl_breakouts.stg_nhl__conferences"], "model.dbt_nhl_breakouts.f_boxscore_player": ["model.dbt_nhl_breakouts.stg_nhl__boxscore_player"], "model.dbt_nhl_breakouts.d_seasons": ["model.dbt_nhl_breakouts.stg_nhl__seasons"], "test.dbt_nhl_breakouts.unique_stg_nhl__divisions_stg_nhl__divisions_id.c441593bdd": ["model.dbt_nhl_breakouts.stg_nhl__divisions"], "test.dbt_nhl_breakouts.not_null_stg_nhl__divisions_stg_nhl__divisions_id.09bf3b6736": ["model.dbt_nhl_breakouts.stg_nhl__divisions"], "test.dbt_nhl_breakouts.unique_stg_nhl__divisions_division_id.765d509a33": ["model.dbt_nhl_breakouts.stg_nhl__divisions"], "test.dbt_nhl_breakouts.not_null_stg_nhl__divisions_division_id.e799976dcb": ["model.dbt_nhl_breakouts.stg_nhl__divisions"], "test.dbt_nhl_breakouts.unique_stg_nhl__conferences_stg_nhl__conferences_id.894c9c38c2": ["model.dbt_nhl_breakouts.stg_nhl__conferences"], "test.dbt_nhl_breakouts.not_null_stg_nhl__conferences_stg_nhl__conferences_id.a13a757e3c": ["model.dbt_nhl_breakouts.stg_nhl__conferences"], "test.dbt_nhl_breakouts.unique_stg_nhl__conferences_conference_id.31d27aa7cd": ["model.dbt_nhl_breakouts.stg_nhl__conferences"], "test.dbt_nhl_breakouts.not_null_stg_nhl__conferences_conference_id.5900814b75": ["model.dbt_nhl_breakouts.stg_nhl__conferences"], "test.dbt_nhl_breakouts.unique_stg_nhl__draft_prospects_stg_nhl__draft_prospects_id.81b61a4ac5": ["model.dbt_nhl_breakouts.stg_nhl__draft_prospects"], "test.dbt_nhl_breakouts.not_null_stg_nhl__draft_prospects_stg_nhl__draft_prospects_id.1866c4a0e2": ["model.dbt_nhl_breakouts.stg_nhl__draft_prospects"], "test.dbt_nhl_breakouts.not_null_stg_nhl__draft_prospects_draft_prospect_id.c2f4218bb5": ["model.dbt_nhl_breakouts.stg_nhl__draft_prospects"], "test.dbt_nhl_breakouts.unique_stg_nhl__draft_prospects_draft_prospect_id.439cea6ec2": ["model.dbt_nhl_breakouts.stg_nhl__draft_prospects"], "test.dbt_nhl_breakouts.unique_stg_nhl__boxscore_player_stg_nhl__boxscore_player_id.21d484e820": ["model.dbt_nhl_breakouts.stg_nhl__boxscore_player"], "test.dbt_nhl_breakouts.not_null_stg_nhl__boxscore_player_stg_nhl__boxscore_player_id.13756d4737": ["model.dbt_nhl_breakouts.stg_nhl__boxscore_player"], "test.dbt_nhl_breakouts.unique_stg_nhl__linescore_stg_nhl__linescore_id.ada282fc78": ["model.dbt_nhl_breakouts.stg_nhl__linescore"], "test.dbt_nhl_breakouts.not_null_stg_nhl__linescore_stg_nhl__linescore_id.e449d10122": ["model.dbt_nhl_breakouts.stg_nhl__linescore"], "test.dbt_nhl_breakouts.accepted_values_stg_nhl__linescore_game_winning_team_type__True__Home__Away.a5678ea10b": ["model.dbt_nhl_breakouts.stg_nhl__linescore"], "test.dbt_nhl_breakouts.unique_stg_nhl__games_stg_nhl__games_id.5157268cdb": ["model.dbt_nhl_breakouts.stg_nhl__games"], "test.dbt_nhl_breakouts.not_null_stg_nhl__games_stg_nhl__games_id.183ba17ec8": ["model.dbt_nhl_breakouts.stg_nhl__games"], "test.dbt_nhl_breakouts.not_null_stg_nhl__games_game_id.26acd3f369": ["model.dbt_nhl_breakouts.stg_nhl__games"], "test.dbt_nhl_breakouts.unique_stg_nhl__games_game_id.c3bead4ebc": ["model.dbt_nhl_breakouts.stg_nhl__games"], "test.dbt_nhl_breakouts.unique_stg_nhl__players_stg_nhl__players_id.a676defad4": ["model.dbt_nhl_breakouts.stg_nhl__players"], "test.dbt_nhl_breakouts.not_null_stg_nhl__players_stg_nhl__players_id.cf9bfc0f93": ["model.dbt_nhl_breakouts.stg_nhl__players"], "test.dbt_nhl_breakouts.not_null_stg_nhl__players_player_id.f9c1dc568f": ["model.dbt_nhl_breakouts.stg_nhl__players"], "test.dbt_nhl_breakouts.not_null_stg_nhl__boxscore_stg_nhl__boxscore_id.f531645344": ["model.dbt_nhl_breakouts.stg_nhl__boxscore"], "test.dbt_nhl_breakouts.unique_stg_nhl__boxscore_stg_nhl__boxscore_id.5cb4ed999d": ["model.dbt_nhl_breakouts.stg_nhl__boxscore"], "test.dbt_nhl_breakouts.unique_stg_nhl__live_plays_stg_nhl__live_plays_id.e5043c61a1": ["model.dbt_nhl_breakouts.stg_nhl__live_plays"], "test.dbt_nhl_breakouts.not_null_stg_nhl__live_plays_stg_nhl__live_plays_id.180653fbd3": ["model.dbt_nhl_breakouts.stg_nhl__live_plays"], "test.dbt_nhl_breakouts.unique_stg_nhl__teams_stg_nhl__teams_id.b6f2cc8f8f": ["model.dbt_nhl_breakouts.stg_nhl__teams"], "test.dbt_nhl_breakouts.not_null_stg_nhl__teams_stg_nhl__teams_id.e03adc9f63": ["model.dbt_nhl_breakouts.stg_nhl__teams"], "test.dbt_nhl_breakouts.not_null_stg_nhl__teams_team_id.7c3a30af17": ["model.dbt_nhl_breakouts.stg_nhl__teams"], "test.dbt_nhl_breakouts.unique_stg_nhl__schedule_stg_nhl__schedule_id.02ca3a9680": ["model.dbt_nhl_breakouts.stg_nhl__schedule"], "test.dbt_nhl_breakouts.not_null_stg_nhl__schedule_stg_nhl__schedule_id.22069ed10b": ["model.dbt_nhl_breakouts.stg_nhl__schedule"], "test.dbt_nhl_breakouts.not_null_stg_nhl__schedule_game_id.5980307620": ["model.dbt_nhl_breakouts.stg_nhl__schedule"], "test.dbt_nhl_breakouts.unique_stg_nhl__schedule_game_id.a33bfba589": ["model.dbt_nhl_breakouts.stg_nhl__schedule"], "test.dbt_nhl_breakouts.not_null_stg_nhl__schedule_season_id.89ee97b591": ["model.dbt_nhl_breakouts.stg_nhl__schedule"], "test.dbt_nhl_breakouts.not_null_stg_nhl__schedule_away_team_id.8366912c5b": ["model.dbt_nhl_breakouts.stg_nhl__schedule"], "test.dbt_nhl_breakouts.not_null_stg_nhl__schedule_home_team_id.f4f7114670": ["model.dbt_nhl_breakouts.stg_nhl__schedule"], "test.dbt_nhl_breakouts.unique_stg_nhl__draft_stg_nhl__draft_id.e0b1a661b5": ["model.dbt_nhl_breakouts.stg_nhl__draft"], "test.dbt_nhl_breakouts.not_null_stg_nhl__draft_stg_nhl__draft_id.b677065bc5": ["model.dbt_nhl_breakouts.stg_nhl__draft"], "test.dbt_nhl_breakouts.unique_stg_nhl__seasons_stg_nhl__seasons_id.3ef0f38a83": ["model.dbt_nhl_breakouts.stg_nhl__seasons"], "test.dbt_nhl_breakouts.not_null_stg_nhl__seasons_stg_nhl__seasons_id.e0d5931aa0": ["model.dbt_nhl_breakouts.stg_nhl__seasons"], "test.dbt_nhl_breakouts.unique_stg_nhl__seasons_season_id.9b4d7cf6f0": ["model.dbt_nhl_breakouts.stg_nhl__seasons"], "test.dbt_nhl_breakouts.not_null_stg_nhl__seasons_season_id.a335e0b9f9": ["model.dbt_nhl_breakouts.stg_nhl__seasons"], "test.dbt_nhl_breakouts.unique_stg_nhl__boxscore_team_stg_nhl__boxscore_team_id.3ff8ece5fa": ["model.dbt_nhl_breakouts.stg_nhl__boxscore_team"], "test.dbt_nhl_breakouts.not_null_stg_nhl__boxscore_team_stg_nhl__boxscore_team_id.9bd9688044": ["model.dbt_nhl_breakouts.stg_nhl__boxscore_team"], "test.dbt_nhl_breakouts.not_null_dates_date_id.ecacfb484c": ["model.dbt_nhl_breakouts.dates"], "test.dbt_nhl_breakouts.unique_dates_date_id.a3a9dc1a29": ["model.dbt_nhl_breakouts.dates"], "test.dbt_nhl_breakouts.unique_f_player_season_player_season_id.e9ba28a61b": ["model.dbt_nhl_breakouts.f_player_season"], "test.dbt_nhl_breakouts.not_null_f_player_season_player_season_id.1047e040ba": ["model.dbt_nhl_breakouts.f_player_season"], "test.dbt_nhl_breakouts.unique_f_boxscore_team_boxscore_team_id.4861e1676d": ["model.dbt_nhl_breakouts.f_boxscore_team"], "test.dbt_nhl_breakouts.not_null_f_boxscore_team_boxscore_team_id.e62d4c1299": ["model.dbt_nhl_breakouts.f_boxscore_team"], "test.dbt_nhl_breakouts.not_null_f_boxscore_team_game_id.35d88eabfb": ["model.dbt_nhl_breakouts.f_boxscore_team"], "test.dbt_nhl_breakouts.not_null_f_boxscore_team_team_id.80b942dc8f": ["model.dbt_nhl_breakouts.f_boxscore_team"], "test.dbt_nhl_breakouts.unique_d_schedule_schedule_id.5268ef07af": ["model.dbt_nhl_breakouts.d_schedule"], "test.dbt_nhl_breakouts.not_null_d_schedule_schedule_id.05b7735a58": ["model.dbt_nhl_breakouts.d_schedule"], "test.dbt_nhl_breakouts.not_null_d_schedule_game_id.16aa7a404b": ["model.dbt_nhl_breakouts.d_schedule"], "test.dbt_nhl_breakouts.unique_d_schedule_game_id.195e8d1feb": ["model.dbt_nhl_breakouts.d_schedule"], "test.dbt_nhl_breakouts.not_null_d_schedule_season_id.231c1ee113": ["model.dbt_nhl_breakouts.d_schedule"], "test.dbt_nhl_breakouts.not_null_d_schedule_away_team_id.a0c1750c24": ["model.dbt_nhl_breakouts.d_schedule"], "test.dbt_nhl_breakouts.not_null_d_schedule_home_team_id.5bd88d400b": ["model.dbt_nhl_breakouts.d_schedule"], "test.dbt_nhl_breakouts.unique_d_divisions_division_id.83aca42a7c": ["model.dbt_nhl_breakouts.d_divisions"], "test.dbt_nhl_breakouts.not_null_d_divisions_division_id.9a7aadfdb2": ["model.dbt_nhl_breakouts.d_divisions"], "test.dbt_nhl_breakouts.not_null_d_divisions_conference_id.08feeb1868": ["model.dbt_nhl_breakouts.d_divisions"], "test.dbt_nhl_breakouts.unique_f_plays_play_id.f1d5dd28d5": ["model.dbt_nhl_breakouts.f_plays"], "test.dbt_nhl_breakouts.not_null_f_plays_play_id.50869b6b5e": ["model.dbt_nhl_breakouts.f_plays"], "test.dbt_nhl_breakouts.not_null_f_plays_game_id.be283c768c": ["model.dbt_nhl_breakouts.f_plays"], "test.dbt_nhl_breakouts.not_null_f_plays_event_idx.88cd93f8ae": ["model.dbt_nhl_breakouts.f_plays"], "test.dbt_nhl_breakouts.not_null_f_plays_event_id.42f7019a28": ["model.dbt_nhl_breakouts.f_plays"], "test.dbt_nhl_breakouts.not_null_f_plays_player_id.3976f4d4f0": ["model.dbt_nhl_breakouts.f_plays"], "test.dbt_nhl_breakouts.not_null_f_plays_team_id.26ff5ba943": ["model.dbt_nhl_breakouts.f_plays"], "test.dbt_nhl_breakouts.not_null_d_date_date_id.17765c9312": ["model.dbt_nhl_breakouts.d_date"], "test.dbt_nhl_breakouts.unique_d_date_date_id.bd95340cc8": ["model.dbt_nhl_breakouts.d_date"], "test.dbt_nhl_breakouts.unique_d_draft_prospects_draft_prospect_id.ca7e404f29": ["model.dbt_nhl_breakouts.d_draft_prospects"], "test.dbt_nhl_breakouts.not_null_d_draft_prospects_draft_prospect_id.28b9527b5b": ["model.dbt_nhl_breakouts.d_draft_prospects"], "test.dbt_nhl_breakouts.not_null_d_draft_prospects_prospect_category_id.a27ca2b454": ["model.dbt_nhl_breakouts.d_draft_prospects"], "test.dbt_nhl_breakouts.unique_f_boxscore_player_boxscore_player_id.b8346d82bf": ["model.dbt_nhl_breakouts.f_boxscore_player"], "test.dbt_nhl_breakouts.not_null_f_boxscore_player_boxscore_player_id.e3fb20d4c1": ["model.dbt_nhl_breakouts.f_boxscore_player"], "test.dbt_nhl_breakouts.not_null_f_boxscore_player_game_id.e3b77d4354": ["model.dbt_nhl_breakouts.f_boxscore_player"], "test.dbt_nhl_breakouts.not_null_f_boxscore_player_team_id.97e0e7a733": ["model.dbt_nhl_breakouts.f_boxscore_player"], "test.dbt_nhl_breakouts.unique_d_conferences_conference_id.b7e5789a87": ["model.dbt_nhl_breakouts.d_conferences"], "test.dbt_nhl_breakouts.not_null_d_conferences_conference_id.8ff2ef5d4e": ["model.dbt_nhl_breakouts.d_conferences"], "test.dbt_nhl_breakouts.not_null_f_boxscore_boxscore_id.b9891c33b1": ["model.dbt_nhl_breakouts.f_boxscore"], "test.dbt_nhl_breakouts.unique_f_boxscore_boxscore_id.48507f2e1c": ["model.dbt_nhl_breakouts.f_boxscore"], "test.dbt_nhl_breakouts.not_null_f_boxscore_game_id.b46db17d13": ["model.dbt_nhl_breakouts.f_boxscore"], "test.dbt_nhl_breakouts.not_null_f_boxscore_home_team_id.cea06ce20f": ["model.dbt_nhl_breakouts.f_boxscore"], "test.dbt_nhl_breakouts.not_null_f_boxscore_away_team_id.9d1f965941": ["model.dbt_nhl_breakouts.f_boxscore"], "test.dbt_nhl_breakouts.unique_d_seasons_season_id.e1642ef274": ["model.dbt_nhl_breakouts.d_seasons"], "test.dbt_nhl_breakouts.not_null_d_seasons_season_id.e9ba12da0e": ["model.dbt_nhl_breakouts.d_seasons"], "test.dbt_nhl_breakouts.not_null_d_players_player_id.1ac147c310": ["model.dbt_nhl_breakouts.d_players"], "test.dbt_nhl_breakouts.unique_f_linescore_linescore_id.c88b3cc327": ["model.dbt_nhl_breakouts.f_linescore"], "test.dbt_nhl_breakouts.not_null_f_linescore_linescore_id.0d3f94c5dc": ["model.dbt_nhl_breakouts.f_linescore"], "test.dbt_nhl_breakouts.not_null_f_linescore_home_team_id.a4238ef224": ["model.dbt_nhl_breakouts.f_linescore"], "test.dbt_nhl_breakouts.not_null_f_linescore_away_team_id.f71f2cffd0": ["model.dbt_nhl_breakouts.f_linescore"], "test.dbt_nhl_breakouts.not_null_f_linescore_game_winning_team_id.08e106d171": ["model.dbt_nhl_breakouts.f_linescore"], "test.dbt_nhl_breakouts.accepted_values_f_linescore_game_winning_team_type__True__Home__Away.76664920a4": ["model.dbt_nhl_breakouts.f_linescore"], "test.dbt_nhl_breakouts.not_null_f_games_scratches_game_id.cb6976b79e": ["model.dbt_nhl_breakouts.f_games_scratches"], "test.dbt_nhl_breakouts.not_null_f_games_scratches_player_id.25c3aadc1a": ["model.dbt_nhl_breakouts.f_games_scratches"], "test.dbt_nhl_breakouts.dbt_utils_unique_combination_of_columns_f_games_scratches_game_id__player_id.35d4642951": ["model.dbt_nhl_breakouts.f_games_scratches"], "test.dbt_nhl_breakouts.unique_d_teams_team_id.c26fd9864c": ["model.dbt_nhl_breakouts.d_teams"], "test.dbt_nhl_breakouts.not_null_d_teams_team_id.453d8c80dc": ["model.dbt_nhl_breakouts.d_teams"], "test.dbt_nhl_breakouts.not_null_d_teams_venue_timezone_id.86ef9a6f43": ["model.dbt_nhl_breakouts.d_teams"], "test.dbt_nhl_breakouts.not_null_d_teams_division_id.0cedee4730": ["model.dbt_nhl_breakouts.d_teams"], "test.dbt_nhl_breakouts.not_null_d_teams_conference_id.491172dfc9": ["model.dbt_nhl_breakouts.d_teams"], "test.dbt_nhl_breakouts.not_null_d_teams_franchise_id.9ffcb46923": ["model.dbt_nhl_breakouts.d_teams"], "test.dbt_nhl_breakouts.unique_d_draft_draft_id.74ebc0e053": ["model.dbt_nhl_breakouts.d_draft"], "test.dbt_nhl_breakouts.not_null_d_draft_draft_id.2d93ef0913": ["model.dbt_nhl_breakouts.d_draft"], "test.dbt_nhl_breakouts.not_null_d_draft_overall_pick_id.124222f98e": ["model.dbt_nhl_breakouts.d_draft"], "test.dbt_nhl_breakouts.not_null_d_draft_draft_prospect_id.072ca19acd": ["model.dbt_nhl_breakouts.d_draft"], "test.dbt_nhl_breakouts.not_null_d_draft_draft_team_id.d67c00c582": ["model.dbt_nhl_breakouts.d_draft"], "test.dbt_nhl_breakouts.unique_f_games_game_id.61c2bee3b0": ["model.dbt_nhl_breakouts.f_games"], "test.dbt_nhl_breakouts.not_null_f_games_game_id.12c36fc40e": ["model.dbt_nhl_breakouts.f_games"], "test.dbt_nhl_breakouts.not_null_f_games_home_team_id.fac98e5082": ["model.dbt_nhl_breakouts.f_games"], "test.dbt_nhl_breakouts.not_null_f_games_away_team_id.61e8a8d336": ["model.dbt_nhl_breakouts.f_games"], "source.dbt_nhl_breakouts.meltano.conferences": [], "source.dbt_nhl_breakouts.meltano.divisions": [], "source.dbt_nhl_breakouts.meltano.draft": [], "source.dbt_nhl_breakouts.meltano.draft_prospects": [], "source.dbt_nhl_breakouts.meltano.live_boxscore": [], "source.dbt_nhl_breakouts.meltano.live_linescore": [], "source.dbt_nhl_breakouts.meltano.live_plays": [], "source.dbt_nhl_breakouts.meltano.people": [], "source.dbt_nhl_breakouts.meltano.schedule": [], "source.dbt_nhl_breakouts.meltano.seasons": [], "source.dbt_nhl_breakouts.meltano.teams": []}, "child_map": {"model.dbt_nhl_breakouts.stg_nhl__draft_prospects": ["model.dbt_nhl_breakouts.d_draft_prospects", "test.dbt_nhl_breakouts.not_null_stg_nhl__draft_prospects_draft_prospect_id.c2f4218bb5", "test.dbt_nhl_breakouts.not_null_stg_nhl__draft_prospects_stg_nhl__draft_prospects_id.1866c4a0e2", "test.dbt_nhl_breakouts.unique_stg_nhl__draft_prospects_draft_prospect_id.439cea6ec2", "test.dbt_nhl_breakouts.unique_stg_nhl__draft_prospects_stg_nhl__draft_prospects_id.81b61a4ac5"], "model.dbt_nhl_breakouts.stg_nhl__conferences": ["model.dbt_nhl_breakouts.d_conferences", "test.dbt_nhl_breakouts.not_null_stg_nhl__conferences_conference_id.5900814b75", "test.dbt_nhl_breakouts.not_null_stg_nhl__conferences_stg_nhl__conferences_id.a13a757e3c", "test.dbt_nhl_breakouts.unique_stg_nhl__conferences_conference_id.31d27aa7cd", "test.dbt_nhl_breakouts.unique_stg_nhl__conferences_stg_nhl__conferences_id.894c9c38c2"], "model.dbt_nhl_breakouts.stg_nhl__divisions": ["model.dbt_nhl_breakouts.d_divisions", "test.dbt_nhl_breakouts.not_null_stg_nhl__divisions_division_id.e799976dcb", "test.dbt_nhl_breakouts.not_null_stg_nhl__divisions_stg_nhl__divisions_id.09bf3b6736", "test.dbt_nhl_breakouts.unique_stg_nhl__divisions_division_id.765d509a33", "test.dbt_nhl_breakouts.unique_stg_nhl__divisions_stg_nhl__divisions_id.c441593bdd"], "model.dbt_nhl_breakouts.stg_nhl__boxscore_player": ["model.dbt_nhl_breakouts.f_boxscore_player", "model.dbt_nhl_breakouts.stg_nhl__live_plays", "test.dbt_nhl_breakouts.not_null_stg_nhl__boxscore_player_stg_nhl__boxscore_player_id.13756d4737", "test.dbt_nhl_breakouts.unique_stg_nhl__boxscore_player_stg_nhl__boxscore_player_id.21d484e820"], "model.dbt_nhl_breakouts.stg_nhl__linescore": ["model.dbt_nhl_breakouts.f_linescore", "model.dbt_nhl_breakouts.stg_nhl__games", "test.dbt_nhl_breakouts.accepted_values_stg_nhl__linescore_game_winning_team_type__True__Home__Away.a5678ea10b", "test.dbt_nhl_breakouts.not_null_stg_nhl__linescore_stg_nhl__linescore_id.e449d10122", "test.dbt_nhl_breakouts.unique_stg_nhl__linescore_stg_nhl__linescore_id.ada282fc78"], "model.dbt_nhl_breakouts.stg_nhl__games": ["model.dbt_nhl_breakouts.f_games", "test.dbt_nhl_breakouts.not_null_stg_nhl__games_game_id.26acd3f369", "test.dbt_nhl_breakouts.not_null_stg_nhl__games_stg_nhl__games_id.183ba17ec8", "test.dbt_nhl_breakouts.unique_stg_nhl__games_game_id.c3bead4ebc", "test.dbt_nhl_breakouts.unique_stg_nhl__games_stg_nhl__games_id.5157268cdb"], "model.dbt_nhl_breakouts.stg_nhl__schedule": ["model.dbt_nhl_breakouts.d_schedule", "model.dbt_nhl_breakouts.stg_nhl__live_plays", "test.dbt_nhl_breakouts.not_null_stg_nhl__schedule_away_team_id.8366912c5b", "test.dbt_nhl_breakouts.not_null_stg_nhl__schedule_game_id.5980307620", "test.dbt_nhl_breakouts.not_null_stg_nhl__schedule_home_team_id.f4f7114670", "test.dbt_nhl_breakouts.not_null_stg_nhl__schedule_season_id.89ee97b591", "test.dbt_nhl_breakouts.not_null_stg_nhl__schedule_stg_nhl__schedule_id.22069ed10b", "test.dbt_nhl_breakouts.unique_stg_nhl__schedule_game_id.a33bfba589", "test.dbt_nhl_breakouts.unique_stg_nhl__schedule_stg_nhl__schedule_id.02ca3a9680"], "model.dbt_nhl_breakouts.stg_nhl__teams": ["model.dbt_nhl_breakouts.d_teams", "test.dbt_nhl_breakouts.not_null_stg_nhl__teams_stg_nhl__teams_id.e03adc9f63", "test.dbt_nhl_breakouts.not_null_stg_nhl__teams_team_id.7c3a30af17", "test.dbt_nhl_breakouts.unique_stg_nhl__teams_stg_nhl__teams_id.b6f2cc8f8f"], "model.dbt_nhl_breakouts.stg_nhl__draft": ["model.dbt_nhl_breakouts.d_draft", "test.dbt_nhl_breakouts.not_null_stg_nhl__draft_stg_nhl__draft_id.b677065bc5", "test.dbt_nhl_breakouts.unique_stg_nhl__draft_stg_nhl__draft_id.e0b1a661b5"], "model.dbt_nhl_breakouts.stg_nhl__seasons": ["model.dbt_nhl_breakouts.d_seasons", "test.dbt_nhl_breakouts.not_null_stg_nhl__seasons_season_id.a335e0b9f9", "test.dbt_nhl_breakouts.not_null_stg_nhl__seasons_stg_nhl__seasons_id.e0d5931aa0", "test.dbt_nhl_breakouts.unique_stg_nhl__seasons_season_id.9b4d7cf6f0", "test.dbt_nhl_breakouts.unique_stg_nhl__seasons_stg_nhl__seasons_id.3ef0f38a83"], "model.dbt_nhl_breakouts.stg_nhl__boxscore_team": ["model.dbt_nhl_breakouts.f_boxscore_team", "test.dbt_nhl_breakouts.not_null_stg_nhl__boxscore_team_stg_nhl__boxscore_team_id.9bd9688044", "test.dbt_nhl_breakouts.unique_stg_nhl__boxscore_team_stg_nhl__boxscore_team_id.3ff8ece5fa"], "model.dbt_nhl_breakouts.stg_nhl__players": ["model.dbt_nhl_breakouts.d_players", "test.dbt_nhl_breakouts.not_null_stg_nhl__players_player_id.f9c1dc568f", "test.dbt_nhl_breakouts.not_null_stg_nhl__players_stg_nhl__players_id.cf9bfc0f93", "test.dbt_nhl_breakouts.unique_stg_nhl__players_stg_nhl__players_id.a676defad4"], "model.dbt_nhl_breakouts.stg_nhl__boxscore": ["model.dbt_nhl_breakouts.f_boxscore", "model.dbt_nhl_breakouts.f_games_scratches", "model.dbt_nhl_breakouts.f_games_scratches", "model.dbt_nhl_breakouts.stg_nhl__games", "test.dbt_nhl_breakouts.not_null_stg_nhl__boxscore_stg_nhl__boxscore_id.f531645344", "test.dbt_nhl_breakouts.unique_stg_nhl__boxscore_stg_nhl__boxscore_id.5cb4ed999d"], "model.dbt_nhl_breakouts.stg_nhl__live_plays": ["model.dbt_nhl_breakouts.f_plays", "test.dbt_nhl_breakouts.not_null_stg_nhl__live_plays_stg_nhl__live_plays_id.180653fbd3", "test.dbt_nhl_breakouts.unique_stg_nhl__live_plays_stg_nhl__live_plays_id.e5043c61a1"], "model.dbt_nhl_breakouts.dates": ["model.dbt_nhl_breakouts.d_date", "test.dbt_nhl_breakouts.not_null_dates_date_id.ecacfb484c", "test.dbt_nhl_breakouts.unique_dates_date_id.a3a9dc1a29"], "model.dbt_nhl_breakouts.f_player_season": ["test.dbt_nhl_breakouts.not_null_f_player_season_player_season_id.1047e040ba", "test.dbt_nhl_breakouts.unique_f_player_season_player_season_id.e9ba28a61b"], "model.dbt_nhl_breakouts.f_plays": ["model.dbt_nhl_breakouts.f_player_season", "test.dbt_nhl_breakouts.not_null_f_plays_event_id.42f7019a28", "test.dbt_nhl_breakouts.not_null_f_plays_event_idx.88cd93f8ae", "test.dbt_nhl_breakouts.not_null_f_plays_game_id.be283c768c", "test.dbt_nhl_breakouts.not_null_f_plays_play_id.50869b6b5e", "test.dbt_nhl_breakouts.not_null_f_plays_player_id.3976f4d4f0", "test.dbt_nhl_breakouts.not_null_f_plays_team_id.26ff5ba943", "test.dbt_nhl_breakouts.unique_f_plays_play_id.f1d5dd28d5"], "model.dbt_nhl_breakouts.d_date": ["test.dbt_nhl_breakouts.not_null_d_date_date_id.17765c9312", "test.dbt_nhl_breakouts.unique_d_date_date_id.bd95340cc8"], "model.dbt_nhl_breakouts.f_boxscore_team": ["test.dbt_nhl_breakouts.not_null_f_boxscore_team_boxscore_team_id.e62d4c1299", "test.dbt_nhl_breakouts.not_null_f_boxscore_team_game_id.35d88eabfb", "test.dbt_nhl_breakouts.not_null_f_boxscore_team_team_id.80b942dc8f", "test.dbt_nhl_breakouts.unique_f_boxscore_team_boxscore_team_id.4861e1676d"], "model.dbt_nhl_breakouts.d_schedule": ["model.dbt_nhl_breakouts.f_player_season", "model.dbt_nhl_breakouts.f_player_season", "test.dbt_nhl_breakouts.not_null_d_schedule_away_team_id.a0c1750c24", "test.dbt_nhl_breakouts.not_null_d_schedule_game_id.16aa7a404b", "test.dbt_nhl_breakouts.not_null_d_schedule_home_team_id.5bd88d400b", "test.dbt_nhl_breakouts.not_null_d_schedule_schedule_id.05b7735a58", "test.dbt_nhl_breakouts.not_null_d_schedule_season_id.231c1ee113", "test.dbt_nhl_breakouts.unique_d_schedule_game_id.195e8d1feb", "test.dbt_nhl_breakouts.unique_d_schedule_schedule_id.5268ef07af"], "model.dbt_nhl_breakouts.d_divisions": ["test.dbt_nhl_breakouts.not_null_d_divisions_conference_id.08feeb1868", "test.dbt_nhl_breakouts.not_null_d_divisions_division_id.9a7aadfdb2", "test.dbt_nhl_breakouts.unique_d_divisions_division_id.83aca42a7c"], "model.dbt_nhl_breakouts.f_linescore": ["test.dbt_nhl_breakouts.accepted_values_f_linescore_game_winning_team_type__True__Home__Away.76664920a4", "test.dbt_nhl_breakouts.not_null_f_linescore_away_team_id.f71f2cffd0", "test.dbt_nhl_breakouts.not_null_f_linescore_game_winning_team_id.08e106d171", "test.dbt_nhl_breakouts.not_null_f_linescore_home_team_id.a4238ef224", "test.dbt_nhl_breakouts.not_null_f_linescore_linescore_id.0d3f94c5dc", "test.dbt_nhl_breakouts.unique_f_linescore_linescore_id.c88b3cc327"], "model.dbt_nhl_breakouts.d_players": ["model.dbt_nhl_breakouts.f_player_season", "test.dbt_nhl_breakouts.not_null_d_players_player_id.1ac147c310"], "model.dbt_nhl_breakouts.f_games_scratches": ["test.dbt_nhl_breakouts.dbt_utils_unique_combination_of_columns_f_games_scratches_game_id__player_id.35d4642951", "test.dbt_nhl_breakouts.not_null_f_games_scratches_game_id.cb6976b79e", "test.dbt_nhl_breakouts.not_null_f_games_scratches_player_id.25c3aadc1a"], "model.dbt_nhl_breakouts.d_teams": ["test.dbt_nhl_breakouts.not_null_d_teams_conference_id.491172dfc9", "test.dbt_nhl_breakouts.not_null_d_teams_division_id.0cedee4730", "test.dbt_nhl_breakouts.not_null_d_teams_franchise_id.9ffcb46923", "test.dbt_nhl_breakouts.not_null_d_teams_team_id.453d8c80dc", "test.dbt_nhl_breakouts.not_null_d_teams_venue_timezone_id.86ef9a6f43", "test.dbt_nhl_breakouts.unique_d_teams_team_id.c26fd9864c"], "model.dbt_nhl_breakouts.d_draft": ["test.dbt_nhl_breakouts.not_null_d_draft_draft_id.2d93ef0913", "test.dbt_nhl_breakouts.not_null_d_draft_draft_prospect_id.072ca19acd", "test.dbt_nhl_breakouts.not_null_d_draft_draft_team_id.d67c00c582", "test.dbt_nhl_breakouts.not_null_d_draft_overall_pick_id.124222f98e", "test.dbt_nhl_breakouts.unique_d_draft_draft_id.74ebc0e053"], "model.dbt_nhl_breakouts.f_games": ["test.dbt_nhl_breakouts.not_null_f_games_away_team_id.61e8a8d336", "test.dbt_nhl_breakouts.not_null_f_games_game_id.12c36fc40e", "test.dbt_nhl_breakouts.not_null_f_games_home_team_id.fac98e5082", "test.dbt_nhl_breakouts.unique_f_games_game_id.61c2bee3b0"], "model.dbt_nhl_breakouts.d_draft_prospects": ["test.dbt_nhl_breakouts.not_null_d_draft_prospects_draft_prospect_id.28b9527b5b", "test.dbt_nhl_breakouts.not_null_d_draft_prospects_prospect_category_id.a27ca2b454", "test.dbt_nhl_breakouts.unique_d_draft_prospects_draft_prospect_id.ca7e404f29"], "model.dbt_nhl_breakouts.f_boxscore": ["test.dbt_nhl_breakouts.not_null_f_boxscore_away_team_id.9d1f965941", "test.dbt_nhl_breakouts.not_null_f_boxscore_boxscore_id.b9891c33b1", "test.dbt_nhl_breakouts.not_null_f_boxscore_game_id.b46db17d13", "test.dbt_nhl_breakouts.not_null_f_boxscore_home_team_id.cea06ce20f", "test.dbt_nhl_breakouts.unique_f_boxscore_boxscore_id.48507f2e1c"], "model.dbt_nhl_breakouts.d_conferences": ["test.dbt_nhl_breakouts.not_null_d_conferences_conference_id.8ff2ef5d4e", "test.dbt_nhl_breakouts.unique_d_conferences_conference_id.b7e5789a87"], "model.dbt_nhl_breakouts.f_boxscore_player": ["model.dbt_nhl_breakouts.f_player_season", "test.dbt_nhl_breakouts.not_null_f_boxscore_player_boxscore_player_id.e3fb20d4c1", "test.dbt_nhl_breakouts.not_null_f_boxscore_player_game_id.e3b77d4354", "test.dbt_nhl_breakouts.not_null_f_boxscore_player_team_id.97e0e7a733", "test.dbt_nhl_breakouts.unique_f_boxscore_player_boxscore_player_id.b8346d82bf"], "model.dbt_nhl_breakouts.d_seasons": ["model.dbt_nhl_breakouts.f_player_season", "model.dbt_nhl_breakouts.f_player_season", "test.dbt_nhl_breakouts.not_null_d_seasons_season_id.e9ba12da0e", "test.dbt_nhl_breakouts.unique_d_seasons_season_id.e1642ef274"], "test.dbt_nhl_breakouts.unique_stg_nhl__divisions_stg_nhl__divisions_id.c441593bdd": [], "test.dbt_nhl_breakouts.not_null_stg_nhl__divisions_stg_nhl__divisions_id.09bf3b6736": [], "test.dbt_nhl_breakouts.unique_stg_nhl__divisions_division_id.765d509a33": [], "test.dbt_nhl_breakouts.not_null_stg_nhl__divisions_division_id.e799976dcb": [], "test.dbt_nhl_breakouts.unique_stg_nhl__conferences_stg_nhl__conferences_id.894c9c38c2": [], "test.dbt_nhl_breakouts.not_null_stg_nhl__conferences_stg_nhl__conferences_id.a13a757e3c": [], "test.dbt_nhl_breakouts.unique_stg_nhl__conferences_conference_id.31d27aa7cd": [], "test.dbt_nhl_breakouts.not_null_stg_nhl__conferences_conference_id.5900814b75": [], "test.dbt_nhl_breakouts.unique_stg_nhl__draft_prospects_stg_nhl__draft_prospects_id.81b61a4ac5": [], "test.dbt_nhl_breakouts.not_null_stg_nhl__draft_prospects_stg_nhl__draft_prospects_id.1866c4a0e2": [], "test.dbt_nhl_breakouts.not_null_stg_nhl__draft_prospects_draft_prospect_id.c2f4218bb5": [], "test.dbt_nhl_breakouts.unique_stg_nhl__draft_prospects_draft_prospect_id.439cea6ec2": [], "test.dbt_nhl_breakouts.unique_stg_nhl__boxscore_player_stg_nhl__boxscore_player_id.21d484e820": [], "test.dbt_nhl_breakouts.not_null_stg_nhl__boxscore_player_stg_nhl__boxscore_player_id.13756d4737": [], "test.dbt_nhl_breakouts.unique_stg_nhl__linescore_stg_nhl__linescore_id.ada282fc78": [], "test.dbt_nhl_breakouts.not_null_stg_nhl__linescore_stg_nhl__linescore_id.e449d10122": [], "test.dbt_nhl_breakouts.accepted_values_stg_nhl__linescore_game_winning_team_type__True__Home__Away.a5678ea10b": [], "test.dbt_nhl_breakouts.unique_stg_nhl__games_stg_nhl__games_id.5157268cdb": [], "test.dbt_nhl_breakouts.not_null_stg_nhl__games_stg_nhl__games_id.183ba17ec8": [], "test.dbt_nhl_breakouts.not_null_stg_nhl__games_game_id.26acd3f369": [], "test.dbt_nhl_breakouts.unique_stg_nhl__games_game_id.c3bead4ebc": [], "test.dbt_nhl_breakouts.unique_stg_nhl__players_stg_nhl__players_id.a676defad4": [], "test.dbt_nhl_breakouts.not_null_stg_nhl__players_stg_nhl__players_id.cf9bfc0f93": [], "test.dbt_nhl_breakouts.not_null_stg_nhl__players_player_id.f9c1dc568f": [], "test.dbt_nhl_breakouts.not_null_stg_nhl__boxscore_stg_nhl__boxscore_id.f531645344": [], "test.dbt_nhl_breakouts.unique_stg_nhl__boxscore_stg_nhl__boxscore_id.5cb4ed999d": [], "test.dbt_nhl_breakouts.unique_stg_nhl__live_plays_stg_nhl__live_plays_id.e5043c61a1": [], "test.dbt_nhl_breakouts.not_null_stg_nhl__live_plays_stg_nhl__live_plays_id.180653fbd3": [], "test.dbt_nhl_breakouts.unique_stg_nhl__teams_stg_nhl__teams_id.b6f2cc8f8f": [], "test.dbt_nhl_breakouts.not_null_stg_nhl__teams_stg_nhl__teams_id.e03adc9f63": [], "test.dbt_nhl_breakouts.not_null_stg_nhl__teams_team_id.7c3a30af17": [], "test.dbt_nhl_breakouts.unique_stg_nhl__schedule_stg_nhl__schedule_id.02ca3a9680": [], "test.dbt_nhl_breakouts.not_null_stg_nhl__schedule_stg_nhl__schedule_id.22069ed10b": [], "test.dbt_nhl_breakouts.not_null_stg_nhl__schedule_game_id.5980307620": [], "test.dbt_nhl_breakouts.unique_stg_nhl__schedule_game_id.a33bfba589": [], "test.dbt_nhl_breakouts.not_null_stg_nhl__schedule_season_id.89ee97b591": [], "test.dbt_nhl_breakouts.not_null_stg_nhl__schedule_away_team_id.8366912c5b": [], "test.dbt_nhl_breakouts.not_null_stg_nhl__schedule_home_team_id.f4f7114670": [], "test.dbt_nhl_breakouts.unique_stg_nhl__draft_stg_nhl__draft_id.e0b1a661b5": [], "test.dbt_nhl_breakouts.not_null_stg_nhl__draft_stg_nhl__draft_id.b677065bc5": [], "test.dbt_nhl_breakouts.unique_stg_nhl__seasons_stg_nhl__seasons_id.3ef0f38a83": [], "test.dbt_nhl_breakouts.not_null_stg_nhl__seasons_stg_nhl__seasons_id.e0d5931aa0": [], "test.dbt_nhl_breakouts.unique_stg_nhl__seasons_season_id.9b4d7cf6f0": [], "test.dbt_nhl_breakouts.not_null_stg_nhl__seasons_season_id.a335e0b9f9": [], "test.dbt_nhl_breakouts.unique_stg_nhl__boxscore_team_stg_nhl__boxscore_team_id.3ff8ece5fa": [], "test.dbt_nhl_breakouts.not_null_stg_nhl__boxscore_team_stg_nhl__boxscore_team_id.9bd9688044": [], "test.dbt_nhl_breakouts.not_null_dates_date_id.ecacfb484c": [], "test.dbt_nhl_breakouts.unique_dates_date_id.a3a9dc1a29": [], "test.dbt_nhl_breakouts.unique_f_player_season_player_season_id.e9ba28a61b": [], "test.dbt_nhl_breakouts.not_null_f_player_season_player_season_id.1047e040ba": [], "test.dbt_nhl_breakouts.unique_f_boxscore_team_boxscore_team_id.4861e1676d": [], "test.dbt_nhl_breakouts.not_null_f_boxscore_team_boxscore_team_id.e62d4c1299": [], "test.dbt_nhl_breakouts.not_null_f_boxscore_team_game_id.35d88eabfb": [], "test.dbt_nhl_breakouts.not_null_f_boxscore_team_team_id.80b942dc8f": [], "test.dbt_nhl_breakouts.unique_d_schedule_schedule_id.5268ef07af": [], "test.dbt_nhl_breakouts.not_null_d_schedule_schedule_id.05b7735a58": [], "test.dbt_nhl_breakouts.not_null_d_schedule_game_id.16aa7a404b": [], "test.dbt_nhl_breakouts.unique_d_schedule_game_id.195e8d1feb": [], "test.dbt_nhl_breakouts.not_null_d_schedule_season_id.231c1ee113": [], "test.dbt_nhl_breakouts.not_null_d_schedule_away_team_id.a0c1750c24": [], "test.dbt_nhl_breakouts.not_null_d_schedule_home_team_id.5bd88d400b": [], "test.dbt_nhl_breakouts.unique_d_divisions_division_id.83aca42a7c": [], "test.dbt_nhl_breakouts.not_null_d_divisions_division_id.9a7aadfdb2": [], "test.dbt_nhl_breakouts.not_null_d_divisions_conference_id.08feeb1868": [], "test.dbt_nhl_breakouts.unique_f_plays_play_id.f1d5dd28d5": [], "test.dbt_nhl_breakouts.not_null_f_plays_play_id.50869b6b5e": [], "test.dbt_nhl_breakouts.not_null_f_plays_game_id.be283c768c": [], "test.dbt_nhl_breakouts.not_null_f_plays_event_idx.88cd93f8ae": [], "test.dbt_nhl_breakouts.not_null_f_plays_event_id.42f7019a28": [], "test.dbt_nhl_breakouts.not_null_f_plays_player_id.3976f4d4f0": [], "test.dbt_nhl_breakouts.not_null_f_plays_team_id.26ff5ba943": [], "test.dbt_nhl_breakouts.not_null_d_date_date_id.17765c9312": [], "test.dbt_nhl_breakouts.unique_d_date_date_id.bd95340cc8": [], "test.dbt_nhl_breakouts.unique_d_draft_prospects_draft_prospect_id.ca7e404f29": [], "test.dbt_nhl_breakouts.not_null_d_draft_prospects_draft_prospect_id.28b9527b5b": [], "test.dbt_nhl_breakouts.not_null_d_draft_prospects_prospect_category_id.a27ca2b454": [], "test.dbt_nhl_breakouts.unique_f_boxscore_player_boxscore_player_id.b8346d82bf": [], "test.dbt_nhl_breakouts.not_null_f_boxscore_player_boxscore_player_id.e3fb20d4c1": [], "test.dbt_nhl_breakouts.not_null_f_boxscore_player_game_id.e3b77d4354": [], "test.dbt_nhl_breakouts.not_null_f_boxscore_player_team_id.97e0e7a733": [], "test.dbt_nhl_breakouts.unique_d_conferences_conference_id.b7e5789a87": [], "test.dbt_nhl_breakouts.not_null_d_conferences_conference_id.8ff2ef5d4e": [], "test.dbt_nhl_breakouts.not_null_f_boxscore_boxscore_id.b9891c33b1": [], "test.dbt_nhl_breakouts.unique_f_boxscore_boxscore_id.48507f2e1c": [], "test.dbt_nhl_breakouts.not_null_f_boxscore_game_id.b46db17d13": [], "test.dbt_nhl_breakouts.not_null_f_boxscore_home_team_id.cea06ce20f": [], "test.dbt_nhl_breakouts.not_null_f_boxscore_away_team_id.9d1f965941": [], "test.dbt_nhl_breakouts.unique_d_seasons_season_id.e1642ef274": [], "test.dbt_nhl_breakouts.not_null_d_seasons_season_id.e9ba12da0e": [], "test.dbt_nhl_breakouts.not_null_d_players_player_id.1ac147c310": [], "test.dbt_nhl_breakouts.unique_f_linescore_linescore_id.c88b3cc327": [], "test.dbt_nhl_breakouts.not_null_f_linescore_linescore_id.0d3f94c5dc": [], "test.dbt_nhl_breakouts.not_null_f_linescore_home_team_id.a4238ef224": [], "test.dbt_nhl_breakouts.not_null_f_linescore_away_team_id.f71f2cffd0": [], "test.dbt_nhl_breakouts.not_null_f_linescore_game_winning_team_id.08e106d171": [], "test.dbt_nhl_breakouts.accepted_values_f_linescore_game_winning_team_type__True__Home__Away.76664920a4": [], "test.dbt_nhl_breakouts.not_null_f_games_scratches_game_id.cb6976b79e": [], "test.dbt_nhl_breakouts.not_null_f_games_scratches_player_id.25c3aadc1a": [], "test.dbt_nhl_breakouts.dbt_utils_unique_combination_of_columns_f_games_scratches_game_id__player_id.35d4642951": [], "test.dbt_nhl_breakouts.unique_d_teams_team_id.c26fd9864c": [], "test.dbt_nhl_breakouts.not_null_d_teams_team_id.453d8c80dc": [], "test.dbt_nhl_breakouts.not_null_d_teams_venue_timezone_id.86ef9a6f43": [], "test.dbt_nhl_breakouts.not_null_d_teams_division_id.0cedee4730": [], "test.dbt_nhl_breakouts.not_null_d_teams_conference_id.491172dfc9": [], "test.dbt_nhl_breakouts.not_null_d_teams_franchise_id.9ffcb46923": [], "test.dbt_nhl_breakouts.unique_d_draft_draft_id.74ebc0e053": [], "test.dbt_nhl_breakouts.not_null_d_draft_draft_id.2d93ef0913": [], "test.dbt_nhl_breakouts.not_null_d_draft_overall_pick_id.124222f98e": [], "test.dbt_nhl_breakouts.not_null_d_draft_draft_prospect_id.072ca19acd": [], "test.dbt_nhl_breakouts.not_null_d_draft_draft_team_id.d67c00c582": [], "test.dbt_nhl_breakouts.unique_f_games_game_id.61c2bee3b0": [], "test.dbt_nhl_breakouts.not_null_f_games_game_id.12c36fc40e": [], "test.dbt_nhl_breakouts.not_null_f_games_home_team_id.fac98e5082": [], "test.dbt_nhl_breakouts.not_null_f_games_away_team_id.61e8a8d336": [], "source.dbt_nhl_breakouts.meltano.conferences": ["model.dbt_nhl_breakouts.stg_nhl__conferences"], "source.dbt_nhl_breakouts.meltano.divisions": ["model.dbt_nhl_breakouts.stg_nhl__divisions"], "source.dbt_nhl_breakouts.meltano.draft": ["model.dbt_nhl_breakouts.stg_nhl__draft"], "source.dbt_nhl_breakouts.meltano.draft_prospects": ["model.dbt_nhl_breakouts.stg_nhl__draft_prospects"], "source.dbt_nhl_breakouts.meltano.live_boxscore": ["model.dbt_nhl_breakouts.stg_nhl__boxscore", "model.dbt_nhl_breakouts.stg_nhl__boxscore_player", "model.dbt_nhl_breakouts.stg_nhl__boxscore_team"], "source.dbt_nhl_breakouts.meltano.live_linescore": ["model.dbt_nhl_breakouts.stg_nhl__linescore"], "source.dbt_nhl_breakouts.meltano.live_plays": ["model.dbt_nhl_breakouts.stg_nhl__live_plays"], "source.dbt_nhl_breakouts.meltano.people": ["model.dbt_nhl_breakouts.stg_nhl__players"], "source.dbt_nhl_breakouts.meltano.schedule": ["model.dbt_nhl_breakouts.stg_nhl__schedule"], "source.dbt_nhl_breakouts.meltano.seasons": ["model.dbt_nhl_breakouts.stg_nhl__seasons"], "source.dbt_nhl_breakouts.meltano.teams": ["model.dbt_nhl_breakouts.stg_nhl__teams"]}}